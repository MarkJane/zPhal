-- phpMyAdmin SQL Dump
-- version 4.7.0
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: 2017-08-11 08:16:14
-- 服务器版本： 5.7.17
-- PHP Version: 7.0.16

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `gzpblog`
--

-- --------------------------------------------------------

--
-- 表的结构 `gzp_commentmeta`
--

CREATE TABLE `gzp_commentmeta` (
  `meta_id` bigint(20) UNSIGNED NOT NULL,
  `comment_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `gzp_commentmeta`
--

INSERT INTO `gzp_commentmeta` (`meta_id`, `comment_id`, `meta_key`, `meta_value`) VALUES
(1311, 835, '_wp_trash_meta_status', '0'),
(1312, 835, '_wp_trash_meta_time', '1502068305'),
(1313, 834, '_wp_trash_meta_status', '0'),
(1314, 834, '_wp_trash_meta_time', '1502068306'),
(1315, 832, '_wp_trash_meta_status', '0'),
(1316, 832, '_wp_trash_meta_time', '1502068308'),
(1317, 833, '_wp_trash_meta_status', '0'),
(1318, 833, '_wp_trash_meta_time', '1502068310'),
(1319, 844, '_wp_trash_meta_status', '0'),
(1320, 844, '_wp_trash_meta_time', '1502068505'),
(1321, 847, '_wp_trash_meta_status', '0'),
(1322, 847, '_wp_trash_meta_time', '1502112943'),
(1323, 846, '_wp_trash_meta_status', '0'),
(1324, 846, '_wp_trash_meta_time', '1502112944'),
(1325, 845, '_wp_trash_meta_status', '0'),
(1326, 845, '_wp_trash_meta_time', '1502112945'),
(1327, 848, '_wp_trash_meta_status', '0'),
(1328, 848, '_wp_trash_meta_time', '1502186581'),
(1329, 849, '_wp_trash_meta_status', '0'),
(1330, 849, '_wp_trash_meta_time', '1502186582'),
(1331, 850, '_wp_trash_meta_status', '0'),
(1332, 850, '_wp_trash_meta_time', '1502186583'),
(1333, 852, '_wp_trash_meta_status', '0'),
(1334, 852, '_wp_trash_meta_time', '1502287855'),
(1335, 854, '_wp_trash_meta_status', '0'),
(1336, 854, '_wp_trash_meta_time', '1502287857'),
(1337, 853, '_wp_trash_meta_status', '0'),
(1338, 853, '_wp_trash_meta_time', '1502287858'),
(1339, 851, '_wp_trash_meta_status', '0'),
(1340, 851, '_wp_trash_meta_time', '1502287860'),
(1341, 855, '_wp_trash_meta_status', '0'),
(1342, 855, '_wp_trash_meta_time', '1502287862'),
(1343, 856, '_wp_trash_meta_status', '0'),
(1344, 856, '_wp_trash_meta_time', '1502341448'),
(1345, 857, '_wp_trash_meta_status', '0'),
(1346, 857, '_wp_trash_meta_time', '1502376577'),
(1347, 858, '_wp_trash_meta_status', '0'),
(1348, 858, '_wp_trash_meta_time', '1502376580'),
(995, 682, '_wp_trash_meta_status', '0'),
(996, 682, '_wp_trash_meta_time', '1500446408'),
(1310, 836, '_wp_trash_meta_time', '1502068304'),
(1300, 841, '_wp_trash_meta_time', '1502068296'),
(1301, 840, '_wp_trash_meta_status', '0'),
(1302, 840, '_wp_trash_meta_time', '1502068298'),
(1303, 839, '_wp_trash_meta_status', '0'),
(1304, 839, '_wp_trash_meta_time', '1502068299'),
(1305, 838, '_wp_trash_meta_status', '0'),
(1306, 838, '_wp_trash_meta_time', '1502068301'),
(1307, 837, '_wp_trash_meta_status', '0'),
(1308, 837, '_wp_trash_meta_time', '1502068303'),
(1309, 836, '_wp_trash_meta_status', '0'),
(1299, 841, '_wp_trash_meta_status', '0'),
(1298, 842, '_wp_trash_meta_time', '1502068295'),
(1297, 842, '_wp_trash_meta_status', '0'),
(1293, 831, '_wp_trash_meta_status', '0'),
(1294, 831, '_wp_trash_meta_time', '1501853054'),
(1295, 843, '_wp_trash_meta_status', '0'),
(1296, 843, '_wp_trash_meta_time', '1502068294');

-- --------------------------------------------------------

--
-- 表的结构 `gzp_comments`
--

CREATE TABLE `gzp_comments` (
  `comment_ID` bigint(20) UNSIGNED NOT NULL,
  `comment_post_ID` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `comment_author` tinytext NOT NULL,
  `comment_author_email` varchar(100) NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) NOT NULL DEFAULT '',
  `comment_type` varchar(20) NOT NULL DEFAULT '',
  `comment_parent` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `user_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `comment_mail_notify` tinyint(4) NOT NULL DEFAULT '0'
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `gzp_comments`
--

INSERT INTO `gzp_comments` (`comment_ID`, `comment_post_ID`, `comment_author`, `comment_author_email`, `comment_author_url`, `comment_author_IP`, `comment_date`, `comment_date_gmt`, `comment_content`, `comment_karma`, `comment_approved`, `comment_agent`, `comment_type`, `comment_parent`, `user_id`, `comment_mail_notify`) VALUES
(2, 5, 'fiive', '577035164@qq.com', 'http://www.echohoo.com', '113.90.240.211', '2016-04-04 09:59:08', '2016-04-04 09:59:08', '网站做在很不错。。。', 0, '1', '', 'comment', 0, 0, 0),
(3, 5, '利利', '411214120@qq.com', '', '101.228.62.220', '2016-05-19 23:41:39', '2016-05-19 23:41:39', '不错，加油', 0, '1', '', 'comment', 0, 0, 0),
(6, 10, '那仰望的人', '411214120@qq.com', '', '58.33.46.14', '2016-03-03 23:11:11', '2016-03-03 23:11:11', '有意思', 0, '1', '', 'comment', 0, 0, 0),
(7, 10, 'cl', 'cl@gzpblog.com', '', '222.44.17.11', '2016-03-04 22:22:28', '2016-03-04 22:22:28', '有意思~', 0, '1', '', 'comment', 0, 0, 0),
(8, 10, 'themebetter', 'i@themebetter.com', 'http://themebetter.com', '1.196.255.7', '2016-03-10 17:19:33', '2016-03-10 17:19:33', '文章写得太好了，对于创业初期的我们来说做自己最重要', 0, '1', '', 'comment', 0, 0, 0),
(9, 11, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '58.33.46.14', '2016-03-04 00:42:10', '2016-03-04 00:42:10', '效果这样。', 0, '1', '', 'comment', 0, 1, 0),
(10, 14, '中山婚纱摄影', '14242424@qq.com', 'http://www.xlvvxn.com', '14.114.214.117', '2016-05-02 14:58:05', '2016-05-02 14:58:05', '谢谢博主分享！', 0, '1', '', 'comment', 0, 0, 0),
(11, 16, '律通律师软件', 'lawtone@163.com', 'http://www.lawtone.com', '110.85.3.2', '2016-03-19 09:51:07', '2016-03-19 09:51:07', '谢谢分享哦。www.lawtone.com', 0, '1', '', 'comment', 0, 0, 0),
(12, 17, '微博美女', 'iamcho@qq.com', 'http://yadianna.net', '121.35.210.25', '2016-03-30 13:14:24', '2016-03-30 13:14:24', '受教了', 0, '1', '', 'comment', 0, 0, 0),
(13, 34, '虫虫学车', 'qiuyi@foxmail.com', 'http://www.chongchongxueche.com', '113.116.129.203', '2016-05-20 14:52:49', '2016-05-20 14:52:49', '博主你看到我了吗', 0, '1', '', 'comment', 0, 0, 0),
(14, 35, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '180.170.170.194', '2016-06-05 22:42:30', '2016-06-05 22:42:30', '版本不断更新的,安装之后最好选择自动更新..如果更新了之后又没法用了,再下载吧:https://get.adobe.com/cn/flashplayer/?no_redirect', 0, '1', '', 'comment', 0, 1, 0),
(24, 44, '任务易', '2867414672@qq.com', 'http://www.renwuyi.com/huodong/zfjyl.html', '121.60.124.170', '2016-07-25 14:18:14', '2016-07-25 14:18:14', '谢谢博主分享，客客六周年庆，欢迎大家转发微博送话费 http://www.renwuyi.com/huodong/zfjyl.html', 0, '1', '', 'comment', 0, 0, 0),
(25, 48, '光合种子', '2409926042@qq.com', 'http://www.zbzx.com/website/notice/getNotice/972.html', '116.7.64.153', '2016-08-01 16:38:10', '2016-08-01 16:38:10', '确实很郁闷啊！搜狗真的抓取的很慢', 0, '1', '', 'comment', 0, 0, 0),
(26, 49, '烟台阿里巴巴', '2556979022@qq.com', 'http://www.xiaoshitou123.com/', '222.173.221.26', '2016-08-11 15:25:11', '2016-08-11 15:25:11', '实用，顶一个', 0, '1', '', 'comment', 0, 0, 0),
(27, 49, '微信一键转发', '354654@qq.com', 'http://www.qiangubuxiu.com/', '106.114.19.247', '2016-08-13 01:02:18', '2016-08-13 01:02:18', '从百度点进来的，支持一下，希望站长您多出一些好文章。', 0, '1', '', 'comment', 0, 0, 0),
(111, 5, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.128.8', '2017-02-13 17:28:40', '2017-02-13 09:28:40', '谢谢收录~', 0, '1', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36', '', 110, 1, 0),
(283, 858, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.153.3', '2017-04-12 23:57:04', '2017-04-12 15:57:04', '七牛最近又降价了哎~', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0', '', 275, 1, 1),
(295, 27, '十三姨爱我', 'ifhx@qq.com', 'https://fanghongxing.cn', '113.111.170.52', '2017-04-14 17:30:02', '2017-04-14 09:30:02', '感觉有一款叫做Yomail的很不错~', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 YaBrowser/17.3.1.840 Yowser/2.5 Safari/537.36', '', 0, 0, 1),
(270, 858, '电动螺旋压力机', '985295918@qq.com', 'http://www.yazhuanji.cn/', '115.60.59.169', '2017-04-10 13:42:25', '2017-04-10 05:42:25', '您好，您的网站做的很不错，很漂亮，我已经收藏了，方便我随时访问，请问您要换友情链接吗？\r\n\r\n我的是  http://www.yaliji.cn/   关键词是：压力机', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.108 Safari/537.36 2345Explorer/8.4.1.14855', '', 0, 0, 1),
(268, 858, '星空游戏', '371927121@qq.com', 'http://www.51sdmy.com', '117.61.128.31', '2017-04-07 14:44:01', '2017-04-07 06:44:01', '感谢分享', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', '', 0, 0, 1),
(296, 848, '十三姨爱我', 'ifhx@qq.com', 'https://fanghongxing.cn', '113.111.170.52', '2017-04-14 17:33:31', '2017-04-14 09:33:31', '我现在都是首评审核了。以前那个博客好久没管理，几乎成了垃圾评论的聚集地。满满的几屏。', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 YaBrowser/17.3.1.840 Yowser/2.5 Safari/537.36', '', 0, 0, 1),
(267, 850, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.130.150', '2017-04-07 09:35:19', '2017-04-07 01:35:19', '优化插件，就一个Super Cache缓存了一下，其它没有了~', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0', '', 266, 1, 1),
(266, 850, '阿里书籍', 'waige1986@qq.com', 'http://alishuji.com/', '139.206.79.180', '2017-04-07 08:07:40', '2017-04-07 00:07:40', '很不错的插件 支持\r\n主题很简洁 速度很快 博主都用那些优化插件', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(265, 848, '励志语录', '3108030003@qq.com', 'http://www.lz16.cn/', '112.10.230.160', '2017-04-06 20:12:14', '2017-04-06 12:12:14', '可以屏蔽啊', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36', '', 0, 0, 0),
(297, 848, '十三姨爱我', 'ifhx@qq.com', 'https://fanghongxing.cn', '113.111.170.52', '2017-04-14 17:36:05', '2017-04-14 09:36:05', '这确实是一个好办法。不过有些技术博客还是有不少歪果仁看的……', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 YaBrowser/17.3.1.840 Yowser/2.5 Safari/537.36', '', 257, 0, 1),
(263, 850, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.153.111', '2017-04-06 09:20:19', '2017-04-06 01:20:19', '确实好用,TP很简单很方便', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0', '', 261, 1, 1),
(91, 592, '神圣计划软件', 'feikingscom@gmail.com', 'http://www.ssjhrj.com/', '112.198.68.149', '2017-01-19 14:47:31', '2017-01-19 06:47:31', '支付宝比较好用，微信只是聊天。。。', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0', '', 0, 0, 0),
(92, 582, '神圣计划', 'feikingscom@gmail.com', 'http://www.ssjhrj.com/', '112.198.68.149', '2017-01-19 14:48:47', '2017-01-19 06:48:47', '为什么dedecms总是被注入呢？', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0', '', 0, 0, 0),
(93, 29, '神圣计划', 'feikingscom@gmail.com', 'http://www.ssjhrj.com/', '112.198.68.149', '2017-01-19 14:49:35', '2017-01-19 06:49:35', 'caoz的微信公众号关注了', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0', '', 0, 0, 0),
(298, 592, '十三姨爱我', 'ifhx@qq.com', 'https://fanghongxing.cn', '113.111.170.52', '2017-04-14 17:37:52', '2017-04-14 09:37:52', '腾讯的用户群太太太庞大了，稍微弹个窗推个送就覆盖了中国大部分地区。', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 YaBrowser/17.3.1.840 Yowser/2.5 Safari/537.36', '', 0, 0, 1),
(299, 5, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '219.131.251.190', '2017-04-15 00:08:42', '2017-04-14 16:08:42', '医生挺好啊~', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0', '', 294, 1, 1),
(300, 27, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '219.131.251.190', '2017-04-15 00:12:57', '2017-04-14 16:12:57', '我去看了.确实不错', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0', '', 295, 1, 1),
(261, 850, '夏日博客', '505853256@qq.com', 'https://www.xiariboke.com', '223.72.62.221', '2017-04-06 00:33:08', '2017-04-05 16:33:08', 'TP是我做开发一直使用的一个框架。', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(138, 638, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.131.184', '2017-02-20 02:39:51', '2017-02-19 18:39:51', 'wordpress适合折腾....Typecho非常适合写博客', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.100 Safari/537.36 Vivaldi/1.5.658.56', '', 134, 1, 1),
(100, 619, 'wind', '411214120@qq.com', '', '113.92.129.185', '2017-02-09 21:30:15', '2017-02-09 13:30:15', 'win64?', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36', '', 0, 0, 0),
(257, 848, '胡德杰', 'hudejie@foxmail.com', 'http://www.hudejie.cn', '112.28.170.5', '2017-04-04 13:56:37', '2017-04-04 05:56:37', '不允许纯英文评论就是了', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36', '', 0, 0, 1),
(303, 5, '十三姨爱我', 'ifhx@qq.com', 'https://fanghongxing.cn', '113.111.170.52', '2017-04-15 19:37:55', '2017-04-15 11:37:55', '是不错，就是太多各种奇葩病人。O(∩_∩)O哈哈~', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 YaBrowser/17.3.1.840 Yowser/2.5 Safari/537.36', '', 299, 0, 1),
(105, 619, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '218.13.205.82', '2017-02-12 15:06:57', '2017-02-12 07:06:57', '在windows64位的系统，不过安装的环境都是32位，可以跑起来。装64的就不知道了，没有试过，可能不行，因为是调了win32的api。', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.100 Safari/537.36 Vivaldi/1.5.658.56', '', 100, 1, 0),
(106, 592, '小萝博客', 'admin@nameluo.com', 'http://www.nameluo.com', '14.117.52.196', '2017-02-12 17:56:37', '2017-02-12 09:56:37', '各有长处罢了', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 0),
(278, 6, '钛客志', 'takeman@foxmail.com', 'https://orro.ro', '113.83.102.20', '2017-04-12 22:34:47', '2017-04-12 14:34:47', '博主很认真，归档里的文章基本上看完了', 0, '1', 'Mozilla/5.0 (Linux; Android 6.0.1; MI 5s Plus Build/MXB48T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.132 Mobile Safari/537.36', '', 0, 0, 1),
(253, 850, '葫芦岛网站建设', 'simila@sohu.com', 'http://www.hlddjwl.com', '175.167.171.33', '2017-04-02 21:28:35', '2017-04-02 13:28:35', '这个好，正需要，帮我解决了问题，感谢！', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; rv:51.0) Gecko/20100101 Firefox/51.0', '', 0, 0, 1),
(279, 13, '钛客志', 'takeman@foxmail.com', 'https://orro.ro/', '113.83.102.20', '2017-04-12 22:36:33', '2017-04-12 14:36:33', '谢谢博主推荐的插件', 0, '1', 'Mozilla/5.0 (Linux; Android 6.0.1; MI 5s Plus Build/MXB48T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.132 Mobile Safari/537.36', '', 0, 0, 1),
(110, 5, 'boke112导航', 'boke112@qq.com', 'http://boke112.com/', '219.159.71.150', '2017-02-13 15:59:46', '2017-02-13 07:59:46', '博主，你好，boke112导航特来拜会，鉴于贵站内容偏向于技术方面，所以已将贵站收录到博客导航的建站技术类，谢谢支持！', 0, '1', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 0),
(294, 5, '十三姨爱我', 'ifhx@qq.com', 'https://fanghongxing.cn', '113.111.170.52', '2017-04-14 17:28:40', '2017-04-14 09:28:40', '博主加油~可惜我没勇气破而后立，虽然也是有兴趣PHP，但还是安分地做一名小医生吧~哈哈哈！', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 YaBrowser/17.3.1.840 Yowser/2.5 Safari/537.36', '', 0, 0, 1),
(75, 48, '思绪的空中生活', 'fat00119@gmail.com', 'https://linhaoyi.com', '119.4.254.202', '2017-01-07 19:51:38', '2017-01-07 11:51:38', 'Typecho换WordPress了？', 0, '1', 'Mozilla/5.0 (Linux; Android 5.1.1; MI NOTE Pro Build/LMY47V) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2970.0 Mobile Safari/537.36', '', 0, 0, 0),
(76, 569, '思绪的空中生活', 'fat00119@gmail.com', 'https://linhaoyi.com', '119.4.254.202', '2017-01-07 19:54:50', '2017-01-07 11:54:50', '加油(ง •̀_•́)ง', 0, '1', 'Mozilla/5.0 (Linux; Android 5.1.1; MI NOTE Pro Build/LMY47V) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2970.0 Mobile Safari/537.36', '', 0, 0, 0),
(77, 48, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.152.57', '2017-01-09 13:09:21', '2017-01-09 05:09:21', '对的~', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.100 Safari/537.36 Vivaldi/1.5.658.56', '', 75, 1, 0),
(284, 848, '饭特稀', '991253696@qq.com', 'http://www.tobehe.com', '220.112.15.168', '2017-04-13 00:30:14', '2017-04-12 16:30:14', '垃圾评论都成精了', 0, '1', 'Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_2 like Mac OS X) AppleWebKit/603.2.1 (KHTML, like Gecko) Version/10.0 Mobile/14F5065b Safari/602.1', '', 0, 0, 1),
(227, 835, '星空游戏', '371927121@qq.com', 'http://www.51sdmy.com', '211.97.131.147', '2017-03-22 15:21:06', '2017-03-22 07:21:06', '感谢分享', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', '', 0, 0, 0),
(117, 638, 'Feeey个人博客', 'admin@feeey.com', 'http://www.feeey.com', '113.0.111.169', '2017-02-14 21:25:35', '2017-02-14 13:25:35', '我又来咯~~无聊来逛逛，情人节快乐。', 0, '1', 'Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1)', '', 0, 0, 0),
(313, 864, '吃货小栈', 'eat@ymanz.com', 'https://eat.ymanz.com', '123.53.112.236', '2017-04-21 01:44:52', '2017-04-20 17:44:52', '前几天还在研究，就是发现对我这样不会编程的来说用处实在有限就放弃了！', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36', '', 0, 0, 1),
(221, 821, '星空游戏', '371927121@qq.com', 'http://www.51sdmy.com', '211.97.128.236', '2017-03-18 15:20:56', '2017-03-18 07:20:56', '原价980，现在只要98·····', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', '', 0, 0, 1),
(314, 835, '明月学习笔记Blog', 'lnmp@ymanz.com', 'https://lnmp.ymanz.com', '123.53.112.236', '2017-04-21 01:53:11', '2017-04-20 17:53:11', '不错，我最近才折腾部署完HTTP/2！', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36', '', 0, 0, 1),
(315, 864, 'artvary', 'nolink@aliyun.com', 'http://www.onlylink.top', '111.20.174.71', '2017-04-21 11:11:47', '2017-04-21 03:11:47', '博主，我转wordpress了，换链接了', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36', '', 0, 0, 1),
(223, 821, '诺伊网', '377388954@qq.com', 'http://www.nuobg.com', '27.38.24.21', '2017-03-20 19:21:19', '2017-03-20 11:21:19', '你好，你的网站做的不错，很漂亮，我已经收藏了，请问您换友情链接吗？\r\n\r\n我的是www.nuobg.com 关键词是：深圳seo', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36', '', 0, 0, 1),
(224, 821, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.128.14', '2017-03-20 21:17:22', '2017-03-20 13:17:22', '可以..加好告诉我一下~我给加上', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0', '', 223, 1, 1),
(123, 656, '小萝博客', 'admin@nameluo.com', 'http://www.nameluo.com', '14.117.52.209', '2017-02-17 07:31:19', '2017-02-16 23:31:19', '同博主一样', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36', '', 0, 0, 1),
(124, 5, '椰子皮博客', '974683998@qq.com', 'http://www.yezipi.net/', '183.146.67.20', '2017-02-17 09:05:01', '2017-02-17 01:05:01', '看样子会火，火钳留名', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.1717.400 QQBrowser/9.5.9664.400', '', 0, 0, 1),
(125, 656, '文栋说自媒体', 'admin@lwd3699.com', 'http://www.lwd3699.com/', '61.178.243.155', '2017-02-17 13:26:53', '2017-02-17 05:26:53', '哈，好像早就听过这个歌，感觉也没这么有魔力呀', 0, '1', 'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36', '', 0, 0, 0),
(126, 656, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.130.70', '2017-02-17 17:14:33', '2017-02-17 09:14:33', '第一次听没什么感觉~然后过几天第二次听的时候,就停不下来了哈哈', 0, '1', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36', '', 125, 1, 1),
(127, 656, '韩式广场舞', '222@qq.com', 'http://www.7gcw.com', '183.228.113.228', '2017-02-18 09:15:17', '2017-02-18 01:15:17', '魔性十足的歌曲，听了就停不下来了。就好比吃了炫迈的感觉一样', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36', '', 0, 0, 1),
(128, 656, '企业咨询', '3519452270@qq.com', 'http://www.mtzxgf.com/consult.html', '14.155.90.147', '2017-02-18 11:14:23', '2017-02-18 03:14:23', '好听的歌，可以单曲循环很久', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0', '', 0, 0, 1),
(129, 656, '徒步旅行', '371927121@qq.com', 'http://www.aizouba.com/forum.php', '58.22.113.162', '2017-02-18 12:00:54', '2017-02-18 04:00:54', '好听', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', '', 0, 0, 0),
(130, 647, '搬瓦工', 'hlphyc@126.com', 'http://www.banwagong.me', '222.93.86.186', '2017-02-18 13:25:24', '2017-02-18 05:25:24', '朋友 交换链接吗', 0, '1', 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(317, 864, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.153.106', '2017-04-21 12:38:52', '2017-04-21 04:38:52', '更新了~~', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0', '', 315, 1, 1),
(133, 656, '八零后', 'danglei1024@gmail.com', 'http://www.as80s.com', '59.172.10.188', '2017-02-19 21:28:57', '2017-02-19 13:28:57', '挺好听的', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36', '', 0, 0, 1),
(134, 638, '菊部', 'showtime4ever@126.com', 'https://www.jubuzz.com', '59.172.10.188', '2017-02-19 22:21:09', '2017-02-19 14:21:09', '挺好的   感觉想回WP了', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36', '', 0, 0, 1),
(135, 656, '明月登楼的博客', 'mingyue@ymanz.com', 'http://blog.ymanz.com', '123.53.112.197', '2017-02-19 22:37:59', '2017-02-19 14:37:59', '不错，过来点个赞支持一下先！', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36', '', 0, 0, 1),
(136, 638, '明月登楼的博客', 'mingyue@ymanz.com', 'http://blog.ymanz.com', '123.53.112.197', '2017-02-19 22:38:47', '2017-02-19 14:38:47', '重视感觉Bootstrap的性能有待提高！', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36', '', 0, 0, 1),
(137, 656, '夏日草博客', 'qq@qq.com', 'https://www.xiaricao.com', '223.72.62.167', '2017-02-19 23:27:40', '2017-02-19 15:27:40', '晚上没事拿来听听，还不错的说。', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 0),
(139, 638, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.131.184', '2017-02-20 02:41:25', '2017-02-19 18:41:25', '恩，毕竟是比较完整的框架，跟自己写比肯定是有一定差距，但是问题不大。主要是拿来就用，开发起来快。', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.100 Safari/537.36 Vivaldi/1.5.658.56', '', 136, 1, 1),
(249, 850, '星空游戏', '371927121@qq.com', 'http://www.51sdmy.com', '211.97.128.191', '2017-03-31 09:43:14', '2017-03-31 01:43:14', '感谢分享', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', '', 0, 0, 1),
(308, 871, '星空游戏', '371927121@qq.com', 'http://www.lzjfh.com/', '117.61.128.71', '2017-04-19 16:45:19', '2017-04-19 08:45:19', '可惜看不懂啊', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', '', 0, 0, 1),
(280, 28, '钛客志', 'takeman@foxmail.com', 'https://orro.ro', '113.83.102.20', '2017-04-12 22:37:15', '2017-04-12 14:37:15', '学习了', 0, '1', 'Mozilla/5.0 (Linux; Android 6.0.1; MI 5s Plus Build/MXB48T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.132 Mobile Safari/537.36', '', 0, 0, 1),
(281, 27, '钛客志', 'takeman@foxmail.com', 'https://orro.ro', '113.83.102.20', '2017-04-12 22:38:27', '2017-04-12 14:38:27', '请问有广告吗？还有就是没手机版吧', 0, '1', 'Mozilla/5.0 (Linux; Android 6.0.1; MI 5s Plus Build/MXB48T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.132 Mobile Safari/537.36', '', 0, 0, 1),
(244, 848, 'artvary', 'nolink@aliyun.com', 'https://onlylink.top', '111.20.174.91', '2017-03-29 22:23:00', '2017-03-29 14:23:00', '会写前端 so cool ！', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36', '', 0, 0, 1),
(245, 848, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.118.227.104', '2017-03-29 23:24:38', '2017-03-29 15:24:38', '我也是没学多久呐~', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0', '', 244, 1, 1),
(243, 848, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.118.227.104', '2017-03-29 19:14:57', '2017-03-29 11:14:57', '你这还好吧~哈哈哈', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0', '', 242, 1, 1),
(242, 848, '星空游戏', '371927121@qq.com', 'http://www.51sdmy.com', '211.97.128.148', '2017-03-29 11:49:20', '2017-03-29 03:49:20', '不知道我算不算垃圾评论···', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', '', 0, 0, 1),
(312, 848, '明月登楼', 'mingyue@ymanz.com', 'http://blog.ymanz.com', '123.53.112.236', '2017-04-21 01:44:12', '2017-04-20 17:44:12', '关于 WordPress 垃圾评论，我倒是认为只要利用好 WordPress 原生的黑名单和审核功能，经过一定时间的积累和关键词采集屏蔽基本上是完美屏蔽的！博主可以尝试着试试看！找出垃圾评论昵称、邮箱、IP地址、评论内容里有共性的作为关键词屏蔽试试！', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36', '', 0, 0, 1),
(237, 503, 'artvary', 'nolink@aliyun.com', 'https://onlylink.top', '111.20.174.91', '2017-03-28 13:17:36', '2017-03-28 05:17:36', '能用InnoDB就尽量用InnoDB...', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36', '', 0, 0, 1),
(235, 839, '夏日博客', '505853256@qq.com', 'https://www.xiariboke.com', '221.219.133.223', '2017-03-27 14:55:10', '2017-03-27 06:55:10', '多说用得人太多了，只是这类免费评论分享真的没什么赢利模式。', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(236, 5, '刘䶮曌博客', 'liu_yanzh@sina.com', 'http://liuyanzhao.com', '182.108.10.208', '2017-03-27 19:27:08', '2017-03-27 11:27:08', '支持博主', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0', '', 0, 0, 1),
(156, 5, '大灯总成', '1254402991@qq.com', 'http://www.bzzmol.com', '113.232.187.7', '2017-02-22 11:35:07', '2017-02-22 03:35:07', '楼主互换链接么，百度和360，搜狗都有收录，虽然是新站，每天手动更新。', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(157, 5, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.153.125', '2017-02-22 22:34:46', '2017-02-22 14:34:46', '贵站好像不太稳定..进不去~', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.88 Safari/537.36 Vivaldi/1.7.735.46', '', 156, 1, 1),
(158, 685, '懿古今', 'yigujin@qq.com', 'http://yigujin.cn/', '113.12.23.177', '2017-02-22 23:01:49', '2017-02-22 15:01:49', '看起来非常不错，我还没玩过这个呢，有机会我也试试', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(159, 685, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.153.125', '2017-02-23 00:01:55', '2017-02-22 16:01:55', '哈.Git程序员必备啊..我也最近才开始接触..', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.88 Safari/537.36 Vivaldi/1.7.735.46', '', 158, 1, 1),
(160, 5, '大灯总成', '1254402991@qq.com', 'http://www.bzzmol.com', '123.191.78.23', '2017-02-23 11:56:50', '2017-02-23 03:56:50', '昨天服务器22点升级哈哈，现在可以去坐坐啦~~', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 BIDUBrowser/8.4 Safari/537.36', '', 0, 0, 1),
(161, 685, '企业咨询', '3519452270@qq.com', 'http://www.mtzxgf.com/consult.html', '14.155.88.77', '2017-02-24 11:32:35', '2017-02-24 03:32:35', '来访，支持支持', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0', '', 0, 0, 1),
(162, 685, '徒步旅行', '371927121@qq.com', 'http://www.aizouba.com/forum.php', '58.22.114.171', '2017-02-24 11:43:47', '2017-02-24 03:43:47', '程序员的世界', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', '', 0, 0, 0),
(163, 685, '本质教育', 'jianxiongli@essence-edu.com', 'http://www.essence-edu.cn/', '218.19.99.184', '2017-02-24 11:44:41', '2017-02-24 03:44:41', '下载安装了几分钟之后就卸载了；', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(164, 685, '明月登楼', 'mingyue@ymanz.com', 'http://blog.ymanz.com', '1.197.191.195', '2017-02-26 02:32:13', '2017-02-25 18:32:13', '倒是常听说GIT，但自己一直没有具体的使用过！', 0, '1', 'Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_2 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5 Quark/1.6.6.907', '', 0, 0, 1),
(165, 656, '夏日博客', '505853256@qq.com', 'https://www.xiariboke.com', '114.254.138.131', '2017-02-26 16:18:39', '2017-02-26 08:18:39', '刚好遇见你，确实不错的歌曲。', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(218, 804, '星空游戏', '371927121@qq.com', 'http://www.51sdmy.com', '211.97.129.173', '2017-03-17 09:47:33', '2017-03-17 01:47:33', '沙发', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', '', 0, 0, 1),
(217, 788, '英语论文代写', 'dsgfdf@126.com', 'https://essaypinglun.wordpress.com/', '93.119.23.158', '2017-03-16 18:04:15', '2017-03-16 10:04:15', '支持楼主，赞赞', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0', '', 0, 0, 0),
(318, 848, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.153.106', '2017-04-21 12:51:32', '2017-04-21 04:51:32', '治标不治本呀。', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0', '', 312, 1, 1),
(319, 864, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.153.106', '2017-04-21 12:52:12', '2017-04-21 04:52:12', '不写编程的话，是没有必要玩这个的~', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0', '', 313, 1, 1),
(170, 656, '格言大全', 'shoutor@163.com', 'http://www.mouxiao.com', '222.129.104.224', '2017-02-27 15:25:12', '2017-02-27 07:25:12', '是不是有所联想了？才会喜欢反复的听？', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0', '', 0, 0, 1),
(171, 685, 'Feeey个人博客', 'admin@feeey.com', 'http://www.feeey.com', '60.219.234.250', '2017-02-28 08:38:48', '2017-02-28 00:38:48', '博主最近没怎么更新啊，我来转转。', 0, '1', 'Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1)', '', 0, 0, 0),
(172, 685, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '45.76.96.108', '2017-02-28 16:36:32', '2017-02-28 08:36:32', '恩.这玩意主要是团队协作非常便利', 0, '1', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36', '', 164, 1, 1),
(173, 685, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.131.108', '2017-02-28 16:37:04', '2017-02-28 08:37:04', '最近在倒腾服务器呢~', 0, '1', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36', '', 171, 1, 1),
(174, 656, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.131.108', '2017-02-28 16:37:38', '2017-02-28 08:37:38', '哈!', 0, '1', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36', '', 170, 1, 1),
(175, 685, '明月登楼', 'mingyue@ymanz.com', 'http://blog.ymanz.com', '1.197.191.11', '2017-02-28 16:42:11', '2017-02-28 08:42:11', '感觉Git好高大上的样子！有空我也得试试！', 0, '1', 'Mozilla/5.0 (Linux; Android 6.0.1; MI 4LTE Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/55.0.2883.91 Mobile Safari/537.36', '', 0, 0, 1),
(595, 930, '夏日博客', 'qq@qq.com', 'https://www.xiariboke.com', '221.220.168.94', '2017-06-07 09:48:17', '2017-06-07 01:48:17', '这种测试倒是可以看看自己的并发数。', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(588, 926, 'host1plus', 'hlphyc@126.com', 'http://www.14vps.com', '121.224.114.183', '2017-06-06 10:14:19', '2017-06-06 02:14:19', '朋友，交换链接吗？', 0, '1', 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(179, 712, '徒步旅行', '371927121@qq.com', 'http://www.aizouba.com/forum.php', '211.97.129.181', '2017-03-01 11:07:23', '2017-03-01 03:07:23', '好好缓缓', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', '', 0, 0, 0),
(212, 785, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '218.13.202.239', '2017-03-11 21:50:37', '2017-03-11 13:50:37', '已投~', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:51.0) Gecko/20100101 Firefox/51.0', '', 210, 1, 1),
(182, 712, '三五豪侠传', '363733513@qq.com', 'http://www.syl.356688.com/', '142.54.173.194', '2017-03-01 17:35:15', '2017-03-01 09:35:15', '拜读大侠博客，感悟人生道理！', 0, '1', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0', '', 0, 0, 0),
(331, 5, 'SpanishOnion', '775126470@qq.com', 'http://www.lcgod.com', '101.41.57.201', '2017-04-21 21:51:22', '2017-04-21 13:51:22', '博主来换个友链呀,我和梁钟霖也互链了 哈哈', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.2595.400 QQBrowser/9.6.10872.400', '', 0, 0, 1),
(187, 5, '张弦先生', 'admin@chrafz.com', 'http://www.chrafz.com', '117.63.183.192', '2017-03-03 14:04:40', '2017-03-03 06:04:40', '博主的博客做的不错，张弦先生来访，欢迎回访', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Maxthon/5.0.2.1000 Chrome/47.0.2526.73 Safari/537.36', '', 0, 0, 1),
(188, 628, '张弦先生', 'admin@chrafz.com', 'http://www.chrafz.com', '117.63.183.192', '2017-03-03 14:09:26', '2017-03-03 06:09:26', '不错，正在制作主题中', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Maxthon/5.0.2.1000 Chrome/47.0.2526.73 Safari/537.36', '', 0, 0, 1),
(189, 731, '徒步旅行', '371927121@qq.com', 'http://www.aizouba.com/forum.php', '211.97.131.121', '2017-03-03 15:34:28', '2017-03-03 07:34:28', '支持', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', '', 0, 0, 0),
(210, 785, 'boke112导航', 'boke112@qq.com', 'http://boke112.com/', '113.12.23.192', '2017-03-11 17:32:30', '2017-03-11 09:32:30', 'PS：这篇文章很实用，欢迎投稿到boke112导航的建站经验栏目中', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(191, 745, '老金@金博客', 'a@jinboke.net', 'http://www.jinboke.net', '39.190.219.81', '2017-03-04 21:15:09', '2017-03-04 13:15:09', '阿里云免费虚机不提供数据备份很不爽。', 0, '1', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/600.8.9 (KHTML, like Gecko) Version/8.0.8 Safari/600.8.9', '', 0, 0, 1),
(192, 745, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '219.131.251.207', '2017-03-04 23:15:12', '2017-03-04 15:15:12', '只有数据库备份。。', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.88 Safari/537.36 Vivaldi/1.7.735.46', '', 191, 1, 1),
(193, 5, '森纯博客', '1585354108@qq.com', 'http://senchun.cc', '120.239.109.95', '2017-03-05 13:40:18', '2017-03-05 05:40:18', '来留个脚印，主题很美', 0, '1', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 UBrowser/6.1.2107.202 Safari/537.36', '', 0, 0, 1),
(206, 785, '夏日博客', '505853256@qq.com', 'https://www.xiariboke.com', '223.72.62.195', '2017-03-09 23:35:30', '2017-03-09 15:35:30', 'https对于收录真不是一般的不好。', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(207, 785, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.155.254', '2017-03-10 09:27:38', '2017-03-10 01:27:38', '确实,刚转的时候很明显索引有波动.不过现在好像回复正常了', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0', '', 206, 1, 1),
(208, 788, '星空游戏', '371927121@qq.com', 'http://www.51sdmy.com', '211.97.129.254', '2017-03-11 15:03:55', '2017-03-11 07:03:55', '感谢分享', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', '', 0, 0, 0),
(196, 785, '搬瓦工', 'hlphyc@126.com', 'http://www.cnbanwagong.com', '114.216.192.2', '2017-03-07 08:07:37', '2017-03-07 00:07:37', '朋友 交换链接吗', 0, '1', 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(197, 785, '本质教育', 'jianxiongli@essence-edu.com', 'http://www.essence-edu.cn/', '14.18.144.2', '2017-03-07 18:15:51', '2017-03-07 10:15:51', '然而真的，羡慕爱折腾的人。', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(198, 785, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.130.80', '2017-03-07 21:26:22', '2017-03-07 13:26:22', '一种乐趣啊~', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.88 Safari/537.36 Vivaldi/1.7.735.46', '', 197, 1, 1),
(200, 785, '星空游戏', '371927121@qq.com', 'http://www.51sdmy.com', '211.97.129.122', '2017-03-08 11:08:27', '2017-03-08 03:08:27', '感谢分享', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', '', 0, 0, 1),
(231, 5, 'artvary', 'nolink@aliyun.com', 'https://onlylink.top', '111.20.174.91', '2017-03-25 19:39:07', '2017-03-25 11:39:07', '能加个友链么？', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36', '', 0, 0, 1),
(232, 5, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '183.45.63.1', '2017-03-25 21:16:28', '2017-03-25 13:16:28', '已加！', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0', '', 231, 1, 1),
(233, 5, 'artvary', 'nolink@aliyun.com', 'https://onlylink.top', '111.20.174.91', '2017-03-26 12:40:02', '2017-03-26 04:40:02', '嗯嗯，我也加了！', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36', '', 232, 0, 1),
(282, 13, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.153.3', '2017-04-12 23:53:38', '2017-04-12 15:53:38', '其实就是以前玩typecho时把百度js推送试着以插件方式加入...其实这js代码直接加到footer就好了.....最近倒是有在想做一个wordpress所有搜索引擎大集合推送啊包括sitemap等等的seo插件', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0', '', 279, 1, 1),
(230, 821, '夏日博客', '505853256@qq.com', 'https://www.xiariboke.com', '221.219.155.101', '2017-03-24 16:49:33', '2017-03-24 08:49:33', '很多的事情，真的是防不胜防呀。', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(203, 785, '烟台二手设备回收', '2556979022@qq.com', 'http://www.ytyongqiang.com/', '112.238.192.77', '2017-03-09 10:44:32', '2017-03-09 02:44:32', '路过，顶一个', 0, '1', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 0),
(209, 785, 'boke112导航', 'boke112@qq.com', 'http://boke112.com/', '113.12.23.192', '2017-03-11 17:30:53', '2017-03-11 09:30:53', '本来我那个懿古今也想折腾成HTTPS的，但是我的图片存放在七牛，而七牛变成HTTPS的话，流量就是收费的了，那个免费的额度就不能用了，所以就暂缓了。', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(205, 785, '上品户外', '37225258@qq.com', 'http://www.sp9s.com/', '183.205.146.157', '2017-03-09 13:53:04', '2017-03-09 05:53:04', '谢谢博主分享 支持', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(272, 858, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.118.227.201', '2017-04-10 14:59:48', '2017-04-10 06:59:48', '抱歉,这种类型的不加哦', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0', '', 270, 1, 1),
(293, 864, '葫芦岛网站建设', 'simida@sohu.com', 'http://www.hlddjwl.com', '42.53.137.18', '2017-04-14 15:28:42', '2017-04-14 07:28:42', '这个好，很有用', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0', '', 0, 0, 1),
(291, 864, '星空游戏', '371927121@qq.com', 'http://www.51sdmy.com', '117.61.0.13', '2017-04-14 10:02:49', '2017-04-14 02:02:49', '这篇就超出理解范畴了', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', '', 0, 0, 1),
(275, 858, '面试技巧', '1203561895@qq.com', 'http://www.getshare.org/', '112.87.135.43', '2017-04-10 22:19:13', '2017-04-10 14:19:13', '不太喜欢阿里云的OSS，我一直都在用七牛的对象存储', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.75 Safari/537.36', '', 0, 0, 0),
(367, 878, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.131.150', '2017-05-02 16:52:55', '2017-05-02 08:52:55', '每次第一个都是你...', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0', '', 363, 1, 1),
(363, 878, '星空游戏', '371927121@qq.com', 'http://www.lzjfh.com/', '117.61.2.175', '2017-05-02 10:52:22', '2017-05-02 02:52:22', '可惜看不懂，想哭', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', '', 0, 0, 1),
(612, 656, '互访互推导航', 'hi@guminfeng.cn', 'http://daohang.guminfeng.cn', '114.226.6.90', '2017-06-19 19:18:33', '2017-06-19 11:18:33', '魔性十足，但是很好听啊', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36', '', 0, 0, 1),
(613, 656, '钛客志', 'takeman@foxmail.com', 'https://orro.ro', '108.61.180.25', '2017-06-20 03:47:06', '2017-06-19 19:47:06', '网易云的日推不错，爱上了网易云，李玉刚的有一首歌很有味道，不知道博主你想不想起来', 0, '1', 'Mozilla/5.0 (Linux; Android 6.0.1; MI 5s Plus Build/MXB48T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.83 Mobile Safari/537.36', '', 0, 0, 1),
(614, 656, 'gzp', 'gzp@gzpblog.com', 'https://www.gzpblog.com', '113.90.39.157', '2017-06-20 09:22:35', '2017-06-20 01:22:35', '贵妃醉酒?', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0', '', 613, 1, 1),
(615, 656, '钛客志', 'takeman@foxmail.com', 'https://orro.ro', '113.81.151.174', '2017-06-21 02:14:11', '2017-06-20 18:14:11', '好像是这首，女声男唱', 0, '1', 'Mozilla/5.0 (Linux; Android 6.0.1; MI 5s Plus Build/MXB48T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.83 Mobile Safari/537.36', '', 614, 0, 1),
(400, 881, '余宋', '123123123@qqwe.com', 'http://www.cnoz.org/1_1386/', '122.142.204.187', '2017-05-11 03:34:00', '2017-05-10 19:34:00', '好文，拜读...', 0, '1', 'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36', '', 0, 0, 1),
(369, 5, '灵异世界', '1530597285@qq.com', 'http://www.lingyishijie.com/', '61.159.66.228', '2017-05-02 19:59:54', '2017-05-02 11:59:54', '灵异世界网路过贵站，特来拜访。', 0, '1', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36 TheWorld 7', '', 0, 0, 1),
(402, 13, '低调的路人', '51566@126.com', 'http://www.188en.com', '117.95.168.164', '2017-05-11 08:06:38', '2017-05-11 00:06:38', '谢谢博主，下载了。不知道还是否有效', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36', '', 0, 0, 1),
(377, 881, '星空游戏', '371927121@qq.com', 'http://www.lzjfh.com/', '117.61.3.239', '2017-05-06 11:44:07', '2017-05-06 03:44:07', '博主洞察力好强', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1', '', 0, 0, 1),
(415, 898, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.155.180', '2017-05-16 18:09:49', '2017-05-16 10:09:49', '你看一下你载入的css的url，是不是还是引入的http的，要https的才行，不然浏览器会挡掉', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0', '', 414, 1, 1),
(414, 898, '无聊赚', '372200908@qq.com', 'http://www.abc000.cn/', '121.30.194.222', '2017-05-16 16:55:55', '2017-05-16 08:55:55', '请教一下，为什么我的网站用https访问，css样式都丢失了啊', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0', '', 0, 0, 1),
(603, 1000, 'wu先生', 'admin@wuziya.org', 'http://wuziya.com', '122.190.33.44', '2017-06-11 08:53:24', '2017-06-11 00:53:24', '好专业。', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36', '', 0, 0, 1),
(591, 898, 'gzp', 'gzp@gzpblog.com', 'https://www.gzpblog.com', '113.92.153.114', '2017-06-06 16:13:55', '2017-06-06 08:13:55', '还好吧~价格其实对我来说还好~像我这种小站点,没啥流量的,用了几个月也就扣了几分钱哈.', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0', '', 587, 1, 1),
(592, 926, 'gzp', 'gzp@gzpblog.com', 'https://www.gzpblog.com', '113.92.153.114', '2017-06-06 16:15:54', '2017-06-06 08:15:54', '这种不换哦', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0', '', 588, 1, 1),
(347, 871, '电动螺旋压力机', '536175215@qq.com', 'http://www.yazhuanji.cn', '115.60.61.6', '2017-04-25 15:38:06', '2017-04-25 07:38:06', '您好，您的网站做的很不错，很漂亮，我已经收藏了，方便我随时访问.', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.108 Safari/537.36 2345Explorer/8.5.0.15098', '', 0, 0, 1),
(351, 5, 'gzp', 'gzp@gzpblog.com', 'http://www.gzpblog.com', '113.92.129.189', '2017-04-26 09:31:41', '2017-04-26 01:31:41', '已加!', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0', '', 331, 1, 1),
(587, 898, 'boke112导航', 'boke112@qq.com', 'http://boke112.com/', '113.16.255.87', '2017-06-06 09:44:09', '2017-06-06 01:44:09', '我就是因为那个HTTPS流量要收费，而且阿里云CDN的HTTPS收费除了流量收费外，还有一个什么按请求数来收费，感觉太坑了，所以就没折腾。', 0, '1', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36', '', 0, 0, 1),
(598, 986, 'gzp', 'gzp@gzpblog.com', 'https://www.gzpblog.com', '113.90.36.30', '2017-06-07 17:17:55', '2017-06-07 09:17:55', '这主题实际上有点为我自己量身定做的~感觉不一定合大家的口味..而且现在还不完善,有时间再弄一弄先..', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0', '', 596, 1, 1),
(599, 986, 'boke112导航', 'boke112@qq.com', 'http://boke112.com/', '180.141.5.115', '2017-06-07 22:54:34', '2017-06-07 14:54:34', '主题看起来挺不错的 :wink:', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(597, 656, '猕猴桃', '1437148721@qq.com', 'http://www.cztrulychemical.com/Product/2-Chloro-2-methylpropane-507-20-0.html', '61.132.98.54', '2017-06-07 16:53:38', '2017-06-07 08:53:38', '是的。李玉刚 确实唱的不错', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0', '', 0, 0, 1),
(596, 986, '个人博客', '1585354108@qq.com', 'http://senchun.cc', '120.239.110.52', '2017-06-07 15:09:25', '2017-06-07 07:09:25', '这主题很棒，啥时候能分享出来呢', 0, '1', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 UBrowser/6.1.2716.5 Safari/537.36', '', 0, 0, 1),
(584, 910, '小萝博客', 'admin@nameluo.com', 'http://www.nameluo.com', '183.45.41.11', '2017-06-05 21:55:45', '2017-06-05 13:55:45', '加个防护的好', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36', '', 0, 0, 1),
(585, 969, '爱时尚', '631189754@qq.com', 'http://www.ishishang.top', '120.42.90.106', '2017-06-06 09:12:12', '2017-06-06 01:12:12', '请教下这个是什么模板', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36', '', 0, 0, 1),
(586, 969, 'gzp', 'gzp@gzpblog.com', 'https://www.gzpblog.com', '113.92.153.114', '2017-06-06 09:31:13', '2017-06-06 01:31:13', '自己写的模板~', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Firefox/53.0', '', 585, 1, 1),
(633, 656, '写给工厂上班的人', 'ppyace@126.com', 'http://wangpuzhi.com', '106.82.32.222', '2017-06-28 17:23:15', '2017-06-28 09:23:15', '正月15的元宵会歌曲', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36', '', 0, 0, 1),
(654, 656, 'ITSS', '1834902712@qq.com', 'http://www.yunque365.com/', '115.60.57.158', '2017-07-05 09:43:29', '2017-07-05 01:43:29', '等会下载下来听听~嘿嘿，有时候音乐能反映出此时此刻内心的心情', 0, '1', 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.75 Safari/537.36 LBBROWSER', '', 0, 0, 1),
(655, 1066, 'boke112导航', 'boke112@qq.com', 'http://boke112.com/', '113.16.255.87', '2017-07-05 11:06:33', '2017-07-05 03:06:33', '有没有营养要看对谁而言，哪怕是基础知识，也会对某些用户有用的', 0, '1', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36', '', 0, 0, 1),
(656, 1066, '小萝博客', 'admin@nameluo.com', 'http://blog.nameluo.com/', '14.117.52.46', '2017-07-05 14:10:41', '2017-07-05 06:10:41', '对我而言是学习', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36', '', 0, 0, 1),
(659, 656, 'WordPress头条', '1711023576@qq.com', 'http://www.wptoutiao.com/', '36.57.183.181', '2017-07-05 21:03:31', '2017-07-05 13:03:31', '媳妇天天听', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.104 Safari/537.36', '', 0, 0, 1),
(662, 656, '加气块设备', '1783237406@qq.com', 'http://www.hongfajituan.cn', '58.57.63.68', '2017-07-07 08:56:31', '2017-07-07 00:56:31', '我也很喜欢这首歌', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.22 Safari/537.36 SE 2.X MetaSr 1.0', '', 0, 0, 1),
(663, 647, '加气块设备', '1783237406@qq.com', 'http://www.hongfajituan.cn', '58.57.63.68', '2017-07-07 08:57:07', '2017-07-07 00:57:07', '感谢分享', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.22 Safari/537.36 SE 2.X MetaSr 1.0', '', 0, 0, 1),
(664, 638, '加气块设备', '1783237406@qq.com', 'http://www.hongfajituan.cn', '58.57.63.68', '2017-07-07 08:59:26', '2017-07-07 00:59:26', '博主好专业 收藏一下了', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.22 Safari/537.36 SE 2.X MetaSr 1.0', '', 0, 0, 1),
(667, 656, '剪板机', '13236099993@163.com', 'http://www.jsntdy.com/jbj/', '49.67.209.76', '2017-07-09 13:53:42', '2017-07-09 05:53:42', '哎呦这歌不错哦！', 0, '1', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Maxthon/4.4.8.1000 Chrome/30.0.1599.101 Safari/537.36', '', 0, 0, 1),
(670, 638, '论文代发网', 'peixuanwang117@gmail.com', 'https://www.queensland-assignment.com/essay-services-for-chinese-students/', '93.119.23.158', '2017-07-10 18:12:50', '2017-07-10 10:12:50', '感谢楼主的分析', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0', '', 0, 0, 1),
(671, 1066, '个人博客', '1585354108@qq.com', 'http://senchun.cc', '120.239.110.210', '2017-07-10 21:14:56', '2017-07-10 13:14:56', '没事，我会看的', 0, '1', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 UBrowser/6.1.2716.5 Safari/537.36', '', 0, 0, 1),
(682, 619, '【转】解决windows下php-cgi进程经常自动关闭 - 明天，你好', '', 'http://www.jiyucun.com/?p=287', '123.56.131.221', '2017-07-19 13:39:25', '2017-07-19 05:39:25', '[&#8230;] 接下里将下载下来的xxfpm目录copy到nginx下：   为了方便修改一下当初安装nginx时的RunHiddenConsole启动关闭文件（如果你是这样安装的话）： 修改start_nginx.bat为： @echo off REM Windows 下无效 REM set PHP_FCGI_CHILDREN=5 REM 每个进程处理的最大请求数，或设置为 Windows 环境变量 set PHP_FCGI_MAX_REQUESTS=1000 echo Starting PHP FastCGI… RunHiddenConsole D:/wnmp/nginx-1.10.2/xxfpm/bin/xxfpm.exe “D:/wnmp/php-5.6/php-cgi.exe -c D:/wnmp/php-5.6/php.ini” -n 5 -i 127.0.0.1 -p 9000 echo Starting nginx… RunHiddenConsole D:/wnmp/nginx-1.10.2/nginx.exe -p D:/wnmp/nginx-1.10.2 exit  修改stop_nginx.bat为：  @echo off echo Stopping nginx… taskkill /F /IM nginx.exe &gt; nul echo Stopping PHP FastCGI… taskkill /F /IM xxfpm.exe &gt; nul exit   现在在开启nginx时，我们就同时开启了5个php-cgi进程，因为我们传了参数 -n 为5。    如果我们手动断掉一个，会发现又多出来一个，还是5个。xxfpm将会管理php-cgi，将其维持在5个php-cgi进程，防止cgi进程崩溃关闭。还有一点注意，监听端口注意与nginx的配置文件对齐。 来源：https://www.gzpblog.com/20170209/619.html [&#8230;]', 0, 'trash', 'The Incutio XML-RPC PHP Library -- WordPress/4.8', 'pingback', 0, 0, 0),
(678, 712, '胜达SEO博客', '736538726@qq.com', 'http://www.szsdseo.com', '119.139.136.253', '2017-07-18 11:13:28', '2017-07-18 03:13:28', '感谢分享，欢迎回访我的网站', 0, '1', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36', '', 0, 0, 1),
(857, 15, 'Chloe', 'troymacaluso25@images.housines.com', 'http://www.cepgraphics.com/en/component/k2/itemlist/user/597.html', '5.189.205.200', '2017-08-10 19:12:39', '2017-08-10 11:12:39', 'I all the time emailed this blog post page to all my friends, as if like to read \r\nit afterward my friends will too. http://www.cepgraphics.com/en/component/k2/itemlist/user/597.html', 0, 'spam', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0', '', 0, 0, 0),
(858, 15, 'antalya escort', 'juanmortensen@gmail.com', 'http://www.mazajservices.com/', '185.82.223.121', '2017-08-10 20:42:53', '2017-08-10 12:42:53', 'Greetings from Los angeles! I\'m bored to tears at work so I \r\ndecided to check out your blog on my iphone during lunch break.\r\nI love the information you provide here and can\'t \r\nwait to take a look when I get home. I\'m surprised at how quick your blog loaded on my cell phone ..\r\nI\'m not even using WIFI, just 3G .. Anyhow, excellent site!', 0, 'spam', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0', '', 0, 0, 0);
INSERT INTO `gzp_comments` (`comment_ID`, `comment_post_ID`, `comment_author`, `comment_author_email`, `comment_author_url`, `comment_author_IP`, `comment_date`, `comment_date_gmt`, `comment_content`, `comment_karma`, `comment_approved`, `comment_agent`, `comment_type`, `comment_parent`, `user_id`, `comment_mail_notify`) VALUES
(856, 15, 'writing services company reviews', 'dianenowak@zoho.com', 'http://bit.ly/2htGkXf', '66.253.168.52', '2017-08-10 01:09:17', '2017-08-09 17:09:17', 'Hello! Impressive comment! I find nice the method \r\nthat you referred to 微信公众平台开发--准备开发和接口接入.\r\nAwesome! Recommendations on how would you end up with these types of advantageous ability as a copywriter?\r\n\r\nDoes it include any natural talent or even a consequence of work.\r\n\r\nEvery person may easily pen practically the writer on the blog.\r\n\r\nMost people battle utilizing blogging .\r\nLike nightmare you can find one sheet of paper derived from one that belong to the simply writing treatment that exist inside of the website.\r\n\r\nSome options hard to rely on. That’s exactly why I normally look over amazing .\r\nwriting services company reviews. Those reviews concerning crafting programs \r\nforced me to a lot', 0, 'spam', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60', '', 0, 0, 0),
(855, 35, 'www.a3sf.com石器私服开区sf一条龙版本7i2y2', 'ftzsei@163.com', 'http://www.a3sf.com石器私服开区sf一条龙版本0a0r6', '120.135.23.119', '2017-08-09 20:30:23', '2017-08-09 12:30:23', '全民奇迹私服制作丝路传说私服制作仙境传说私服制作梦幻国度私服制作惊天动地私服制作大话西游私服制作科洛斯私服制作完美诛 <a href=\"http://www.a3sf.com\" rel=\"nofollow\">www.a3sf.com</a> 仙私服制作魔力宝贝私服制作千年私服制作挑战私服制作热血江湖私服制作劲舞团 <a href=\"http://www.a3sf.com\" rel=\"nofollow\">www.a3sf.com</a> 私服制作传奇归来私服制作天之炼狱私服制作决战NEO决世之战私服制作征途私服制作奇迹mu私服制作乱ol私服制作勇ol私服制作端游私服制作完美世界私服制作石器时代私服制作美丽世界私服制作传奇私服私服制作神泣私服制作热血传奇私服制作破天一剑私服制作破天私服制作刀剑私服制作骑士私服制作新魔界私服制作机战私服制作蜀门私服制作英雄王座私服制作RFonline私服制作国度私服 <a href=\"http://www.a3sf.com/soft/index.html\" rel=\"nofollow\">www.a3sf.com/soft/index.html</a> 制作RF私服制作魔兽私服制作永恒之塔私服制作冒险', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0', '', 0, 0, 1),
(854, 29, 'www.a3sf.com石器私服开区sf一条龙版本5a3o2', 'ftzsei@163.com', 'http://开sf服务6e2g6g', '120.135.23.119', '2017-08-09 20:29:34', '2017-08-09 12:29:34', '全民奇迹私服开区丝路传说私服开区仙境传说私服开区梦幻国度私服开区惊天动地私服开区大话西游私服开区科洛斯私服开区完美诛 <a href=\"http://www.119uc.com\" rel=\"nofollow\">www.119uc.com</a> 仙私服开区魔力宝贝私服开区千年私服开区挑战私服开区热血江湖私服 <a href=\"http://www.119uc.com\" rel=\"nofollow\">www.119uc.com</a> 开区劲舞团私服开区传奇归来私服开区天之炼狱私服开区决战NEO决世之战私服开区征途私服开区奇迹mu私服开区乱ol私服开区勇ol私服开区端游私服开区完美世界私服开区石器时代私服开区美丽世界私服开区传奇私服私服开区神泣私服开区热血传奇私服开区破天一剑私服开区破天私服开区刀剑私服开区骑士私服开区新魔界私服开区机战 <a href=\"http://www.119uc.com\" rel=\"nofollow\">www.119uc.com</a> 私服开区蜀门私服开区英雄王座私服开区RFonline私服开区国度私服开区RF私服开区魔兽私服开区永恒之塔私服开区冒险', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0', '', 0, 0, 1),
(853, 29, 'www.a3sf.com魔域私服开区一条龙服务3t4v5s', 'ftzsei@163.com', 'http://www.a3sf.com天龙私服一条龙开sf服务6u2e9n', '120.135.23.119', '2017-08-09 18:29:10', '2017-08-09 10:29:10', '全民奇迹私服制作丝路传说私服制作仙境传说私服制作梦幻国度私服制作惊天动地私 <a href=\"http://www.a3sf.com\" rel=\"nofollow\">www.a3sf.com</a> 服制作大话西游私服制作科洛斯私服制作完美诛仙私服制作魔力 <a href=\"http://www.a3sf.com\" rel=\"nofollow\">www.a3sf.com</a> 宝贝私服制作千年私服制作挑战私服制作热血江湖私服制作劲舞团私服制作传奇归来私服制作天之炼狱私服制作决战NEO决世之战私服制作征途私服制作奇迹mu私服制作乱ol私服制作勇ol私服制作端游私服制作完美世界私服制作石器时代私服制作美丽世界私服制作传奇私服私服制作神泣私服制作热血传奇私服制作破天一剑 <a href=\"http://www.a3sf.com/soft/index.html\" rel=\"nofollow\">www.a3sf.com/soft/index.html</a> 私服制作破天私服制作刀剑私服制作骑士私服制作新魔界私服制作机战私服制作蜀门私服制作英雄王座私服制作RFonline私服制作国度私服制作RF私服制作魔兽私服制作永恒之塔私服制作冒险', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0', '', 0, 0, 1),
(851, 15, 'water damage repair los angeles', 'daniel.slater2364@hostmailmonster.com', 'http://manifest-joy.com/index.php?option=com_k2&amp;view=itemlist&amp;task=user&amp;id=637654', '104.247.99.137', '2017-08-09 17:10:02', '2017-08-09 09:10:02', 'Thanks very interesting blog! http://manifest-joy.com/index.php?option=com_k2&amp;view=itemlist&amp;task=user&amp;id=637654', 0, 'spam', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36', '', 0, 0, 0),
(852, 29, 'www.a3sf.com魔域私服开区一条龙服务2s4x2e', 'ftzsei@163.com', 'http://www.a3sf.com石器私服开区sf一条龙版本9q5t4p', '120.135.23.119', '2017-08-09 18:28:35', '2017-08-09 10:28:35', '全民奇迹私服制作丝路传说私服制作仙境传说私服制作梦幻国度私服制作惊天动地私服制作大话西游私服制作科洛斯私服制作完美诛仙私服制作魔力宝贝 <a href=\"http://www.a3sf.com\" rel=\"nofollow\">www.a3sf.com</a> 私服制作千年私服制作挑战私服制作热血江湖私服制作劲舞团私服制作传奇归来私服制作天之炼狱私服制作决战NEO决世之战私服制作征途私服制作奇迹mu私服制 <a href=\"http://www.a3sf.com\" rel=\"nofollow\">www.a3sf.com</a> 作乱ol私服制作勇ol私服制作端游私服制作完美世界私服制作石器时代私服制作美丽世界私服制作传奇私服私服制作神泣私服制作热血传奇私服制作破天一剑私服制作破天私服制作刀剑私服制作骑士私服制作新魔界私服制作机战私服制作蜀门私服制作英雄王座私服制作RFonline私服制作国度私服制作RF私服制作魔兽私服制作永恒之塔私服制 <a href=\"http://www.a3sf.com/soft/index.html\" rel=\"nofollow\">www.a3sf.com/soft/index.html</a> 作冒险', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0', '', 0, 0, 1),
(849, 29, '石器私服开区sf一条龙版本www.a3sf.comQQ1285574370', 'vkiihf@gmail.com', 'http://www.a3sf.com/', '120.135.23.118', '2017-08-08 12:15:52', '2017-08-08 04:15:52', '天堂II私服务端-墨香私服务端-剑侠情缘服务端-密传服务端-街头篮球服务端-A3私服务端-破天一剑服务端-魔域服务端-魔兽世界服务端-天龙八部服务端-RF服务端www.a3sf.com魔域私服开区一条龙服务QQ1285574370\r\n石器私服开区sf一条龙版本www.a3sf.comQQ1285574370 http://www.a3sf.com/', 0, 'spam', 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko', '', 0, 0, 0),
(850, 731, 'EdythGlics', 'edythcat@mail.ru', '', '93.170.187.48', '2017-08-08 17:23:38', '2017-08-08 09:23:38', 'Revolutional update of SEO/SMM package \"XRumer 16.0 + XEvil\": \r\ncaptchas regignizing of Google, Facebook, Bing, Hotmail, SolveMedia, Yandex, \r\nand more than 8400 another categories of captchas, \r\nwith highest precision (80..100%) and highest speed (100 img per second). \r\nYou can connect XEvil 3.0 to all most popular SEO/SMM software: XRumer, GSA SER, ZennoPoster, Srapebox, Senuke, and more than 100 of other software. \r\n \r\nInterested? There are a lot of impessive videos about XEvil in YouTube. \r\nYou read it - then IT WORKS! \r\nSee you later! \r\n \r\n \r\nXRumer201708z', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 YaBrowser/17.3.1.840 Yowser/2.5 Safari/537.36', '', 0, 0, 1),
(847, 15, 'antalya escort', 'cynthiaastudillo@gmail.com', 'http://www.mazajservices.com/', '185.82.223.121', '2017-08-07 17:51:21', '2017-08-07 09:51:21', 'I visited several web sites except the audio quality for \r\naudio songs current at this site is actually wonderful.', 0, 'spam', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36', '', 0, 0, 0),
(848, 731, 'RuslanWaymn', 'baryshevruslanl@mail.ru', 'https://www.saabvolvo.com.ua', '109.188.127.185', '2017-08-08 10:21:02', '2017-08-08 02:21:02', 'Очистка корпуса дроссельной заслонки Вольво (Volvo) \r\nВ современных автомобилях Вольво в конструкции двигателя используется электронная дроссельная заслонка. Дроссельная заслонка – узел, который регулирует количество поступаемого в двигатель воздуха. В бензиновых моторах она работает в дуэте с педалью газа. Чем больше Вы давите на акселератор, тем сильнее открывается дроссель. \r\nДроссельная заслонкаВ бензиновых двигателях точная регулировка необходима для правильного смесеобразования, т.е. корректного соотношения и перемешивания воздуха с топливом, поступающих внутрь ДВС. Идеальное смесеобразование – залог эффективной, ровной, экономичной и экологичной работы мотора Вольво. \r\nВ процессе эксплуатации Вашего автомобиля дроссельная заслонка загрязняется. Масляные пары из вентиляции картерных газов оседают на корпусе данного узла. В турбированных двигателях процесс загрязнения происходит активнее за счет большего количества масляного тумана от самой турбины. Смолы, содержащиеся в парах сгоревшего топлива, также откладываются во впускном тракте и на дросселе. \r\nЗагрязнения заслонки приводят к тому, что начинают плавать обороты холостого хода, машина может глохнуть при запуске и при движении в пробках. Для того, чтобы двигатель Вашего Вольво работал долго и правильно, необходимо периодически снимать корпус дроссельной заслонки и чистить его.<a href=\"https://www.saabvolvo.com.ua/\" / rel=\"nofollow\">Cтанция технического обслуживания (СТО) \"СААБ-ВОЛЬВО\"в Киеве</a>', 0, 'spam', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.96 Safari/537.36', '', 0, 0, 1),
(846, 53, '魔域私服一条龙开区服务www.119uc.comQQ1124999543', 'czsdqbn@gmail.com', 'http://www.119uc.com/', '120.135.23.127', '2017-08-07 10:07:05', '2017-08-07 02:07:05', '奇侠xiah一条龙-真封神私服一条龙-完美世界服务端-烈焰服务端-洛汗服务端-新魔界服务端-绝对女神私服务端-征服服务端-传说45服务端-天之炼狱服务端-传奇归来私服务端www.a3sf.com天龙私服一条龙开sf服务QQ1285574370\r\n魔域私服一条龙开区服务www.119uc.comQQ1124999543 http://www.119uc.com/', 0, 'spam', 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko', '', 0, 0, 0),
(844, 15, 'Cheap Cincinnati Reds MLB Fitted Hat LX 2', 'Shadden@gmail.com', 'http://www.hats-cheap.com/cheap-cincinnati-reds-mlb-fitted-hat-lx-2-p-830.html', '109.230.220.146', '2017-08-06 00:19:04', '2017-08-05 16:19:04', 'I gotta bookmark  this website  it seems  very beneficial   very beneficial', 0, 'spam', 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 8.50', '', 0, 0, 1),
(845, 29, '魔域私服一条龙开区服务www.119uc.comQQ1124999543', 'nanzui@gmail.com', 'http://www.119uc.com/', '120.135.23.127', '2017-08-07 10:06:29', '2017-08-07 02:06:29', '完美世界服务端-烈焰服务端-洛汗服务端-新魔界服务端-绝对女神私服务端-征服服务端-传说45服务端-天之炼狱服务端-天堂II私服务端-墨香私服务端www.119uc.com传奇私服一条龙sf开区QQ1124999543\r\n魔域私服一条龙开区服务www.119uc.comQQ1124999543 http://www.119uc.com/', 0, 'spam', 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko', '', 0, 0, 0),
(843, 35, 'www.i5gm.com传奇私服开区一条龙服务7q0q7', 'ftzsei@163.com', 'http://www.9uv.net墨香私服一条龙开区服务3o6d8h', '120.135.23.116', '2017-08-05 16:45:05', '2017-08-05 08:45:05', '全民奇迹 <a href=\"http://www.a3sf.com\" rel=\"nofollow\">www.a3sf.com</a> 私服制作丝路传说私服制作 <a href=\"http://www.a3sf.com\" rel=\"nofollow\">www.a3sf.com</a> 仙境传说私服制作梦幻国度私服制作惊天动地私服制作大话西游私服制作科洛斯私服制作完美诛仙私服制作魔力宝贝私服制作千年私服制作挑战私服制作热血江湖私服制作劲舞团私服制作传奇归来私服制作天之炼狱私服制作决战NEO决世之战私服制作征途私服制作奇迹mu私服制作乱ol私服 <a href=\"http://www.a3sf.com/soft/index.html\" rel=\"nofollow\">www.a3sf.com/soft/index.html</a> 制作勇ol私服制作端游私服制作完美世界私服制作石器时代私服制作美丽世界私服制作传奇私服私服制作神泣私服制作热血传奇私服制作破天一剑私服制作破天私服制作刀剑私服制作骑士私服制作新魔界私服制作机战私服制作蜀门私服制作英雄王座私服制作RFonline私服制作国度私服制作RF私服制作魔兽私服制作永恒之塔私服制作冒险', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0', '', 0, 0, 1),
(842, 35, '区服务3p4b8l', 'ftzsei@163.com', 'http://www.i5gm.com魔兽私服开服一条龙服务0x8y2i', '120.135.23.116', '2017-08-05 16:44:09', '2017-08-05 08:44:09', '全民奇迹开服一条龙丝路传说开服一条龙仙境传说开服一条龙梦幻国度开服一条龙惊天动地开服一条龙大话西游开服一条龙科洛斯开 <a href=\"http://www.9uv.net\" rel=\"nofollow\">www.9uv.net</a> 服一条龙完美诛仙开服一条龙魔力宝贝开服一条龙千年开 <a href=\"http://www.9uv.net\" rel=\"nofollow\">www.9uv.net</a> 服一条龙挑战开服一条龙热血江湖开服一条龙劲舞团开服一条龙传奇归来开服一条龙天之炼狱开服一条龙决战NEO决世之战开服一条龙征途开服一条龙奇迹mu开服一条龙乱ol开服一条龙勇ol开服一条龙端游开服一条龙完美世界开服一条龙石器时代开服一条龙美丽世界开服一条龙传奇私服开服一条龙神泣开服一条龙热血传奇开服一条龙破天一剑开服一条龙破天开服一条龙刀剑开服一条龙骑士开服一条龙新魔 <a href=\"http://www.9uv.net/soft/index.html\" rel=\"nofollow\">www.9uv.net/soft/index.html</a> 界开服一条龙机战开服一条龙蜀门开服一条龙英雄王座开服一条龙RFonl', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0', '', 0, 0, 1),
(841, 35, '区服务2k5u8x', 'ftzsei@163.com', 'http://www.n7ss.com魔兽私服开区一条龙服', '120.135.23.116', '2017-08-05 16:43:11', '2017-08-05 08:43:11', '全民奇迹私服 <a href=\"http://www.119uc.com\" rel=\"nofollow\">www.119uc.com</a> 开区丝路传说私服开区仙境传说私服开区梦幻国度私服开区 <a href=\"http://www.119uc.com\" rel=\"nofollow\">www.119uc.com</a> 惊天动地私服开区大话西游私服开区科洛斯私服开区完美诛仙私服开区魔力宝贝私服开区千年私服开区挑战私服开区热血江湖私服开区 <a href=\"http://www.119uc.com\" rel=\"nofollow\">www.119uc.com</a> 劲舞团私服开区传奇归来私服开区天之炼狱私服开区决战NEO决世之战私服开区征途私服开区奇迹mu私服开区乱ol私服开区勇ol私服开区端游私服开区完美世界私服开区石器时代私服开区美丽世界私服开区传奇私服私服开区神泣私服开区热血传奇私服开区破天一剑私服开区破天私服开区刀剑私服开区骑士私服开区新魔界私服开区机战私服开区蜀门私服开区英雄王座私服开区RFonline私服开区国度私服开区RF私服开区魔兽私服开区永恒之塔私服开区冒险', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0', '', 0, 0, 1),
(840, 29, 'www.n7ss.com传奇世界私服一条龙开区9v0z7l', 'ftzsei@163.com', 'http://www.n7ss.com魔兽私服开区一条龙服务2e1h9s', '120.135.23.116', '2017-08-05 16:25:37', '2017-08-05 08:25:37', '全民奇 <a href=\"http://www.a3sf.com\" rel=\"nofollow\">www.a3sf.com</a> 迹私服制作丝路传说私服制作仙境传说私服制作梦幻国度私服制作惊天动地私服制作大话西游私服制作科洛斯私服制作完美诛仙私服制作魔力宝贝私服制作千年私服 <a href=\"http://www.a3sf.com\" rel=\"nofollow\">www.a3sf.com</a> 制作挑战私服制作热血江湖私服制作劲舞团私服制作传奇归来私服制作天之炼狱私服制作决战NEO决世之战私服制作征途私服制作奇迹mu私服制作乱ol私服制作勇ol私服制作端游私服制作完美世界私服制作石器时代私服制作美丽世 <a href=\"http://www.a3sf.com/soft/index.html\" rel=\"nofollow\">www.a3sf.com/soft/index.html</a> 界私服制作传奇私服私服制作神泣私服制作热血传奇私服制作破天一剑私服制作破天私服制作刀剑私服制作骑士私服制作新魔界私服制作机战私服制作蜀门私服制作英雄王座私服制作RFonline私服制作国度私服制作RF私服制作魔兽私服制作永恒之塔私服制作冒险', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0', '', 0, 0, 1),
(839, 29, 'www.m7sf.com奇迹私服开sf一条龙开区7v0t8w', 'ftzsei@163.com', 'http://www.e7if.com天龙八部私服一条龙sf开服5i2l0p', '120.135.23.116', '2017-08-05 16:24:48', '2017-08-05 08:24:48', '全民奇迹制作一条龙丝路传说制作一条龙仙境传说制作一条龙梦幻国度制作一条龙 <a href=\"http://www.17isf.com\" rel=\"nofollow\">www.17isf.com</a> 惊天动地制作一条龙大话西游制作一 <a href=\"http://www.17isf.com\" rel=\"nofollow\">www.17isf.com</a> 条龙科洛斯制作一条龙完美诛仙制作一条龙魔力宝贝制作一条龙千年制作一条龙挑战制作一条龙热血江湖制作一条龙劲舞团制作一条龙传奇归来制作一条龙天之炼狱制作一条龙决战NEO决世之战制作一条龙征途制作一条龙奇迹mu制作一条龙乱ol制作一条龙勇ol制作一条龙端游制作一条龙完美世界制 <a href=\"http://www.17isf.com/soft/index.html\" rel=\"nofollow\">www.17isf.com/soft/index.html</a> 作一条龙石器时代制作一条龙美丽世界制作一条龙传奇私服制作一条龙神泣制作一条龙热血传奇制作一条龙破天一剑制作一条龙破天制作一条龙刀剑制作一条龙骑士制作一条龙新魔界制作一条龙机战制作一条龙蜀门制作一条龙英雄王座制作一条龙RFonl', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0', '', 0, 0, 1),
(838, 29, 'www.7egm.com破天私服一条龙开服服务6f8v8x', 'ftzsei@163.com', 'http://www.e7if.com天龙八部私服一条龙sf开服9m8d9f', '120.135.23.116', '2017-08-05 16:23:56', '2017-08-05 08:23:56', '全民奇迹开服一条龙丝路传说开服一条龙仙境传说开服一条龙梦幻国度开服一条 <a href=\"http://www.9uv.net\" rel=\"nofollow\">www.9uv.net</a> 龙惊天动地开服一条龙大话西游开服一条龙科洛斯开服一条 <a href=\"http://www.9uv.net\" rel=\"nofollow\">www.9uv.net</a> 龙完美诛仙开服一条龙魔力宝贝开服一条龙千年开服一条龙挑战开服一条龙热血江湖开服一条龙劲舞团开服一条龙传奇归来开服一条龙天之炼狱开服一条龙决战NEO决世之战开服一条龙征途开服一条 <a href=\"http://www.9uv.net/soft/index.html\" rel=\"nofollow\">www.9uv.net/soft/index.html</a> 龙奇迹mu开服一条龙乱ol开服一条龙勇ol开服一条龙端游开服一条龙完美世界开服一条龙石器时代开服一条龙美丽世界开服一条龙传奇私服开服一条龙神泣开服一条龙热血传奇开服一条龙破天一剑开服一条龙破天开服一条龙刀剑开服一条龙骑士开服一条龙新魔界开服一条龙机战开服一条龙蜀门开服一条龙英雄王座开服一条龙RFonl', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0', '', 0, 0, 1),
(837, 29, '一条龙开服务6s1m9j', 'ftzsei@163.com', 'http://www.i5gm.com魔域私服一条龙开服服务2o0n9l', '120.135.23.116', '2017-08-05 16:20:08', '2017-08-05 08:20:08', '全民奇迹开服一条龙丝路传说开服一条 <a href=\"http://www.9uv.net\" rel=\"nofollow\">www.9uv.net</a> 龙仙 <a href=\"http://www.9uv.net\" rel=\"nofollow\">www.9uv.net</a> 境传说开服一条龙梦幻国度开服一条龙惊天动地开服一条龙大话西游开服一条龙科洛斯开服一条龙完美诛仙开服一条龙魔力宝贝开服一条龙千年开服一条龙挑战开服一条龙热血江湖开服一条龙劲舞团开服一条龙传奇归来开服一条龙天之炼狱开服一条龙决战NEO决世之战开服一条龙征途开服 <a href=\"http://www.9uv.net/soft/index.html\" rel=\"nofollow\">www.9uv.net/soft/index.html</a> 一条龙奇迹mu开服一条龙乱ol开服一条龙勇ol开服一条龙端游开服一条龙完美世界开服一条龙石器时代开服一条龙美丽世界开服一条龙传奇私服开服一条龙神泣开服一条龙热血传奇开服一条龙破天一剑开服一条龙破天开服一条龙刀剑开服一条龙骑士开服一条龙新魔界开服一条龙机战开服一条龙蜀门开服一条龙英雄王座开服一条龙RFonl', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0', '', 0, 0, 1),
(836, 29, 'www.119uc.com传奇私服一条龙sf开区0z2j4n', 'ftzsei@163.com', 'http://www.a3sf.com魔域私服开区一条龙服务6t6d0j', '120.135.23.116', '2017-08-05 16:19:24', '2017-08-05 08:19:24', '石器时代一条龙服务美丽世 <a href=\"http://www.m7sf.com\" rel=\"nofollow\">www.m7sf.com</a> 界一 <a href=\"http://www.m7sf.com\" rel=\"nofollow\">www.m7sf.com</a> 条龙服务传奇私服一条龙服务神泣一条龙服务热血传奇一条龙服务天上碑一条龙服务真封神一条龙服务网页游戏一条龙服务页游一条龙服务烈焰一条龙服务传说ol一条龙服务天龙八部一条龙服务魔域一条龙服务传世一条龙服务传奇世界一条龙服务十二之天一条龙服务墨湘一条龙服务墨香一条 <a href=\"http://www.m7sf.com/taocao\" rel=\"nofollow\">www.m7sf.com/taocao</a> 龙服务洛汗一条龙服务弹弹堂一条龙服务飞飞OL一条龙服务密传一条龙服务红月一条龙服务决战一条龙服务倚天2一条龙服务倚天一条龙服务天堂2一条龙服务天堂一条龙服务天堂II一条龙服务破天一剑一条龙服务破天一条龙服务刀剑一条龙服务骑士一条龙服务新魔界一条龙服务机战一条龙服务蜀门一条龙服务英雄王座一条龙服务RFonline一', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0', '', 0, 0, 1),
(835, 29, '一条龙开区服务5g7i1x', 'ftzsei@163.com', 'http://www.17isf.com传奇私服一条龙开服7d6o1p', '120.135.23.116', '2017-08-05 16:18:44', '2017-08-05 08:18:44', '全民奇迹私服服务端丝路传说私服服务端仙境传说私服服务端梦幻国度私服服 <a href=\"http://www.m9uc.com\" rel=\"nofollow\">www.m9uc.com</a> 务端惊天动地私服服务端大话西游私服服务端科洛斯私服服务端完美诛仙私服服务端魔力 <a href=\"http://www.m9uc.com\" rel=\"nofollow\">www.m9uc.com</a> 宝贝私服服务端千年私服服务端挑战私服服务端热血江湖私服服务端劲舞团私服服务端传奇归来私服服务端天之炼狱私服服务端决战NEO决世之战私服服务端征途私服服务端奇迹mu私服服务端乱ol私服服务端勇ol私服服务端端游私服服务端完美世界私服服务端石器时代私服服务端美丽世界私服服务端传奇私服私服服务端神泣私服服务端热血传奇私 <a href=\"http://www.m9uc.com\" rel=\"nofollow\">www.m9uc.com</a> 服服务端破天一剑私服服务端破天私服服务端刀剑私服服务端骑士私服服务端新魔界私服服务端机战私服服务端蜀门私服服务端英雄王座私服服务端RFonl', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0', '', 0, 0, 1),
(834, 29, 'www.a3sf.com天龙私服一条龙开sf服务0j1g5x', 'ftzsei@163.com', 'http://www.a3sf.com石器私服开区sf一条龙版本3a7a8y', '120.135.23.116', '2017-08-05 16:05:23', '2017-08-05 08:05:23', '全民奇迹开服一条龙丝路传说开服一条龙仙境传说开服一条龙梦幻国度开服一条龙惊天动地开服一条龙大话西游开服一条 <a href=\"http://www.9uv.net\" rel=\"nofollow\">www.9uv.net</a> 龙科洛斯开服一条龙完美诛仙开服一条龙魔 <a href=\"http://www.9uv.net\" rel=\"nofollow\">www.9uv.net</a> 力宝贝开服一条龙千年开服一条龙挑战开服一条龙热血江湖开服一条龙劲舞团开服一条龙传奇归来开服一条龙天之炼狱开服一条龙决战NEO决世之战开服一条龙征途开服一条龙奇迹mu开服一条龙乱ol开服一条龙勇ol开服一条龙端游开服一条龙完美世界开服一条龙石器时代开服一条龙 <a href=\"http://www.9uv.net/soft/index.html\" rel=\"nofollow\">www.9uv.net/soft/index.html</a> 美丽世界开服一条龙传奇私服开服一条龙神泣开服一条龙热血传奇开服一条龙破天一剑开服一条龙破天开服一条龙刀剑开服一条龙骑士开服一条龙新魔界开服一条龙机战开服一条龙蜀门开服一条龙英雄王座开服一条龙RFonl', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0', '', 0, 0, 1),
(832, 29, 'www.17isf.com魔兽世界sf开服一条龙服务5e5c3v', 'ftzsei@163.com', 'http://www.e7if.com传奇sf开区一条龙服务9r0v8u', '120.135.23.116', '2017-08-05 16:03:53', '2017-08-05 08:03:53', '全民奇迹服务端制作丝路传说服务端制作仙境传说服务端制作梦幻国度服务端制作惊天动地服务端制作大话西游服务端制作科洛斯服务 <a href=\"http://www.n7ss.com\" rel=\"nofollow\">www.n7ss.com</a> 端制作完美诛仙服务端制作魔力宝贝服务端制作千年服务端制作 <a href=\"http://www.n7ss.com\" rel=\"nofollow\">www.n7ss.com</a> 挑战服务端制作热血江湖服务端制作劲舞团服务端制作传奇归来服务端制作天之炼狱服务端制作决战NEO决世之战服务端制作征途服务端制作奇迹mu服务端制作乱ol服务端制作勇ol服务端制作端游服务端制作完美世界服务端制作石器时代服务端制作美丽世界服务端 <a href=\"http://www.n7ss.com\" rel=\"nofollow\">www.n7ss.com</a> 制作传奇私服服务端制作神泣服务端制作热血传奇服务端制作破天一剑服务端制作破天服务端制作刀剑服务端制作骑士服务端制作新魔界服务端制作机战服务端制作蜀门服务端制作英雄王座服务端制作RFonl', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0', '', 0, 0, 1),
(833, 29, 'www.119uc.com魔域私服一条龙开区服务7v8d8m', 'ftzsei@163.com', 'http://www.17isf.com传奇私服一条龙开服2y0m8f', '120.135.23.116', '2017-08-05 16:04:33', '2017-08-05 08:04:33', '石器时代一条龙服务美丽世界一条龙服务传奇私服一条龙服务神泣一条龙服务 <a href=\"http://www.m7sf.com\" rel=\"nofollow\">www.m7sf.com</a> 热血传奇一条龙服务天上碑一条龙服务真封神一条龙服务网页游戏一条龙服务页游一条龙服务烈焰一条龙服 <a href=\"http://www.m7sf.com\" rel=\"nofollow\">www.m7sf.com</a> 务传说ol一条龙服务天龙八部一条龙服务魔域一条龙服务传世一条龙服务传奇世界一条龙服务十二之天一条龙服务墨湘一条龙服务墨香一条龙服务洛汗一条龙服务弹弹堂一条龙服务飞飞OL一条龙服务密传一条龙服务红月一条龙服务决战一条龙服务倚天2一条龙服务倚天 <a href=\"http://www.m7sf.com/taocao\" rel=\"nofollow\">www.m7sf.com/taocao</a> 一条龙服务天堂2一条龙服务天堂一条龙服务天堂II一条龙服务破天一剑一条龙服务破天一条龙服务刀剑一条龙服务骑士一条龙服务新魔界一条龙服务机战一条龙服务蜀门一条龙服务英雄王座一条龙服务RFonline一', 0, 'spam', 'Mozilla/5.0 (Windows NT 5.1; rv:23.0) Gecko/20100101 Firefox/23.0', '', 0, 0, 1),
(831, 29, '传奇私服开区一条龙服务www.i5gm.comQQ1325876192', 'mexeznzodre@gmail.com', 'http://www.i5gm.com/', '120.135.23.118', '2017-08-04 16:54:40', '2017-08-04 08:54:40', '奇侠xiah一条龙-真封神私服一条龙-完美世界服务端-烈焰服务端-洛汗服务端-新魔界服务端-绝对女神私服务端-征服服务端-传说45服务端-天之炼狱服务端-传奇归来私服务端www.a3sf.com石器私服开区sf一条龙版本QQ1285574370', 0, 'spam', 'Mozilla/5.0 (Windows NT 6.1; Trident/7.0; rv:11.0) like Gecko', '', 0, 0, 0);

-- --------------------------------------------------------

--
-- 表的结构 `gzp_links`
--

CREATE TABLE `gzp_links` (
  `link_id` bigint(20) UNSIGNED NOT NULL,
  `link_url` varchar(255) NOT NULL DEFAULT '',
  `link_name` varchar(255) NOT NULL DEFAULT '',
  `link_image` varchar(255) NOT NULL DEFAULT '',
  `link_target` varchar(25) NOT NULL DEFAULT '',
  `link_description` varchar(255) NOT NULL DEFAULT '',
  `link_visible` varchar(20) NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) UNSIGNED NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) NOT NULL DEFAULT '',
  `link_notes` mediumtext NOT NULL,
  `link_rss` varchar(255) NOT NULL DEFAULT ''
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `gzp_links`
--

INSERT INTO `gzp_links` (`link_id`, `link_url`, `link_name`, `link_image`, `link_target`, `link_description`, `link_visible`, `link_owner`, `link_rating`, `link_updated`, `link_rel`, `link_notes`, `link_rss`) VALUES
(2, 'http://www.liangzl.com', '梁钟霖个人博客', '', '_blank', '', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(5, 'http://boke112.com/', 'boke112导航', '', '_blank', '', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(6, 'http://www.onlylink.top/', '楚水君', '', '_blank', '', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(8, 'https://juejin.im/', '掘金', '', '_blank', '挖掘技术好文', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(9, 'https://segmentfault.com/', 'segmentfault', '', '_blank', '问答社区', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(10, 'https://www.v2ex.com/', 'v2ex', '', '_blank', '基佬聚集地', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(11, 'http://36kr.com/', '36氪', '', '_blank', '让创业更简单', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(12, 'http://www.tmtpost.com/', '钛媒体', '', '_blank', '引领未来商业与生活新知', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(13, 'https://www.huxiu.com/', '虎嗅网', '', '_blank', '不错过互联网的每个重要时刻。', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(14, 'https://www.itjuzi.com/', 'IT桔子', '', '_blank', 'IT互联网公司产品数据库及商业信息服务', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(15, 'http://www.cyzone.cn/', '创业邦', '', '_blank', '全维度创业者服务平台', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(16, 'http://www.freebuf.com/', 'FreeBuf.COM', '', '_blank', '关注黑客与极客', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(17, 'http://tool.chinaz.com/', '站长之家-站长工具', '', '_blank', '站长,SEO相关在线工具', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(30, 'https://regex101.com/', 'Regular Expressions', '', '_blank', '正则匹配工具', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(18, 'http://tool.oschina.net/', '开源中国社区——在线工具', '', '_blank', '开源中国开发设计人员在线工具', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(19, 'http://www.logoko.com.cn/', 'LOGOKO', '', '_blank', '免费在线LOGO设计，网站LOGO设计，标志设计工具。', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(20, 'http://hao.shejidaren.com/', '设计导航', '', '_blank', '精选最好的设计网站大全', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(21, 'http://www.uimaker.com/', 'uimaker', '', '_blank', '专注UI设计', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(22, 'http://chuangzaoshi.com/', '创造狮', '', '_blank', '创意工作者导航', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(23, 'http://www.uisdc.com/', '优设-UISDC', '', '_blank', '优秀网页设计联盟', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(24, 'http://www.htmleaf.com/', 'jQuery之家', '', '_blank', '自由分享jQuery、html5、css3的插件库', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(25, 'http://588ku.com/', '千库网', '', '_blank', '免费png图片背景素材库', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(26, 'http://www.58pic.com/', '千图网', '', '_blank', '专注免费设计素材下载的网站', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(27, 'http://apistore.baidu.com/astore/toolshttpproxy', '百度API调试工具', '', '_blank', 'API调试工具', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(28, 'https://httpsecurityreport.com/', 'HTTP Security Report', '', '_blank', '检查网站HTTPS安全状况', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(29, 'https://www.ssllabs.com/ssltest/', 'SSL Server Test', '', '_blank', 'SSL全面分析', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(31, 'https://stackoverflow.com/', 'Stack Overflow', '', '_blank', '国外最大的开发者问答社区', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(32, 'http://www.imooc.com/', '慕课网', '', '_blank', 'IT技能学习平台', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(33, 'http://study.163.com/', '网易云课堂', '', '_blank', '实用技能学习平台', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(34, 'http://www.w3cschool.cn/', 'w3cschool', '', '_blank', '技术知识分享与学习平台', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(35, 'https://www.processon.com/', 'ProcessOn', '', '_blank', '在线协作绘图平台（流程图、思维导图等）', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(36, 'https://www.fotor.com.cn/', 'Fotor', '', '_blank', '在线平面设计工具和图片编辑器', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', '');

-- --------------------------------------------------------

--
-- 表的结构 `gzp_options`
--

CREATE TABLE `gzp_options` (
  `option_id` bigint(20) UNSIGNED NOT NULL,
  `option_name` varchar(191) NOT NULL DEFAULT '',
  `option_value` longtext NOT NULL,
  `autoload` varchar(20) NOT NULL DEFAULT 'yes'
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `gzp_options`
--

INSERT INTO `gzp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(1, 'siteurl', 'https://www.gzpblog.com', 'yes'),
(2, 'home', 'https://www.gzpblog.com', 'yes'),
(3, 'blogname', '锅子博客', 'yes'),
(4, 'blogdescription', '不煮咸鱼', 'yes'),
(5, 'users_can_register', '0', 'yes'),
(6, 'admin_email', 'gzp@goozp.com', 'yes'),
(7, 'start_of_week', '1', 'yes'),
(8, 'use_balanceTags', '0', 'yes'),
(9, 'use_smilies', '1', 'yes'),
(10, 'require_name_email', '1', 'yes'),
(11, 'comments_notify', '1', 'yes'),
(12, 'posts_per_rss', '10', 'yes'),
(13, 'rss_use_excerpt', '0', 'yes'),
(14, 'mailserver_url', 'mail.example.com', 'yes'),
(15, 'mailserver_login', 'login@example.com', 'yes'),
(16, 'mailserver_pass', 'password', 'yes'),
(17, 'mailserver_port', '110', 'yes'),
(18, 'default_category', '1', 'yes'),
(19, 'default_comment_status', 'open', 'yes'),
(20, 'default_ping_status', 'closed', 'yes'),
(21, 'default_pingback_flag', '', 'yes'),
(22, 'posts_per_page', '10', 'yes'),
(23, 'date_format', 'Y-m-d', 'yes'),
(24, 'time_format', 'H:i', 'yes'),
(25, 'links_updated_date_format', 'Y年n月j日ag:i', 'yes'),
(26, 'comment_moderation', '', 'yes'),
(27, 'moderation_notify', '1', 'yes'),
(28, 'permalink_structure', '/%year%%monthnum%%day%/%post_id%.html', 'yes'),
(30, 'hack_file', '0', 'yes'),
(31, 'blog_charset', 'UTF-8', 'yes'),
(32, 'moderation_keys', '', 'no'),
(33, 'active_plugins', 'a:5:{i:0;s:25:\"aliyun-oss/aliyun-oss.php\";i:1;s:39:\"syntaxhighlighter/syntaxhighlighter.php\";i:2;s:29:\"wp-postviews/wp-postviews.php\";i:3;s:27:\"wp-super-cache/wp-cache.php\";i:4;s:32:\"xml-sitemap-feed/xml-sitemap.php\";}', 'yes'),
(32031, 'widget_sf_widget_new', 'a:3:{i:2;a:1:{s:5:\"limit\";s:0:\"\";}i:3;a:1:{s:5:\"limit\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(34, 'category_base', '', 'yes'),
(35, 'ping_sites', 'http://rpc.pingomatic.com/\nhttp://ping.baidu.com/ping/RPC2', 'yes'),
(36, 'comment_max_links', '2', 'yes'),
(37, 'gmt_offset', '', 'yes'),
(38, 'default_email_category', '1', 'yes'),
(39, 'recently_edited', 'a:5:{i:0;s:73:\"/usr/local/nginx/html/zpblog/wp-content/plugins/aliyun-oss/aliyun-oss.php\";i:1;s:68:\"/usr/local/nginx/html/zpblog/wp-content/themes/SaltedFish/footer.php\";i:2;s:67:\"/usr/local/nginx/html/zpblog/wp-content/themes/SaltedFish/style.css\";i:3;s:77:\"/usr/local/nginx/html/zpblog/wp-content/themes/SaltedFish/style-nonberify.css\";i:4;s:68:\"/usr/local/nginx/html/zpblog/wp-content/themes/SaltedFish/single.php\";}', 'no'),
(40, 'template', 'SaltedFish', 'yes'),
(41, 'stylesheet', 'SaltedFish', 'yes'),
(42, 'comment_whitelist', '1', 'yes'),
(43, 'blacklist_keys', '', 'no'),
(44, 'comment_registration', '', 'yes'),
(45, 'html_type', 'text/html', 'yes'),
(46, 'use_trackback', '0', 'yes'),
(47, 'default_role', 'subscriber', 'yes'),
(48, 'db_version', '38590', 'yes'),
(49, 'uploads_use_yearmonth_folders', '1', 'yes'),
(50, 'upload_path', '', 'yes'),
(51, 'blog_public', '1', 'yes'),
(52, 'default_link_category', '0', 'yes'),
(53, 'show_on_front', 'posts', 'yes'),
(54, 'tag_base', '', 'yes'),
(55, 'show_avatars', '1', 'yes'),
(56, 'avatar_rating', 'G', 'yes'),
(57, 'upload_url_path', '', 'yes'),
(58, 'thumbnail_size_w', '150', 'yes'),
(59, 'thumbnail_size_h', '150', 'yes'),
(60, 'thumbnail_crop', '1', 'yes'),
(61, 'medium_size_w', '300', 'yes'),
(62, 'medium_size_h', '300', 'yes'),
(63, 'avatar_default', 'gravatar_default', 'yes'),
(64, 'large_size_w', '1024', 'yes'),
(65, 'large_size_h', '1024', 'yes'),
(66, 'image_default_link_type', '', 'yes'),
(67, 'image_default_size', '', 'yes'),
(68, 'image_default_align', '', 'yes'),
(69, 'close_comments_for_old_posts', '', 'yes'),
(70, 'close_comments_days_old', '14', 'yes'),
(71, 'thread_comments', '1', 'yes'),
(72, 'thread_comments_depth', '5', 'yes'),
(73, 'page_comments', '1', 'yes'),
(74, 'comments_per_page', '25', 'yes'),
(75, 'default_comments_page', 'newest', 'yes'),
(76, 'comment_order', 'asc', 'yes'),
(77, 'sticky_posts', 'a:0:{}', 'yes'),
(78, 'widget_categories', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(79, 'widget_text', 'a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}', 'yes'),
(80, 'widget_rss', 'a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}', 'yes'),
(81, 'uninstall_plugins', 'a:3:{s:27:\"wp-super-cache/wp-cache.php\";s:22:\"wpsupercache_uninstall\";s:20:\"baidusubmit/main.php\";a:2:{i:0;s:20:\"BaidusubmitGenerator\";i:1;s:9:\"uninstall\";}s:29:\"nextgen-gallery/nggallery.php\";a:2:{i:0;s:8:\"Freemius\";i:1;s:22:\"_uninstall_plugin_hook\";}}', 'no'),
(82, 'timezone_string', 'Asia/Shanghai', 'yes'),
(83, 'page_for_posts', '0', 'yes'),
(84, 'page_on_front', '0', 'yes'),
(85, 'default_post_format', '0', 'yes'),
(86, 'link_manager_enabled', '0', 'yes'),
(87, 'finished_splitting_shared_terms', '1', 'yes'),
(88, 'site_icon', '0', 'yes'),
(89, 'medium_large_size_w', '768', 'yes'),
(90, 'medium_large_size_h', '0', 'yes'),
(91, 'initial_db_version', '36686', 'yes'),
(92, 'gzp_user_roles', 'a:5:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:72:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;s:15:\"admin_wp_cn_kit\";b:1;s:24:\"NextGEN Gallery overview\";b:1;s:19:\"NextGEN Use TinyMCE\";b:1;s:21:\"NextGEN Upload images\";b:1;s:22:\"NextGEN Manage gallery\";b:1;s:19:\"NextGEN Manage tags\";b:1;s:29:\"NextGEN Manage others gallery\";b:1;s:18:\"NextGEN Edit album\";b:1;s:20:\"NextGEN Change style\";b:1;s:22:\"NextGEN Change options\";b:1;s:24:\"NextGEN Attach Interface\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:34:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}}', 'yes'),
(93, 'WPLANG', 'zh_CN', 'yes'),
(94, 'widget_search', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(95, 'widget_recent-posts', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(96, 'widget_recent-comments', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(97, 'widget_archives', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(98, 'widget_meta', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(99, 'sidebars_widgets', 'a:3:{s:19:\"wp_inactive_widgets\";a:3:{i:0;s:15:\"sf_widget_new-2\";i:1;s:20:\"sf_widget_tagsmenu-2\";i:2;s:19:\"sf_widget_comment-2\";}s:9:\"sidebar-1\";a:3:{i:0;s:20:\"sf_widget_tagsmenu-3\";i:1;s:15:\"sf_widget_new-3\";i:2;s:19:\"sf_widget_comment-3\";}s:13:\"array_version\";i:3;}', 'yes'),
(8487, 'xmlsf_version', '4.7.5', 'no'),
(8488, 'rewrite_rules', 'a:97:{s:13:\"sitemap\\.xml$\";s:22:\"index.php?feed=sitemap\";s:18:\"sitemap-home\\.xml$\";s:27:\"index.php?feed=sitemap-home\";s:39:\"sitemap-posttype-post\\.([0-9]+)?\\.?xml$\";s:50:\"index.php?feed=sitemap-posttype-post&m=$matches[1]\";s:39:\"sitemap-posttype-page\\.([0-9]+)?\\.?xml$\";s:50:\"index.php?feed=sitemap-posttype-page&m=$matches[1]\";s:11:\"^wp-json/?$\";s:22:\"index.php?rest_route=/\";s:14:\"^wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:21:\"^index.php/wp-json/?$\";s:22:\"index.php?rest_route=/\";s:24:\"^index.php/wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:47:\"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:42:\"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:23:\"category/(.+?)/embed/?$\";s:46:\"index.php?category_name=$matches[1]&embed=true\";s:35:\"category/(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:17:\"category/(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";s:44:\"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:39:\"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:20:\"tag/([^/]+)/embed/?$\";s:36:\"index.php?tag=$matches[1]&embed=true\";s:32:\"tag/([^/]+)/page/?([0-9]{1,})/?$\";s:43:\"index.php?tag=$matches[1]&paged=$matches[2]\";s:14:\"tag/([^/]+)/?$\";s:25:\"index.php?tag=$matches[1]\";s:45:\"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:40:\"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:21:\"type/([^/]+)/embed/?$\";s:44:\"index.php?post_format=$matches[1]&embed=true\";s:33:\"type/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?post_format=$matches[1]&paged=$matches[2]\";s:15:\"type/([^/]+)/?$\";s:33:\"index.php?post_format=$matches[1]\";s:12:\"robots\\.txt$\";s:18:\"index.php?robots=1\";s:48:\".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$\";s:18:\"index.php?feed=old\";s:20:\".*wp-app\\.php(/.*)?$\";s:19:\"index.php?error=403\";s:18:\".*wp-register.php$\";s:23:\"index.php?register=true\";s:32:\"feed/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:27:\"(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:8:\"embed/?$\";s:21:\"index.php?&embed=true\";s:20:\"page/?([0-9]{1,})/?$\";s:28:\"index.php?&paged=$matches[1]\";s:41:\"comments/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:36:\"comments/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:17:\"comments/embed/?$\";s:21:\"index.php?&embed=true\";s:44:\"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:39:\"search/(.+)/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:20:\"search/(.+)/embed/?$\";s:34:\"index.php?s=$matches[1]&embed=true\";s:32:\"search/(.+)/page/?([0-9]{1,})/?$\";s:41:\"index.php?s=$matches[1]&paged=$matches[2]\";s:14:\"search/(.+)/?$\";s:23:\"index.php?s=$matches[1]\";s:47:\"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:42:\"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:23:\"author/([^/]+)/embed/?$\";s:44:\"index.php?author_name=$matches[1]&embed=true\";s:35:\"author/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?author_name=$matches[1]&paged=$matches[2]\";s:17:\"author/([^/]+)/?$\";s:33:\"index.php?author_name=$matches[1]\";s:69:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:64:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:45:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/embed/?$\";s:74:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&embed=true\";s:57:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:39:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:56:\"([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:51:\"([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:32:\"([0-9]{4})/([0-9]{1,2})/embed/?$\";s:58:\"index.php?year=$matches[1]&monthnum=$matches[2]&embed=true\";s:44:\"([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:26:\"([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:43:\"([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:38:\"([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:19:\"([0-9]{4})/embed/?$\";s:37:\"index.php?year=$matches[1]&embed=true\";s:31:\"([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:13:\"([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:62:\"[0-9]{4}[0-9]{1,2}[0-9]{1,2}/[0-9]+.html/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:72:\"[0-9]{4}[0-9]{1,2}[0-9]{1,2}/[0-9]+.html/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:92:\"[0-9]{4}[0-9]{1,2}[0-9]{1,2}/[0-9]+.html/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:87:\"[0-9]{4}[0-9]{1,2}[0-9]{1,2}/[0-9]+.html/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:87:\"[0-9]{4}[0-9]{1,2}[0-9]{1,2}/[0-9]+.html/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:68:\"[0-9]{4}[0-9]{1,2}[0-9]{1,2}/[0-9]+.html/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:57:\"([0-9]{4})([0-9]{1,2})([0-9]{1,2})/([0-9]+).html/embed/?$\";s:88:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&p=$matches[4]&embed=true\";s:61:\"([0-9]{4})([0-9]{1,2})([0-9]{1,2})/([0-9]+).html/trackback/?$\";s:82:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&p=$matches[4]&tb=1\";s:81:\"([0-9]{4})([0-9]{1,2})([0-9]{1,2})/([0-9]+).html/feed/(feed|rdf|rss|rss2|atom)/?$\";s:94:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&p=$matches[4]&feed=$matches[5]\";s:76:\"([0-9]{4})([0-9]{1,2})([0-9]{1,2})/([0-9]+).html/(feed|rdf|rss|rss2|atom)/?$\";s:94:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&p=$matches[4]&feed=$matches[5]\";s:69:\"([0-9]{4})([0-9]{1,2})([0-9]{1,2})/([0-9]+).html/page/?([0-9]{1,})/?$\";s:95:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&p=$matches[4]&paged=$matches[5]\";s:76:\"([0-9]{4})([0-9]{1,2})([0-9]{1,2})/([0-9]+).html/comment-page-([0-9]{1,})/?$\";s:95:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&p=$matches[4]&cpage=$matches[5]\";s:65:\"([0-9]{4})([0-9]{1,2})([0-9]{1,2})/([0-9]+).html(?:/([0-9]+))?/?$\";s:94:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&p=$matches[4]&page=$matches[5]\";s:51:\"[0-9]{4}[0-9]{1,2}[0-9]{1,2}/[0-9]+.html/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:61:\"[0-9]{4}[0-9]{1,2}[0-9]{1,2}/[0-9]+.html/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:81:\"[0-9]{4}[0-9]{1,2}[0-9]{1,2}/[0-9]+.html/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:76:\"[0-9]{4}[0-9]{1,2}[0-9]{1,2}/[0-9]+.html/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:76:\"[0-9]{4}[0-9]{1,2}[0-9]{1,2}/[0-9]+.html/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:57:\"[0-9]{4}[0-9]{1,2}[0-9]{1,2}/[0-9]+.html/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:67:\"([0-9]{4})([0-9]{1,2})([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:62:\"([0-9]{4})([0-9]{1,2})([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:43:\"([0-9]{4})([0-9]{1,2})([0-9]{1,2})/embed/?$\";s:74:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&embed=true\";s:55:\"([0-9]{4})([0-9]{1,2})([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:62:\"([0-9]{4})([0-9]{1,2})([0-9]{1,2})/comment-page-([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&cpage=$matches[4]\";s:37:\"([0-9]{4})([0-9]{1,2})([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:27:\".?.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\".?.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:33:\".?.+?/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:16:\"(.?.+?)/embed/?$\";s:41:\"index.php?pagename=$matches[1]&embed=true\";s:20:\"(.?.+?)/trackback/?$\";s:35:\"index.php?pagename=$matches[1]&tb=1\";s:40:\"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:35:\"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:28:\"(.?.+?)/page/?([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&paged=$matches[2]\";s:35:\"(.?.+?)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&cpage=$matches[2]\";s:24:\"(.?.+?)(?:/([0-9]+))?/?$\";s:47:\"index.php?pagename=$matches[1]&page=$matches[2]\";}', 'yes'),
(100, 'widget_pages', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(101, 'widget_calendar', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(102, 'widget_tag_cloud', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(103, 'widget_nav_menu', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(104, 'cron', 'a:5:{i:1502439190;a:1:{s:11:\"wp_cache_gc\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:2:{s:8:\"schedule\";b:0;s:4:\"args\";a:0:{}}}}i:1502468788;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1502468819;a:1:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1502479351;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}s:7:\"version\";i:2;}', 'yes'),
(32032, 'widget_sf_widget_tagsmenu', 'a:3:{i:2;a:3:{s:10:\"widgetName\";s:6:\"分类\";s:9:\"menuDepth\";s:1:\"3\";s:11:\"defaultMenu\";s:0:\"\";}i:3;a:3:{s:10:\"widgetName\";s:6:\"分类\";s:9:\"menuDepth\";s:1:\"3\";s:11:\"defaultMenu\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(273, 'sm_options', 'a:51:{s:18:\"sm_b_prio_provider\";s:41:\"GoogleSitemapGeneratorPrioByCountProvider\";s:9:\"sm_b_ping\";b:1;s:10:\"sm_b_stats\";b:0;s:12:\"sm_b_pingmsn\";b:1;s:12:\"sm_b_autozip\";b:1;s:11:\"sm_b_memory\";s:0:\"\";s:9:\"sm_b_time\";i:-1;s:18:\"sm_b_style_default\";b:1;s:10:\"sm_b_style\";s:0:\"\";s:12:\"sm_b_baseurl\";s:0:\"\";s:11:\"sm_b_robots\";b:1;s:9:\"sm_b_html\";b:1;s:12:\"sm_b_exclude\";a:0:{}s:17:\"sm_b_exclude_cats\";a:0:{}s:10:\"sm_in_home\";b:1;s:11:\"sm_in_posts\";b:1;s:15:\"sm_in_posts_sub\";b:0;s:11:\"sm_in_pages\";b:1;s:10:\"sm_in_cats\";b:0;s:10:\"sm_in_arch\";b:0;s:10:\"sm_in_auth\";b:0;s:10:\"sm_in_tags\";b:0;s:9:\"sm_in_tax\";a:0:{}s:17:\"sm_in_customtypes\";a:0:{}s:13:\"sm_in_lastmod\";b:1;s:10:\"sm_cf_home\";s:5:\"daily\";s:11:\"sm_cf_posts\";s:7:\"monthly\";s:11:\"sm_cf_pages\";s:6:\"weekly\";s:10:\"sm_cf_cats\";s:6:\"weekly\";s:10:\"sm_cf_auth\";s:6:\"weekly\";s:15:\"sm_cf_arch_curr\";s:5:\"daily\";s:14:\"sm_cf_arch_old\";s:6:\"yearly\";s:10:\"sm_cf_tags\";s:6:\"weekly\";s:10:\"sm_pr_home\";d:1;s:11:\"sm_pr_posts\";d:0.59999999999999998;s:15:\"sm_pr_posts_min\";d:0.20000000000000001;s:11:\"sm_pr_pages\";d:0.59999999999999998;s:10:\"sm_pr_cats\";d:0.29999999999999999;s:10:\"sm_pr_arch\";d:0.29999999999999999;s:10:\"sm_pr_auth\";d:0.29999999999999999;s:10:\"sm_pr_tags\";d:0.29999999999999999;s:12:\"sm_i_donated\";b:0;s:17:\"sm_i_hide_donated\";b:0;s:17:\"sm_i_install_date\";i:1475867137;s:14:\"sm_i_hide_note\";b:0;s:15:\"sm_i_hide_works\";b:0;s:16:\"sm_i_hide_donors\";b:0;s:9:\"sm_i_hash\";s:20:\"fdc548106386b41eb670\";s:13:\"sm_i_lastping\";i:1475981503;s:16:\"sm_i_supportfeed\";b:1;s:22:\"sm_i_supportfeed_cache\";i:1475871134;}', 'yes'),
(261, 'ossdl_off_cdn_url', 'http://www.gzpblog.com', 'yes'),
(262, 'ossdl_off_include_dirs', 'wp-content,wp-includes', 'yes'),
(263, 'ossdl_off_exclude', '.php', 'yes'),
(264, 'ossdl_cname', '', 'yes'),
(41912, '_site_transient_timeout_theme_roots', '1502427404', 'no'),
(41913, '_site_transient_theme_roots', 'a:5:{s:10:\"Jumping-my\";s:7:\"/themes\";s:10:\"SaltedFish\";s:7:\"/themes\";s:13:\"twentyfifteen\";s:7:\"/themes\";s:15:\"twentyseventeen\";s:7:\"/themes\";s:13:\"twentysixteen\";s:7:\"/themes\";}', 'no'),
(146, 'widget_mutheme_widget_comment', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(147, 'widget_mutheme_widget_links', 'a:2:{i:2;a:1:{s:5:\"limit\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(165, 'nav_menu_options', 'a:2:{i:0;b:0;s:8:\"auto_add\";a:0:{}}', 'yes'),
(140, 'theme_mods_twentysixteen', 'a:3:{s:18:\"nav_menu_locations\";a:1:{s:4:\"navi\";i:62;}s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1484138324;s:4:\"data\";a:2:{s:19:\"wp_inactive_widgets\";a:3:{i:0;s:6:\"text-2\";i:1;s:11:\"tag_cloud-2\";i:2;s:24:\"post-specific-comments-2\";}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}}}}', 'yes'),
(12875, '_transient_twentysixteen_categories', '2', 'yes'),
(266, 'wpsupercache_count', '0', 'yes'),
(155, 'Kunkka_settings', 'a:7:{s:5:\"color\";s:3:\"red\";s:11:\"description\";s:45:\"分享知识，分享快乐，分享生活。\";s:8:\"keywords\";s:81:\"锅子,锅子博客,个人博客,独立博客,博客,程序员,奋斗的扫地工\";s:10:\"tag_number\";s:2:\"25\";s:3:\"cdn\";s:1:\"0\";s:6:\"avatar\";s:1:\"0\";s:15:\"register_widget\";s:1:\"1\";}', 'yes'),
(158, 'widget_links', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(1119, 'supercache_stats', 'a:3:{s:9:\"generated\";i:1501493268;s:10:\"supercache\";a:5:{s:7:\"expired\";i:0;s:6:\"cached\";i:0;s:5:\"fsize\";i:0;s:11:\"cached_list\";a:0:{}s:12:\"expired_list\";a:0:{}}s:7:\"wpcache\";a:5:{s:7:\"expired\";i:0;s:6:\"cached\";i:0;s:5:\"fsize\";i:0;s:11:\"cached_list\";a:0:{}s:12:\"expired_list\";a:0:{}}}', 'yes'),
(141, 'current_theme', 'SaltedFish', 'yes'),
(142, 'theme_mods_Kunkka', 'a:4:{i:0;b:0;s:18:\"nav_menu_locations\";a:1:{s:4:\"navi\";i:62;}s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1486838999;s:4:\"data\";a:2:{s:19:\"wp_inactive_widgets\";a:5:{i:0;s:6:\"meta-2\";i:1;s:8:\"search-2\";i:2;s:12:\"categories-2\";i:3;s:14:\"recent-posts-2\";i:4;s:17:\"recent-comments-2\";}s:12:\"sidebar-page\";a:7:{i:0;s:25:\"mutheme_widget_populars-2\";i:1;s:25:\"mutheme_widget_modified-2\";i:2;s:11:\"tag_cloud-2\";i:3;s:24:\"post-specific-comments-2\";i:4;s:22:\"mutheme_widget_links-2\";i:5;s:10:\"archives-2\";i:6;s:6:\"text-2\";}}}}', 'yes'),
(143, 'theme_switched', '', 'yes'),
(144, 'widget_mutheme_widget_populars', 'a:2:{i:2;a:1:{s:5:\"limit\";s:2:\"10\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(145, 'widget_mutheme_widget_modified', 'a:2:{i:2;a:1:{s:5:\"limit\";s:1:\"7\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(153, 'widget_views', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(152, 'views_options', 'a:11:{s:5:\"count\";i:1;s:12:\"exclude_bots\";i:1;s:12:\"display_home\";i:0;s:14:\"display_single\";i:0;s:12:\"display_page\";i:0;s:15:\"display_archive\";i:0;s:14:\"display_search\";i:0;s:13:\"display_other\";i:0;s:8:\"use_ajax\";i:0;s:8:\"template\";s:18:\"%VIEW_COUNT% views\";s:20:\"most_viewed_template\";s:93:\"<li><a href=\\\"%POST_URL%\\\"  title=\\\"%POST_TITLE%\\\">%POST_TITLE%</a> - %VIEW_COUNT% views</li>\";}', 'yes'),
(1120, 'preload_cache_counter', 'a:2:{s:1:\"c\";i:0;s:1:\"t\";i:1476358384;}', 'yes'),
(19523, '_site_transient_browser_f731f7616ab74b84eb6e37a4dee2a379', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:4:\"51.0\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"16\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(19540, '_site_transient_timeout_browser_e962b733612dd4249c54f83e15b3b715', '1489024876', 'no'),
(19541, '_site_transient_browser_e962b733612dd4249c54f83e15b3b715', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"56.0.2924.87\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(163, 'recently_activated', 'a:0:{}', 'yes'),
(268, 'wpsupercache_gc_time', '1502438590', 'yes'),
(866, 'ngg_transient_groups', 'a:4:{s:9:\"__counter\";i:4;s:3:\"MVC\";a:2:{s:2:\"id\";i:2;s:7:\"enabled\";b:1;}s:16:\"col_in_gzp_posts\";a:2:{s:2:\"id\";i:3;s:7:\"enabled\";b:1;}s:22:\"col_in_gzp_ngg_gallery\";a:2:{s:2:\"id\";i:4;s:7:\"enabled\";b:1;}}', 'yes'),
(193, 'widget_post-specific-comments', 'a:2:{i:2;a:7:{s:5:\"title\";s:12:\"最近评论\";s:6:\"number\";i:7;s:6:\"postID\";i:0;s:14:\"comment_format\";s:14:\"excerpt-author\";s:11:\"other_input\";s:0:\"\";s:14:\"excerpt_length\";i:30;s:13:\"excerpt_trail\";s:3:\"...\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(196, 'zh_cn_l10n_icp_num', '', 'yes'),
(1269, 'wpjam-qiniutek', 'a:22:{s:4:\"exts\";s:27:\"js|css|png|jpg|jpeg|gif|ico\";s:4:\"dirs\";s:22:\"wp-content|wp-includes\";s:5:\"local\";s:22:\"http://www.gzpblog.com\";s:5:\"wdith\";N;s:8:\"disslove\";s:3:\"100\";s:2:\"dx\";s:2:\"10\";s:2:\"dy\";s:2:\"10\";s:4:\"host\";s:22:\"http://www.gzpblog.com\";s:6:\"bucket\";s:7:\"gzpblog\";s:6:\"access\";s:40:\"KOPjccTDtFNbmpGjP1YJyMtm8zaXTz2C2f69LXIK\";s:6:\"secret\";s:40:\"M_GhIvC8b4kP4Z7W5Z4q04Zw_ESnueMJ0hmn_EOz\";s:7:\"default\";s:0:\"\";s:5:\"width\";s:0:\"\";s:10:\"exceptions\";s:0:\"\";s:9:\"watermark\";s:0:\"\";s:7:\"gravity\";s:9:\"SouthEast\";s:11:\"current_tab\";s:8:\"qiniutek\";s:6:\"jquery\";i:0;s:5:\"useso\";i:0;s:5:\"emoji\";i:0;s:8:\"advanced\";i:0;s:6:\"remote\";i:0;}', 'yes'),
(569, 'fancybox_enableImg', '1', 'yes'),
(570, 'fancybox_enableInline', '', 'yes'),
(571, 'fancybox_enablePDF', '', 'yes'),
(265, 'wpsupercache_start', '1475867043', 'yes'),
(861, 'fs_api_cache', 'a:0:{}', 'yes'),
(867, 'ngg_options', 'a:70:{s:11:\"gallerypath\";s:19:\"wp-content/gallery/\";s:11:\"wpmuCSSfile\";s:13:\"nggallery.css\";s:9:\"wpmuStyle\";b:0;s:9:\"wpmuRoles\";b:0;s:16:\"wpmuImportFolder\";b:0;s:13:\"wpmuZipUpload\";b:0;s:14:\"wpmuQuotaCheck\";b:0;s:17:\"datamapper_driver\";s:22:\"custom_post_datamapper\";s:21:\"gallerystorage_driver\";s:25:\"ngglegacy_gallery_storage\";s:20:\"maximum_entity_count\";i:500;s:17:\"router_param_slug\";s:9:\"nggallery\";s:22:\"router_param_separator\";s:2:\"--\";s:19:\"router_param_prefix\";s:0:\"\";s:9:\"deleteImg\";b:1;s:9:\"swfUpload\";b:1;s:13:\"usePermalinks\";b:0;s:13:\"permalinkSlug\";s:9:\"nggallery\";s:14:\"graphicLibrary\";s:2:\"gd\";s:14:\"imageMagickDir\";s:15:\"/usr/local/bin/\";s:11:\"useMediaRSS\";b:0;s:18:\"galleries_in_feeds\";b:0;s:12:\"activateTags\";i:0;s:10:\"appendType\";s:4:\"tags\";s:9:\"maxImages\";i:7;s:14:\"relatedHeading\";s:22:\"<h3>相关图像:</h3>\";s:10:\"thumbwidth\";i:240;s:11:\"thumbheight\";i:160;s:8:\"thumbfix\";b:1;s:12:\"thumbquality\";i:100;s:8:\"imgWidth\";i:800;s:9:\"imgHeight\";i:600;s:10:\"imgQuality\";i:100;s:9:\"imgBackup\";b:1;s:13:\"imgAutoResize\";b:0;s:9:\"galImages\";s:2:\"20\";s:17:\"galPagedGalleries\";i:0;s:10:\"galColumns\";i:0;s:12:\"galShowSlide\";b:1;s:12:\"galTextSlide\";s:17:\"[显示幻灯片]\";s:14:\"galTextGallery\";s:17:\"[显示缩略图]\";s:12:\"galShowOrder\";s:7:\"gallery\";s:7:\"galSort\";s:9:\"sortorder\";s:10:\"galSortDir\";s:3:\"ASC\";s:10:\"galNoPages\";b:1;s:13:\"galImgBrowser\";i:0;s:12:\"galHiddenImg\";i:0;s:10:\"galAjaxNav\";i:0;s:11:\"thumbEffect\";s:8:\"fancybox\";s:9:\"thumbCode\";s:41:\"class=\"ngg-fancybox\" rel=\"%GALLERY_NAME%\"\";s:18:\"thumbEffectContext\";s:14:\"nextgen_images\";s:5:\"wmPos\";s:8:\"botRight\";s:6:\"wmXpos\";i:5;s:6:\"wmYpos\";i:5;s:6:\"wmType\";s:5:\"image\";s:6:\"wmPath\";s:0:\"\";s:6:\"wmFont\";s:9:\"arial.ttf\";s:6:\"wmSize\";i:10;s:6:\"wmText\";s:12:\"锅子博客\";s:7:\"wmColor\";s:6:\"000000\";s:8:\"wmOpaque\";s:3:\"100\";s:7:\"slideFX\";s:4:\"fade\";s:7:\"irWidth\";i:600;s:8:\"irHeight\";i:400;s:12:\"irRotatetime\";i:10;s:11:\"activateCSS\";i:1;s:7:\"CSSfile\";s:13:\"nggallery.css\";s:28:\"always_enable_frontend_logic\";b:0;s:22:\"dynamic_thumbnail_slug\";s:13:\"nextgen-image\";s:23:\"dynamic_stylesheet_slug\";s:12:\"nextgen-dcss\";s:11:\"installDate\";i:1476177114;}', 'yes'),
(839, 'baidusubmit_sppasswd', '214d372c1bf46c0d\n\n1476169704', 'yes'),
(840, 'baidusubmit_pingtoken', '55d05dfd42f9b2042feb6d41eaed1984\n\n1488691001', 'yes'),
(841, 'baidusubmit_lastcrawl', '0:1488305641\n\n1488305641', 'yes'),
(836, 'baidusubmit_siteurl', 'http://www.gzpblog.com/\n\n1488691005', 'yes'),
(751, 'baidusubmit_enabled', '0\n\n1488691099', 'yes'),
(752, 'baidusubmit_installmaxtid', '278\n\n1476169704', 'yes'),
(633, 'xmlsf_ping', 'a:5:{s:6:\"google\";a:4:{s:6:\"active\";s:1:\"1\";s:3:\"uri\";s:52:\"http://www.google.com/webmasters/tools/ping?sitemap=\";s:4:\"type\";s:3:\"GET\";s:4:\"news\";s:1:\"1\";}s:4:\"bing\";a:5:{s:6:\"active\";s:1:\"1\";s:3:\"uri\";s:33:\"http://www.bing.com/ping?sitemap=\";s:4:\"type\";s:3:\"GET\";s:4:\"news\";s:1:\"1\";s:4:\"pong\";a:1:{s:11:\"sitemap.xml\";i:1501554228;}}s:6:\"yandex\";a:2:{s:3:\"uri\";s:32:\"http://ping.blogs.yandex.ru/RPC2\";s:4:\"type\";s:3:\"RPC\";}s:5:\"baidu\";a:3:{s:6:\"active\";s:1:\"1\";s:3:\"uri\";s:31:\"http://ping.baidu.com/ping/RPC2\";s:4:\"type\";s:3:\"RPC\";}s:6:\"others\";a:3:{s:6:\"active\";s:1:\"1\";s:3:\"uri\";s:26:\"http://rpc.pingomatic.com/\";s:4:\"type\";s:3:\"RPC\";}}', 'yes'),
(874, 'pope_module_list', 'a:34:{i:0;s:17:\"photocrati-fs|0.5\";i:1;s:19:\"photocrati-i18n|0.1\";i:2;s:25:\"photocrati-validation|0.1\";i:3;s:21:\"photocrati-router|0.7\";i:4;s:32:\"photocrati-wordpress_routing|0.7\";i:5;s:23:\"photocrati-security|0.2\";i:6;s:31:\"photocrati-nextgen_settings|0.9\";i:7;s:18:\"photocrati-mvc|0.7\";i:8;s:19:\"photocrati-ajax|0.9\";i:9;s:26:\"photocrati-datamapper|0.10\";i:10;s:30:\"photocrati-nextgen-legacy|0.16\";i:11;s:28:\"photocrati-nextgen-data|0.12\";i:12;s:33:\"photocrati-dynamic_thumbnails|0.6\";i:13;s:29:\"photocrati-nextgen_admin|0.10\";i:14;s:39:\"photocrati-nextgen_gallery_display|0.14\";i:15;s:34:\"photocrati-frame_communication|0.4\";i:16;s:30:\"photocrati-attach_to_post|0.14\";i:17;s:38:\"photocrati-nextgen_addgallery_page|0.7\";i:18;s:36:\"photocrati-nextgen_other_options|0.8\";i:19;s:33:\"photocrati-nextgen_pagination|0.3\";i:20;s:33:\"photocrati-dynamic_stylesheet|0.3\";i:21;s:34:\"photocrati-nextgen_pro_upgrade|0.5\";i:22;s:20:\"photocrati-cache|0.2\";i:23;s:24:\"photocrati-lightbox|0.16\";i:24;s:38:\"photocrati-nextgen_basic_templates|0.6\";i:25;s:37:\"photocrati-nextgen_basic_gallery|0.15\";i:26;s:42:\"photocrati-nextgen_basic_imagebrowser|0.11\";i:27;s:39:\"photocrati-nextgen_basic_singlepic|0.12\";i:28;s:38:\"photocrati-nextgen_basic_tagcloud|0.11\";i:29;s:35:\"photocrati-nextgen_basic_album|0.13\";i:30;s:21:\"photocrati-widget|0.5\";i:31;s:33:\"photocrati-third_party_compat|0.4\";i:32;s:29:\"photocrati-nextgen_xmlrpc|0.5\";i:33;s:20:\"photocrati-wpcli|0.1\";}', 'yes'),
(12998, '_site_transient_timeout_browser_924c6c19d98962daa31c739dfebb8b86', '1484791342', 'no'),
(12999, '_site_transient_browser_924c6c19d98962daa31c739dfebb8b86', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"54.0.2840.87\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(287, 'sm_status', 'O:28:\"GoogleSitemapGeneratorStatus\":4:{s:39:\"\0GoogleSitemapGeneratorStatus\0startTime\";d:1475981482.4172859;s:37:\"\0GoogleSitemapGeneratorStatus\0endTime\";d:1475981492.635113;s:41:\"\0GoogleSitemapGeneratorStatus\0pingResults\";a:2:{s:6:\"google\";a:5:{s:9:\"startTime\";d:1475981482.4189529;s:7:\"endTime\";d:1475981492.4191091;s:7:\"success\";b:0;s:3:\"url\";s:97:\"http://www.google.com/webmasters/sitemaps/ping?sitemap=http%3A%2F%2Fwww.gzpblog.com%2Fsitemap.xml\";s:4:\"name\";s:6:\"Google\";}s:4:\"bing\";a:5:{s:9:\"startTime\";d:1475981492.420572;s:7:\"endTime\";d:1475981492.6325819;s:7:\"success\";b:1;s:3:\"url\";s:90:\"http://www.bing.com/webmaster/ping.aspx?siteMap=http%3A%2F%2Fwww.gzpblog.com%2Fsitemap.xml\";s:4:\"name\";s:4:\"Bing\";}}s:38:\"\0GoogleSitemapGeneratorStatus\0autoSave\";b:1;}', 'no'),
(572, 'fancybox_enableSWF', '', 'yes'),
(573, 'fancybox_enableSVG', '', 'yes'),
(574, 'fancybox_enableYoutube', '', 'yes'),
(414, 'syntaxhighlighter_settings', 'a:15:{s:9:\"shversion\";i:3;s:5:\"theme\";s:7:\"default\";s:6:\"gutter\";i:1;s:9:\"smarttabs\";i:1;s:9:\"wraplines\";i:1;s:9:\"classname\";s:0:\"\";s:9:\"firstline\";i:1;s:14:\"padlinenumbers\";s:4:\"true\";s:7:\"tabsize\";i:4;s:5:\"title\";s:0:\"\";s:14:\"loadallbrushes\";i:0;s:9:\"autolinks\";i:0;s:8:\"collapse\";i:0;s:5:\"light\";i:0;s:7:\"toolbar\";i:0;}', 'yes'),
(523, 'widget_wkc_recent_comments', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(537, 'wpseo', 'a:20:{s:14:\"blocking_files\";a:0:{}s:15:\"ms_defaults_set\";b:0;s:7:\"version\";s:5:\"3.6.1\";s:12:\"company_logo\";s:0:\"\";s:12:\"company_name\";s:0:\"\";s:17:\"company_or_person\";s:0:\"\";s:20:\"disableadvanced_meta\";b:1;s:19:\"onpage_indexability\";b:1;s:12:\"googleverify\";s:0:\"\";s:8:\"msverify\";s:0:\"\";s:11:\"person_name\";s:0:\"\";s:12:\"website_name\";s:0:\"\";s:22:\"alternate_website_name\";s:0:\"\";s:12:\"yandexverify\";s:0:\"\";s:9:\"site_type\";s:0:\"\";s:20:\"has_multiple_authors\";b:0;s:16:\"environment_type\";s:0:\"\";s:20:\"enable_setting_pages\";b:0;s:21:\"enable_admin_bar_menu\";b:1;s:22:\"show_onboarding_notice\";b:1;}', 'yes'),
(538, 'wpseo_permalinks', 'a:9:{s:15:\"cleanpermalinks\";b:0;s:24:\"cleanpermalink-extravars\";s:0:\"\";s:29:\"cleanpermalink-googlecampaign\";b:0;s:31:\"cleanpermalink-googlesitesearch\";b:0;s:15:\"cleanreplytocom\";b:0;s:10:\"cleanslugs\";b:1;s:18:\"redirectattachment\";b:0;s:17:\"stripcategorybase\";b:0;s:13:\"trailingslash\";b:0;}', 'yes'),
(539, 'wpseo_titles', 'a:56:{s:10:\"title_test\";i:0;s:17:\"forcerewritetitle\";b:0;s:23:\"content-analysis-active\";b:1;s:23:\"keyword-analysis-active\";b:1;s:9:\"separator\";s:7:\"sc-dash\";s:5:\"noodp\";b:0;s:15:\"usemetakeywords\";b:0;s:16:\"title-home-wpseo\";s:42:\"%%sitename%% %%page%% %%sep%% %%sitedesc%%\";s:18:\"title-author-wpseo\";s:41:\"%%name%%, Author at %%sitename%% %%page%%\";s:19:\"title-archive-wpseo\";s:38:\"%%date%% %%page%% %%sep%% %%sitename%%\";s:18:\"title-search-wpseo\";s:63:\"You searched for %%searchphrase%% %%page%% %%sep%% %%sitename%%\";s:15:\"title-404-wpseo\";s:35:\"Page not found %%sep%% %%sitename%%\";s:19:\"metadesc-home-wpseo\";s:0:\"\";s:21:\"metadesc-author-wpseo\";s:0:\"\";s:22:\"metadesc-archive-wpseo\";s:0:\"\";s:18:\"metakey-home-wpseo\";s:0:\"\";s:20:\"metakey-author-wpseo\";s:0:\"\";s:22:\"noindex-subpages-wpseo\";b:0;s:20:\"noindex-author-wpseo\";b:0;s:21:\"noindex-archive-wpseo\";b:1;s:14:\"disable-author\";b:0;s:12:\"disable-date\";b:0;s:19:\"disable-post_format\";b:0;s:10:\"title-post\";s:39:\"%%title%% %%page%% %%sep%% %%sitename%%\";s:13:\"metadesc-post\";s:0:\"\";s:12:\"metakey-post\";s:0:\"\";s:12:\"noindex-post\";b:0;s:13:\"showdate-post\";b:0;s:16:\"hideeditbox-post\";b:0;s:10:\"title-page\";s:39:\"%%title%% %%page%% %%sep%% %%sitename%%\";s:13:\"metadesc-page\";s:0:\"\";s:12:\"metakey-page\";s:0:\"\";s:12:\"noindex-page\";b:0;s:13:\"showdate-page\";b:0;s:16:\"hideeditbox-page\";b:0;s:16:\"title-attachment\";s:39:\"%%title%% %%page%% %%sep%% %%sitename%%\";s:19:\"metadesc-attachment\";s:0:\"\";s:18:\"metakey-attachment\";s:0:\"\";s:18:\"noindex-attachment\";b:0;s:19:\"showdate-attachment\";b:0;s:22:\"hideeditbox-attachment\";b:0;s:18:\"title-tax-category\";s:53:\"%%term_title%% Archives %%page%% %%sep%% %%sitename%%\";s:21:\"metadesc-tax-category\";s:0:\"\";s:20:\"metakey-tax-category\";s:0:\"\";s:24:\"hideeditbox-tax-category\";b:0;s:20:\"noindex-tax-category\";b:0;s:18:\"title-tax-post_tag\";s:53:\"%%term_title%% Archives %%page%% %%sep%% %%sitename%%\";s:21:\"metadesc-tax-post_tag\";s:0:\"\";s:20:\"metakey-tax-post_tag\";s:0:\"\";s:24:\"hideeditbox-tax-post_tag\";b:0;s:20:\"noindex-tax-post_tag\";b:0;s:21:\"title-tax-post_format\";s:53:\"%%term_title%% Archives %%page%% %%sep%% %%sitename%%\";s:24:\"metadesc-tax-post_format\";s:0:\"\";s:23:\"metakey-tax-post_format\";s:0:\"\";s:27:\"hideeditbox-tax-post_format\";b:0;s:23:\"noindex-tax-post_format\";b:1;}', 'yes'),
(540, 'wpseo_social', 'a:20:{s:9:\"fb_admins\";a:0:{}s:12:\"fbconnectkey\";s:32:\"837a26b4a341fc6c76e3293371241e09\";s:13:\"facebook_site\";s:0:\"\";s:13:\"instagram_url\";s:0:\"\";s:12:\"linkedin_url\";s:0:\"\";s:11:\"myspace_url\";s:0:\"\";s:16:\"og_default_image\";s:0:\"\";s:18:\"og_frontpage_title\";s:0:\"\";s:17:\"og_frontpage_desc\";s:0:\"\";s:18:\"og_frontpage_image\";s:0:\"\";s:9:\"opengraph\";b:1;s:13:\"pinterest_url\";s:0:\"\";s:15:\"pinterestverify\";s:0:\"\";s:14:\"plus-publisher\";s:0:\"\";s:7:\"twitter\";b:1;s:12:\"twitter_site\";s:0:\"\";s:17:\"twitter_card_type\";s:7:\"summary\";s:11:\"youtube_url\";s:0:\"\";s:15:\"google_plus_url\";s:0:\"\";s:10:\"fbadminapp\";s:0:\"\";}', 'yes'),
(541, 'wpseo_rss', 'a:2:{s:9:\"rssbefore\";s:0:\"\";s:8:\"rssafter\";s:53:\"The post %%POSTLINK%% appeared first on %%BLOGLINK%%.\";}', 'yes'),
(542, 'wpseo_internallinks', 'a:10:{s:20:\"breadcrumbs-404crumb\";s:25:\"Error 404: Page not found\";s:23:\"breadcrumbs-blog-remove\";b:0;s:20:\"breadcrumbs-boldlast\";b:0;s:25:\"breadcrumbs-archiveprefix\";s:12:\"Archives for\";s:18:\"breadcrumbs-enable\";b:0;s:16:\"breadcrumbs-home\";s:4:\"Home\";s:18:\"breadcrumbs-prefix\";s:0:\"\";s:24:\"breadcrumbs-searchprefix\";s:16:\"You searched for\";s:15:\"breadcrumbs-sep\";s:7:\"&raquo;\";s:23:\"post_types-post-maintax\";i:0;}', 'yes'),
(543, 'wpseo_xml', 'a:16:{s:22:\"disable_author_sitemap\";b:1;s:22:\"disable_author_noposts\";b:1;s:16:\"enablexmlsitemap\";b:1;s:16:\"entries-per-page\";i:1000;s:14:\"excluded-posts\";s:0:\"\";s:38:\"user_role-administrator-not_in_sitemap\";b:0;s:31:\"user_role-editor-not_in_sitemap\";b:0;s:31:\"user_role-author-not_in_sitemap\";b:0;s:36:\"user_role-contributor-not_in_sitemap\";b:0;s:35:\"user_role-subscriber-not_in_sitemap\";b:0;s:30:\"post_types-post-not_in_sitemap\";b:0;s:30:\"post_types-page-not_in_sitemap\";b:0;s:36:\"post_types-attachment-not_in_sitemap\";b:1;s:34:\"taxonomies-category-not_in_sitemap\";b:0;s:34:\"taxonomies-post_tag-not_in_sitemap\";b:0;s:37:\"taxonomies-post_format-not_in_sitemap\";b:0;}', 'yes'),
(544, 'wpseo_flush_rewrite', '1', 'yes'),
(871, 'ngg_db_version', '1.8.1', 'yes'),
(863, 'widget_ngg-images', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(864, 'widget_ngg-mrssw', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(865, 'widget_slideshow', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(859, 'fs_debug_mode', '', 'yes'),
(860, 'fs_accounts', 'a:7:{s:11:\"plugin_data\";a:1:{s:15:\"nextgen-gallery\";a:14:{s:16:\"plugin_main_file\";O:8:\"stdClass\":1:{s:4:\"path\";s:80:\"/data/home/qxu1192070097/htdocs/wp-content/plugins/nextgen-gallery/nggallery.php\";}s:17:\"install_timestamp\";i:1476177097;s:16:\"sdk_last_version\";N;s:11:\"sdk_version\";s:7:\"1.1.8.1\";s:16:\"sdk_upgrade_mode\";b:1;s:18:\"sdk_downgrade_mode\";b:0;s:19:\"plugin_last_version\";N;s:14:\"plugin_version\";s:6:\"2.1.50\";s:19:\"plugin_upgrade_mode\";b:1;s:21:\"plugin_downgrade_mode\";b:0;s:17:\"connectivity_test\";a:6:{s:12:\"is_connected\";b:1;s:4:\"host\";s:15:\"www.gzpblog.com\";s:9:\"server_ip\";s:12:\"58.246.77.26\";s:9:\"is_active\";b:1;s:9:\"timestamp\";i:1476177097;s:7:\"version\";s:6:\"2.1.50\";}s:21:\"is_plugin_new_install\";b:1;s:12:\"is_anonymous\";a:3:{s:2:\"is\";b:1;s:9:\"timestamp\";i:1476177110;s:7:\"version\";s:6:\"2.1.50\";}s:22:\"install_sync_timestamp\";i:1476177228;}}s:13:\"file_slug_map\";a:1:{s:29:\"nextgen-gallery/nggallery.php\";s:15:\"nextgen-gallery\";}s:7:\"plugins\";a:1:{s:15:\"nextgen-gallery\";O:9:\"FS_Plugin\":15:{s:16:\"parent_plugin_id\";N;s:5:\"title\";s:14:\"NextGEN 图库\";s:4:\"slug\";s:15:\"nextgen-gallery\";s:4:\"file\";s:29:\"nextgen-gallery/nggallery.php\";s:7:\"version\";s:6:\"2.1.50\";s:11:\"auto_update\";N;s:4:\"info\";N;s:10:\"is_premium\";b:0;s:7:\"is_live\";b:1;s:10:\"public_key\";s:32:\"pk_009356711cd548837f074e1ef60a4\";s:10:\"secret_key\";N;s:2:\"id\";s:3:\"266\";s:7:\"updated\";N;s:7:\"created\";N;s:22:\"\0FS_Entity\0_is_updated\";b:0;}}s:9:\"unique_id\";s:32:\"b9b59f68a56bbcb0d71121b8d8db7fe8\";s:13:\"admin_notices\";a:1:{s:15:\"nextgen-gallery\";a:0:{}}s:11:\"all_plugins\";O:8:\"stdClass\":3:{s:9:\"timestamp\";i:1476177228;s:3:\"md5\";s:32:\"5737f51832f3149687ab8cb862fd6c01\";s:7:\"plugins\";a:9:{s:19:\"akismet/akismet.php\";a:5:{s:4:\"slug\";s:7:\"akismet\";s:7:\"version\";s:3:\"3.2\";s:5:\"title\";s:7:\"Akismet\";s:9:\"is_active\";b:0;s:14:\"is_uninstalled\";b:0;}s:20:\"baidusubmit/main.php\";a:5:{s:4:\"slug\";s:11:\"baidusubmit\";s:7:\"version\";s:4:\"v1.0\";s:5:\"title\";s:14:\"Baidu Sitemaps\";s:9:\"is_active\";b:1;s:14:\"is_uninstalled\";b:0;}s:29:\"nextgen-gallery/nggallery.php\";a:5:{s:4:\"slug\";s:15:\"nextgen-gallery\";s:7:\"version\";s:6:\"2.1.50\";s:5:\"title\";s:15:\"NextGEN Gallery\";s:9:\"is_active\";b:0;s:14:\"is_uninstalled\";b:0;}s:63:\"post-specific-comments-widget/post-specific-comments-widget.php\";a:5:{s:4:\"slug\";s:29:\"post-specific-comments-widget\";s:7:\"version\";s:5:\"1.2.3\";s:5:\"title\";s:36:\"Post-Specific Comments Widget (PSCW)\";s:9:\"is_active\";b:1;s:14:\"is_uninstalled\";b:0;}s:39:\"syntaxhighlighter/syntaxhighlighter.php\";a:5:{s:4:\"slug\";s:17:\"syntaxhighlighter\";s:7:\"version\";s:5:\"3.2.1\";s:5:\"title\";s:25:\"SyntaxHighlighter Evolved\";s:9:\"is_active\";b:1;s:14:\"is_uninstalled\";b:0;}s:29:\"wp-postviews/wp-postviews.php\";a:5:{s:4:\"slug\";s:12:\"wp-postviews\";s:7:\"version\";s:4:\"1.73\";s:5:\"title\";s:12:\"WP-PostViews\";s:9:\"is_active\";b:1;s:14:\"is_uninstalled\";b:0;}s:27:\"wp-super-cache/wp-cache.php\";a:5:{s:4:\"slug\";s:14:\"wp-super-cache\";s:7:\"version\";s:5:\"1.4.8\";s:5:\"title\";s:14:\"WP Super Cache\";s:9:\"is_active\";b:1;s:14:\"is_uninstalled\";b:0;}s:17:\"wp-zan/wp-zan.php\";a:5:{s:4:\"slug\";s:6:\"wp-zan\";s:7:\"version\";s:6:\"0.0.10\";s:5:\"title\";s:6:\"WP-Zan\";s:9:\"is_active\";b:1;s:14:\"is_uninstalled\";b:0;}s:32:\"xml-sitemap-feed/xml-sitemap.php\";a:5:{s:4:\"slug\";s:16:\"xml-sitemap-feed\";s:7:\"version\";s:5:\"4.7.4\";s:5:\"title\";s:31:\"XML Sitemap & Google News feeds\";s:9:\"is_active\";b:1;s:14:\"is_uninstalled\";b:0;}}}s:10:\"all_themes\";O:8:\"stdClass\":3:{s:9:\"timestamp\";i:1476177228;s:3:\"md5\";s:32:\"e1a00d33841b36ae954f50f8ac3523e0\";s:6:\"themes\";a:2:{s:6:\"Kunkka\";a:5:{s:4:\"slug\";s:6:\"Kunkka\";s:7:\"version\";s:5:\"1.0.6\";s:5:\"title\";s:6:\"Kunkka\";s:9:\"is_active\";b:1;s:14:\"is_uninstalled\";b:0;}s:13:\"twentysixteen\";a:5:{s:4:\"slug\";s:13:\"twentysixteen\";s:7:\"version\";s:3:\"1.3\";s:5:\"title\";s:14:\"Twenty Sixteen\";s:9:\"is_active\";b:0;s:14:\"is_uninstalled\";b:0;}}}}', 'yes'),
(1273, 'qiniutek_robots', 'User-agent: *\r\nDisallow: /\r\nUser-agent: Googlebot-Image\r\nAllow: /\r\nUser-agent: Baiduspider-image\r\nAllow: /\r\n		', 'yes'),
(555, 'xmlsf_sitemaps', 'a:1:{s:7:\"sitemap\";s:11:\"sitemap.xml\";}', 'yes'),
(556, 'xmlsf_robots', '', 'yes'),
(557, 'xmlsf_post_types', 'a:2:{s:4:\"post\";a:6:{s:4:\"name\";s:4:\"post\";s:6:\"active\";s:1:\"1\";s:7:\"archive\";s:0:\"\";s:8:\"priority\";s:3:\"0.7\";s:16:\"dynamic_priority\";s:1:\"1\";s:4:\"tags\";a:1:{s:5:\"image\";s:8:\"attached\";}}s:4:\"page\";a:5:{s:4:\"name\";s:4:\"page\";s:6:\"active\";s:1:\"1\";s:8:\"priority\";s:3:\"0.3\";s:16:\"dynamic_priority\";s:1:\"1\";s:4:\"tags\";a:1:{s:5:\"image\";s:8:\"attached\";}}}', 'yes'),
(558, 'xmlsf_taxonomies', '', 'yes'),
(559, 'xmlsf_domains', '', 'yes'),
(560, 'xmlsf_urls', '', 'yes'),
(561, 'xmlsf_custom_sitemaps', 'a:0:{}', 'yes'),
(575, 'fancybox_enableVimeo', '', 'yes'),
(576, 'fancybox_enableDailymotion', '', 'yes'),
(577, 'fancybox_enableiFrame', '', 'yes'),
(578, 'fancybox_attributeLimit', '', 'yes'),
(579, 'fancybox_autoClick', '1', 'yes'),
(580, 'fancybox_metaData', '', 'yes'),
(581, 'fancybox_overlayShow', '1', 'yes'),
(582, 'fancybox_hideOnOverlayClick', '1', 'yes'),
(583, 'fancybox_overlayOpacity', '', 'yes'),
(584, 'fancybox_overlayColor', '', 'yes'),
(585, 'fancybox_overlaySpotlight', '', 'yes'),
(586, 'fancybox_showCloseButton', '1', 'yes'),
(587, 'fancybox_backgroundColor', '', 'yes'),
(588, 'fancybox_textColor', '', 'yes'),
(589, 'fancybox_titleColor', '', 'yes'),
(590, 'fancybox_paddingColor', '', 'yes'),
(591, 'fancybox_borderRadius', '', 'yes'),
(592, 'fancybox_width', '', 'yes'),
(593, 'fancybox_height', '', 'yes'),
(594, 'fancybox_padding', '', 'yes'),
(595, 'fancybox_centerOnScroll', '1', 'yes'),
(596, 'fancybox_enableEscapeButton', '1', 'yes'),
(597, 'fancybox_autoScale', '1', 'yes'),
(598, 'fancybox_speedIn', '', 'yes'),
(599, 'fancybox_speedOut', '', 'yes'),
(600, 'fancybox_compatIE6', '', 'yes'),
(601, 'fancybox_compatIE8', '', 'yes'),
(602, 'fancybox_autoAttribute', '.jpg .jpeg .png', 'yes'),
(603, 'fancybox_autoAttributeLimit', '', 'yes'),
(604, 'fancybox_transitionIn', 'elastic', 'yes'),
(605, 'fancybox_easingIn', 'easeOutBack', 'yes'),
(606, 'fancybox_transitionOut', 'elastic', 'yes'),
(607, 'fancybox_easingOut', 'easeInBack', 'yes'),
(608, 'fancybox_opacity', '', 'yes'),
(609, 'fancybox_hideOnContentClick', '', 'yes'),
(610, 'fancybox_titleShow', '1', 'yes'),
(611, 'fancybox_titlePosition', 'over', 'yes'),
(612, 'fancybox_titleFromAlt', '1', 'yes'),
(613, 'fancybox_autoGallery', '1', 'yes'),
(614, 'fancybox_showNavArrows', '1', 'yes'),
(615, 'fancybox_enableKeyboardNav', '1', 'yes'),
(616, 'fancybox_mouseWheel', '1', 'yes'),
(617, 'fancybox_cyclic', '', 'yes'),
(618, 'fancybox_changeSpeed', '', 'yes'),
(619, 'fancybox_changeFade', '', 'yes'),
(620, 'fancybox_autoSelector', 'div.gallery', 'yes');
INSERT INTO `gzp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(626, 'mfbfw', 'a:47:{s:6:\"border\";s:0:\"\";s:11:\"borderColor\";s:7:\"#BBBBBB\";s:15:\"showCloseButton\";s:2:\"on\";s:11:\"closeHorPos\";s:5:\"right\";s:11:\"closeVerPos\";s:3:\"top\";s:12:\"paddingColor\";s:7:\"#FFFFFF\";s:7:\"padding\";s:2:\"10\";s:11:\"overlayShow\";s:2:\"on\";s:12:\"overlayColor\";s:7:\"#666666\";s:14:\"overlayOpacity\";s:3:\"0.3\";s:9:\"titleShow\";s:2:\"on\";s:13:\"titlePosition\";s:6:\"inside\";s:10:\"titleColor\";s:7:\"#333333\";s:13:\"showNavArrows\";s:2:\"on\";s:11:\"zoomOpacity\";s:2:\"on\";s:11:\"zoomSpeedIn\";s:3:\"500\";s:12:\"zoomSpeedOut\";s:3:\"500\";s:15:\"zoomSpeedChange\";s:3:\"300\";s:12:\"transitionIn\";s:4:\"fade\";s:13:\"transitionOut\";s:4:\"fade\";s:6:\"easing\";s:0:\"\";s:8:\"easingIn\";s:11:\"easeOutBack\";s:9:\"easingOut\";s:10:\"easeInBack\";s:12:\"easingChange\";s:14:\"easeInOutQuart\";s:10:\"imageScale\";s:2:\"on\";s:14:\"centerOnScroll\";s:2:\"on\";s:18:\"hideOnContentClick\";s:0:\"\";s:18:\"hideOnOverlayClick\";s:2:\"on\";s:18:\"enableEscapeButton\";s:2:\"on\";s:6:\"cyclic\";s:0:\"\";s:10:\"mouseWheel\";s:0:\"\";s:11:\"galleryType\";s:3:\"all\";s:16:\"customExpression\";s:74:\"jQuery(thumbnails).addClass(\"fancybox\").attr(\"rel\",\"fancybox\").getTitle();\";s:14:\"autoDimensions\";s:2:\"on\";s:10:\"frameWidth\";s:3:\"560\";s:11:\"frameHeight\";s:3:\"340\";s:12:\"loadAtFooter\";s:0:\"\";s:14:\"callbackEnable\";s:0:\"\";s:15:\"callbackOnStart\";s:31:\"function() { alert(\"Start!\"); }\";s:16:\"callbackOnCancel\";s:32:\"function() { alert(\"Cancel!\"); }\";s:18:\"callbackOnComplete\";s:34:\"function() { alert(\"Complete!\"); }\";s:17:\"callbackOnCleanup\";s:33:\"function() { alert(\"CleanUp!\"); }\";s:15:\"callbackOnClose\";s:31:\"function() { alert(\"Close!\"); }\";s:8:\"nojQuery\";s:0:\"\";s:16:\"extraCallsEnable\";s:0:\"\";s:14:\"extraCallsData\";s:0:\"\";s:9:\"uninstall\";s:0:\"\";}', 'yes'),
(627, 'mfbfw_active_version', '3.0.12', 'yes'),
(753, 'baidusubmit_openping', '0\n\n1488691028', 'yes'),
(741, 'fancyzoom_dir', '/wp-content/plugins/wp-fancyzoom', 'yes'),
(742, 'popim_compat', '', 'yes'),
(870, 'photocrati_auto_update_admin_check_date', '', 'yes'),
(869, 'photocrati_auto_update_admin_update_list', '', 'yes'),
(13175, 'theme_mods_twentyseventeen', 'a:3:{s:18:\"custom_css_post_id\";i:-1;s:18:\"nav_menu_locations\";a:1:{s:11:\"header_menu\";i:62;}s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1496339126;s:4:\"data\";a:4:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:3:{i:0;s:11:\"tag_cloud-2\";i:1;s:10:\"archives-2\";i:2;s:6:\"text-2\";}s:9:\"sidebar-2\";a:0:{}s:9:\"sidebar-3\";N;}}}', 'yes'),
(17407, 'widget_jumping_widget_comment', 'a:2:{s:12:\"_multiwidget\";i:1;i:5;a:1:{s:5:\"limit\";s:1:\"7\";}}', 'yes'),
(17408, 'widget_jumping_widget_archive', 'a:2:{s:12:\"_multiwidget\";i:1;i:5;a:0:{}}', 'yes'),
(17405, 'widget_jumping_widget_new', 'a:2:{s:12:\"_multiwidget\";i:1;i:5;a:1:{s:5:\"limit\";s:2:\"10\";}}', 'yes'),
(17406, 'widget_jumping_widget_label', 'a:2:{s:12:\"_multiwidget\";i:1;i:5;a:0:{}}', 'yes'),
(17402, 'external_theme_updates-Kunkka', 'O:8:\"stdClass\":3:{s:9:\"lastCheck\";i:1486838859;s:14:\"checkedVersion\";s:5:\"1.0.6\";s:6:\"update\";N;}', 'yes'),
(17404, 'widget_jumping_widget_populars', 'a:2:{s:12:\"_multiwidget\";i:1;i:5;a:1:{s:5:\"limit\";s:2:\"10\";}}', 'yes'),
(8497, 'can_compress_scripts', '0', 'no'),
(857, 'ngg_run_freemius', '1', 'yes'),
(858, 'fs_active_plugins', 'O:8:\"stdClass\":2:{s:7:\"plugins\";a:1:{s:24:\"nextgen-gallery/freemius\";O:8:\"stdClass\":3:{s:7:\"version\";s:7:\"1.1.8.1\";s:9:\"timestamp\";i:1476177228;s:11:\"plugin_path\";s:29:\"nextgen-gallery/nggallery.php\";}}s:6:\"newest\";O:8:\"stdClass\":5:{s:11:\"plugin_path\";s:29:\"nextgen-gallery/nggallery.php\";s:8:\"sdk_path\";s:24:\"nextgen-gallery/freemius\";s:7:\"version\";s:7:\"1.1.8.1\";s:13:\"in_activation\";b:1;s:9:\"timestamp\";i:1476177228;}}', 'yes'),
(40335, '_transient_timeout_plugin_slugs', '1502427877', 'no'),
(40336, '_transient_plugin_slugs', 'a:7:{i:0;s:25:\"aliyun-oss/aliyun-oss.php\";i:1;s:33:\"auto-highslide/auto-highslide.php\";i:2;s:20:\"baidusubmit/main.php\";i:3;s:39:\"syntaxhighlighter/syntaxhighlighter.php\";i:4;s:29:\"wp-postviews/wp-postviews.php\";i:5;s:27:\"wp-super-cache/wp-cache.php\";i:6;s:32:\"xml-sitemap-feed/xml-sitemap.php\";}', 'no'),
(40337, '_transient_timeout_dash_5438fb5baf31c513fff2b9a1067656a6', '1501507574', 'no'),
(13166, 'oss_options', 'a:11:{s:6:\"bucket\";s:7:\"gzpblog\";s:2:\"ak\";s:16:\"LTAIjdOBcYTDyLfH\";s:2:\"sk\";s:30:\"iTgEuqW3LZFzjrBZLJI8GJFwKgA1kC\";s:6:\"region\";s:15:\"oss-cn-shenzhen\";s:8:\"internal\";b:1;s:4:\"path\";s:2:\"wp\";s:10:\"static_url\";s:17:\"files.gzpblog.com\";s:9:\"img_style\";b:0;s:13:\"nolocalsaving\";b:0;s:11:\"img_service\";b:0;s:13:\"keep_settings\";b:0;}', 'yes'),
(9010, 'fresh_site', '0', 'yes'),
(32102, '_site_transient_timeout_poptags_40cd750bba9870f18aada2478b24840a', '1496329645', 'no'),
(32103, '_site_transient_poptags_40cd750bba9870f18aada2478b24840a', 'O:8:\"stdClass\":100:{s:6:\"widget\";a:3:{s:4:\"name\";s:6:\"widget\";s:4:\"slug\";s:6:\"widget\";s:5:\"count\";i:4340;}s:4:\"post\";a:3:{s:4:\"name\";s:4:\"post\";s:4:\"slug\";s:4:\"post\";s:5:\"count\";i:2478;}s:5:\"admin\";a:3:{s:4:\"name\";s:5:\"admin\";s:4:\"slug\";s:5:\"admin\";s:5:\"count\";i:2353;}s:11:\"woocommerce\";a:3:{s:4:\"name\";s:11:\"woocommerce\";s:4:\"slug\";s:11:\"woocommerce\";s:5:\"count\";i:2098;}s:5:\"posts\";a:3:{s:4:\"name\";s:5:\"posts\";s:4:\"slug\";s:5:\"posts\";s:5:\"count\";i:1819;}s:8:\"comments\";a:3:{s:4:\"name\";s:8:\"comments\";s:4:\"slug\";s:8:\"comments\";s:5:\"count\";i:1579;}s:9:\"shortcode\";a:3:{s:4:\"name\";s:9:\"shortcode\";s:4:\"slug\";s:9:\"shortcode\";s:5:\"count\";i:1557;}s:7:\"twitter\";a:3:{s:4:\"name\";s:7:\"twitter\";s:4:\"slug\";s:7:\"twitter\";s:5:\"count\";i:1429;}s:6:\"google\";a:3:{s:4:\"name\";s:6:\"google\";s:4:\"slug\";s:6:\"google\";s:5:\"count\";i:1335;}s:6:\"images\";a:3:{s:4:\"name\";s:6:\"images\";s:4:\"slug\";s:6:\"images\";s:5:\"count\";i:1322;}s:8:\"facebook\";a:3:{s:4:\"name\";s:8:\"facebook\";s:4:\"slug\";s:8:\"facebook\";s:5:\"count\";i:1316;}s:7:\"sidebar\";a:3:{s:4:\"name\";s:7:\"sidebar\";s:4:\"slug\";s:7:\"sidebar\";s:5:\"count\";i:1267;}s:5:\"image\";a:3:{s:4:\"name\";s:5:\"image\";s:4:\"slug\";s:5:\"image\";s:5:\"count\";i:1265;}s:3:\"seo\";a:3:{s:4:\"name\";s:3:\"seo\";s:4:\"slug\";s:3:\"seo\";s:5:\"count\";i:1106;}s:7:\"gallery\";a:3:{s:4:\"name\";s:7:\"gallery\";s:4:\"slug\";s:7:\"gallery\";s:5:\"count\";i:1043;}s:4:\"page\";a:3:{s:4:\"name\";s:4:\"page\";s:4:\"slug\";s:4:\"page\";s:5:\"count\";i:1038;}s:6:\"social\";a:3:{s:4:\"name\";s:6:\"social\";s:4:\"slug\";s:6:\"social\";s:5:\"count\";i:983;}s:5:\"email\";a:3:{s:4:\"name\";s:5:\"email\";s:4:\"slug\";s:5:\"email\";s:5:\"count\";i:926;}s:5:\"links\";a:3:{s:4:\"name\";s:5:\"links\";s:4:\"slug\";s:5:\"links\";s:5:\"count\";i:812;}s:9:\"ecommerce\";a:3:{s:4:\"name\";s:9:\"ecommerce\";s:4:\"slug\";s:9:\"ecommerce\";s:5:\"count\";i:790;}s:5:\"login\";a:3:{s:4:\"name\";s:5:\"login\";s:4:\"slug\";s:5:\"login\";s:5:\"count\";i:785;}s:7:\"widgets\";a:3:{s:4:\"name\";s:7:\"widgets\";s:4:\"slug\";s:7:\"widgets\";s:5:\"count\";i:762;}s:5:\"video\";a:3:{s:4:\"name\";s:5:\"video\";s:4:\"slug\";s:5:\"video\";s:5:\"count\";i:760;}s:3:\"rss\";a:3:{s:4:\"name\";s:3:\"rss\";s:4:\"slug\";s:3:\"rss\";s:5:\"count\";i:665;}s:7:\"content\";a:3:{s:4:\"name\";s:7:\"content\";s:4:\"slug\";s:7:\"content\";s:5:\"count\";i:655;}s:10:\"buddypress\";a:3:{s:4:\"name\";s:10:\"buddypress\";s:4:\"slug\";s:10:\"buddypress\";s:5:\"count\";i:652;}s:4:\"spam\";a:3:{s:4:\"name\";s:4:\"spam\";s:4:\"slug\";s:4:\"spam\";s:5:\"count\";i:645;}s:5:\"pages\";a:3:{s:4:\"name\";s:5:\"pages\";s:4:\"slug\";s:5:\"pages\";s:5:\"count\";i:643;}s:6:\"jquery\";a:3:{s:4:\"name\";s:6:\"jquery\";s:4:\"slug\";s:6:\"jquery\";s:5:\"count\";i:634;}s:8:\"security\";a:3:{s:4:\"name\";s:8:\"security\";s:4:\"slug\";s:8:\"security\";s:5:\"count\";i:622;}s:6:\"slider\";a:3:{s:4:\"name\";s:6:\"slider\";s:4:\"slug\";s:6:\"slider\";s:5:\"count\";i:601;}s:4:\"ajax\";a:3:{s:4:\"name\";s:4:\"ajax\";s:4:\"slug\";s:4:\"ajax\";s:5:\"count\";i:590;}s:5:\"media\";a:3:{s:4:\"name\";s:5:\"media\";s:4:\"slug\";s:5:\"media\";s:5:\"count\";i:589;}s:4:\"feed\";a:3:{s:4:\"name\";s:4:\"feed\";s:4:\"slug\";s:4:\"feed\";s:5:\"count\";i:575;}s:9:\"analytics\";a:3:{s:4:\"name\";s:9:\"analytics\";s:4:\"slug\";s:9:\"analytics\";s:5:\"count\";i:574;}s:8:\"category\";a:3:{s:4:\"name\";s:8:\"category\";s:4:\"slug\";s:8:\"category\";s:5:\"count\";i:572;}s:6:\"search\";a:3:{s:4:\"name\";s:6:\"search\";s:4:\"slug\";s:6:\"search\";s:5:\"count\";i:566;}s:10:\"e-commerce\";a:3:{s:4:\"name\";s:10:\"e-commerce\";s:4:\"slug\";s:10:\"e-commerce\";s:5:\"count\";i:554;}s:4:\"menu\";a:3:{s:4:\"name\";s:4:\"menu\";s:4:\"slug\";s:4:\"menu\";s:5:\"count\";i:551;}s:5:\"embed\";a:3:{s:4:\"name\";s:5:\"embed\";s:4:\"slug\";s:5:\"embed\";s:5:\"count\";i:538;}s:10:\"javascript\";a:3:{s:4:\"name\";s:10:\"javascript\";s:4:\"slug\";s:10:\"javascript\";s:5:\"count\";i:530;}s:4:\"form\";a:3:{s:4:\"name\";s:4:\"form\";s:4:\"slug\";s:4:\"form\";s:5:\"count\";i:523;}s:4:\"link\";a:3:{s:4:\"name\";s:4:\"link\";s:4:\"slug\";s:4:\"link\";s:5:\"count\";i:518;}s:3:\"css\";a:3:{s:4:\"name\";s:3:\"css\";s:4:\"slug\";s:3:\"css\";s:5:\"count\";i:503;}s:5:\"share\";a:3:{s:4:\"name\";s:5:\"share\";s:4:\"slug\";s:5:\"share\";s:5:\"count\";i:497;}s:7:\"youtube\";a:3:{s:4:\"name\";s:7:\"youtube\";s:4:\"slug\";s:7:\"youtube\";s:5:\"count\";i:489;}s:7:\"comment\";a:3:{s:4:\"name\";s:7:\"comment\";s:4:\"slug\";s:7:\"comment\";s:5:\"count\";i:488;}s:5:\"theme\";a:3:{s:4:\"name\";s:5:\"theme\";s:4:\"slug\";s:5:\"theme\";s:5:\"count\";i:476;}s:10:\"responsive\";a:3:{s:4:\"name\";s:10:\"responsive\";s:4:\"slug\";s:10:\"responsive\";s:5:\"count\";i:465;}s:6:\"custom\";a:3:{s:4:\"name\";s:6:\"custom\";s:4:\"slug\";s:6:\"custom\";s:5:\"count\";i:464;}s:10:\"categories\";a:3:{s:4:\"name\";s:10:\"categories\";s:4:\"slug\";s:10:\"categories\";s:5:\"count\";i:462;}s:9:\"dashboard\";a:3:{s:4:\"name\";s:9:\"dashboard\";s:4:\"slug\";s:9:\"dashboard\";s:5:\"count\";i:459;}s:3:\"ads\";a:3:{s:4:\"name\";s:3:\"ads\";s:4:\"slug\";s:3:\"ads\";s:5:\"count\";i:440;}s:4:\"tags\";a:3:{s:4:\"name\";s:4:\"tags\";s:4:\"slug\";s:4:\"tags\";s:5:\"count\";i:434;}s:6:\"button\";a:3:{s:4:\"name\";s:6:\"button\";s:4:\"slug\";s:6:\"button\";s:5:\"count\";i:433;}s:9:\"affiliate\";a:3:{s:4:\"name\";s:9:\"affiliate\";s:4:\"slug\";s:9:\"affiliate\";s:5:\"count\";i:431;}s:6:\"editor\";a:3:{s:4:\"name\";s:6:\"editor\";s:4:\"slug\";s:6:\"editor\";s:5:\"count\";i:427;}s:5:\"photo\";a:3:{s:4:\"name\";s:5:\"photo\";s:4:\"slug\";s:5:\"photo\";s:5:\"count\";i:420;}s:12:\"contact-form\";a:3:{s:4:\"name\";s:12:\"contact form\";s:4:\"slug\";s:12:\"contact-form\";s:5:\"count\";i:412;}s:4:\"user\";a:3:{s:4:\"name\";s:4:\"user\";s:4:\"slug\";s:4:\"user\";s:5:\"count\";i:409;}s:9:\"slideshow\";a:3:{s:4:\"name\";s:9:\"slideshow\";s:4:\"slug\";s:9:\"slideshow\";s:5:\"count\";i:406;}s:6:\"mobile\";a:3:{s:4:\"name\";s:6:\"mobile\";s:4:\"slug\";s:6:\"mobile\";s:5:\"count\";i:401;}s:5:\"stats\";a:3:{s:4:\"name\";s:5:\"stats\";s:4:\"slug\";s:5:\"stats\";s:5:\"count\";i:399;}s:7:\"contact\";a:3:{s:4:\"name\";s:7:\"contact\";s:4:\"slug\";s:7:\"contact\";s:5:\"count\";i:396;}s:5:\"users\";a:3:{s:4:\"name\";s:5:\"users\";s:4:\"slug\";s:5:\"users\";s:5:\"count\";i:395;}s:6:\"photos\";a:3:{s:4:\"name\";s:6:\"photos\";s:4:\"slug\";s:6:\"photos\";s:5:\"count\";i:394;}s:10:\"statistics\";a:3:{s:4:\"name\";s:10:\"statistics\";s:4:\"slug\";s:10:\"statistics\";s:5:\"count\";i:376;}s:3:\"api\";a:3:{s:4:\"name\";s:3:\"api\";s:4:\"slug\";s:3:\"api\";s:5:\"count\";i:375;}s:10:\"navigation\";a:3:{s:4:\"name\";s:10:\"navigation\";s:4:\"slug\";s:10:\"navigation\";s:5:\"count\";i:365;}s:6:\"events\";a:3:{s:4:\"name\";s:6:\"events\";s:4:\"slug\";s:6:\"events\";s:5:\"count\";i:363;}s:4:\"news\";a:3:{s:4:\"name\";s:4:\"news\";s:4:\"slug\";s:4:\"news\";s:5:\"count\";i:350;}s:12:\"social-media\";a:3:{s:4:\"name\";s:12:\"social media\";s:4:\"slug\";s:12:\"social-media\";s:5:\"count\";i:332;}s:8:\"calendar\";a:3:{s:4:\"name\";s:8:\"calendar\";s:4:\"slug\";s:8:\"calendar\";s:5:\"count\";i:332;}s:7:\"plugins\";a:3:{s:4:\"name\";s:7:\"plugins\";s:4:\"slug\";s:7:\"plugins\";s:5:\"count\";i:331;}s:9:\"multisite\";a:3:{s:4:\"name\";s:9:\"multisite\";s:4:\"slug\";s:9:\"multisite\";s:5:\"count\";i:329;}s:10:\"shortcodes\";a:3:{s:4:\"name\";s:10:\"shortcodes\";s:4:\"slug\";s:10:\"shortcodes\";s:5:\"count\";i:322;}s:4:\"code\";a:3:{s:4:\"name\";s:4:\"code\";s:4:\"slug\";s:4:\"code\";s:5:\"count\";i:321;}s:4:\"meta\";a:3:{s:4:\"name\";s:4:\"meta\";s:4:\"slug\";s:4:\"meta\";s:5:\"count\";i:319;}s:4:\"list\";a:3:{s:4:\"name\";s:4:\"list\";s:4:\"slug\";s:4:\"list\";s:5:\"count\";i:317;}s:7:\"payment\";a:3:{s:4:\"name\";s:7:\"payment\";s:4:\"slug\";s:7:\"payment\";s:5:\"count\";i:317;}s:3:\"url\";a:3:{s:4:\"name\";s:3:\"url\";s:4:\"slug\";s:3:\"url\";s:5:\"count\";i:314;}s:10:\"newsletter\";a:3:{s:4:\"name\";s:10:\"newsletter\";s:4:\"slug\";s:10:\"newsletter\";s:5:\"count\";i:313;}s:9:\"marketing\";a:3:{s:4:\"name\";s:9:\"marketing\";s:4:\"slug\";s:9:\"marketing\";s:5:\"count\";i:296;}s:5:\"popup\";a:3:{s:4:\"name\";s:5:\"popup\";s:4:\"slug\";s:5:\"popup\";s:5:\"count\";i:294;}s:6:\"simple\";a:3:{s:4:\"name\";s:6:\"simple\";s:4:\"slug\";s:6:\"simple\";s:5:\"count\";i:293;}s:3:\"tag\";a:3:{s:4:\"name\";s:3:\"tag\";s:4:\"slug\";s:3:\"tag\";s:5:\"count\";i:292;}s:16:\"custom-post-type\";a:3:{s:4:\"name\";s:16:\"custom post type\";s:4:\"slug\";s:16:\"custom-post-type\";s:5:\"count\";i:287;}s:4:\"chat\";a:3:{s:4:\"name\";s:4:\"chat\";s:4:\"slug\";s:4:\"chat\";s:5:\"count\";i:285;}s:8:\"redirect\";a:3:{s:4:\"name\";s:8:\"redirect\";s:4:\"slug\";s:8:\"redirect\";s:5:\"count\";i:285;}s:11:\"advertising\";a:3:{s:4:\"name\";s:11:\"advertising\";s:4:\"slug\";s:11:\"advertising\";s:5:\"count\";i:280;}s:6:\"author\";a:3:{s:4:\"name\";s:6:\"author\";s:4:\"slug\";s:6:\"author\";s:5:\"count\";i:279;}s:7:\"adsense\";a:3:{s:4:\"name\";s:7:\"adsense\";s:4:\"slug\";s:7:\"adsense\";s:5:\"count\";i:277;}s:4:\"html\";a:3:{s:4:\"name\";s:4:\"html\";s:4:\"slug\";s:4:\"html\";s:5:\"count\";i:274;}s:8:\"lightbox\";a:3:{s:4:\"name\";s:8:\"lightbox\";s:4:\"slug\";s:8:\"lightbox\";s:5:\"count\";i:272;}s:5:\"forms\";a:3:{s:4:\"name\";s:5:\"forms\";s:4:\"slug\";s:5:\"forms\";s:5:\"count\";i:268;}s:15:\"payment-gateway\";a:3:{s:4:\"name\";s:15:\"payment gateway\";s:4:\"slug\";s:15:\"payment-gateway\";s:5:\"count\";i:267;}s:14:\"administration\";a:3:{s:4:\"name\";s:14:\"administration\";s:4:\"slug\";s:14:\"administration\";s:5:\"count\";i:263;}s:7:\"captcha\";a:3:{s:4:\"name\";s:7:\"captcha\";s:4:\"slug\";s:7:\"captcha\";s:5:\"count\";i:262;}s:12:\"notification\";a:3:{s:4:\"name\";s:12:\"notification\";s:4:\"slug\";s:12:\"notification\";s:5:\"count\";i:262;}s:5:\"cache\";a:3:{s:4:\"name\";s:5:\"cache\";s:4:\"slug\";s:5:\"cache\";s:5:\"count\";i:260;}}', 'no'),
(11495, '_site_transient_timeout_browser_c0c4b214efa9ca4534f836fa0c819716', '1483835442', 'no'),
(11496, '_site_transient_browser_c0c4b214efa9ca4534f836fa0c819716', 'a:9:{s:8:\"platform\";s:6:\"iPhone\";s:4:\"name\";s:6:\"iPhone\";s:7:\"version\";s:4:\"10.0\";s:10:\"update_url\";s:0:\"\";s:7:\"img_src\";s:0:\"\";s:11:\"img_src_ssl\";s:0:\"\";s:15:\"current_version\";s:0:\"\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(41100, '_site_transient_update_plugins', 'O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1502425607;s:8:\"response\";a:0:{}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:4:{s:39:\"syntaxhighlighter/syntaxhighlighter.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:31:\"w.org/plugins/syntaxhighlighter\";s:4:\"slug\";s:17:\"syntaxhighlighter\";s:6:\"plugin\";s:39:\"syntaxhighlighter/syntaxhighlighter.php\";s:11:\"new_version\";s:5:\"3.2.1\";s:3:\"url\";s:48:\"https://wordpress.org/plugins/syntaxhighlighter/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/syntaxhighlighter.zip\";}s:29:\"wp-postviews/wp-postviews.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:26:\"w.org/plugins/wp-postviews\";s:4:\"slug\";s:12:\"wp-postviews\";s:6:\"plugin\";s:29:\"wp-postviews/wp-postviews.php\";s:11:\"new_version\";s:4:\"1.75\";s:3:\"url\";s:43:\"https://wordpress.org/plugins/wp-postviews/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/wp-postviews.1.75.zip\";}s:27:\"wp-super-cache/wp-cache.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:28:\"w.org/plugins/wp-super-cache\";s:4:\"slug\";s:14:\"wp-super-cache\";s:6:\"plugin\";s:27:\"wp-super-cache/wp-cache.php\";s:11:\"new_version\";s:5:\"1.5.3\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/wp-super-cache/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/wp-super-cache.1.5.3.zip\";}s:32:\"xml-sitemap-feed/xml-sitemap.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:30:\"w.org/plugins/xml-sitemap-feed\";s:4:\"slug\";s:16:\"xml-sitemap-feed\";s:6:\"plugin\";s:32:\"xml-sitemap-feed/xml-sitemap.php\";s:11:\"new_version\";s:5:\"4.7.5\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/xml-sitemap-feed/\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/plugin/xml-sitemap-feed.4.7.5.zip\";}}}', 'no'),
(32029, 'theme_mods_SaltedFish-master', 'a:4:{i:0;b:0;s:18:\"nav_menu_locations\";a:2:{s:11:\"header_menu\";i:113;s:12:\"sidebar_menu\";i:115;}s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1496333040;s:4:\"data\";a:2:{s:19:\"wp_inactive_widgets\";a:3:{i:0;s:10:\"archives-2\";i:1;s:6:\"text-2\";i:2;s:11:\"tag_cloud-2\";}s:9:\"sidebar-1\";a:3:{i:0;s:20:\"sf_widget_tagsmenu-2\";i:1;s:15:\"sf_widget_new-2\";i:2;s:19:\"sf_widget_comment-2\";}}}}', 'yes'),
(32034, 'SaltedFish_settings', 'a:28:{s:11:\"description\";s:45:\"分享知识，分享快乐，分享生活。\";s:8:\"keywords\";s:81:\"锅子,锅子博客,个人博客,独立博客,博客,程序员,奋斗的扫地工\";s:9:\"thumbnail\";s:1:\"1\";s:16:\"index-fried-link\";s:12:\"首页友链\";s:18:\"inside-friend-link\";s:12:\"内页友链\";s:16:\"collection-links\";s:84:\"极客专属,行业资讯,网络安全,前端设计,学习平台,素材,工具大全\";s:11:\"author-name\";s:6:\"锅子\";s:10:\"weibo-link\";s:40:\"http://weibo.com/zpguo/home?wvr=5&lf=reg\";s:13:\"facebook-link\";s:1:\"#\";s:11:\"github-link\";s:24:\"https://github.com/ZpGuo\";s:12:\"footer-about\";s:138:\"本站是锅子的个人博客，专注于分享工作和学习中的收获，生活中的乐趣，个人的见解。欢迎沟通交流！\";s:21:\"index-carousel-title1\";s:34:\"用 Fiddler 进行HTTP请求调试\";s:19:\"index-carousel-url1\";s:42:\"https://www.gzpblog.com/20170629/1104.html\";s:19:\"index-carousel-img1\";s:55:\"https://files.gzpblog.com/wp/2017/06/Fiddler-banner.png\";s:21:\"index-carousel-title2\";s:35:\"Win10安装使用Docker for Windows\";s:19:\"index-carousel-url2\";s:42:\"https://www.gzpblog.com/20170705/1126.html\";s:19:\"index-carousel-img2\";s:53:\"https://files.gzpblog.com/wp/2017/07/docker-logo4.png\";s:21:\"index-carousel-title3\";s:26:\"HTTPS进阶优化（一）\";s:19:\"index-carousel-url3\";s:41:\"https://www.gzpblog.com/20170321/835.html\";s:19:\"index-carousel-img3\";s:54:\"https://files.gzpblog.com/wp/2017/03/https_youhua1.png\";s:14:\"index-subject1\";s:35:\"https://www.gzpblog.com/networktech\";s:14:\"index-subject2\";s:39:\"https://www.gzpblog.com/learningprogram\";s:11:\"index-tool1\";s:38:\"https://www.gzpblog.com/collectionlink\";s:11:\"index-tool2\";s:0:\"\";s:10:\"email-smtp\";s:18:\"smtp.mxhichina.com\";s:10:\"email-port\";s:2:\"80\";s:10:\"email-name\";s:13:\"gzp@goozp.com\";s:14:\"email-password\";s:16:\"max12369874000..\";}', 'yes'),
(28770, '_site_transient_timeout_browser_e82496ec92e47c6c84e6299ff05d2885', '1494827162', 'no'),
(28771, '_site_transient_browser_e82496ec92e47c6c84e6299ff05d2885', 'a:9:{s:8:\"platform\";s:6:\"iPhone\";s:4:\"name\";s:6:\"iPhone\";s:7:\"version\";s:4:\"10.0\";s:10:\"update_url\";s:0:\"\";s:7:\"img_src\";s:0:\"\";s:11:\"img_src_ssl\";s:0:\"\";s:15:\"current_version\";s:0:\"\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(28703, '_site_transient_timeout_browser_4f64163efb507a7d17ac9befe52a2bf8', '1494585020', 'no'),
(28704, '_site_transient_browser_4f64163efb507a7d17ac9befe52a2bf8', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"57.0.2987.137\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(32116, 'theme_mods_SaltedFish-my', 'a:4:{i:0;b:0;s:18:\"nav_menu_locations\";a:2:{s:11:\"header_menu\";i:113;s:12:\"sidebar_menu\";i:115;}s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1496339113;s:4:\"data\";a:2:{s:19:\"wp_inactive_widgets\";a:3:{i:0;s:10:\"archives-2\";i:1;s:6:\"text-2\";i:2;s:11:\"tag_cloud-2\";}s:9:\"sidebar-1\";a:3:{i:0;s:20:\"sf_widget_tagsmenu-2\";i:1;s:15:\"sf_widget_new-2\";i:2;s:19:\"sf_widget_comment-2\";}}}}', 'yes'),
(32123, 'theme_mods_SaltedFish', 'a:3:{i:0;b:0;s:18:\"nav_menu_locations\";a:2:{s:11:\"header_menu\";i:113;s:12:\"sidebar_menu\";i:115;}s:18:\"custom_css_post_id\";i:-1;}', 'yes'),
(39023, '_site_transient_timeout_browser_4543a78580082505a88283f6188f57b1', '1501204190', 'no'),
(39024, '_site_transient_browser_4543a78580082505a88283f6188f57b1', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"58.0.3029.81\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(25226, '_site_transient_timeout_browser_2580d5e8c328b508150838b559db836a', '1492362616', 'no'),
(24965, '_site_transient_timeout_browser_e46186a265995262ef17034c066b6561', '1492191676', 'no'),
(24966, '_site_transient_browser_e46186a265995262ef17034c066b6561', 'a:9:{s:8:\"platform\";s:6:\"iPhone\";s:4:\"name\";s:6:\"iPhone\";s:7:\"version\";s:8:\"537.51.1\";s:10:\"update_url\";s:0:\"\";s:7:\"img_src\";s:0:\"\";s:11:\"img_src_ssl\";s:0:\"\";s:15:\"current_version\";s:0:\"\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(32033, 'widget_sf_widget_comment', 'a:3:{i:2;a:1:{s:5:\"limit\";s:1:\"5\";}i:3;a:1:{s:5:\"limit\";s:1:\"5\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(28717, '_site_transient_timeout_browser_98e2ee8e09770f20f9abd781ab73fa07', '1494607025', 'no'),
(28718, '_site_transient_browser_98e2ee8e09770f20f9abd781ab73fa07', 'a:9:{s:8:\"platform\";s:6:\"iPhone\";s:4:\"name\";s:6:\"iPhone\";s:7:\"version\";s:8:\"537.51.1\";s:10:\"update_url\";s:0:\"\";s:7:\"img_src\";s:0:\"\";s:11:\"img_src_ssl\";s:0:\"\";s:15:\"current_version\";s:0:\"\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(34544, '_site_transient_timeout_browser_372b39fc0ede5776ae5d65b675deeef4', '1498482419', 'no'),
(34545, '_site_transient_browser_372b39fc0ede5776ae5d65b675deeef4', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:4:\"53.0\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"16\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(41836, '_site_transient_timeout_browser_e11f65c3aff55615784e60c881ae3917', '1502981373', 'no'),
(41837, '_site_transient_browser_e11f65c3aff55615784e60c881ae3917', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"59.0.3071.125\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(14849, '_site_transient_timeout_popular_importers_287342ceb3a5f2e9f2cdea96144883b1', '1485532821', 'no'),
(14850, '_site_transient_popular_importers_287342ceb3a5f2e9f2cdea96144883b1', 'a:2:{s:9:\"importers\";a:8:{s:7:\"blogger\";a:4:{s:4:\"name\";s:7:\"Blogger\";s:11:\"description\";s:54:\"Import posts, comments, and users from a Blogger blog.\";s:11:\"plugin-slug\";s:16:\"blogger-importer\";s:11:\"importer-id\";s:7:\"blogger\";}s:9:\"wpcat2tag\";a:4:{s:4:\"name\";s:29:\"Categories and Tags Converter\";s:11:\"description\";s:71:\"Convert existing categories to tags or tags to categories, selectively.\";s:11:\"plugin-slug\";s:18:\"wpcat2tag-importer\";s:11:\"importer-id\";s:10:\"wp-cat2tag\";}s:11:\"livejournal\";a:4:{s:4:\"name\";s:11:\"LiveJournal\";s:11:\"description\";s:46:\"Import posts from LiveJournal using their API.\";s:11:\"plugin-slug\";s:20:\"livejournal-importer\";s:11:\"importer-id\";s:11:\"livejournal\";}s:11:\"movabletype\";a:4:{s:4:\"name\";s:24:\"Movable Type and TypePad\";s:11:\"description\";s:62:\"Import posts and comments from a Movable Type or TypePad blog.\";s:11:\"plugin-slug\";s:20:\"movabletype-importer\";s:11:\"importer-id\";s:2:\"mt\";}s:4:\"opml\";a:4:{s:4:\"name\";s:8:\"Blogroll\";s:11:\"description\";s:28:\"Import links in OPML format.\";s:11:\"plugin-slug\";s:13:\"opml-importer\";s:11:\"importer-id\";s:4:\"opml\";}s:3:\"rss\";a:4:{s:4:\"name\";s:3:\"RSS\";s:11:\"description\";s:30:\"Import posts from an RSS feed.\";s:11:\"plugin-slug\";s:12:\"rss-importer\";s:11:\"importer-id\";s:3:\"rss\";}s:6:\"tumblr\";a:4:{s:4:\"name\";s:6:\"Tumblr\";s:11:\"description\";s:53:\"Import posts &amp; media from Tumblr using their API.\";s:11:\"plugin-slug\";s:15:\"tumblr-importer\";s:11:\"importer-id\";s:6:\"tumblr\";}s:9:\"wordpress\";a:4:{s:4:\"name\";s:9:\"WordPress\";s:11:\"description\";s:96:\"Import posts, pages, comments, custom fields, categories, and tags from a WordPress export file.\";s:11:\"plugin-slug\";s:18:\"wordpress-importer\";s:11:\"importer-id\";s:9:\"wordpress\";}}s:10:\"translated\";b:0;}', 'no'),
(17983, '_site_transient_timeout_browser_8c4a31a845f1ff9ae4d36fc2f0fe9e2d', '1488114908', 'no'),
(17984, '_site_transient_browser_8c4a31a845f1ff9ae4d36fc2f0fe9e2d', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"54.0.2840.100\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(8494, 'db_upgraded', '', 'yes'),
(17409, 'theme_mods_Jumping-master', 'a:3:{s:18:\"custom_css_post_id\";i:-1;s:18:\"nav_menu_locations\";a:1:{s:11:\"header_menu\";i:62;}s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1486839692;s:4:\"data\";a:3:{s:19:\"wp_inactive_widgets\";a:5:{i:0;s:6:\"meta-2\";i:1;s:8:\"search-2\";i:2;s:12:\"categories-2\";i:3;s:14:\"recent-posts-2\";i:4;s:17:\"recent-comments-2\";}s:12:\"sidebar-page\";a:7:{i:0;s:25:\"mutheme_widget_populars-2\";i:1;s:25:\"mutheme_widget_modified-2\";i:2;s:11:\"tag_cloud-2\";i:3;s:24:\"post-specific-comments-2\";i:4;s:22:\"mutheme_widget_links-2\";i:5;s:10:\"archives-2\";i:6;s:6:\"text-2\";}s:9:\"sidebar-1\";a:5:{i:0;s:25:\"jumping_widget_populars-3\";i:1;s:20:\"jumping_widget_new-3\";i:2;s:24:\"jumping_widget_comment-3\";i:3;s:22:\"jumping_widget_label-3\";i:4;s:24:\"jumping_widget_archive-3\";}}}}', 'yes'),
(19046, '_site_transient_timeout_browser_e8aa320ddb6983ade426fcffe3af7f1f', '1488762949', 'no'),
(19047, '_site_transient_browser_e8aa320ddb6983ade426fcffe3af7f1f', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"55.0.2883.87\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(17999, '_site_transient_timeout_browser_844f7ae4d251b2e6e152fdd13ef479f6', '1488121268', 'no'),
(18000, '_site_transient_browser_844f7ae4d251b2e6e152fdd13ef479f6', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"55.0.2883.87\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(17418, 'theme_mods_Jumping', 'a:4:{i:0;b:0;s:18:\"nav_menu_locations\";a:1:{s:11:\"header_menu\";i:62;}s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1487009309;s:4:\"data\";a:2:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:5:{i:0;s:25:\"jumping_widget_populars-5\";i:1;s:20:\"jumping_widget_new-5\";i:2;s:22:\"jumping_widget_label-5\";i:3;s:24:\"jumping_widget_comment-5\";i:4;s:24:\"jumping_widget_archive-5\";}}}}', 'yes'),
(17413, 'Jumping_settings', 'a:12:{s:11:\"description\";s:45:\"分享知识，分享快乐，分享生活。\";s:8:\"keywords\";s:81:\"锅子,锅子博客,个人博客,独立博客,博客,程序员,奋斗的扫地工\";s:9:\"thumbnail\";s:1:\"1\";s:11:\"author-name\";s:6:\"锅子\";s:10:\"weibo-link\";s:40:\"http://weibo.com/zpguo/home?wvr=5&lf=reg\";s:13:\"facebook-link\";s:0:\"\";s:11:\"github-link\";s:24:\"https://github.com/ZpGuo\";s:10:\"email-smtp\";s:18:\"smtp.mxhichina.com\";s:10:\"email-port\";s:2:\"25\";s:10:\"email-name\";s:15:\"gzp@gzpblog.com\";s:14:\"email-password\";s:16:\"max12369874000..\";s:10:\"footerType\";s:1:\"1\";}', 'yes'),
(17411, 'theme_switched_via_customizer', '', 'yes'),
(17412, 'customize_stashed_theme_mods', 'a:0:{}', 'no'),
(41790, '_site_transient_timeout_available_translations', '1502352258', 'no');
INSERT INTO `gzp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(41791, '_site_transient_available_translations', 'a:108:{s:2:\"af\";a:8:{s:8:\"language\";s:2:\"af\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-26 10:11:36\";s:12:\"english_name\";s:9:\"Afrikaans\";s:11:\"native_name\";s:9:\"Afrikaans\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.8.1/af.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"af\";i:2;s:3:\"afr\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"Gaan voort\";}}s:2:\"ar\";a:8:{s:8:\"language\";s:2:\"ar\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-29 08:49:40\";s:12:\"english_name\";s:6:\"Arabic\";s:11:\"native_name\";s:14:\"العربية\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.8.1/ar.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ar\";i:2;s:3:\"ara\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:16:\"المتابعة\";}}s:3:\"ary\";a:8:{s:8:\"language\";s:3:\"ary\";s:7:\"version\";s:5:\"4.7.5\";s:7:\"updated\";s:19:\"2017-01-26 15:42:35\";s:12:\"english_name\";s:15:\"Moroccan Arabic\";s:11:\"native_name\";s:31:\"العربية المغربية\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.5/ary.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ar\";i:3;s:3:\"ary\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:16:\"المتابعة\";}}s:2:\"as\";a:8:{s:8:\"language\";s:2:\"as\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-11-22 18:59:07\";s:12:\"english_name\";s:8:\"Assamese\";s:11:\"native_name\";s:21:\"অসমীয়া\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/as.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"as\";i:2;s:3:\"asm\";i:3;s:3:\"asm\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:0:\"\";}}s:2:\"az\";a:8:{s:8:\"language\";s:2:\"az\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-11-06 00:09:27\";s:12:\"english_name\";s:11:\"Azerbaijani\";s:11:\"native_name\";s:16:\"Azərbaycan dili\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/az.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"az\";i:2;s:3:\"aze\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:5:\"Davam\";}}s:3:\"azb\";a:8:{s:8:\"language\";s:3:\"azb\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-09-12 20:34:31\";s:12:\"english_name\";s:17:\"South Azerbaijani\";s:11:\"native_name\";s:29:\"گؤنئی آذربایجان\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/azb.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"az\";i:3;s:3:\"azb\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:3:\"bel\";a:8:{s:8:\"language\";s:3:\"bel\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-30 18:40:55\";s:12:\"english_name\";s:10:\"Belarusian\";s:11:\"native_name\";s:29:\"Беларуская мова\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.8.1/bel.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"be\";i:2;s:3:\"bel\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:20:\"Працягнуць\";}}s:5:\"bg_BG\";a:8:{s:8:\"language\";s:5:\"bg_BG\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-09 09:24:45\";s:12:\"english_name\";s:9:\"Bulgarian\";s:11:\"native_name\";s:18:\"Български\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/bg_BG.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"bg\";i:2;s:3:\"bul\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"Напред\";}}s:5:\"bn_BD\";a:8:{s:8:\"language\";s:5:\"bn_BD\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-04 16:58:43\";s:12:\"english_name\";s:7:\"Bengali\";s:11:\"native_name\";s:15:\"বাংলা\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/bn_BD.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"bn\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:23:\"এগিয়ে চল.\";}}s:2:\"bo\";a:8:{s:8:\"language\";s:2:\"bo\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-09-05 09:44:12\";s:12:\"english_name\";s:7:\"Tibetan\";s:11:\"native_name\";s:21:\"བོད་ཡིག\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/bo.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"bo\";i:2;s:3:\"tib\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:24:\"མུ་མཐུད།\";}}s:5:\"bs_BA\";a:8:{s:8:\"language\";s:5:\"bs_BA\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-09-04 20:20:28\";s:12:\"english_name\";s:7:\"Bosnian\";s:11:\"native_name\";s:8:\"Bosanski\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/bs_BA.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"bs\";i:2;s:3:\"bos\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Nastavi\";}}s:2:\"ca\";a:8:{s:8:\"language\";s:2:\"ca\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-08 21:01:45\";s:12:\"english_name\";s:7:\"Catalan\";s:11:\"native_name\";s:7:\"Català\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.8.1/ca.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ca\";i:2;s:3:\"cat\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continua\";}}s:3:\"ceb\";a:8:{s:8:\"language\";s:3:\"ceb\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-03-02 17:25:51\";s:12:\"english_name\";s:7:\"Cebuano\";s:11:\"native_name\";s:7:\"Cebuano\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/ceb.zip\";s:3:\"iso\";a:2:{i:2;s:3:\"ceb\";i:3;s:3:\"ceb\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Padayun\";}}s:5:\"cs_CZ\";a:8:{s:8:\"language\";s:5:\"cs_CZ\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-12 08:46:26\";s:12:\"english_name\";s:5:\"Czech\";s:11:\"native_name\";s:12:\"Čeština‎\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/cs_CZ.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"cs\";i:2;s:3:\"ces\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:11:\"Pokračovat\";}}s:2:\"cy\";a:8:{s:8:\"language\";s:2:\"cy\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-28 14:28:04\";s:12:\"english_name\";s:5:\"Welsh\";s:11:\"native_name\";s:7:\"Cymraeg\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.8.1/cy.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"cy\";i:2;s:3:\"cym\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Parhau\";}}s:5:\"da_DK\";a:8:{s:8:\"language\";s:5:\"da_DK\";s:7:\"version\";s:3:\"4.8\";s:7:\"updated\";s:19:\"2017-06-14 23:24:44\";s:12:\"english_name\";s:6:\"Danish\";s:11:\"native_name\";s:5:\"Dansk\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.8/da_DK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"da\";i:2;s:3:\"dan\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Fortsæt\";}}s:5:\"de_CH\";a:8:{s:8:\"language\";s:5:\"de_CH\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-26 06:22:33\";s:12:\"english_name\";s:20:\"German (Switzerland)\";s:11:\"native_name\";s:17:\"Deutsch (Schweiz)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/de_CH.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"de\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Weiter\";}}s:14:\"de_CH_informal\";a:8:{s:8:\"language\";s:14:\"de_CH_informal\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-26 06:24:08\";s:12:\"english_name\";s:30:\"German (Switzerland, Informal)\";s:11:\"native_name\";s:21:\"Deutsch (Schweiz, Du)\";s:7:\"package\";s:73:\"https://downloads.wordpress.org/translation/core/4.8.1/de_CH_informal.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"de\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Weiter\";}}s:12:\"de_DE_formal\";a:8:{s:8:\"language\";s:12:\"de_DE_formal\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-30 10:51:58\";s:12:\"english_name\";s:15:\"German (Formal)\";s:11:\"native_name\";s:13:\"Deutsch (Sie)\";s:7:\"package\";s:71:\"https://downloads.wordpress.org/translation/core/4.8.1/de_DE_formal.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"de\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Weiter\";}}s:5:\"de_DE\";a:8:{s:8:\"language\";s:5:\"de_DE\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-03 16:58:53\";s:12:\"english_name\";s:6:\"German\";s:11:\"native_name\";s:7:\"Deutsch\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/de_DE.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"de\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Weiter\";}}s:3:\"dzo\";a:8:{s:8:\"language\";s:3:\"dzo\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-06-29 08:59:03\";s:12:\"english_name\";s:8:\"Dzongkha\";s:11:\"native_name\";s:18:\"རྫོང་ཁ\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/dzo.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"dz\";i:2;s:3:\"dzo\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:0:\"\";}}s:2:\"el\";a:8:{s:8:\"language\";s:2:\"el\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-28 10:51:51\";s:12:\"english_name\";s:5:\"Greek\";s:11:\"native_name\";s:16:\"Ελληνικά\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.8.1/el.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"el\";i:2;s:3:\"ell\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:16:\"Συνέχεια\";}}s:5:\"en_NZ\";a:8:{s:8:\"language\";s:5:\"en_NZ\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-02 03:57:05\";s:12:\"english_name\";s:21:\"English (New Zealand)\";s:11:\"native_name\";s:21:\"English (New Zealand)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/en_NZ.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"en_AU\";a:8:{s:8:\"language\";s:5:\"en_AU\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-25 10:03:08\";s:12:\"english_name\";s:19:\"English (Australia)\";s:11:\"native_name\";s:19:\"English (Australia)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/en_AU.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"en_CA\";a:8:{s:8:\"language\";s:5:\"en_CA\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-25 19:47:01\";s:12:\"english_name\";s:16:\"English (Canada)\";s:11:\"native_name\";s:16:\"English (Canada)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/en_CA.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"en_ZA\";a:8:{s:8:\"language\";s:5:\"en_ZA\";s:7:\"version\";s:5:\"4.7.5\";s:7:\"updated\";s:19:\"2017-01-26 15:53:43\";s:12:\"english_name\";s:22:\"English (South Africa)\";s:11:\"native_name\";s:22:\"English (South Africa)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.5/en_ZA.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"en_GB\";a:8:{s:8:\"language\";s:5:\"en_GB\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-25 17:31:04\";s:12:\"english_name\";s:12:\"English (UK)\";s:11:\"native_name\";s:12:\"English (UK)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/en_GB.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:2:\"eo\";a:8:{s:8:\"language\";s:2:\"eo\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-26 10:38:53\";s:12:\"english_name\";s:9:\"Esperanto\";s:11:\"native_name\";s:9:\"Esperanto\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.8.1/eo.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"eo\";i:2;s:3:\"epo\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Daŭrigi\";}}s:5:\"es_ES\";a:8:{s:8:\"language\";s:5:\"es_ES\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-25 07:43:08\";s:12:\"english_name\";s:15:\"Spanish (Spain)\";s:11:\"native_name\";s:8:\"Español\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/es_ES.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"es\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_AR\";a:8:{s:8:\"language\";s:5:\"es_AR\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-01 04:48:11\";s:12:\"english_name\";s:19:\"Spanish (Argentina)\";s:11:\"native_name\";s:21:\"Español de Argentina\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/es_AR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"es\";i:2;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_GT\";a:8:{s:8:\"language\";s:5:\"es_GT\";s:7:\"version\";s:5:\"4.7.5\";s:7:\"updated\";s:19:\"2017-01-26 15:54:37\";s:12:\"english_name\";s:19:\"Spanish (Guatemala)\";s:11:\"native_name\";s:21:\"Español de Guatemala\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.5/es_GT.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"es\";i:2;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_CO\";a:8:{s:8:\"language\";s:5:\"es_CO\";s:7:\"version\";s:5:\"4.7.5\";s:7:\"updated\";s:19:\"2017-01-26 15:54:37\";s:12:\"english_name\";s:18:\"Spanish (Colombia)\";s:11:\"native_name\";s:20:\"Español de Colombia\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.5/es_CO.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"es\";i:2;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_VE\";a:8:{s:8:\"language\";s:5:\"es_VE\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-30 16:09:17\";s:12:\"english_name\";s:19:\"Spanish (Venezuela)\";s:11:\"native_name\";s:21:\"Español de Venezuela\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/es_VE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"es\";i:2;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_CL\";a:8:{s:8:\"language\";s:5:\"es_CL\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-11-28 20:09:49\";s:12:\"english_name\";s:15:\"Spanish (Chile)\";s:11:\"native_name\";s:17:\"Español de Chile\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/es_CL.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"es\";i:2;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_PE\";a:8:{s:8:\"language\";s:5:\"es_PE\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-09-09 09:36:22\";s:12:\"english_name\";s:14:\"Spanish (Peru)\";s:11:\"native_name\";s:17:\"Español de Perú\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/es_PE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"es\";i:2;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_MX\";a:8:{s:8:\"language\";s:5:\"es_MX\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-31 15:12:02\";s:12:\"english_name\";s:16:\"Spanish (Mexico)\";s:11:\"native_name\";s:19:\"Español de México\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/es_MX.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"es\";i:2;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:2:\"et\";a:8:{s:8:\"language\";s:2:\"et\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-27 16:37:11\";s:12:\"english_name\";s:8:\"Estonian\";s:11:\"native_name\";s:5:\"Eesti\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/et.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"et\";i:2;s:3:\"est\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Jätka\";}}s:2:\"eu\";a:8:{s:8:\"language\";s:2:\"eu\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-30 18:58:36\";s:12:\"english_name\";s:6:\"Basque\";s:11:\"native_name\";s:7:\"Euskara\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.8.1/eu.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"eu\";i:2;s:3:\"eus\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Jarraitu\";}}s:5:\"fa_IR\";a:8:{s:8:\"language\";s:5:\"fa_IR\";s:7:\"version\";s:3:\"4.8\";s:7:\"updated\";s:19:\"2017-06-09 15:50:45\";s:12:\"english_name\";s:7:\"Persian\";s:11:\"native_name\";s:10:\"فارسی\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.8/fa_IR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fa\";i:2;s:3:\"fas\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"ادامه\";}}s:2:\"fi\";a:8:{s:8:\"language\";s:2:\"fi\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-28 11:00:29\";s:12:\"english_name\";s:7:\"Finnish\";s:11:\"native_name\";s:5:\"Suomi\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.8.1/fi.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fi\";i:2;s:3:\"fin\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:5:\"Jatka\";}}s:5:\"fr_FR\";a:8:{s:8:\"language\";s:5:\"fr_FR\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-25 06:42:50\";s:12:\"english_name\";s:15:\"French (France)\";s:11:\"native_name\";s:9:\"Français\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/fr_FR.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"fr\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuer\";}}s:5:\"fr_BE\";a:8:{s:8:\"language\";s:5:\"fr_BE\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-28 09:14:18\";s:12:\"english_name\";s:16:\"French (Belgium)\";s:11:\"native_name\";s:21:\"Français de Belgique\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/fr_BE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fr\";i:2;s:3:\"fra\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuer\";}}s:5:\"fr_CA\";a:8:{s:8:\"language\";s:5:\"fr_CA\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-28 12:37:07\";s:12:\"english_name\";s:15:\"French (Canada)\";s:11:\"native_name\";s:19:\"Français du Canada\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/fr_CA.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fr\";i:2;s:3:\"fra\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuer\";}}s:2:\"gd\";a:8:{s:8:\"language\";s:2:\"gd\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-08-23 17:41:37\";s:12:\"english_name\";s:15:\"Scottish Gaelic\";s:11:\"native_name\";s:9:\"Gàidhlig\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/gd.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"gd\";i:2;s:3:\"gla\";i:3;s:3:\"gla\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:15:\"Lean air adhart\";}}s:5:\"gl_ES\";a:8:{s:8:\"language\";s:5:\"gl_ES\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-26 12:45:35\";s:12:\"english_name\";s:8:\"Galician\";s:11:\"native_name\";s:6:\"Galego\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/gl_ES.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"gl\";i:2;s:3:\"glg\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:2:\"gu\";a:8:{s:8:\"language\";s:2:\"gu\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-07 20:55:07\";s:12:\"english_name\";s:8:\"Gujarati\";s:11:\"native_name\";s:21:\"ગુજરાતી\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.8.1/gu.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"gu\";i:2;s:3:\"guj\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:31:\"ચાલુ રાખવું\";}}s:3:\"haz\";a:8:{s:8:\"language\";s:3:\"haz\";s:7:\"version\";s:5:\"4.4.2\";s:7:\"updated\";s:19:\"2015-12-05 00:59:09\";s:12:\"english_name\";s:8:\"Hazaragi\";s:11:\"native_name\";s:15:\"هزاره گی\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.4.2/haz.zip\";s:3:\"iso\";a:1:{i:3;s:3:\"haz\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"ادامه\";}}s:5:\"he_IL\";a:8:{s:8:\"language\";s:5:\"he_IL\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-07 17:27:08\";s:12:\"english_name\";s:6:\"Hebrew\";s:11:\"native_name\";s:16:\"עִבְרִית\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/he_IL.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"he\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"המשך\";}}s:5:\"hi_IN\";a:8:{s:8:\"language\";s:5:\"hi_IN\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-28 10:29:26\";s:12:\"english_name\";s:5:\"Hindi\";s:11:\"native_name\";s:18:\"हिन्दी\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/hi_IN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"hi\";i:2;s:3:\"hin\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"जारी\";}}s:2:\"hr\";a:8:{s:8:\"language\";s:2:\"hr\";s:7:\"version\";s:3:\"4.8\";s:7:\"updated\";s:19:\"2017-07-19 08:19:39\";s:12:\"english_name\";s:8:\"Croatian\";s:11:\"native_name\";s:8:\"Hrvatski\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/4.8/hr.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"hr\";i:2;s:3:\"hrv\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Nastavi\";}}s:5:\"hu_HU\";a:8:{s:8:\"language\";s:5:\"hu_HU\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-26 15:48:39\";s:12:\"english_name\";s:9:\"Hungarian\";s:11:\"native_name\";s:6:\"Magyar\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/hu_HU.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"hu\";i:2;s:3:\"hun\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"Folytatás\";}}s:2:\"hy\";a:8:{s:8:\"language\";s:2:\"hy\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-12-03 16:21:10\";s:12:\"english_name\";s:8:\"Armenian\";s:11:\"native_name\";s:14:\"Հայերեն\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/hy.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"hy\";i:2;s:3:\"hye\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:20:\"Շարունակել\";}}s:5:\"id_ID\";a:8:{s:8:\"language\";s:5:\"id_ID\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-28 12:45:08\";s:12:\"english_name\";s:10:\"Indonesian\";s:11:\"native_name\";s:16:\"Bahasa Indonesia\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/id_ID.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"id\";i:2;s:3:\"ind\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Lanjutkan\";}}s:5:\"is_IS\";a:8:{s:8:\"language\";s:5:\"is_IS\";s:7:\"version\";s:5:\"4.7.5\";s:7:\"updated\";s:19:\"2017-04-13 13:55:54\";s:12:\"english_name\";s:9:\"Icelandic\";s:11:\"native_name\";s:9:\"Íslenska\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.5/is_IS.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"is\";i:2;s:3:\"isl\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Áfram\";}}s:5:\"it_IT\";a:8:{s:8:\"language\";s:5:\"it_IT\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-04 08:42:00\";s:12:\"english_name\";s:7:\"Italian\";s:11:\"native_name\";s:8:\"Italiano\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/it_IT.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"it\";i:2;s:3:\"ita\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continua\";}}s:2:\"ja\";a:8:{s:8:\"language\";s:2:\"ja\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-03 23:23:50\";s:12:\"english_name\";s:8:\"Japanese\";s:11:\"native_name\";s:9:\"日本語\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.8.1/ja.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"ja\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"続ける\";}}s:5:\"ka_GE\";a:8:{s:8:\"language\";s:5:\"ka_GE\";s:7:\"version\";s:3:\"4.8\";s:7:\"updated\";s:19:\"2017-06-12 09:20:11\";s:12:\"english_name\";s:8:\"Georgian\";s:11:\"native_name\";s:21:\"ქართული\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.8/ka_GE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ka\";i:2;s:3:\"kat\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:30:\"გაგრძელება\";}}s:3:\"kab\";a:8:{s:8:\"language\";s:3:\"kab\";s:7:\"version\";s:3:\"4.8\";s:7:\"updated\";s:19:\"2017-07-16 18:44:50\";s:12:\"english_name\";s:6:\"Kabyle\";s:11:\"native_name\";s:9:\"Taqbaylit\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/translation/core/4.8/kab.zip\";s:3:\"iso\";a:2:{i:2;s:3:\"kab\";i:3;s:3:\"kab\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Kemmel\";}}s:2:\"km\";a:8:{s:8:\"language\";s:2:\"km\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-12-07 02:07:59\";s:12:\"english_name\";s:5:\"Khmer\";s:11:\"native_name\";s:27:\"ភាសាខ្មែរ\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/km.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"km\";i:2;s:3:\"khm\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"បន្ត\";}}s:5:\"ko_KR\";a:8:{s:8:\"language\";s:5:\"ko_KR\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-28 10:48:16\";s:12:\"english_name\";s:6:\"Korean\";s:11:\"native_name\";s:9:\"한국어\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/ko_KR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ko\";i:2;s:3:\"kor\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"계속\";}}s:3:\"ckb\";a:8:{s:8:\"language\";s:3:\"ckb\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-26 15:48:25\";s:12:\"english_name\";s:16:\"Kurdish (Sorani)\";s:11:\"native_name\";s:13:\"كوردی‎\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/ckb.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ku\";i:3;s:3:\"ckb\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:30:\"به‌رده‌وام به‌\";}}s:2:\"lo\";a:8:{s:8:\"language\";s:2:\"lo\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-11-12 09:59:23\";s:12:\"english_name\";s:3:\"Lao\";s:11:\"native_name\";s:21:\"ພາສາລາວ\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/lo.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"lo\";i:2;s:3:\"lao\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:18:\"ຕໍ່​ໄປ\";}}s:5:\"lt_LT\";a:8:{s:8:\"language\";s:5:\"lt_LT\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-28 11:02:15\";s:12:\"english_name\";s:10:\"Lithuanian\";s:11:\"native_name\";s:15:\"Lietuvių kalba\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/lt_LT.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"lt\";i:2;s:3:\"lit\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Tęsti\";}}s:2:\"lv\";a:8:{s:8:\"language\";s:2:\"lv\";s:7:\"version\";s:5:\"4.7.5\";s:7:\"updated\";s:19:\"2017-03-17 20:40:40\";s:12:\"english_name\";s:7:\"Latvian\";s:11:\"native_name\";s:16:\"Latviešu valoda\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.5/lv.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"lv\";i:2;s:3:\"lav\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Turpināt\";}}s:5:\"mk_MK\";a:8:{s:8:\"language\";s:5:\"mk_MK\";s:7:\"version\";s:5:\"4.7.5\";s:7:\"updated\";s:19:\"2017-01-26 15:54:41\";s:12:\"english_name\";s:10:\"Macedonian\";s:11:\"native_name\";s:31:\"Македонски јазик\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.5/mk_MK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"mk\";i:2;s:3:\"mkd\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:16:\"Продолжи\";}}s:5:\"ml_IN\";a:8:{s:8:\"language\";s:5:\"ml_IN\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-27 03:43:32\";s:12:\"english_name\";s:9:\"Malayalam\";s:11:\"native_name\";s:18:\"മലയാളം\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/ml_IN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ml\";i:2;s:3:\"mal\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:18:\"തുടരുക\";}}s:2:\"mn\";a:8:{s:8:\"language\";s:2:\"mn\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-12 07:29:35\";s:12:\"english_name\";s:9:\"Mongolian\";s:11:\"native_name\";s:12:\"Монгол\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/mn.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"mn\";i:2;s:3:\"mon\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:24:\"Үргэлжлүүлэх\";}}s:2:\"mr\";a:8:{s:8:\"language\";s:2:\"mr\";s:7:\"version\";s:3:\"4.8\";s:7:\"updated\";s:19:\"2017-07-05 19:40:47\";s:12:\"english_name\";s:7:\"Marathi\";s:11:\"native_name\";s:15:\"मराठी\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/4.8/mr.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"mr\";i:2;s:3:\"mar\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:25:\"सुरु ठेवा\";}}s:5:\"ms_MY\";a:8:{s:8:\"language\";s:5:\"ms_MY\";s:7:\"version\";s:5:\"4.7.5\";s:7:\"updated\";s:19:\"2017-03-05 09:45:10\";s:12:\"english_name\";s:5:\"Malay\";s:11:\"native_name\";s:13:\"Bahasa Melayu\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.5/ms_MY.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ms\";i:2;s:3:\"msa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Teruskan\";}}s:5:\"my_MM\";a:8:{s:8:\"language\";s:5:\"my_MM\";s:7:\"version\";s:6:\"4.1.18\";s:7:\"updated\";s:19:\"2015-03-26 15:57:42\";s:12:\"english_name\";s:17:\"Myanmar (Burmese)\";s:11:\"native_name\";s:15:\"ဗမာစာ\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/translation/core/4.1.18/my_MM.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"my\";i:2;s:3:\"mya\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:54:\"ဆက်လက်လုပ်ဆောင်ပါ။\";}}s:5:\"nb_NO\";a:8:{s:8:\"language\";s:5:\"nb_NO\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-02 21:02:39\";s:12:\"english_name\";s:19:\"Norwegian (Bokmål)\";s:11:\"native_name\";s:13:\"Norsk bokmål\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/nb_NO.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nb\";i:2;s:3:\"nob\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Fortsett\";}}s:5:\"ne_NP\";a:8:{s:8:\"language\";s:5:\"ne_NP\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-31 08:47:10\";s:12:\"english_name\";s:6:\"Nepali\";s:11:\"native_name\";s:18:\"नेपाली\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/ne_NP.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ne\";i:2;s:3:\"nep\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:43:\"जारी राख्नुहोस्\";}}s:5:\"nl_NL\";a:8:{s:8:\"language\";s:5:\"nl_NL\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-26 19:34:18\";s:12:\"english_name\";s:5:\"Dutch\";s:11:\"native_name\";s:10:\"Nederlands\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/nl_NL.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nl\";i:2;s:3:\"nld\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Doorgaan\";}}s:5:\"nl_BE\";a:8:{s:8:\"language\";s:5:\"nl_BE\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-27 16:44:39\";s:12:\"english_name\";s:15:\"Dutch (Belgium)\";s:11:\"native_name\";s:20:\"Nederlands (België)\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/nl_BE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nl\";i:2;s:3:\"nld\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Doorgaan\";}}s:12:\"nl_NL_formal\";a:8:{s:8:\"language\";s:12:\"nl_NL_formal\";s:7:\"version\";s:5:\"4.7.5\";s:7:\"updated\";s:19:\"2017-02-16 13:24:21\";s:12:\"english_name\";s:14:\"Dutch (Formal)\";s:11:\"native_name\";s:20:\"Nederlands (Formeel)\";s:7:\"package\";s:71:\"https://downloads.wordpress.org/translation/core/4.7.5/nl_NL_formal.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nl\";i:2;s:3:\"nld\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Doorgaan\";}}s:5:\"nn_NO\";a:8:{s:8:\"language\";s:5:\"nn_NO\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-01 07:32:10\";s:12:\"english_name\";s:19:\"Norwegian (Nynorsk)\";s:11:\"native_name\";s:13:\"Norsk nynorsk\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/nn_NO.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nn\";i:2;s:3:\"nno\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Hald fram\";}}s:3:\"oci\";a:8:{s:8:\"language\";s:3:\"oci\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-02 13:47:38\";s:12:\"english_name\";s:7:\"Occitan\";s:11:\"native_name\";s:7:\"Occitan\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/oci.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"oc\";i:2;s:3:\"oci\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Contunhar\";}}s:5:\"pa_IN\";a:8:{s:8:\"language\";s:5:\"pa_IN\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-16 05:19:43\";s:12:\"english_name\";s:7:\"Punjabi\";s:11:\"native_name\";s:18:\"ਪੰਜਾਬੀ\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/pa_IN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"pa\";i:2;s:3:\"pan\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:25:\"ਜਾਰੀ ਰੱਖੋ\";}}s:5:\"pl_PL\";a:8:{s:8:\"language\";s:5:\"pl_PL\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-04 20:03:38\";s:12:\"english_name\";s:6:\"Polish\";s:11:\"native_name\";s:6:\"Polski\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/pl_PL.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"pl\";i:2;s:3:\"pol\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Kontynuuj\";}}s:2:\"ps\";a:8:{s:8:\"language\";s:2:\"ps\";s:7:\"version\";s:6:\"4.1.18\";s:7:\"updated\";s:19:\"2015-03-29 22:19:48\";s:12:\"english_name\";s:6:\"Pashto\";s:11:\"native_name\";s:8:\"پښتو\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.1.18/ps.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ps\";i:2;s:3:\"pus\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:19:\"دوام ورکړه\";}}s:5:\"pt_BR\";a:8:{s:8:\"language\";s:5:\"pt_BR\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-26 21:35:20\";s:12:\"english_name\";s:19:\"Portuguese (Brazil)\";s:11:\"native_name\";s:20:\"Português do Brasil\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/pt_BR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"pt\";i:2;s:3:\"por\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"pt_PT\";a:8:{s:8:\"language\";s:5:\"pt_PT\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-03 08:14:27\";s:12:\"english_name\";s:21:\"Portuguese (Portugal)\";s:11:\"native_name\";s:10:\"Português\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/pt_PT.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"pt\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:3:\"rhg\";a:8:{s:8:\"language\";s:3:\"rhg\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-03-16 13:03:18\";s:12:\"english_name\";s:8:\"Rohingya\";s:11:\"native_name\";s:8:\"Ruáinga\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/rhg.zip\";s:3:\"iso\";a:1:{i:3;s:3:\"rhg\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:0:\"\";}}s:5:\"ro_RO\";a:8:{s:8:\"language\";s:5:\"ro_RO\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-28 10:26:15\";s:12:\"english_name\";s:8:\"Romanian\";s:11:\"native_name\";s:8:\"Română\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/ro_RO.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ro\";i:2;s:3:\"ron\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuă\";}}s:5:\"ru_RU\";a:8:{s:8:\"language\";s:5:\"ru_RU\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-09 19:32:57\";s:12:\"english_name\";s:7:\"Russian\";s:11:\"native_name\";s:14:\"Русский\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/ru_RU.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ru\";i:2;s:3:\"rus\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:20:\"Продолжить\";}}s:3:\"sah\";a:8:{s:8:\"language\";s:3:\"sah\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-21 02:06:41\";s:12:\"english_name\";s:5:\"Sakha\";s:11:\"native_name\";s:14:\"Сахалыы\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/sah.zip\";s:3:\"iso\";a:2:{i:2;s:3:\"sah\";i:3;s:3:\"sah\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"Салҕаа\";}}s:5:\"si_LK\";a:8:{s:8:\"language\";s:5:\"si_LK\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-11-12 06:00:52\";s:12:\"english_name\";s:7:\"Sinhala\";s:11:\"native_name\";s:15:\"සිංහල\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/si_LK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"si\";i:2;s:3:\"sin\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:44:\"දිගටම කරගෙන යන්න\";}}s:5:\"sk_SK\";a:8:{s:8:\"language\";s:5:\"sk_SK\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-09 13:26:18\";s:12:\"english_name\";s:6:\"Slovak\";s:11:\"native_name\";s:11:\"Slovenčina\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/sk_SK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sk\";i:2;s:3:\"slk\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"Pokračovať\";}}s:5:\"sl_SI\";a:8:{s:8:\"language\";s:5:\"sl_SI\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-28 14:03:23\";s:12:\"english_name\";s:9:\"Slovenian\";s:11:\"native_name\";s:13:\"Slovenščina\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/sl_SI.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sl\";i:2;s:3:\"slv\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Nadaljuj\";}}s:2:\"sq\";a:8:{s:8:\"language\";s:2:\"sq\";s:7:\"version\";s:5:\"4.7.5\";s:7:\"updated\";s:19:\"2017-04-24 08:35:30\";s:12:\"english_name\";s:8:\"Albanian\";s:11:\"native_name\";s:5:\"Shqip\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.5/sq.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sq\";i:2;s:3:\"sqi\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Vazhdo\";}}s:5:\"sr_RS\";a:8:{s:8:\"language\";s:5:\"sr_RS\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-28 12:07:44\";s:12:\"english_name\";s:7:\"Serbian\";s:11:\"native_name\";s:23:\"Српски језик\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/sr_RS.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sr\";i:2;s:3:\"srp\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:14:\"Настави\";}}s:5:\"sv_SE\";a:8:{s:8:\"language\";s:5:\"sv_SE\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-03 22:53:12\";s:12:\"english_name\";s:7:\"Swedish\";s:11:\"native_name\";s:7:\"Svenska\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/sv_SE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sv\";i:2;s:3:\"swe\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Fortsätt\";}}s:3:\"szl\";a:8:{s:8:\"language\";s:3:\"szl\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-09-24 19:58:14\";s:12:\"english_name\";s:8:\"Silesian\";s:11:\"native_name\";s:17:\"Ślōnskŏ gŏdka\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/szl.zip\";s:3:\"iso\";a:1:{i:3;s:3:\"szl\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:13:\"Kōntynuować\";}}s:5:\"ta_IN\";a:8:{s:8:\"language\";s:5:\"ta_IN\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-27 03:22:47\";s:12:\"english_name\";s:5:\"Tamil\";s:11:\"native_name\";s:15:\"தமிழ்\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/ta_IN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ta\";i:2;s:3:\"tam\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:24:\"தொடரவும்\";}}s:2:\"te\";a:8:{s:8:\"language\";s:2:\"te\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-26 15:47:39\";s:12:\"english_name\";s:6:\"Telugu\";s:11:\"native_name\";s:18:\"తెలుగు\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/te.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"te\";i:2;s:3:\"tel\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:30:\"కొనసాగించు\";}}s:2:\"th\";a:8:{s:8:\"language\";s:2:\"th\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-26 15:48:43\";s:12:\"english_name\";s:4:\"Thai\";s:11:\"native_name\";s:9:\"ไทย\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/th.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"th\";i:2;s:3:\"tha\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:15:\"ต่อไป\";}}s:2:\"tl\";a:8:{s:8:\"language\";s:2:\"tl\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-12-30 02:38:08\";s:12:\"english_name\";s:7:\"Tagalog\";s:11:\"native_name\";s:7:\"Tagalog\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/tl.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"tl\";i:2;s:3:\"tgl\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"Magpatuloy\";}}s:5:\"tr_TR\";a:8:{s:8:\"language\";s:5:\"tr_TR\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-31 11:38:12\";s:12:\"english_name\";s:7:\"Turkish\";s:11:\"native_name\";s:8:\"Türkçe\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/tr_TR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"tr\";i:2;s:3:\"tur\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:5:\"Devam\";}}s:5:\"tt_RU\";a:8:{s:8:\"language\";s:5:\"tt_RU\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-11-20 20:20:50\";s:12:\"english_name\";s:5:\"Tatar\";s:11:\"native_name\";s:19:\"Татар теле\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/tt_RU.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"tt\";i:2;s:3:\"tat\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:17:\"дәвам итү\";}}s:3:\"tah\";a:8:{s:8:\"language\";s:3:\"tah\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-03-06 18:39:39\";s:12:\"english_name\";s:8:\"Tahitian\";s:11:\"native_name\";s:10:\"Reo Tahiti\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/tah.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"ty\";i:2;s:3:\"tah\";i:3;s:3:\"tah\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:0:\"\";}}s:5:\"ug_CN\";a:8:{s:8:\"language\";s:5:\"ug_CN\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-12-05 09:23:39\";s:12:\"english_name\";s:6:\"Uighur\";s:11:\"native_name\";s:9:\"Uyƣurqə\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/ug_CN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ug\";i:2;s:3:\"uig\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:26:\"داۋاملاشتۇرۇش\";}}s:2:\"uk\";a:8:{s:8:\"language\";s:2:\"uk\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-28 15:23:55\";s:12:\"english_name\";s:9:\"Ukrainian\";s:11:\"native_name\";s:20:\"Українська\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.8.1/uk.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"uk\";i:2;s:3:\"ukr\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:20:\"Продовжити\";}}s:2:\"ur\";a:8:{s:8:\"language\";s:2:\"ur\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-28 14:27:29\";s:12:\"english_name\";s:4:\"Urdu\";s:11:\"native_name\";s:8:\"اردو\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.8.1/ur.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ur\";i:2;s:3:\"urd\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:19:\"جاری رکھیں\";}}s:5:\"uz_UZ\";a:8:{s:8:\"language\";s:5:\"uz_UZ\";s:7:\"version\";s:5:\"4.7.5\";s:7:\"updated\";s:19:\"2017-05-13 09:55:38\";s:12:\"english_name\";s:5:\"Uzbek\";s:11:\"native_name\";s:11:\"O‘zbekcha\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.5/uz_UZ.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"uz\";i:2;s:3:\"uzb\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:11:\"Davom etish\";}}s:2:\"vi\";a:8:{s:8:\"language\";s:2:\"vi\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-25 01:27:21\";s:12:\"english_name\";s:10:\"Vietnamese\";s:11:\"native_name\";s:14:\"Tiếng Việt\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.8.1/vi.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"vi\";i:2;s:3:\"vie\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"Tiếp tục\";}}s:5:\"zh_CN\";a:8:{s:8:\"language\";s:5:\"zh_CN\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-04 07:53:05\";s:12:\"english_name\";s:15:\"Chinese (China)\";s:11:\"native_name\";s:12:\"简体中文\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/zh_CN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"zh\";i:2;s:3:\"zho\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"继续\";}}s:5:\"zh_TW\";a:8:{s:8:\"language\";s:5:\"zh_TW\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-08-03 15:43:25\";s:12:\"english_name\";s:16:\"Chinese (Taiwan)\";s:11:\"native_name\";s:12:\"繁體中文\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/zh_TW.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"zh\";i:2;s:3:\"zho\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"繼續\";}}s:5:\"zh_HK\";a:8:{s:8:\"language\";s:5:\"zh_HK\";s:7:\"version\";s:5:\"4.8.1\";s:7:\"updated\";s:19:\"2017-07-29 12:50:42\";s:12:\"english_name\";s:19:\"Chinese (Hong Kong)\";s:11:\"native_name\";s:16:\"香港中文版	\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.8.1/zh_HK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"zh\";i:2;s:3:\"zho\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"繼續\";}}}', 'no'),
(17774, 'theme_mods_Jumping-my', 'a:3:{s:18:\"custom_css_post_id\";i:-1;s:18:\"nav_menu_locations\";a:1:{s:11:\"header_menu\";i:62;}s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1496339321;s:4:\"data\";a:2:{s:19:\"wp_inactive_widgets\";a:3:{i:0;s:10:\"archives-2\";i:1;s:6:\"text-2\";i:2;s:11:\"tag_cloud-2\";}s:9:\"sidebar-1\";a:5:{i:0;s:25:\"jumping_widget_populars-5\";i:1;s:20:\"jumping_widget_new-5\";i:2;s:22:\"jumping_widget_label-5\";i:3;s:24:\"jumping_widget_comment-5\";i:4;s:24:\"jumping_widget_archive-5\";}}}}', 'yes'),
(35882, '_site_transient_timeout_browser_599a400621b541101da05e9e89a17543', '1499279883', 'no'),
(35883, '_site_transient_browser_599a400621b541101da05e9e89a17543', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"56.0.2924.88\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(16882, 'dismissed_update_core', 'a:1:{s:11:\"4.7.2|zh_CN\";b:1;}', 'no');
INSERT INTO `gzp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(17410, 'zww_db_cache_archives_list', '<div id=\"archives\"><h3 class=\"al_year\">2017 年</h3><ul class=\"al_mon_list nav nav-pills nav-stacked\"><li><span class=\"al_mon\">08 月 <em> ( 1 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">01日: <a href=\"https://www.gzpblog.com/20170801/1186.html\">火狐浏览器X-Content-Type-Options导致Images类型无法加载</a> <span class=\"badge\">0</span></li></ul></li><li><span class=\"al_mon\">07 月 <em> ( 9 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">31日: <a href=\"https://www.gzpblog.com/20170731/1175.html\">Guzzle：PHP的HTTP客户端</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">20日: <a href=\"https://www.gzpblog.com/20170720/1166.html\">用Workerman快速实现Socket服务</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">18日: <a href=\"https://www.gzpblog.com/20170718/1161.html\">「PSR 规范」关于PHP标准规范</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">18日: <a href=\"https://www.gzpblog.com/20170718/1151.html\">消息队列及PHP中的简单实现与应用</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">14日: <a href=\"https://www.gzpblog.com/20170714/1147.html\">「PSR 规范」PSR-6 缓存接口规范</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">13日: <a href=\"https://www.gzpblog.com/20170713/1141.html\">PHP正则表达式的应用</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">11日: <a href=\"https://www.gzpblog.com/20170711/1138.html\">「PSR 规范」PSR-4 自动加载规范</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">07日: <a href=\"https://www.gzpblog.com/20170707/1133.html\">「PSR 规范」PSR-3 日志接口规范</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">05日: <a href=\"https://www.gzpblog.com/20170705/1126.html\">Win10安装使用Docker for Windows</a> <span class=\"badge\">0</span></li></ul></li><li><span class=\"al_mon\">06 月 <em> ( 13 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">29日: <a href=\"https://www.gzpblog.com/20170629/1104.html\">用 Fiddler 进行HTTP请求调试</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">27日: <a href=\"https://www.gzpblog.com/20170627/1081.html\">Wireshark基础用法：用Wireshark抓包分析网络通讯</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">23日: <a href=\"https://www.gzpblog.com/20170623/1066.html\">最近可能会发一些没有营养的东西</a> <span class=\"badge\">3</span></li><li class=\"list-group-item\">23日: <a href=\"https://www.gzpblog.com/20170623/1062.html\">WebSocket实现</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">23日: <a href=\"https://www.gzpblog.com/20170623/1059.html\">PACE：页面自动加载进度插件</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">22日: <a href=\"https://www.gzpblog.com/20170622/1053.html\">QRCode.js：基于JQuery的生成二维码JS库</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">21日: <a href=\"https://www.gzpblog.com/20170621/1045.html\">PHP QR Code：生成二维码</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">21日: <a href=\"https://www.gzpblog.com/20170621/1041.html\">PHPMailer：PHP的邮件发送类库</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">20日: <a href=\"https://www.gzpblog.com/20170620/1034.html\">「PSR 规范」PSR-2 编码风格规范</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">16日: <a href=\"https://www.gzpblog.com/20170616/1027.html\">「PSR 规范」PSR-1 基础编码规范</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">12日: <a href=\"https://www.gzpblog.com/20170612/1020.html\">认识Docker</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">07日: <a href=\"https://www.gzpblog.com/20170607/1000.html\">使用Gitbook编写书籍文档</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">01日: <a href=\"https://www.gzpblog.com/20170601/986.html\">扁平化风格WordPress主题SaltedFish</a> <span class=\"badge\">3</span></li></ul></li><li><span class=\"al_mon\">05 月 <em> ( 6 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">25日: <a href=\"https://www.gzpblog.com/20170525/930.html\">用ab（ApacheBench）进行HTTP压力测试</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">24日: <a href=\"https://www.gzpblog.com/20170524/926.html\">我的内心毫无波动，甚至还有点想怼代码</a> <span class=\"badge\">2</span></li><li class=\"list-group-item\">19日: <a href=\"https://www.gzpblog.com/20170519/910.html\">一波未平一波又起——疑似被攻击导致网站有时候奇慢甚至奔溃</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">11日: <a href=\"https://www.gzpblog.com/20170511/898.html\">HTTP转HTTPS后SEO分析</a> <span class=\"badge\">4</span></li><li class=\"list-group-item\">07日: <a href=\"https://www.gzpblog.com/20170507/888.html\">WordPress评论表单动态移动到回复评论下的效果</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">05日: <a href=\"https://www.gzpblog.com/20170505/881.html\">从一次误报处理看百度云观测</a> <span class=\"badge\">2</span></li></ul></li><li><span class=\"al_mon\">04 月 <em> ( 4 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">30日: <a href=\"https://www.gzpblog.com/20170430/878.html\">PHP实现定时任务的几种方式</a> <span class=\"badge\">2</span></li><li class=\"list-group-item\">18日: <a href=\"https://www.gzpblog.com/20170418/871.html\">PHP Trick 总结与探讨（一）</a> <span class=\"badge\">2</span></li><li class=\"list-group-item\">13日: <a href=\"https://www.gzpblog.com/20170413/864.html\">Git基础之从安装配置到开始工作</a> <span class=\"badge\">6</span></li><li class=\"list-group-item\">06日: <a href=\"https://www.gzpblog.com/20170406/858.html\">记一处阿里云OSS的400 (Bad Request)错误</a> <span class=\"badge\">5</span></li></ul></li><li><span class=\"al_mon\">03 月 <em> ( 11 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">30日: <a href=\"https://www.gzpblog.com/20170330/850.html\">阿里云Oss+Thinkphp5，Web一站式可拓展包</a> <span class=\"badge\">6</span></li><li class=\"list-group-item\">29日: <a href=\"https://www.gzpblog.com/20170329/848.html\">Wordpess的垃圾评论真的是很烦人耶</a> <span class=\"badge\">11</span></li><li class=\"list-group-item\">22日: <a href=\"https://www.gzpblog.com/20170322/839.html\">多说即将关闭，企业资金链该如何维持？</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">21日: <a href=\"https://www.gzpblog.com/20170321/835.html\">HTTPS进阶优化（一）</a> <span class=\"badge\">2</span></li><li class=\"list-group-item\">16日: <a href=\"https://www.gzpblog.com/20170316/804.html\">升级到HTTP/2，性能大提升</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">11日: <a href=\"https://www.gzpblog.com/20170311/788.html\">Apache间歇性500服务器错误探究</a> <span class=\"badge\">2</span></li><li class=\"list-group-item\">05日: <a href=\"https://www.gzpblog.com/20170305/785.html\">全站HTTP转HTTPS实践（WordPress+阿里云）</a> <span class=\"badge\">11</span></li><li class=\"list-group-item\">04日: <a href=\"https://www.gzpblog.com/20170304/751.html\">服务器由阿里云虚拟主机转云服务器ECS实践（二）性能优化</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">04日: <a href=\"https://www.gzpblog.com/20170304/745.html\">服务器由阿里云虚拟主机转云服务器ECS实践（一）</a> <span class=\"badge\">2</span></li><li class=\"list-group-item\">03日: <a href=\"https://www.gzpblog.com/20170303/731.html\">Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">02日: <a href=\"https://www.gzpblog.com/20170302/716.html\">Linux服务器中PHPMailer发送邮件失效排查并解决</a> <span class=\"badge\">0</span></li></ul></li><li><span class=\"al_mon\">02 月 <em> ( 9 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">28日: <a href=\"https://www.gzpblog.com/20170228/712.html\">战了好几天终于搭好了Centos的运行环境！</a> <span class=\"badge\">3</span></li><li class=\"list-group-item\">21日: <a href=\"https://www.gzpblog.com/20170221/685.html\">Github Desktop初体验</a> <span class=\"badge\">10</span></li><li class=\"list-group-item\">15日: <a href=\"https://www.gzpblog.com/20170215/656.html\">最近已经被这首歌洗脑了</a> <span class=\"badge\">22</span></li><li class=\"list-group-item\">15日: <a href=\"https://www.gzpblog.com/20170215/647.html\">理解单页面应用（SPA）</a> <span class=\"badge\">2</span></li><li class=\"list-group-item\">14日: <a href=\"https://www.gzpblog.com/20170214/638.html\">基于Bootstrap开发的自适应WordPress主题（自用）</a> <span class=\"badge\">7</span></li><li class=\"list-group-item\">13日: <a href=\"https://www.gzpblog.com/20170213/628.html\">wordpress导航菜单开发</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">09日: <a href=\"https://www.gzpblog.com/20170209/619.html\">解决windows下php-cgi进程经常自动关闭</a> <span class=\"badge\">2</span></li><li class=\"list-group-item\">08日: <a href=\"https://www.gzpblog.com/20170208/615.html\">常用 Git 命令清单</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">08日: <a href=\"https://www.gzpblog.com/20170208/604.html\">Git——基本概念</a> <span class=\"badge\">0</span></li></ul></li><li><span class=\"al_mon\">01 月 <em> ( 5 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">22日: <a href=\"https://www.gzpblog.com/20170122/599.html\">Vue.js初体验</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">12日: <a href=\"https://www.gzpblog.com/20170112/592.html\">为什么我“喜欢”支付宝胜过微信支付</a> <span class=\"badge\">3</span></li><li class=\"list-group-item\">11日: <a href=\"https://www.gzpblog.com/20170111/582.html\">PHP开发之网站安全</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">05日: <a href=\"https://www.gzpblog.com/20170105/576.html\">serialize序列化和json的比较</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">01日: <a href=\"https://www.gzpblog.com/20170101/569.html\">2016回顾总结</a> <span class=\"badge\">1</span></li></ul></li></ul><h3 class=\"al_year\">2016 年</h3><ul class=\"al_mon_list nav nav-pills nav-stacked\"><li><span class=\"al_mon\">12 月 <em> ( 8 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">30日: <a href=\"https://www.gzpblog.com/20161230/563.html\">windows下解决Nginx+php-cgi线程并发问题</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">30日: <a href=\"https://www.gzpblog.com/20161230/561.html\">基于TP5的cURL封装类</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">28日: <a href=\"https://www.gzpblog.com/20161228/558.html\">尝试用了一下google</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">16日: <a href=\"https://www.gzpblog.com/20161216/546.html\">如何使用Composer</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">15日: <a href=\"https://www.gzpblog.com/20161215/542.html\">支持Pathinfo模式的Nginx配置</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">15日: <a href=\"https://www.gzpblog.com/20161215/538.html\">准备自己做个东西</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">12日: <a href=\"https://www.gzpblog.com/20161212/534.html\">JS指定对应id内容复制到粘贴板（Ctrl+C效果）</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">08日: <a href=\"https://www.gzpblog.com/20161208/524.html\">PhalApi多入口统一初始化</a> <span class=\"badge\">0</span></li></ul></li><li><span class=\"al_mon\">11 月 <em> ( 8 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">28日: <a href=\"https://www.gzpblog.com/20161128/521.html\">Memcache和Redis的区别以及PHP中操作</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">25日: <a href=\"https://www.gzpblog.com/20161125/516.html\">Linux定时任务crontab</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">19日: <a href=\"https://www.gzpblog.com/20161119/509.html\">PHP加密技术</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">15日: <a href=\"https://www.gzpblog.com/20161115/503.html\">高性能MySQL——MySQL架构</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">14日: <a href=\"https://www.gzpblog.com/20161114/497.html\">初窥Linux之最常用的20条命令</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">09日: <a href=\"https://www.gzpblog.com/20161109/489.html\">php检查浏览页面的访问者在用什么浏览器</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">05日: <a href=\"https://www.gzpblog.com/20161105/485.html\">面试一波下来，总结一下</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">03日: <a href=\"https://www.gzpblog.com/20161103/482.html\">PHP中获取文件扩展名的五种方法?</a> <span class=\"badge\">0</span></li></ul></li><li><span class=\"al_mon\">10 月 <em> ( 7 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">17日: <a href=\"https://www.gzpblog.com/20161017/383.html\">VMware安装Centos6.6虚拟机</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">13日: <a href=\"https://www.gzpblog.com/20161013/358.html\">算法排序真是神奇的东西</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">12日: <a href=\"https://www.gzpblog.com/20161012/352.html\">四种基本排序算法以及PHP实现</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">12日: <a href=\"https://www.gzpblog.com/20161012/347.html\">ThinkPHP直接在控制器中定义_construct()报错</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">09日: <a href=\"https://www.gzpblog.com/20161009/278.html\">正则表达式</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">09日: <a href=\"https://www.gzpblog.com/20161009/269.html\">九月工作笔记</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">08日: <a href=\"https://www.gzpblog.com/20161008/240.html\">博客从typecho转到WordPress</a> <span class=\"badge\">0</span></li></ul></li><li><span class=\"al_mon\">09 月 <em> ( 5 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">30日: <a href=\"https://www.gzpblog.com/20160930/56.html\">咸鱼要翻身——未来我的学习计划</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">29日: <a href=\"https://www.gzpblog.com/20160929/55.html\">微信小程序——未来将如何颠覆?</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">20日: <a href=\"https://www.gzpblog.com/20160920/54.html\">Jquery表单验证后失败时不提交</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">14日: <a href=\"https://www.gzpblog.com/20160914/52.html\">这世界不止眼前的苟且，还有诗和远方</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">05日: <a href=\"https://www.gzpblog.com/20160905/53.html\">Google X 实验室竟然有这么多不靠谱的项目</a> <span class=\"badge\">0</span></li></ul></li><li><span class=\"al_mon\">08 月 <em> ( 3 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">23日: <a href=\"https://www.gzpblog.com/20160823/51.html\">PHP处理数组常用高级函数</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">17日: <a href=\"https://www.gzpblog.com/20160817/50.html\">Python学习笔记4——高级特性</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">03日: <a href=\"https://www.gzpblog.com/20160803/49.html\">Python学习笔记3——函数</a> <span class=\"badge\">2</span></li></ul></li><li><span class=\"al_mon\">07 月 <em> ( 8 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">28日: <a href=\"https://www.gzpblog.com/20160728/48.html\">关于站点robots.txt——使用以及必要性</a> <span class=\"badge\">3</span></li><li class=\"list-group-item\">28日: <a href=\"https://www.gzpblog.com/20160728/47.html\">Markdown基础常用语法</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">26日: <a href=\"https://www.gzpblog.com/20160726/46.html\">有没有办法做到天天熬夜又不会死太早？</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">26日: <a href=\"https://www.gzpblog.com/20160726/45.html\">SQL中HAVING子句的用途</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">25日: <a href=\"https://www.gzpblog.com/20160725/44.html\">首次安装Python后运行报错——0xc000007b</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">22日: <a href=\"https://www.gzpblog.com/20160722/43.html\">接口探究之——APP端Crash是什么</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">21日: <a href=\"https://www.gzpblog.com/20160721/42.html\">网页中局部显示其它站点（div嵌iframe）</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">12日: <a href=\"https://www.gzpblog.com/20160712/41.html\">php地理信息搜索功能——接入高德地图Web服务API，关键字搜索</a> <span class=\"badge\">0</span></li></ul></li><li><span class=\"al_mon\">06 月 <em> ( 3 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">29日: <a href=\"https://www.gzpblog.com/20160629/40.html\">初入linux之新手两大坑</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">29日: <a href=\"https://www.gzpblog.com/20160629/39.html\">六月工作笔记，php接口相关较多</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">13日: <a href=\"https://www.gzpblog.com/20160613/38.html\">程序员要对自己好一点系列之——人生第一个机械键盘</a> <span class=\"badge\">0</span></li></ul></li><li><span class=\"al_mon\">05 月 <em> ( 9 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">31日: <a href=\"https://www.gzpblog.com/20160531/37.html\">这段时间工作中碰到的一些问题(php,js,mysql)</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">26日: <a href=\"https://www.gzpblog.com/20160526/36.html\">10个php关于字符串处理的代码片段</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">26日: <a href=\"https://www.gzpblog.com/20160526/35.html\">Vivaldi浏览器解决falsh视频无法播放问题</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">19日: <a href=\"https://www.gzpblog.com/20160519/34.html\">用Jquery实现动态添加和删除tr行</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">19日: <a href=\"https://www.gzpblog.com/20160519/33.html\">ECshop前台和后台提示信息调用</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">19日: <a href=\"https://www.gzpblog.com/20160519/32.html\">Python学习笔记2——list，tuple，dict，set</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">16日: <a href=\"https://www.gzpblog.com/20160516/31.html\">Python学习笔记1——Python基础知识小记</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">09日: <a href=\"https://www.gzpblog.com/20160509/30.html\">各大搜索引擎站长平台功能分析——百度，360，搜狗，Bing</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">05日: <a href=\"https://www.gzpblog.com/20160505/29.html\">傲慢与偏见之——山寨与创新</a> <span class=\"badge\">1</span></li></ul></li><li><span class=\"al_mon\">04 月 <em> ( 10 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">26日: <a href=\"https://www.gzpblog.com/20160426/28.html\">一些利于PHP优化需要注意的点</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">21日: <a href=\"https://www.gzpblog.com/20160421/27.html\">推荐一款邮箱客户端，WPS邮箱</a> <span class=\"badge\">3</span></li><li class=\"list-group-item\">21日: <a href=\"https://www.gzpblog.com/20160421/26.html\">PHP导出Excel文件</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">19日: <a href=\"https://www.gzpblog.com/20160419/25.html\">目前的VR都是些什么VR&#8212;VR眼镜分类</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">11日: <a href=\"https://www.gzpblog.com/20160411/24.html\">当我们都躲在虚拟世界的时候，谁还会愿意同外部世界连接</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">08日: <a href=\"https://www.gzpblog.com/20160408/23.html\">用Sublime Text编辑web代码&#8212;Sublime Text的安装与插件</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">07日: <a href=\"https://www.gzpblog.com/20160407/22.html\">用JS来获取当前日期的代码</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">06日: <a href=\"https://www.gzpblog.com/20160406/21.html\">建中路剿鼠记(三)</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">05日: <a href=\"https://www.gzpblog.com/20160405/20.html\">建中路剿鼠记(二)</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">01日: <a href=\"https://www.gzpblog.com/20160401/19.html\">JS多选弹出选择框代码实例</a> <span class=\"badge\">0</span></li></ul></li><li><span class=\"al_mon\">03 月 <em> ( 10 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">29日: <a href=\"https://www.gzpblog.com/20160329/18.html\">建中路剿鼠记(一)</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">25日: <a href=\"https://www.gzpblog.com/20160325/17.html\">SQL语句中WHERE 1=1 的作用</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">16日: <a href=\"https://www.gzpblog.com/20160316/16.html\">微信公众平台开发 &#8211; 消息回复</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">16日: <a href=\"https://www.gzpblog.com/20160316/15.html\">微信公众平台开发&#8212;-准备开发和接口接入</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">13日: <a href=\"https://www.gzpblog.com/20160313/14.html\">《疯狂动物城》，那只树獭，哈哈哈&#8230;&#8230;</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">09日: <a href=\"https://www.gzpblog.com/20160309/13.html\">Typecho百度自动推送插件baiduPush for Typecho</a> <span class=\"badge\">3</span></li><li class=\"list-group-item\">07日: <a href=\"https://www.gzpblog.com/20160307/12.html\">Jquery实现ajax方法</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">04日: <a href=\"https://www.gzpblog.com/20160304/11.html\">Gravatar头像以及被墙后如何设置Gravatar头像</a> <span class=\"badge\">1</span></li><li class=\"list-group-item\">03日: <a href=\"https://www.gzpblog.com/20160303/10.html\">走自己的路</a> <span class=\"badge\">3</span></li><li class=\"list-group-item\">01日: <a href=\"https://www.gzpblog.com/20160301/9.html\">Typecho伪静态.htaccess文件写法</a> <span class=\"badge\">0</span></li></ul></li><li><span class=\"al_mon\">01 月 <em> ( 2 篇文章 )</em></span><ul class=\"al_post_list list-group\"><li class=\"list-group-item\">19日: <a href=\"https://www.gzpblog.com/20160119/7.html\">typecho实现浏览次数计算的插件及使用方法</a> <span class=\"badge\">0</span></li><li class=\"list-group-item\">18日: <a href=\"https://www.gzpblog.com/20160118/6.html\">Windows下搭建PHP开发环境：Apache2.4+PHP5.6+MySQL5.6</a> <span class=\"badge\">1</span></li></ul></li></ul></div>', 'yes'),
(22803, '_site_transient_timeout_browser_754cdcc1e6416d7a56262cf3d275472d', '1490905353', 'no'),
(22804, '_site_transient_browser_754cdcc1e6416d7a56262cf3d275472d', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"56.0.2924.87\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(32022, '_site_transient_timeout_wporg_theme_feature_list', '1496262158', 'no'),
(32023, '_site_transient_wporg_theme_feature_list', 'a:3:{s:6:\"Layout\";a:7:{i:0;s:11:\"grid-layout\";i:1;s:10:\"one-column\";i:2;s:11:\"two-columns\";i:3;s:13:\"three-columns\";i:4;s:12:\"four-columns\";i:5;s:12:\"left-sidebar\";i:6;s:13:\"right-sidebar\";}s:8:\"Features\";a:20:{i:0;s:19:\"accessibility-ready\";i:1;s:10:\"buddypress\";i:2;s:17:\"custom-background\";i:3;s:13:\"custom-colors\";i:4;s:13:\"custom-header\";i:5;s:11:\"custom-menu\";i:6;s:12:\"editor-style\";i:7;s:21:\"featured-image-header\";i:8;s:15:\"featured-images\";i:9;s:15:\"flexible-header\";i:10;s:14:\"footer-widgets\";i:11;s:20:\"front-page-post-form\";i:12;s:19:\"full-width-template\";i:13;s:12:\"microformats\";i:14;s:12:\"post-formats\";i:15;s:20:\"rtl-language-support\";i:16;s:11:\"sticky-post\";i:17;s:13:\"theme-options\";i:18;s:17:\"threaded-comments\";i:19;s:17:\"translation-ready\";}s:7:\"Subject\";a:9:{i:0;s:4:\"blog\";i:1;s:10:\"e-commerce\";i:2;s:9:\"education\";i:3;s:13:\"entertainment\";i:4;s:14:\"food-and-drink\";i:5;s:7:\"holiday\";i:6;s:4:\"news\";i:7;s:11:\"photography\";i:8;s:9:\"portfolio\";}}', 'no'),
(14778, '_site_transient_timeout_browser_88d9c15ba291b84e68686d373c4b6eb9', '1485928212', 'no'),
(14779, '_site_transient_browser_88d9c15ba291b84e68686d373c4b6eb9', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"55.0.2883.75\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(19522, '_site_transient_timeout_browser_f731f7616ab74b84eb6e37a4dee2a379', '1489023194', 'no'),
(19049, 'wp_super_cache_index_detected', '3', 'no'),
(19087, '_site_transient_timeout_browser_fdc83df8ef7c4b5238f839dcae57a919', '1488781536', 'no'),
(19088, '_site_transient_browser_fdc83df8ef7c4b5238f839dcae57a919', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:17:\"Internet Explorer\";s:7:\"version\";s:3:\"9.0\";s:10:\"update_url\";s:51:\"http://www.microsoft.com/windows/internet-explorer/\";s:7:\"img_src\";s:45:\"http://s.wordpress.org/images/browsers/ie.png\";s:11:\"img_src_ssl\";s:44:\"https://wordpress.org/images/browsers/ie.png\";s:15:\"current_version\";s:1:\"9\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(19060, 'ftp_credentials', 'a:3:{s:8:\"hostname\";s:13:\"112.74.165.46\";s:8:\"username\";s:4:\"root\";s:15:\"connection_type\";s:3:\"ftp\";}', 'yes'),
(20250, 'auto_core_update_notified', 'a:4:{s:4:\"type\";s:7:\"success\";s:5:\"email\";s:15:\"gzp@gzpblog.com\";s:7:\"version\";s:5:\"4.8.1\";s:9:\"timestamp\";i:1501709855;}', 'no'),
(26246, '_site_transient_timeout_browser_43e3959d25637efe9b68fae476c6453e', '1492996631', 'no'),
(26247, '_site_transient_browser_43e3959d25637efe9b68fae476c6453e', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:4:\"52.0\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"16\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(25227, '_site_transient_browser_2580d5e8c328b508150838b559db836a', 'a:9:{s:8:\"platform\";s:6:\"iPhone\";s:4:\"name\";s:6:\"iPhone\";s:7:\"version\";s:8:\"537.51.1\";s:10:\"update_url\";s:0:\"\";s:7:\"img_src\";s:0:\"\";s:11:\"img_src_ssl\";s:0:\"\";s:15:\"current_version\";s:0:\"\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(20652, '_site_transient_timeout_browser_89e98a02642e93650a77c5c0a1d9c25e', '1489664125', 'no'),
(20653, '_site_transient_browser_89e98a02642e93650a77c5c0a1d9c25e', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:4:\"51.0\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"16\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(26317, '_site_transient_timeout_browser_ec09c1f205a8c9a567166203a7884107', '1493038461', 'no'),
(26318, '_site_transient_browser_ec09c1f205a8c9a567166203a7884107', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:4:\"52.0\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"16\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(19459, 'theme_mods_twentyfifteen', 'a:4:{i:0;b:0;s:18:\"nav_menu_locations\";a:1:{s:11:\"header_menu\";i:62;}s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1488385058;s:4:\"data\";a:2:{s:19:\"wp_inactive_widgets\";a:3:{i:0;s:10:\"archives-2\";i:1;s:6:\"text-2\";i:2;s:11:\"tag_cloud-2\";}s:9:\"sidebar-1\";a:0:{}}}}', 'yes'),
(29675, '_site_transient_timeout_browser_803e422aa7874e29774fa11c450a913b', '1495386790', 'no'),
(29676, '_site_transient_browser_803e422aa7874e29774fa11c450a913b', 'a:9:{s:8:\"platform\";s:6:\"iPhone\";s:4:\"name\";s:6:\"iPhone\";s:7:\"version\";s:8:\"537.51.1\";s:10:\"update_url\";s:0:\"\";s:7:\"img_src\";s:0:\"\";s:11:\"img_src_ssl\";s:0:\"\";s:15:\"current_version\";s:0:\"\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(33563, '_site_transient_timeout_browser_29deb2adbcac01217a711ff8ef289148', '1497893710', 'no'),
(33564, '_site_transient_browser_29deb2adbcac01217a711ff8ef289148', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"58.0.3029.110\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(41069, '_site_transient_timeout_browser_cc75d7392f9d8bd819fbfacf05f70081', '1502457851', 'no'),
(41070, '_site_transient_browser_cc75d7392f9d8bd819fbfacf05f70081', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:4:\"54.0\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"16\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(40333, '_transient_timeout_feed_mod_b9388c83948825c1edaef0d856b7b109', '1501507574', 'no'),
(40334, '_transient_feed_mod_b9388c83948825c1edaef0d856b7b109', '1501464374', 'no'),
(40332, '_transient_timeout_feed_b9388c83948825c1edaef0d856b7b109', '1501507574', 'no'),
(41786, '_transient_timeout_feed_mod_d117b5738fbd35bd8c0391cda1f2b5d9', '1502384652', 'no'),
(41787, '_transient_feed_mod_d117b5738fbd35bd8c0391cda1f2b5d9', '1502341452', 'no'),
(41785, '_transient_timeout_feed_d117b5738fbd35bd8c0391cda1f2b5d9', '1502384652', 'no'),
(41550, '_transient_timeout_settings_errors', '1502187888', 'no'),
(41551, '_transient_settings_errors', 'a:1:{i:0;a:4:{s:7:\"setting\";s:7:\"general\";s:4:\"code\";s:16:\"settings_updated\";s:7:\"message\";s:18:\"设置已保存。\";s:4:\"type\";s:7:\"updated\";}}', 'no'),
(41700, '_site_transient_timeout_community-events-4673a6e8fcb823d2133c52a46ed857cd', '1502331052', 'no'),
(41701, '_site_transient_community-events-4673a6e8fcb823d2133c52a46ed857cd', 'a:2:{s:8:\"location\";a:1:{s:2:\"ip\";s:11:\"14.28.168.0\";}s:6:\"events\";a:0:{}}', 'no'),
(40338, '_transient_dash_5438fb5baf31c513fff2b9a1067656a6', '<div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'https://cn.wordpress.org/2017/07/23/4-8-1-plans-and-the-future-of-wpcn/\'>未来的 WordPress 4.8.1 和 cn.wordpress.org 计划</a> <span class=\"rss-date\">2017-07-23</span><div class=\"rssSummary\">各位，抱歉！最近 Jimmy 看起来很忙，我们很久没能给大家带来新版本，请见谅。 4.8.1 的官方（英文）版 [&hellip;]</div></li></ul></div><div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'https://wptavern.com/dmitry-mayorov-discusses-the-challenges-of-organizing-wordcamp-moscow-and-the-future-of-wordpress-themes\'>WPTavern: Dmitry Mayorov Discusses the Challenges of Organizing WordCamp Moscow and the Future of WordPress Themes</a></li><li><a class=\'rsswidget\' href=\'https://wptavern.com/customize-snapshots-0-6-0-adds-the-ability-to-name-and-merge-changesets\'>WPTavern: Customize Snapshots 0.6.0 Adds the Ability to Name and Merge Changesets</a></li><li><a class=\'rsswidget\' href=\'https://wptavern.com/blog-passes-100000-registrations-66-5-of-purchased-domains-are-in-use\'>WPTavern: .blog Passes 100,000 Registrations, 66.5% of Purchased Domains are in Use</a></li></ul></div><div class=\"rss-widget\"><ul><li class=\"dashboard-news-plugin\"><span>热门插件:</span> Yoast SEO&nbsp;<a href=\"plugin-install.php?tab=plugin-information&amp;plugin=wordpress-seo&amp;_wpnonce=e9c5dd8f33&amp;TB_iframe=true&amp;width=600&amp;height=800\" class=\"thickbox open-plugin-details-modal\" aria-label=\"安装Yoast SEO\">(安装)</a></li></ul></div>', 'no'),
(41780, '_site_transient_timeout_community-events-bcaa0406ed310b288d32455095cb83e6', '1502384649', 'no'),
(41781, '_site_transient_community-events-bcaa0406ed310b288d32455095cb83e6', 'a:2:{s:8:\"location\";a:1:{s:2:\"ip\";s:11:\"113.90.38.0\";}s:6:\"events\";a:0:{}}', 'no'),
(41782, '_transient_timeout_feed_7d1d7866a17d17cf5f79e1f075b87a31', '1502384650', 'no'),
(41783, '_transient_timeout_feed_mod_7d1d7866a17d17cf5f79e1f075b87a31', '1502384650', 'no'),
(41784, '_transient_feed_mod_7d1d7866a17d17cf5f79e1f075b87a31', '1502341450', 'no'),
(41788, '_transient_timeout_dash_v2_5438fb5baf31c513fff2b9a1067656a6', '1502384652', 'no'),
(41789, '_transient_dash_v2_5438fb5baf31c513fff2b9a1067656a6', '<div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'https://cn.wordpress.org/2017/07/23/4-8-1-plans-and-the-future-of-wpcn/\'>未来的 WordPress 4.8.1 和 cn.wordpress.org 计划</a></li></ul></div><div class=\"rss-widget\"><ul><li><a class=\'rsswidget\' href=\'https://wptavern.com/woocommerce-forks-select2-releases-selectwoo-as-a-drop-in-replacement-with-improved-accessibility\'>WPTavern: WooCommerce Forks select2, Releases selectWoo as a Drop-In Replacement with Improved Accessibility</a></li><li><a class=\'rsswidget\' href=\'https://wptavern.com/wpweekly-episode-284-catching-up-with-david-peralty\'>WPTavern: WPWeekly Episode 284 – Catching Up with David Peralty</a></li><li><a class=\'rsswidget\' href=\'https://wptavern.com/wordpress-foundation-to-sponsor-open-source-educational-events\'>WPTavern: WordPress Foundation to Sponsor Open Source Educational Events</a></li></ul></div>', 'no'),
(41778, '_site_transient_timeout_browser_22237813fd219bc6d5f8917fdd850b0c', '1502946245', 'no'),
(41779, '_site_transient_browser_22237813fd219bc6d5f8917fdd850b0c', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"59.0.3071.125\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(41098, '_site_transient_update_core', 'O:8:\"stdClass\":4:{s:7:\"updates\";a:1:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:65:\"https://downloads.wordpress.org/release/zh_CN/wordpress-4.8.1.zip\";s:6:\"locale\";s:5:\"zh_CN\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:65:\"https://downloads.wordpress.org/release/zh_CN/wordpress-4.8.1.zip\";s:10:\"no_content\";b:0;s:11:\"new_bundled\";b:0;s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.8.1\";s:7:\"version\";s:5:\"4.8.1\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.7\";s:15:\"partial_version\";s:0:\"\";}}s:12:\"last_checked\";i:1502425603;s:15:\"version_checked\";s:5:\"4.8.1\";s:12:\"translations\";a:0:{}}', 'no'),
(40387, '_site_transient_timeout_browser_b1909a79e0eb77288dc1c342ae2f44e5', '1502097672', 'no'),
(40388, '_site_transient_browser_b1909a79e0eb77288dc1c342ae2f44e5', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:12:\"60.0.3112.78\";s:10:\"update_url\";s:28:\"http://www.google.com/chrome\";s:7:\"img_src\";s:49:\"http://s.wordpress.org/images/browsers/chrome.png\";s:11:\"img_src_ssl\";s:48:\"https://wordpress.org/images/browsers/chrome.png\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(41812, '_site_transient_timeout_community-events-ad43f26a406e1017f85504d14ec93c7f', '1502401123', 'no'),
(41813, '_site_transient_community-events-ad43f26a406e1017f85504d14ec93c7f', 'a:2:{s:8:\"location\";a:1:{s:2:\"ip\";s:11:\"113.90.39.0\";}s:6:\"events\";a:0:{}}', 'no'),
(40394, 'widget_media_audio', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(40395, 'widget_media_image', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(40396, 'widget_media_video', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(41015, '_site_transient_community-events-3d87ffa3e2b9ea331c59543e4adf2842', 'a:2:{s:8:\"location\";a:1:{s:2:\"ip\";s:13:\"113.118.227.0\";}s:6:\"events\";a:0:{}}', 'no'),
(40490, '_site_transient_timeout_community-events-6315d15b6648750d1f60f0ea1b4883d4', '1501593644', 'no'),
(40491, '_site_transient_community-events-6315d15b6648750d1f60f0ea1b4883d4', 'a:2:{s:8:\"location\";a:1:{s:2:\"ip\";s:12:\"113.92.153.0\";}s:6:\"events\";a:0:{}}', 'no'),
(41536, '_site_transient_timeout_community-events-f96cfb44911981ef023ae5b68796833a', '1502229779', 'no'),
(41537, '_site_transient_community-events-f96cfb44911981ef023ae5b68796833a', 'a:2:{s:8:\"location\";a:1:{s:2:\"ip\";s:12:\"113.92.155.0\";}s:6:\"events\";a:0:{}}', 'no'),
(40681, '_site_transient_timeout_community-events-d3872051f0ae38c101fdd850a1779fba', '1501685191', 'no'),
(40682, '_site_transient_community-events-d3872051f0ae38c101fdd850a1779fba', 'a:2:{s:8:\"location\";a:1:{s:2:\"ip\";s:12:\"121.35.129.0\";}s:6:\"events\";a:0:{}}', 'no'),
(41014, '_site_transient_timeout_community-events-3d87ffa3e2b9ea331c59543e4adf2842', '1501855131', 'no'),
(41838, '_site_transient_timeout_community-events-bb5790621ba22c379420caa40acc1a7e', '1502419777', 'no'),
(41839, '_site_transient_community-events-bb5790621ba22c379420caa40acc1a7e', 'a:2:{s:8:\"location\";a:1:{s:2:\"ip\";s:11:\"14.28.169.0\";}s:6:\"events\";a:0:{}}', 'no'),
(41071, '_site_transient_timeout_community-events-a85747bc4481fe2d08b74a5e03d323c9', '1501896253', 'no'),
(41072, '_site_transient_community-events-a85747bc4481fe2d08b74a5e03d323c9', 'a:2:{s:8:\"location\";a:1:{s:2:\"ip\";s:11:\"14.28.171.0\";}s:6:\"events\";a:0:{}}', 'no'),
(41424, '_site_transient_community-events-e569161cc3d1e66f9eed84df77ef4b47', 'a:2:{s:8:\"location\";a:1:{s:2:\"ip\";s:11:\"113.89.70.0\";}s:6:\"events\";a:0:{}}', 'no'),
(41354, '_site_transient_timeout_community-events-c6f0d59ad42a72801c801960f81706ff', '1502111476', 'no'),
(41355, '_site_transient_community-events-c6f0d59ad42a72801c801960f81706ff', 'a:2:{s:8:\"location\";a:1:{s:2:\"ip\";s:11:\"113.90.37.0\";}s:6:\"events\";a:0:{}}', 'no'),
(41423, '_site_transient_timeout_community-events-e569161cc3d1e66f9eed84df77ef4b47', '1502156144', 'no'),
(40880, '_site_transient_timeout_community-events-ef99cd7f7ce9cb8b7c96f78a9ca0104c', '1501767568', 'no'),
(41626, '_site_transient_timeout_community-events-84226ac2279e2a99166c0c73ef4d73d6', '1502284069', 'no'),
(41627, '_site_transient_community-events-84226ac2279e2a99166c0c73ef4d73d6', 'a:2:{s:8:\"location\";a:1:{s:2:\"ip\";s:12:\"113.92.130.0\";}s:6:\"events\";a:0:{}}', 'no'),
(41099, '_site_transient_update_themes', 'O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1502425609;s:7:\"checked\";a:5:{s:10:\"Jumping-my\";s:3:\"1.0\";s:10:\"SaltedFish\";s:3:\"1.0\";s:13:\"twentyfifteen\";s:3:\"1.8\";s:15:\"twentyseventeen\";s:3:\"1.3\";s:13:\"twentysixteen\";s:3:\"1.3\";}s:8:\"response\";a:0:{}s:12:\"translations\";a:0:{}}', 'no'),
(40881, '_site_transient_community-events-ef99cd7f7ce9cb8b7c96f78a9ca0104c', 'a:2:{s:8:\"location\";a:1:{s:2:\"ip\";s:12:\"113.92.152.0\";}s:6:\"events\";a:0:{}}', 'no'),
(40860, 'widget_custom_html', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(41534, '_site_transient_timeout_browser_c40f98f4f0bffda78059ef8e58d95647', '1502791377', 'no'),
(41535, '_site_transient_browser_c40f98f4f0bffda78059ef8e58d95647', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:4:\"54.0\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"16\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no'),
(38917, 'category_children', 'a:11:{i:3;a:3:{i:0;i:2;i:1;i:6;i:2;i:12;}i:5;a:3:{i:0;i:7;i:1;i:8;i:2;i:21;}i:4;a:10:{i:0;i:9;i:1;i:10;i:2;i:11;i:3;i:18;i:4;i:66;i:5;i:69;i:6;i:70;i:7;i:71;i:8;i:100;i:9;i:101;}i:11;a:4:{i:0;i:13;i:1;i:15;i:2;i:23;i:3;i:63;}i:7;a:2:{i:0;i:14;i:1;i:103;}i:10;a:4:{i:0;i:16;i:1;i:17;i:2;i:22;i:3;i:91;}i:18;a:2:{i:0;i:19;i:1;i:76;}i:71;a:1:{i:0;i:20;}i:66;a:5:{i:0;i:67;i:1;i:80;i:2;i:81;i:3;i:114;i:4;i:135;}i:70;a:3:{i:0;i:72;i:1;i:75;i:2;i:138;}i:69;a:4:{i:0;i:73;i:1;i:83;i:2;i:84;i:3;i:126;}}', 'yes'),
(34778, '_site_transient_timeout_browser_3efc016b2059668c69de07123afad5fa', '1498619375', 'no'),
(34779, '_site_transient_browser_3efc016b2059668c69de07123afad5fa', 'a:9:{s:8:\"platform\";s:7:\"Windows\";s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:4:\"53.0\";s:10:\"update_url\";s:23:\"http://www.firefox.com/\";s:7:\"img_src\";s:50:\"http://s.wordpress.org/images/browsers/firefox.png\";s:11:\"img_src_ssl\";s:49:\"https://wordpress.org/images/browsers/firefox.png\";s:15:\"current_version\";s:2:\"16\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;}', 'no');

-- --------------------------------------------------------

--
-- 表的结构 `gzp_postmeta`
--

CREATE TABLE `gzp_postmeta` (
  `meta_id` bigint(20) UNSIGNED NOT NULL,
  `post_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `gzp_postmeta`
--

INSERT INTO `gzp_postmeta` (`meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(1220, 489, '_edit_lock', '1478697265:1'),
(4, 5, 'views', '2097'),
(5, 5, '_wp_page_template', 'default'),
(6, 6, 'views', '645'),
(7, 7, 'views', '233'),
(8, 8, 'views', '910'),
(9, 8, '_wp_page_template', 'templates/archives.php'),
(10, 9, 'views', '246'),
(11, 10, 'views', '330'),
(12, 11, 'views', '235'),
(13, 12, 'views', '217'),
(14, 13, 'views', '544'),
(15, 14, 'views', '303'),
(16, 15, 'views', '2297'),
(17, 16, 'views', '261'),
(18, 17, 'views', '269'),
(19, 18, 'views', '196'),
(20, 19, 'views', '331'),
(21, 20, 'views', '436'),
(22, 21, 'views', '214'),
(23, 22, 'views', '166'),
(24, 23, 'views', '156'),
(25, 24, 'views', '155'),
(26, 25, 'views', '168'),
(27, 26, 'views', '235'),
(28, 27, 'views', '237'),
(29, 28, 'views', '192'),
(30, 29, 'views', '852'),
(31, 30, 'views', '260'),
(32, 31, 'views', '177'),
(33, 32, 'views', '178'),
(34, 33, 'views', '158'),
(35, 34, 'views', '591'),
(36, 35, 'views', '851'),
(37, 36, 'views', '195'),
(38, 37, 'views', '174'),
(39, 38, 'views', '216'),
(40, 39, 'views', '183'),
(41, 40, 'views', '143'),
(42, 41, 'views', '234'),
(43, 42, 'views', '219'),
(44, 43, 'views', '163'),
(45, 44, 'views', '559'),
(46, 45, 'views', '173'),
(47, 46, 'views', '168'),
(48, 47, 'views', '177'),
(49, 48, 'views', '811'),
(50, 49, 'views', '536'),
(51, 50, 'views', '210'),
(52, 51, 'views', '156'),
(53, 52, 'views', '189'),
(54, 53, 'views', '218'),
(55, 54, 'views', '237'),
(56, 55, 'views', '293'),
(57, 56, 'views', '289'),
(1234, 497, '_edit_lock', '1479129257:1'),
(1221, 489, '_syntaxhighlighter_encoded', '1'),
(1219, 489, '_edit_last', '1'),
(65, 5, '_edit_lock', '1497172510:1'),
(66, 5, '_edit_last', '1'),
(67, 8, '_edit_lock', '1496291365:1'),
(68, 8, '_edit_last', '1'),
(69, 61, '_menu_item_type', 'custom'),
(70, 61, '_menu_item_menu_item_parent', '0'),
(71, 61, '_menu_item_object_id', '61'),
(72, 61, '_menu_item_object', 'custom'),
(73, 61, '_menu_item_target', ''),
(74, 61, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(75, 61, '_menu_item_xfn', ''),
(76, 61, '_menu_item_url', 'http://www.gzpblog.com'),
(78, 62, '_menu_item_type', 'post_type'),
(79, 62, '_menu_item_menu_item_parent', '0'),
(80, 62, '_menu_item_object_id', '8'),
(81, 62, '_menu_item_object', 'page'),
(82, 62, '_menu_item_target', ''),
(83, 62, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(84, 62, '_menu_item_xfn', ''),
(85, 62, '_menu_item_url', ''),
(316, 90, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:75;s:6:\"height\";i:74;s:4:\"file\";s:20:\"2016/10/logo.jpg.jpg\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(87, 63, '_menu_item_type', 'post_type'),
(88, 63, '_menu_item_menu_item_parent', '0'),
(89, 63, '_menu_item_object_id', '5'),
(90, 63, '_menu_item_object', 'page'),
(91, 63, '_menu_item_target', ''),
(92, 63, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(93, 63, '_menu_item_xfn', ''),
(94, 63, '_menu_item_url', ''),
(96, 64, '_menu_item_type', 'taxonomy'),
(97, 64, '_menu_item_menu_item_parent', '360'),
(98, 64, '_menu_item_object_id', '20'),
(99, 64, '_menu_item_object', 'category'),
(100, 64, '_menu_item_target', ''),
(101, 64, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(102, 64, '_menu_item_xfn', ''),
(103, 64, '_menu_item_url', ''),
(315, 90, '_wp_attached_file', '2016/10/logo.jpg.jpg'),
(105, 65, '_menu_item_type', 'taxonomy'),
(106, 65, '_menu_item_menu_item_parent', '85'),
(107, 65, '_menu_item_object_id', '23'),
(108, 65, '_menu_item_object', 'category'),
(109, 65, '_menu_item_target', ''),
(110, 65, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(111, 65, '_menu_item_xfn', ''),
(112, 65, '_menu_item_url', ''),
(114, 66, '_menu_item_type', 'taxonomy'),
(115, 66, '_menu_item_menu_item_parent', '83'),
(116, 66, '_menu_item_object_id', '17'),
(117, 66, '_menu_item_object', 'category'),
(118, 66, '_menu_item_target', ''),
(119, 66, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(120, 66, '_menu_item_xfn', ''),
(121, 66, '_menu_item_url', ''),
(123, 67, '_menu_item_type', 'taxonomy'),
(124, 67, '_menu_item_menu_item_parent', '80'),
(125, 67, '_menu_item_object_id', '19'),
(126, 67, '_menu_item_object', 'category'),
(127, 67, '_menu_item_target', ''),
(128, 67, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(129, 67, '_menu_item_xfn', ''),
(130, 67, '_menu_item_url', ''),
(132, 68, '_menu_item_type', 'taxonomy'),
(133, 68, '_menu_item_menu_item_parent', '83'),
(134, 68, '_menu_item_object_id', '16'),
(135, 68, '_menu_item_object', 'category'),
(136, 68, '_menu_item_target', ''),
(137, 68, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(138, 68, '_menu_item_xfn', ''),
(139, 68, '_menu_item_url', ''),
(141, 69, '_menu_item_type', 'taxonomy'),
(142, 69, '_menu_item_menu_item_parent', '83'),
(143, 69, '_menu_item_object_id', '22'),
(144, 69, '_menu_item_object', 'category'),
(145, 69, '_menu_item_target', ''),
(146, 69, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(147, 69, '_menu_item_xfn', ''),
(148, 69, '_menu_item_url', ''),
(150, 70, '_menu_item_type', 'taxonomy'),
(151, 70, '_menu_item_menu_item_parent', '85'),
(152, 70, '_menu_item_object_id', '13'),
(153, 70, '_menu_item_object', 'category'),
(154, 70, '_menu_item_target', ''),
(155, 70, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(156, 70, '_menu_item_xfn', ''),
(157, 70, '_menu_item_url', ''),
(159, 71, '_menu_item_type', 'taxonomy'),
(160, 71, '_menu_item_menu_item_parent', '74'),
(161, 71, '_menu_item_object_id', '7'),
(162, 71, '_menu_item_object', 'category'),
(163, 71, '_menu_item_target', ''),
(164, 71, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(165, 71, '_menu_item_xfn', ''),
(166, 71, '_menu_item_url', ''),
(168, 72, '_menu_item_type', 'taxonomy'),
(169, 72, '_menu_item_menu_item_parent', '73'),
(170, 72, '_menu_item_object_id', '2'),
(171, 72, '_menu_item_object', 'category'),
(172, 72, '_menu_item_target', ''),
(173, 72, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(174, 72, '_menu_item_xfn', ''),
(175, 72, '_menu_item_url', ''),
(177, 73, '_menu_item_type', 'taxonomy'),
(178, 73, '_menu_item_menu_item_parent', '0'),
(179, 73, '_menu_item_object_id', '3'),
(180, 73, '_menu_item_object', 'category'),
(181, 73, '_menu_item_target', ''),
(182, 73, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(183, 73, '_menu_item_xfn', ''),
(184, 73, '_menu_item_url', ''),
(186, 74, '_menu_item_type', 'taxonomy'),
(187, 74, '_menu_item_menu_item_parent', '0'),
(188, 74, '_menu_item_object_id', '5'),
(189, 74, '_menu_item_object', 'category'),
(190, 74, '_menu_item_target', ''),
(191, 74, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(192, 74, '_menu_item_xfn', ''),
(193, 74, '_menu_item_url', ''),
(195, 75, '_menu_item_type', 'taxonomy'),
(196, 75, '_menu_item_menu_item_parent', '73'),
(197, 75, '_menu_item_object_id', '12'),
(198, 75, '_menu_item_object', 'category'),
(199, 75, '_menu_item_target', ''),
(200, 75, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(201, 75, '_menu_item_xfn', ''),
(202, 75, '_menu_item_url', ''),
(204, 76, '_menu_item_type', 'taxonomy'),
(205, 76, '_menu_item_menu_item_parent', '86'),
(206, 76, '_menu_item_object_id', '9'),
(207, 76, '_menu_item_object', 'category'),
(208, 76, '_menu_item_target', ''),
(209, 76, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(210, 76, '_menu_item_xfn', ''),
(211, 76, '_menu_item_url', ''),
(213, 77, '_menu_item_type', 'taxonomy'),
(214, 77, '_menu_item_menu_item_parent', '74'),
(215, 77, '_menu_item_object_id', '21'),
(216, 77, '_menu_item_object', 'category'),
(217, 77, '_menu_item_target', ''),
(218, 77, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(219, 77, '_menu_item_xfn', ''),
(220, 77, '_menu_item_url', ''),
(222, 78, '_menu_item_type', 'taxonomy'),
(223, 78, '_menu_item_menu_item_parent', '71'),
(224, 78, '_menu_item_object_id', '14'),
(225, 78, '_menu_item_object', 'category'),
(226, 78, '_menu_item_target', ''),
(227, 78, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(228, 78, '_menu_item_xfn', ''),
(229, 78, '_menu_item_url', ''),
(310, 87, '_menu_item_url', ''),
(231, 79, '_menu_item_type', 'taxonomy'),
(232, 79, '_menu_item_menu_item_parent', '85'),
(233, 79, '_menu_item_object_id', '15'),
(234, 79, '_menu_item_object', 'category'),
(235, 79, '_menu_item_target', ''),
(236, 79, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(237, 79, '_menu_item_xfn', ''),
(238, 79, '_menu_item_url', ''),
(309, 87, '_menu_item_xfn', ''),
(240, 80, '_menu_item_type', 'taxonomy'),
(241, 80, '_menu_item_menu_item_parent', '86'),
(242, 80, '_menu_item_object_id', '18'),
(243, 80, '_menu_item_object', 'category'),
(244, 80, '_menu_item_target', ''),
(245, 80, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(246, 80, '_menu_item_xfn', ''),
(247, 80, '_menu_item_url', ''),
(314, 89, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:258;s:6:\"height\";i:258;s:4:\"file\";s:16:\"2016/10/2wei.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"2wei-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:16:\"2wei-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(313, 89, '_wp_attached_file', '2016/10/2wei.jpg'),
(312, 88, '_wp_attached_file', '2016/10/bitbug_favicon-1.ico'),
(308, 87, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(258, 82, '_menu_item_type', 'taxonomy'),
(259, 82, '_menu_item_menu_item_parent', '73'),
(260, 82, '_menu_item_object_id', '6'),
(261, 82, '_menu_item_object', 'category'),
(262, 82, '_menu_item_target', ''),
(263, 82, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(264, 82, '_menu_item_xfn', ''),
(265, 82, '_menu_item_url', ''),
(307, 87, '_menu_item_target', ''),
(267, 83, '_menu_item_type', 'taxonomy'),
(268, 83, '_menu_item_menu_item_parent', '86'),
(269, 83, '_menu_item_object_id', '10'),
(270, 83, '_menu_item_object', 'category'),
(271, 83, '_menu_item_target', ''),
(272, 83, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(273, 83, '_menu_item_xfn', ''),
(274, 83, '_menu_item_url', ''),
(306, 87, '_menu_item_object', 'category'),
(276, 84, '_menu_item_type', 'taxonomy'),
(277, 84, '_menu_item_menu_item_parent', '74'),
(278, 84, '_menu_item_object_id', '8'),
(279, 84, '_menu_item_object', 'category'),
(280, 84, '_menu_item_target', ''),
(281, 84, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(282, 84, '_menu_item_xfn', ''),
(283, 84, '_menu_item_url', ''),
(305, 87, '_menu_item_object_id', '63'),
(285, 85, '_menu_item_type', 'taxonomy'),
(286, 85, '_menu_item_menu_item_parent', '86'),
(287, 85, '_menu_item_object_id', '11'),
(288, 85, '_menu_item_object', 'category'),
(289, 85, '_menu_item_target', ''),
(290, 85, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(291, 85, '_menu_item_xfn', ''),
(292, 85, '_menu_item_url', ''),
(304, 87, '_menu_item_menu_item_parent', '85'),
(294, 86, '_menu_item_type', 'taxonomy'),
(295, 86, '_menu_item_menu_item_parent', '0'),
(296, 86, '_menu_item_object_id', '4'),
(297, 86, '_menu_item_object', 'category'),
(298, 86, '_menu_item_target', ''),
(299, 86, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(300, 86, '_menu_item_xfn', ''),
(301, 86, '_menu_item_url', ''),
(303, 87, '_menu_item_type', 'taxonomy'),
(317, 91, '_wp_attached_file', '2016/10/145737461.jpg'),
(318, 91, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:554;s:6:\"height\";i:104;s:4:\"file\";s:21:\"2016/10/145737461.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"145737461-150x104.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:104;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"145737461-300x56.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:56;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"145737461-250x104.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:104;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(319, 92, '_wp_attached_file', '2016/10/177819186.jpg'),
(320, 92, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:554;s:6:\"height\";i:66;s:4:\"file\";s:21:\"2016/10/177819186.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"177819186-150x66.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:66;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"177819186-300x36.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:36;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:20:\"177819186-250x66.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:66;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(321, 93, '_wp_attached_file', '2016/10/191073368.jpg'),
(322, 93, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:554;s:6:\"height\";i:532;s:4:\"file\";s:21:\"2016/10/191073368.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"191073368-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"191073368-300x288.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:288;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"191073368-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(323, 94, '_wp_attached_file', '2016/10/212284596.png'),
(324, 94, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1678;s:6:\"height\";i:240;s:4:\"file\";s:21:\"2016/10/212284596.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"212284596-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"212284596-300x43.png\";s:5:\"width\";i:300;s:6:\"height\";i:43;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"212284596-768x110.png\";s:5:\"width\";i:768;s:6:\"height\";i:110;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"212284596-1024x146.png\";s:5:\"width\";i:1024;s:6:\"height\";i:146;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"212284596-250x240.png\";s:5:\"width\";i:250;s:6:\"height\";i:240;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(325, 95, '_wp_attached_file', '2016/10/231732575.jpg'),
(326, 95, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:345;s:6:\"height\";i:127;s:4:\"file\";s:21:\"2016/10/231732575.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"231732575-150x127.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:127;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"231732575-300x110.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:110;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"231732575-250x127.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:127;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(327, 96, '_wp_attached_file', '2016/10/442536786.jpg'),
(328, 96, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:308;s:6:\"height\";i:85;s:4:\"file\";s:21:\"2016/10/442536786.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"442536786-150x85.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:85;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"442536786-300x83.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:83;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:20:\"442536786-250x85.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:85;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(329, 97, '_wp_attached_file', '2016/10/503852648.jpg'),
(330, 97, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:554;s:6:\"height\";i:456;s:4:\"file\";s:21:\"2016/10/503852648.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"503852648-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"503852648-300x247.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:247;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"503852648-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(331, 98, '_wp_attached_file', '2016/10/636966948.jpg'),
(332, 98, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:328;s:6:\"height\";i:393;s:4:\"file\";s:21:\"2016/10/636966948.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"636966948-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"636966948-250x300.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"636966948-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(333, 99, '_wp_attached_file', '2016/10/1095480201.jpg'),
(334, 99, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:327;s:6:\"height\";i:245;s:4:\"file\";s:22:\"2016/10/1095480201.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1095480201-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"1095480201-300x225.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1095480201-250x245.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:245;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(335, 100, '_wp_attached_file', '2016/10/1505568065.jpg'),
(336, 100, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:229;s:6:\"height\";i:58;s:4:\"file\";s:22:\"2016/10/1505568065.jpg\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"1505568065-150x58.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:58;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(337, 101, '_wp_attached_file', '2016/10/1932857986.png'),
(338, 101, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:900;s:6:\"height\";i:335;s:4:\"file\";s:22:\"2016/10/1932857986.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1932857986-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"1932857986-300x112.png\";s:5:\"width\";i:300;s:6:\"height\";i:112;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"1932857986-768x286.png\";s:5:\"width\";i:768;s:6:\"height\";i:286;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1932857986-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(339, 102, '_wp_attached_file', '2016/10/2527315217.jpg'),
(340, 102, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:266;s:6:\"height\";i:411;s:4:\"file\";s:22:\"2016/10/2527315217.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2527315217-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"2527315217-194x300.jpg\";s:5:\"width\";i:194;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2527315217-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(341, 103, '_wp_attached_file', '2016/10/2748039769.jpg'),
(342, 103, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:554;s:6:\"height\";i:244;s:4:\"file\";s:22:\"2016/10/2748039769.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2748039769-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"2748039769-300x132.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:132;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2748039769-250x244.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:244;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(343, 104, '_wp_attached_file', '2016/10/2878285641.png'),
(344, 104, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1678;s:6:\"height\";i:240;s:4:\"file\";s:22:\"2016/10/2878285641.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2878285641-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"2878285641-300x43.png\";s:5:\"width\";i:300;s:6:\"height\";i:43;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"2878285641-768x110.png\";s:5:\"width\";i:768;s:6:\"height\";i:110;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"2878285641-1024x146.png\";s:5:\"width\";i:1024;s:6:\"height\";i:146;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2878285641-250x240.png\";s:5:\"width\";i:250;s:6:\"height\";i:240;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(345, 105, '_wp_attached_file', '2016/10/3158687516.png'),
(346, 105, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:492;s:6:\"height\";i:50;s:4:\"file\";s:22:\"2016/10/3158687516.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"3158687516-150x50.png\";s:5:\"width\";i:150;s:6:\"height\";i:50;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"3158687516-300x30.png\";s:5:\"width\";i:300;s:6:\"height\";i:30;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"3158687516-250x50.png\";s:5:\"width\";i:250;s:6:\"height\";i:50;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(484, 7, '_edit_last', '1'),
(550, 53, '_edit_lock', '1475864521:1'),
(537, 54, '_edit_last', '1'),
(536, 54, '_edit_lock', '1476331282:1'),
(531, 55, '_edit_last', '1'),
(530, 55, '_edit_lock', '1475863983:1'),
(524, 56, '_edit_lock', '1477673994:1'),
(525, 56, '_edit_last', '1'),
(517, 12, '_edit_last', '1'),
(516, 12, '_edit_lock', '1476331420:1'),
(505, 9, '_edit_lock', '1476028459:1'),
(506, 10, '_edit_lock', '1475863186:1'),
(507, 10, '_edit_last', '1'),
(511, 11, '_edit_last', '1'),
(510, 11, '_edit_lock', '1475863481:1'),
(349, 107, '_wp_attached_file', '2016/10/3658389805.png'),
(350, 107, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:900;s:6:\"height\";i:335;s:4:\"file\";s:22:\"2016/10/3658389805.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"3658389805-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"3658389805-300x112.png\";s:5:\"width\";i:300;s:6:\"height\";i:112;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"3658389805-768x286.png\";s:5:\"width\";i:768;s:6:\"height\";i:286;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"3658389805-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(351, 108, '_wp_attached_file', '2016/10/4051746677.jpg'),
(352, 108, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:219;s:6:\"height\";i:48;s:4:\"file\";s:22:\"2016/10/4051746677.jpg\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"4051746677-150x48.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:48;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(353, 109, '_wp_attached_file', '2016/10/4099657754.jpg'),
(354, 109, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:449;s:6:\"height\";i:130;s:4:\"file\";s:22:\"2016/10/4099657754.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"4099657754-150x130.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:130;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"4099657754-300x87.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:87;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"4099657754-250x130.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:130;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(355, 110, '_wp_attached_file', '2016/10/4108902883.jpg'),
(356, 110, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:504;s:6:\"height\";i:137;s:4:\"file\";s:22:\"2016/10/4108902883.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"4108902883-150x137.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:137;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"4108902883-300x82.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:82;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"4108902883-250x137.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:137;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(357, 111, '_wp_attached_file', '2016/10/4261596487.jpg'),
(358, 111, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:526;s:6:\"height\";i:342;s:4:\"file\";s:22:\"2016/10/4261596487.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"4261596487-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"4261596487-300x195.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:195;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"4261596487-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(359, 112, '_wp_attached_file', '2016/10/31446533.png'),
(360, 112, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:755;s:6:\"height\";i:809;s:4:\"file\";s:20:\"2016/10/31446533.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"31446533-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"31446533-280x300.png\";s:5:\"width\";i:280;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:20:\"31446533-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(361, 113, '_wp_attached_file', '2016/10/53396810.png'),
(362, 113, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:952;s:6:\"height\";i:361;s:4:\"file\";s:20:\"2016/10/53396810.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"53396810-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"53396810-300x114.png\";s:5:\"width\";i:300;s:6:\"height\";i:114;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:20:\"53396810-768x291.png\";s:5:\"width\";i:768;s:6:\"height\";i:291;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:20:\"53396810-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(363, 114, '_wp_attached_file', '2016/10/947229738.gif'),
(364, 114, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:247;s:6:\"height\";i:194;s:4:\"file\";s:21:\"2016/10/947229738.gif\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"947229738-150x150.gif\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/gif\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(365, 115, '_wp_attached_file', '2016/10/1119564827.png'),
(366, 115, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1020;s:6:\"height\";i:588;s:4:\"file\";s:22:\"2016/10/1119564827.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1119564827-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"1119564827-300x173.png\";s:5:\"width\";i:300;s:6:\"height\";i:173;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"1119564827-768x443.png\";s:5:\"width\";i:768;s:6:\"height\";i:443;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1119564827-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(367, 116, '_wp_attached_file', '2016/10/1269685963.png'),
(368, 116, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1242;s:6:\"height\";i:2208;s:4:\"file\";s:22:\"2016/10/1269685963.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1269685963-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"1269685963-169x300.png\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:23:\"1269685963-768x1365.png\";s:5:\"width\";i:768;s:6:\"height\";i:1365;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"1269685963-576x1024.png\";s:5:\"width\";i:576;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1269685963-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(369, 117, '_wp_attached_file', '2016/10/1474477264.png'),
(370, 117, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:373;s:6:\"height\";i:663;s:4:\"file\";s:22:\"2016/10/1474477264.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1474477264-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"1474477264-169x300.png\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1474477264-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(371, 118, '_wp_attached_file', '2016/10/1763035875.jpg'),
(372, 118, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:368;s:6:\"height\";i:653;s:4:\"file\";s:22:\"2016/10/1763035875.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1763035875-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"1763035875-169x300.jpg\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1763035875-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(373, 119, '_wp_attached_file', '2016/10/1946475855.png'),
(374, 119, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:907;s:6:\"height\";i:272;s:4:\"file\";s:22:\"2016/10/1946475855.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1946475855-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"1946475855-300x90.png\";s:5:\"width\";i:300;s:6:\"height\";i:90;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"1946475855-768x230.png\";s:5:\"width\";i:768;s:6:\"height\";i:230;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1946475855-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(375, 120, '_wp_attached_file', '2016/10/2152528169.jpg'),
(376, 120, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:300;s:6:\"height\";i:300;s:4:\"file\";s:22:\"2016/10/2152528169.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2152528169-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2152528169-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(377, 121, '_wp_attached_file', '2016/10/2255649394.png'),
(378, 121, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:621;s:6:\"height\";i:344;s:4:\"file\";s:22:\"2016/10/2255649394.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2255649394-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"2255649394-300x166.png\";s:5:\"width\";i:300;s:6:\"height\";i:166;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2255649394-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(379, 122, '_wp_attached_file', '2016/10/2593195352.jpg'),
(380, 122, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1836;s:6:\"height\";i:3264;s:4:\"file\";s:22:\"2016/10/2593195352.jpg\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2593195352-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"2593195352-169x300.jpg\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:23:\"2593195352-768x1365.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:1365;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"2593195352-576x1024.jpg\";s:5:\"width\";i:576;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2593195352-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(381, 123, '_wp_attached_file', '2016/10/2595756476.jpg'),
(382, 123, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:653;s:6:\"height\";i:490;s:4:\"file\";s:22:\"2016/10/2595756476.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2595756476-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"2595756476-300x225.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2595756476-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(383, 124, '_wp_attached_file', '2016/10/2705660894.png'),
(384, 124, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1242;s:6:\"height\";i:2208;s:4:\"file\";s:22:\"2016/10/2705660894.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2705660894-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"2705660894-169x300.png\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:23:\"2705660894-768x1365.png\";s:5:\"width\";i:768;s:6:\"height\";i:1365;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"2705660894-576x1024.png\";s:5:\"width\";i:576;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2705660894-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(385, 125, '_wp_attached_file', '2016/10/2760593199.jpg'),
(386, 125, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:490;s:6:\"height\";i:490;s:4:\"file\";s:22:\"2016/10/2760593199.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2760593199-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"2760593199-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2760593199-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:3:\"2.2\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:13:\"iPhone 6 Plus\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:10:\"1459288633\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:4:\"4.15\";s:3:\"iso\";s:3:\"200\";s:13:\"shutter_speed\";s:5:\"0.125\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(387, 126, '_wp_attached_file', '2016/10/3115824438.jpg'),
(388, 126, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:368;s:6:\"height\";i:653;s:4:\"file\";s:22:\"2016/10/3115824438.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"3115824438-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"3115824438-169x300.jpg\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"3115824438-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(389, 127, '_wp_attached_file', '2016/10/3119391764.png'),
(390, 127, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:684;s:6:\"height\";i:457;s:4:\"file\";s:22:\"2016/10/3119391764.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"3119391764-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"3119391764-300x200.png\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"3119391764-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(391, 128, '_wp_attached_file', '2016/10/3961432814.png');
INSERT INTO `gzp_postmeta` (`meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(392, 128, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:633;s:6:\"height\";i:343;s:4:\"file\";s:22:\"2016/10/3961432814.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"3961432814-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"3961432814-300x163.png\";s:5:\"width\";i:300;s:6:\"height\";i:163;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"3961432814-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(393, 129, '_wp_attached_file', '2016/10/4143100091.png'),
(394, 129, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:680;s:6:\"height\";i:316;s:4:\"file\";s:22:\"2016/10/4143100091.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"4143100091-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"4143100091-300x139.png\";s:5:\"width\";i:300;s:6:\"height\";i:139;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"4143100091-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(395, 130, '_wp_attached_file', '2016/10/331199711.jpg'),
(396, 130, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:490;s:6:\"height\";i:276;s:4:\"file\";s:21:\"2016/10/331199711.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"331199711-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"331199711-300x169.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:169;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"331199711-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"6\";s:8:\"keywords\";a:0:{}}}'),
(397, 131, '_wp_attached_file', '2016/10/718198307.png'),
(398, 131, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1033;s:6:\"height\";i:622;s:4:\"file\";s:21:\"2016/10/718198307.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"718198307-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"718198307-300x181.png\";s:5:\"width\";i:300;s:6:\"height\";i:181;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"718198307-768x462.png\";s:5:\"width\";i:768;s:6:\"height\";i:462;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"718198307-1024x617.png\";s:5:\"width\";i:1024;s:6:\"height\";i:617;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"718198307-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(399, 132, '_wp_attached_file', '2016/10/915657141.jpg'),
(400, 132, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:490;s:6:\"height\";i:368;s:4:\"file\";s:21:\"2016/10/915657141.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"915657141-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"915657141-300x225.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"915657141-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:3:\"2.2\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:13:\"iPhone 6 Plus\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:10:\"1459799815\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:4:\"4.15\";s:3:\"iso\";s:2:\"80\";s:13:\"shutter_speed\";s:17:\"0.058823529411765\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(401, 133, '_wp_attached_file', '2016/10/926381641.png'),
(402, 133, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:188;s:6:\"height\";i:34;s:4:\"file\";s:21:\"2016/10/926381641.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"926381641-150x34.png\";s:5:\"width\";i:150;s:6:\"height\";i:34;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(403, 134, '_wp_attached_file', '2016/10/1482183358.jpg'),
(404, 134, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:368;s:6:\"height\";i:368;s:4:\"file\";s:22:\"2016/10/1482183358.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1482183358-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"1482183358-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1482183358-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:3:\"2.2\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:13:\"iPhone 6 Plus\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:10:\"1459298479\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:4:\"4.15\";s:3:\"iso\";s:3:\"125\";s:13:\"shutter_speed\";s:4:\"0.25\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(405, 135, '_wp_attached_file', '2016/10/1652754813.png'),
(406, 135, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:702;s:6:\"height\";i:387;s:4:\"file\";s:22:\"2016/10/1652754813.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1652754813-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"1652754813-300x165.png\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1652754813-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(407, 136, '_wp_attached_file', '2016/10/2323188462.png'),
(408, 136, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:256;s:6:\"height\";i:35;s:4:\"file\";s:22:\"2016/10/2323188462.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"2323188462-150x35.png\";s:5:\"width\";i:150;s:6:\"height\";i:35;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"2323188462-250x35.png\";s:5:\"width\";i:250;s:6:\"height\";i:35;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(409, 137, '_wp_attached_file', '2016/10/2409789491.png'),
(410, 137, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:703;s:6:\"height\";i:396;s:4:\"file\";s:22:\"2016/10/2409789491.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2409789491-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"2409789491-300x169.png\";s:5:\"width\";i:300;s:6:\"height\";i:169;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2409789491-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(411, 138, '_wp_attached_file', '2016/10/2505066357.png'),
(412, 138, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:464;s:6:\"height\";i:318;s:4:\"file\";s:22:\"2016/10/2505066357.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2505066357-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"2505066357-300x206.png\";s:5:\"width\";i:300;s:6:\"height\";i:206;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2505066357-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(413, 139, '_wp_attached_file', '2016/10/2573520395.png'),
(414, 139, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:697;s:6:\"height\";i:416;s:4:\"file\";s:22:\"2016/10/2573520395.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2573520395-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"2573520395-300x179.png\";s:5:\"width\";i:300;s:6:\"height\";i:179;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2573520395-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(415, 140, '_wp_attached_file', '2016/10/3002222694.jpg'),
(416, 140, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:368;s:6:\"height\";i:490;s:4:\"file\";s:22:\"2016/10/3002222694.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"3002222694-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"3002222694-225x300.jpg\";s:5:\"width\";i:225;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"3002222694-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:3:\"2.2\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:13:\"iPhone 6 Plus\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:10:\"1459893778\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:4:\"4.15\";s:3:\"iso\";s:3:\"160\";s:13:\"shutter_speed\";s:4:\"0.25\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(417, 141, '_wp_attached_file', '2016/10/3523161483.jpg'),
(418, 141, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:368;s:6:\"height\";i:368;s:4:\"file\";s:22:\"2016/10/3523161483.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"3523161483-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"3523161483-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"3523161483-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:3:\"2.2\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:13:\"iPhone 6 Plus\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:10:\"1459298484\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:4:\"4.15\";s:3:\"iso\";s:3:\"125\";s:13:\"shutter_speed\";s:4:\"0.25\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(419, 142, '_wp_attached_file', '2016/10/4030579334.jpg'),
(420, 142, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:490;s:6:\"height\";i:368;s:4:\"file\";s:22:\"2016/10/4030579334.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"4030579334-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"4030579334-300x225.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"4030579334-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:3:\"2.2\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:13:\"iPhone 6 Plus\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:10:\"1459799806\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:4:\"4.15\";s:3:\"iso\";s:3:\"160\";s:13:\"shutter_speed\";s:5:\"0.125\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(421, 143, '_wp_attached_file', '2016/10/4106656255.jpg'),
(422, 143, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:368;s:6:\"height\";i:368;s:4:\"file\";s:22:\"2016/10/4106656255.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"4106656255-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"4106656255-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"4106656255-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:3:\"2.2\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:13:\"iPhone 6 Plus\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:10:\"1459515290\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:4:\"4.15\";s:3:\"iso\";s:3:\"100\";s:13:\"shutter_speed\";s:17:\"0.058823529411765\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(423, 144, '_wp_attached_file', '2016/10/1129067328.png'),
(424, 144, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:217;s:6:\"height\";i:840;s:4:\"file\";s:22:\"2016/10/1129067328.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1129067328-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"1129067328-78x300.png\";s:5:\"width\";i:78;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1129067328-217x250.png\";s:5:\"width\";i:217;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(425, 145, '_wp_attached_file', '2016/10/1398985470.png'),
(426, 145, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:613;s:6:\"height\";i:91;s:4:\"file\";s:22:\"2016/10/1398985470.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"1398985470-150x91.png\";s:5:\"width\";i:150;s:6:\"height\";i:91;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"1398985470-300x45.png\";s:5:\"width\";i:300;s:6:\"height\";i:45;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"1398985470-250x91.png\";s:5:\"width\";i:250;s:6:\"height\";i:91;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(427, 146, '_wp_attached_file', '2016/10/3581344272.png'),
(428, 146, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:619;s:6:\"height\";i:161;s:4:\"file\";s:22:\"2016/10/3581344272.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"3581344272-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"3581344272-300x78.png\";s:5:\"width\";i:300;s:6:\"height\";i:78;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"3581344272-250x161.png\";s:5:\"width\";i:250;s:6:\"height\";i:161;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(429, 147, '_wp_attached_file', '2016/10/3775035113.png'),
(430, 147, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:840;s:6:\"height\";i:608;s:4:\"file\";s:22:\"2016/10/3775035113.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"3775035113-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"3775035113-300x217.png\";s:5:\"width\";i:300;s:6:\"height\";i:217;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"3775035113-768x556.png\";s:5:\"width\";i:768;s:6:\"height\";i:556;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"3775035113-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(431, 148, '_wp_attached_file', '2016/10/4069227203.png'),
(432, 148, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:364;s:6:\"height\";i:147;s:4:\"file\";s:22:\"2016/10/4069227203.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"4069227203-150x147.png\";s:5:\"width\";i:150;s:6:\"height\";i:147;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"4069227203-300x121.png\";s:5:\"width\";i:300;s:6:\"height\";i:121;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"4069227203-250x147.png\";s:5:\"width\";i:250;s:6:\"height\";i:147;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(433, 149, '_wp_attached_file', '2016/10/1567451059.png'),
(434, 149, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1342;s:6:\"height\";i:953;s:4:\"file\";s:22:\"2016/10/1567451059.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1567451059-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"1567451059-300x213.png\";s:5:\"width\";i:300;s:6:\"height\";i:213;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"1567451059-768x545.png\";s:5:\"width\";i:768;s:6:\"height\";i:545;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"1567451059-1024x727.png\";s:5:\"width\";i:1024;s:6:\"height\";i:727;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1567451059-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(435, 150, '_wp_attached_file', '2016/10/1824703186.png'),
(436, 150, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1076;s:6:\"height\";i:588;s:4:\"file\";s:22:\"2016/10/1824703186.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1824703186-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"1824703186-300x164.png\";s:5:\"width\";i:300;s:6:\"height\";i:164;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"1824703186-768x420.png\";s:5:\"width\";i:768;s:6:\"height\";i:420;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"1824703186-1024x560.png\";s:5:\"width\";i:1024;s:6:\"height\";i:560;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1824703186-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(437, 151, '_wp_attached_file', '2016/10/2033684534.png'),
(438, 151, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1073;s:6:\"height\";i:753;s:4:\"file\";s:22:\"2016/10/2033684534.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2033684534-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"2033684534-300x211.png\";s:5:\"width\";i:300;s:6:\"height\";i:211;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"2033684534-768x539.png\";s:5:\"width\";i:768;s:6:\"height\";i:539;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"2033684534-1024x719.png\";s:5:\"width\";i:1024;s:6:\"height\";i:719;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2033684534-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(439, 152, '_wp_attached_file', '2016/10/2449832473.png'),
(440, 152, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1070;s:6:\"height\";i:510;s:4:\"file\";s:22:\"2016/10/2449832473.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2449832473-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"2449832473-300x143.png\";s:5:\"width\";i:300;s:6:\"height\";i:143;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"2449832473-768x366.png\";s:5:\"width\";i:768;s:6:\"height\";i:366;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"2449832473-1024x488.png\";s:5:\"width\";i:1024;s:6:\"height\";i:488;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2449832473-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(441, 153, '_wp_attached_file', '2016/10/2636851374.png'),
(442, 153, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1007;s:6:\"height\";i:584;s:4:\"file\";s:22:\"2016/10/2636851374.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2636851374-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"2636851374-300x174.png\";s:5:\"width\";i:300;s:6:\"height\";i:174;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"2636851374-768x445.png\";s:5:\"width\";i:768;s:6:\"height\";i:445;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2636851374-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(443, 154, '_wp_attached_file', '2016/10/3236160541.png'),
(444, 154, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1345;s:6:\"height\";i:938;s:4:\"file\";s:22:\"2016/10/3236160541.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"3236160541-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"3236160541-300x209.png\";s:5:\"width\";i:300;s:6:\"height\";i:209;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"3236160541-768x536.png\";s:5:\"width\";i:768;s:6:\"height\";i:536;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"3236160541-1024x714.png\";s:5:\"width\";i:1024;s:6:\"height\";i:714;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"3236160541-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(445, 155, '_wp_attached_file', '2016/10/3834160044.png'),
(446, 155, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1078;s:6:\"height\";i:580;s:4:\"file\";s:22:\"2016/10/3834160044.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"3834160044-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"3834160044-300x161.png\";s:5:\"width\";i:300;s:6:\"height\";i:161;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"3834160044-768x413.png\";s:5:\"width\";i:768;s:6:\"height\";i:413;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"3834160044-1024x551.png\";s:5:\"width\";i:1024;s:6:\"height\";i:551;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"3834160044-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(447, 156, '_wp_attached_file', '2016/10/4134043583.png'),
(448, 156, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1342;s:6:\"height\";i:948;s:4:\"file\";s:22:\"2016/10/4134043583.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"4134043583-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"4134043583-300x212.png\";s:5:\"width\";i:300;s:6:\"height\";i:212;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"4134043583-768x543.png\";s:5:\"width\";i:768;s:6:\"height\";i:543;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"4134043583-1024x723.png\";s:5:\"width\";i:1024;s:6:\"height\";i:723;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"4134043583-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(449, 157, '_wp_attached_file', '2016/10/1021041937.png'),
(450, 157, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:822;s:6:\"height\";i:371;s:4:\"file\";s:22:\"2016/10/1021041937.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1021041937-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"1021041937-300x135.png\";s:5:\"width\";i:300;s:6:\"height\";i:135;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"1021041937-768x347.png\";s:5:\"width\";i:768;s:6:\"height\";i:347;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1021041937-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(451, 158, '_wp_attached_file', '2016/10/1867581207.png'),
(452, 158, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1112;s:6:\"height\";i:185;s:4:\"file\";s:22:\"2016/10/1867581207.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1867581207-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"1867581207-300x50.png\";s:5:\"width\";i:300;s:6:\"height\";i:50;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"1867581207-768x128.png\";s:5:\"width\";i:768;s:6:\"height\";i:128;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"1867581207-1024x170.png\";s:5:\"width\";i:1024;s:6:\"height\";i:170;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1867581207-250x185.png\";s:5:\"width\";i:250;s:6:\"height\";i:185;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(453, 159, '_wp_attached_file', '2016/10/2218718646.png'),
(454, 159, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:496;s:6:\"height\";i:185;s:4:\"file\";s:22:\"2016/10/2218718646.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2218718646-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"2218718646-300x112.png\";s:5:\"width\";i:300;s:6:\"height\";i:112;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2218718646-250x185.png\";s:5:\"width\";i:250;s:6:\"height\";i:185;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(455, 160, '_wp_attached_file', '2016/10/2600205519.png'),
(456, 160, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:673;s:6:\"height\";i:438;s:4:\"file\";s:22:\"2016/10/2600205519.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2600205519-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"2600205519-300x195.png\";s:5:\"width\";i:300;s:6:\"height\";i:195;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2600205519-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(457, 161, '_wp_attached_file', '2016/10/2652457207.png'),
(458, 161, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:739;s:6:\"height\";i:129;s:4:\"file\";s:22:\"2016/10/2652457207.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2652457207-150x129.png\";s:5:\"width\";i:150;s:6:\"height\";i:129;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"2652457207-300x52.png\";s:5:\"width\";i:300;s:6:\"height\";i:52;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2652457207-250x129.png\";s:5:\"width\";i:250;s:6:\"height\";i:129;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(459, 162, '_wp_attached_file', '2016/10/3291208411.png'),
(460, 162, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:478;s:6:\"height\";i:321;s:4:\"file\";s:22:\"2016/10/3291208411.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"3291208411-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"3291208411-300x201.png\";s:5:\"width\";i:300;s:6:\"height\";i:201;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"3291208411-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(461, 163, '_wp_attached_file', '2016/10/399959680.png'),
(462, 163, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1620;s:6:\"height\";i:881;s:4:\"file\";s:21:\"2016/10/399959680.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"399959680-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"399959680-300x163.png\";s:5:\"width\";i:300;s:6:\"height\";i:163;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"399959680-768x418.png\";s:5:\"width\";i:768;s:6:\"height\";i:418;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"399959680-1024x557.png\";s:5:\"width\";i:1024;s:6:\"height\";i:557;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"399959680-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(463, 164, '_wp_attached_file', '2016/10/840893558.png'),
(464, 164, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:811;s:6:\"height\";i:407;s:4:\"file\";s:21:\"2016/10/840893558.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"840893558-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"840893558-300x151.png\";s:5:\"width\";i:300;s:6:\"height\";i:151;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"840893558-768x385.png\";s:5:\"width\";i:768;s:6:\"height\";i:385;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"840893558-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(465, 165, '_wp_attached_file', '2016/10/717950664.jpg'),
(466, 165, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:640;s:6:\"height\";i:448;s:4:\"file\";s:21:\"2016/10/717950664.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"717950664-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"717950664-300x210.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:210;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"717950664-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(467, 166, '_wp_attached_file', '2016/10/777808097.jpg'),
(468, 166, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:600;s:6:\"height\";i:256;s:4:\"file\";s:21:\"2016/10/777808097.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"777808097-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"777808097-300x128.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"777808097-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(469, 167, '_wp_attached_file', '2016/10/1109755314.jpg'),
(470, 167, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:550;s:6:\"height\";i:270;s:4:\"file\";s:22:\"2016/10/1109755314.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1109755314-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"1109755314-300x147.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:147;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1109755314-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(471, 168, '_wp_attached_file', '2016/10/1731264397.jpg'),
(472, 168, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:448;s:6:\"height\";i:252;s:4:\"file\";s:22:\"2016/10/1731264397.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1731264397-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"1731264397-300x169.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:169;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1731264397-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(473, 169, '_wp_attached_file', '2016/10/1816564950.jpg'),
(474, 169, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:500;s:6:\"height\";i:375;s:4:\"file\";s:22:\"2016/10/1816564950.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"1816564950-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"1816564950-300x225.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"1816564950-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(475, 170, '_wp_attached_file', '2016/10/2966484317.jpg'),
(476, 170, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:640;s:6:\"height\";i:334;s:4:\"file\";s:22:\"2016/10/2966484317.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"2966484317-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"2966484317-300x157.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:157;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"2966484317-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(477, 171, '_wp_attached_file', '2016/10/3863321313.jpg'),
(478, 171, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:560;s:6:\"height\";i:339;s:4:\"file\";s:22:\"2016/10/3863321313.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"3863321313-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"3863321313-300x182.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:182;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"3863321313-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(479, 6, '_edit_lock', '1479119051:1'),
(480, 6, '_edit_last', '1'),
(551, 53, '_edit_last', '1'),
(483, 7, '_edit_lock', '1476028650:1'),
(554, 51, '_edit_lock', '1476032104:1'),
(555, 51, '_edit_last', '1'),
(558, 48, '_edit_lock', '1476032893:1'),
(559, 48, '_edit_last', '1'),
(562, 47, '_edit_lock', '1475916872:1'),
(563, 47, '_edit_last', '1'),
(568, 46, '_edit_lock', '1475916879:1'),
(569, 46, '_edit_last', '1'),
(572, 45, '_edit_lock', '1475916985:1'),
(573, 45, '_edit_last', '1'),
(574, 44, '_edit_lock', '1475916993:1'),
(575, 44, '_edit_last', '1'),
(578, 43, '_edit_lock', '1475917149:1'),
(579, 43, '_edit_last', '1'),
(582, 42, '_edit_lock', '1475917312:1'),
(583, 42, '_edit_last', '1'),
(595, 41, '_edit_last', '1'),
(594, 41, '_edit_lock', '1476179103:1'),
(596, 39, '_edit_lock', '1476382936:1'),
(597, 39, '_edit_last', '1'),
(600, 38, '_edit_lock', '1476021720:1'),
(601, 38, '_edit_last', '1'),
(604, 36, '_edit_lock', '1476029947:1'),
(605, 36, '_edit_last', '1'),
(606, 34, '_edit_lock', '1476331371:1'),
(607, 34, '_edit_last', '1'),
(608, 30, '_edit_lock', '1475866089:1'),
(609, 30, '_edit_last', '1'),
(612, 27, '_edit_lock', '1492012336:1'),
(613, 27, '_edit_last', '1'),
(616, 22, '_edit_lock', '1476030255:1'),
(617, 22, '_edit_last', '1'),
(618, 21, '_edit_lock', '1475866314:1'),
(619, 21, '_edit_last', '1'),
(622, 20, '_edit_lock', '1475866420:1'),
(623, 20, '_edit_last', '1'),
(626, 116, 'views', '261'),
(627, 19, '_edit_lock', '1476030530:1'),
(628, 18, '_edit_lock', '1475866567:1'),
(629, 18, '_edit_last', '1'),
(633, 17, '_edit_lock', '1475866642:1'),
(632, 19, '_edit_last', '1'),
(634, 16, '_edit_lock', '1476031572:1'),
(635, 15, '_edit_lock', '1491806880:1'),
(636, 16, '_edit_last', '1'),
(637, 15, '_edit_last', '1'),
(638, 14, '_edit_lock', '1475866821:1'),
(639, 14, '_edit_last', '1'),
(642, 13, '_edit_lock', '1492012195:1'),
(643, 13, '_edit_last', '1'),
(647, 240, '_edit_lock', '1475868983:1'),
(646, 240, '_edit_last', '1'),
(654, 100, 'views', '323'),
(650, 240, 'views', '724'),
(653, 105, 'views', '380'),
(655, 145, 'views', '141'),
(656, 127, 'views', '406'),
(657, 153, 'views', '450');
INSERT INTO `gzp_postmeta` (`meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(1265, 510, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:600;s:6:\"height\";i:338;s:4:\"file\";s:22:\"2016/11/php_encode.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"php_encode-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"php_encode-300x169.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:169;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"php_encode-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(668, 50, '_edit_lock', '1475915938:1'),
(669, 50, '_edit_last', '1'),
(694, 49, '_edit_last', '1'),
(683, 54, '_syntaxhighlighter_encoded', '1'),
(686, 50, '_syntaxhighlighter_encoded', '1'),
(693, 49, '_edit_lock', '1475916815:1'),
(697, 49, '_syntaxhighlighter_encoded', '1'),
(716, 95, 'views', '151'),
(702, 45, '_syntaxhighlighter_encoded', '1'),
(705, 43, '_syntaxhighlighter_encoded', '1'),
(717, 139, 'views', '144'),
(715, 40, '_edit_lock', '1475917320:1'),
(714, 42, '_syntaxhighlighter_encoded', '1'),
(718, 131, 'views', '445'),
(719, 150, 'views', '165'),
(720, 269, '_edit_last', '1'),
(721, 269, '_edit_lock', '1475981338:1'),
(722, 269, '_syntaxhighlighter_encoded', '1'),
(739, 278, '_edit_lock', '1476002618:1'),
(725, 269, 'views', '318'),
(738, 278, '_edit_last', '1'),
(740, 278, '_syntaxhighlighter_encoded', '1'),
(754, 37, '_edit_last', '1'),
(743, 278, 'views', '198'),
(753, 37, '_edit_lock', '1476022207:1'),
(752, 39, '_syntaxhighlighter_encoded', '1'),
(757, 37, '_syntaxhighlighter_encoded', '1'),
(760, 33, '_edit_lock', '1476026204:1'),
(761, 33, '_edit_last', '1'),
(775, 32, '_edit_lock', '1476027560:1'),
(764, 33, '_syntaxhighlighter_encoded', '1'),
(776, 32, '_edit_last', '1'),
(794, 23, '_edit_last', '1'),
(779, 32, '_syntaxhighlighter_encoded', '1'),
(789, 31, '_edit_last', '1'),
(788, 31, '_edit_lock', '1476027989:1'),
(793, 23, '_edit_lock', '1476028087:1'),
(792, 31, '_syntaxhighlighter_encoded', '1'),
(802, 9, '_edit_last', '1'),
(797, 23, '_syntaxhighlighter_encoded', '1'),
(801, 97, 'views', '524'),
(800, 12, '_syntaxhighlighter_encoded', '1'),
(805, 9, '_syntaxhighlighter_encoded', '1'),
(813, 41, '_syntaxhighlighter_encoded', '1'),
(808, 7, '_syntaxhighlighter_encoded', '1'),
(830, 22, '_syntaxhighlighter_encoded', '1'),
(816, 36, '_syntaxhighlighter_encoded', '1'),
(825, 34, '_syntaxhighlighter_encoded', '1'),
(836, 16, '_syntaxhighlighter_encoded', '1'),
(855, 115, 'views', '787'),
(833, 19, '_syntaxhighlighter_encoded', '1'),
(841, 15, '_syntaxhighlighter_encoded', '1'),
(846, 51, '_syntaxhighlighter_encoded', '1'),
(856, 162, 'views', '567'),
(857, 94, 'views', '157'),
(858, 148, 'views', '112'),
(859, 151, 'views', '118'),
(860, 159, 'views', '126'),
(861, 144, 'views', '142'),
(862, 331, 'title', 'NextGEN 缩略图 基础版'),
(863, 331, 'preview_image_relpath', '/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_gallery/static/thumb_preview.jpg'),
(864, 331, 'default_source', 'galleries'),
(865, 331, 'view_order', '10000'),
(866, 331, 'name', 'photocrati-nextgen_basic_thumbnails'),
(867, 331, 'installed_at_version', '2.1.50'),
(868, 331, 'hidden_from_ui', ''),
(869, 331, '__defaults_set', '1'),
(870, 331, 'filter', 'raw'),
(871, 331, 'entity_types', 'WyJpbWFnZSJd'),
(872, 331, 'id_field', 'ID'),
(873, 331, 'settings', 'eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJpbWFnZXNfcGVyX3BhZ2UiOiIyMCIsIm51bWJlcl9vZl9jb2x1bW5zIjowLCJ0aHVtYm5haWxfd2lkdGgiOjI0MCwidGh1bWJuYWlsX2hlaWdodCI6MTYwLCJzaG93X2FsbF9pbl9saWdodGJveCI6MCwiYWpheF9wYWdpbmF0aW9uIjowLCJ1c2VfaW1hZ2Vicm93c2VyX2VmZmVjdCI6MCwidGVtcGxhdGUiOiIiLCJkaXNwbGF5X25vX2ltYWdlc19lcnJvciI6MSwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJzaG93X3NsaWRlc2hvd19saW5rIjoxLCJzbGlkZXNob3dfbGlua190ZXh0IjoiW1x1NjYzZVx1NzkzYVx1NWU3Ylx1NzA2Zlx1NzI0N10iLCJvdmVycmlkZV90aHVtYm5haWxfc2V0dGluZ3MiOjAsInRodW1ibmFpbF9xdWFsaXR5IjoiMTAwIiwidGh1bWJuYWlsX2Nyb3AiOjEsInRodW1ibmFpbF93YXRlcm1hcmsiOjAsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifQ=='),
(874, 332, 'title', 'NextGEN 幻灯片 基础版'),
(875, 332, 'preview_image_relpath', '/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_gallery/static/slideshow_preview.jpg'),
(876, 332, 'default_source', 'galleries'),
(877, 332, 'view_order', '10010'),
(878, 332, 'name', 'photocrati-nextgen_basic_slideshow'),
(879, 332, 'installed_at_version', '2.1.50'),
(880, 332, 'hidden_from_ui', ''),
(881, 332, '__defaults_set', '1'),
(882, 332, 'filter', 'raw'),
(883, 332, 'entity_types', 'WyJpbWFnZSJd'),
(884, 332, 'id_field', 'ID'),
(885, 332, 'settings', 'eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJ5X3dpZHRoIjo2MDAsImdhbGxlcnlfaGVpZ2h0Ijo0MDAsInRodW1ibmFpbF93aWR0aCI6MjQwLCJ0aHVtYm5haWxfaGVpZ2h0IjoxNjAsImN5Y2xlX2ludGVydmFsIjoxMCwiY3ljbGVfZWZmZWN0IjpudWxsLCJlZmZlY3RfY29kZSI6ImNsYXNzPVwibmdnLWZhbmN5Ym94XCIgcmVsPVwiJUdBTExFUllfTkFNRSVcIiIsInNob3dfdGh1bWJuYWlsX2xpbmsiOjEsInRodW1ibmFpbF9saW5rX3RleHQiOiJbXHU2NjNlXHU3OTNhXHU3ZjI5XHU3NTY1XHU1NmZlXSIsInRlbXBsYXRlIjoiIiwibmdnX3RyaWdnZXJzX2Rpc3BsYXkiOiJuZXZlciJ9'),
(886, 333, 'title', 'NextGEN ImageBrowser 基础版'),
(887, 333, 'preview_image_relpath', '/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_imagebrowser/static/preview.jpg'),
(888, 333, 'default_source', 'galleries'),
(889, 333, 'view_order', '10020'),
(890, 333, 'name', 'photocrati-nextgen_basic_imagebrowser'),
(891, 333, 'installed_at_version', '2.1.50'),
(892, 333, 'hidden_from_ui', ''),
(893, 333, '__defaults_set', '1'),
(894, 333, 'filter', 'raw'),
(895, 333, 'entity_types', 'WyJpbWFnZSJd'),
(896, 333, 'id_field', 'ID'),
(897, 333, 'settings', 'eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifQ=='),
(898, 334, 'title', 'NextGEN Basic SinglePic'),
(899, 334, 'preview_image_relpath', '/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_singlepic/static/preview.gif'),
(900, 334, 'default_source', 'galleries'),
(901, 334, 'view_order', '10060'),
(902, 334, 'hidden_from_ui', '1'),
(903, 334, 'name', 'photocrati-nextgen_basic_singlepic'),
(904, 334, 'installed_at_version', '2.1.50'),
(905, 334, '__defaults_set', '1'),
(906, 334, 'filter', 'raw'),
(907, 334, 'entity_types', 'WyJpbWFnZSJd'),
(908, 334, 'id_field', 'ID'),
(909, 334, 'settings', 'eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJ3aWR0aCI6IiIsImhlaWdodCI6IiIsIm1vZGUiOiIiLCJkaXNwbGF5X3dhdGVybWFyayI6MCwiZGlzcGxheV9yZWZsZWN0aW9uIjowLCJmbG9hdCI6IiIsImxpbmsiOiIiLCJsaW5rX3RhcmdldCI6Il9ibGFuayIsInF1YWxpdHkiOjEwMCwiY3JvcCI6MCwidGVtcGxhdGUiOiIiLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn0='),
(910, 335, 'title', 'NextGEN Basic TagCloud'),
(911, 335, 'preview_image_relpath', '/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_tagcloud/static/preview.gif'),
(912, 335, 'default_source', 'tags'),
(913, 335, 'view_order', '10100'),
(914, 335, 'name', 'photocrati-nextgen_basic_tagcloud'),
(915, 335, 'installed_at_version', '2.1.50'),
(916, 335, 'hidden_from_ui', ''),
(917, 335, '__defaults_set', '1'),
(918, 335, 'filter', 'raw'),
(919, 335, 'entity_types', 'WyJpbWFnZSJd'),
(920, 335, 'id_field', 'ID'),
(921, 335, 'settings', 'eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJkaXNwbGF5X3R5cGUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfdGh1bWJuYWlscyIsIm51bWJlciI6NDUsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifQ=='),
(922, 336, 'title', 'NextGEN 紧凑视图相册 基础版'),
(923, 336, 'preview_image_relpath', '/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_album/static/compact_preview.jpg'),
(924, 336, 'default_source', 'albums'),
(925, 336, 'view_order', '10200'),
(926, 336, 'name', 'photocrati-nextgen_basic_compact_album'),
(927, 336, 'installed_at_version', '2.1.50'),
(928, 336, 'hidden_from_ui', ''),
(929, 336, '__defaults_set', '1'),
(930, 336, 'filter', 'raw'),
(931, 336, 'entity_types', 'WyJhbGJ1bSIsImdhbGxlcnkiXQ=='),
(932, 336, 'id_field', 'ID'),
(933, 336, 'settings', 'eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJpZXNfcGVyX3BhZ2UiOjAsImVuYWJsZV9icmVhZGNydW1icyI6MSwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJlbmFibGVfZGVzY3JpcHRpb25zIjowLCJ0ZW1wbGF0ZSI6IiIsIm9wZW5fZ2FsbGVyeV9pbl9saWdodGJveCI6MCwiZ2FsbGVyeV9kaXNwbGF5X3R5cGUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfdGh1bWJuYWlscyIsImdhbGxlcnlfZGlzcGxheV90ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifQ=='),
(934, 337, 'title', 'NextGEN 扩展视图相册 基础版'),
(935, 337, 'preview_image_relpath', '/nextgen-gallery/products/photocrati_nextgen/modules/nextgen_basic_album/static/extended_preview.jpg'),
(936, 337, 'default_source', 'albums'),
(937, 337, 'view_order', '10210'),
(938, 337, 'name', 'photocrati-nextgen_basic_extended_album'),
(939, 337, 'installed_at_version', '2.1.50'),
(940, 337, 'hidden_from_ui', ''),
(941, 337, '__defaults_set', '1'),
(942, 337, 'filter', 'raw'),
(943, 337, 'entity_types', 'WyJhbGJ1bSIsImdhbGxlcnkiXQ=='),
(944, 337, 'id_field', 'ID'),
(945, 337, 'settings', 'eyJ1c2VfbGlnaHRib3hfZWZmZWN0Ijp0cnVlLCJnYWxsZXJpZXNfcGVyX3BhZ2UiOjAsImVuYWJsZV9icmVhZGNydW1icyI6MSwiZGlzYWJsZV9wYWdpbmF0aW9uIjowLCJlbmFibGVfZGVzY3JpcHRpb25zIjowLCJ0ZW1wbGF0ZSI6IiIsIm9wZW5fZ2FsbGVyeV9pbl9saWdodGJveCI6MCwib3ZlcnJpZGVfdGh1bWJuYWlsX3NldHRpbmdzIjowLCJ0aHVtYm5haWxfd2lkdGgiOjI0MCwidGh1bWJuYWlsX2hlaWdodCI6MTYwLCJ0aHVtYm5haWxfcXVhbGl0eSI6MTAwLCJ0aHVtYm5haWxfY3JvcCI6dHJ1ZSwidGh1bWJuYWlsX3dhdGVybWFyayI6MCwiZ2FsbGVyeV9kaXNwbGF5X3R5cGUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfdGh1bWJuYWlscyIsImdhbGxlcnlfZGlzcGxheV90ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifQ=='),
(965, 161, 'views', '86'),
(1262, 509, '_edit_last', '1'),
(1459, 580, '_menu_item_object', 'category'),
(1458, 580, '_menu_item_object_id', '91'),
(966, 170, 'views', '375'),
(967, 347, '_edit_last', '1'),
(968, 347, '_edit_lock', '1476278770:1'),
(969, 347, '_syntaxhighlighter_encoded', '1'),
(979, 350, '_menu_item_type', 'taxonomy'),
(972, 347, 'views', '276'),
(980, 350, '_menu_item_menu_item_parent', '86'),
(981, 350, '_menu_item_object_id', '66'),
(982, 350, '_menu_item_object', 'category'),
(983, 350, '_menu_item_target', ''),
(984, 350, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(985, 350, '_menu_item_xfn', ''),
(986, 350, '_menu_item_url', ''),
(998, 352, '_edit_lock', '1476287522:1'),
(988, 351, '_menu_item_type', 'taxonomy'),
(989, 351, '_menu_item_menu_item_parent', '350'),
(990, 351, '_menu_item_object_id', '67'),
(991, 351, '_menu_item_object', 'category'),
(992, 351, '_menu_item_target', ''),
(993, 351, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(994, 351, '_menu_item_xfn', ''),
(995, 351, '_menu_item_url', ''),
(997, 352, '_edit_last', '1'),
(1008, 358, '_edit_lock', '1476287896:1'),
(1001, 352, 'views', '235'),
(1002, 352, '_syntaxhighlighter_encoded', '1'),
(1007, 358, '_edit_last', '1'),
(1009, 168, 'views', '325'),
(1012, 358, 'views', '247'),
(1013, 360, '_menu_item_type', 'taxonomy'),
(1014, 360, '_menu_item_menu_item_parent', '86'),
(1015, 360, '_menu_item_object_id', '71'),
(1016, 360, '_menu_item_object', 'category'),
(1017, 360, '_menu_item_target', ''),
(1018, 360, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1019, 360, '_menu_item_xfn', ''),
(1020, 360, '_menu_item_url', ''),
(1022, 361, '_menu_item_type', 'taxonomy'),
(1023, 361, '_menu_item_menu_item_parent', '86'),
(1024, 361, '_menu_item_object_id', '70'),
(1025, 361, '_menu_item_object', 'category'),
(1026, 361, '_menu_item_target', ''),
(1027, 361, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1028, 361, '_menu_item_xfn', ''),
(1029, 361, '_menu_item_url', ''),
(1031, 362, '_menu_item_type', 'taxonomy'),
(1032, 362, '_menu_item_menu_item_parent', '361'),
(1033, 362, '_menu_item_object_id', '72'),
(1034, 362, '_menu_item_object', 'category'),
(1035, 362, '_menu_item_target', ''),
(1036, 362, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1037, 362, '_menu_item_xfn', ''),
(1038, 362, '_menu_item_url', ''),
(1040, 363, '_menu_item_type', 'taxonomy'),
(1041, 363, '_menu_item_menu_item_parent', '86'),
(1042, 363, '_menu_item_object_id', '69'),
(1043, 363, '_menu_item_object', 'category'),
(1044, 363, '_menu_item_target', ''),
(1045, 363, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1046, 363, '_menu_item_xfn', ''),
(1047, 363, '_menu_item_url', ''),
(1264, 510, '_wp_attached_file', '2016/11/php_encode.jpg'),
(1263, 509, '_edit_lock', '1479544786:1'),
(1084, 380, '_wp_attached_file', '2016/10/me.jpg'),
(1085, 380, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:3024;s:6:\"height\";i:4032;s:4:\"file\";s:14:\"2016/10/me.jpg\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:14:\"me-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:14:\"me-225x300.jpg\";s:5:\"width\";i:225;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:15:\"me-768x1024.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:15:\"me-768x1024.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:14:\"me-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1192, 455, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1082;s:6:\"height\";i:1920;s:4:\"file\";s:20:\"2016/10/jlt-card.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"jlt-card-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"jlt-card-169x300.png\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"jlt-card-768x1363.png\";s:5:\"width\";i:768;s:6:\"height\";i:1363;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"jlt-card-577x1024.png\";s:5:\"width\";i:577;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:20:\"jlt-card-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1191, 455, '_wp_attached_file', '2016/10/jlt-card.png'),
(1094, 383, '_edit_last', '1'),
(1095, 383, '_edit_lock', '1476690377:1'),
(1096, 384, '_wp_attached_file', '2016/10/centos6.6setup5.png'),
(1097, 384, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:497;s:6:\"height\";i:464;s:4:\"file\";s:27:\"2016/10/centos6.6setup5.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup5-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"centos6.6setup5-300x280.png\";s:5:\"width\";i:300;s:6:\"height\";i:280;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup5-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1098, 385, '_wp_attached_file', '2016/10/centos6.6setup6.png'),
(1099, 385, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:500;s:6:\"height\";i:470;s:4:\"file\";s:27:\"2016/10/centos6.6setup6.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup6-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"centos6.6setup6-300x282.png\";s:5:\"width\";i:300;s:6:\"height\";i:282;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup6-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1100, 386, '_wp_attached_file', '2016/10/centos6.6setup7.png'),
(1101, 386, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:793;s:6:\"height\";i:594;s:4:\"file\";s:27:\"2016/10/centos6.6setup7.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup7-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"centos6.6setup7-300x225.png\";s:5:\"width\";i:300;s:6:\"height\";i:225;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:27:\"centos6.6setup7-768x575.png\";s:5:\"width\";i:768;s:6:\"height\";i:575;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup7-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1102, 387, '_wp_attached_file', '2016/10/centos6.6setup8.png'),
(1103, 387, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:796;s:6:\"height\";i:595;s:4:\"file\";s:27:\"2016/10/centos6.6setup8.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup8-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"centos6.6setup8-300x224.png\";s:5:\"width\";i:300;s:6:\"height\";i:224;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:27:\"centos6.6setup8-768x574.png\";s:5:\"width\";i:768;s:6:\"height\";i:574;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup8-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1104, 388, '_wp_attached_file', '2016/10/centos6.6setup9.png'),
(1105, 388, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:800;s:6:\"height\";i:599;s:4:\"file\";s:27:\"2016/10/centos6.6setup9.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup9-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"centos6.6setup9-300x225.png\";s:5:\"width\";i:300;s:6:\"height\";i:225;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:27:\"centos6.6setup9-768x575.png\";s:5:\"width\";i:768;s:6:\"height\";i:575;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup9-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1106, 389, '_wp_attached_file', '2016/10/centos6.6setup1.png'),
(1107, 389, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:716;s:6:\"height\";i:406;s:4:\"file\";s:27:\"2016/10/centos6.6setup1.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"centos6.6setup1-300x170.png\";s:5:\"width\";i:300;s:6:\"height\";i:170;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup1-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1108, 390, '_wp_attached_file', '2016/10/centos6.6setup2.png'),
(1109, 390, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:798;s:6:\"height\";i:597;s:4:\"file\";s:27:\"2016/10/centos6.6setup2.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"centos6.6setup2-300x224.png\";s:5:\"width\";i:300;s:6:\"height\";i:224;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:27:\"centos6.6setup2-768x575.png\";s:5:\"width\";i:768;s:6:\"height\";i:575;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup2-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1110, 391, '_wp_attached_file', '2016/10/centos6.6setup3.png'),
(1111, 391, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:796;s:6:\"height\";i:595;s:4:\"file\";s:27:\"2016/10/centos6.6setup3.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"centos6.6setup3-300x224.png\";s:5:\"width\";i:300;s:6:\"height\";i:224;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:27:\"centos6.6setup3-768x574.png\";s:5:\"width\";i:768;s:6:\"height\";i:574;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup3-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1112, 392, '_wp_attached_file', '2016/10/centos6.6setup4.png'),
(1113, 392, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:223;s:6:\"height\";i:382;s:4:\"file\";s:27:\"2016/10/centos6.6setup4.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup4-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"centos6.6setup4-175x300.png\";s:5:\"width\";i:175;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:27:\"centos6.6setup4-223x250.png\";s:5:\"width\";i:223;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1114, 383, '_thumbnail_id', '388'),
(1118, 394, '_menu_item_type', 'taxonomy'),
(1117, 383, 'views', '298'),
(1119, 394, '_menu_item_menu_item_parent', '363'),
(1120, 394, '_menu_item_object_id', '73'),
(1121, 394, '_menu_item_object', 'category'),
(1122, 394, '_menu_item_target', ''),
(1123, 394, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1124, 394, '_menu_item_xfn', ''),
(1125, 394, '_menu_item_url', ''),
(1127, 395, '_wp_attached_file', '2016/10/uic-logo.jpg'),
(1128, 395, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:306;s:6:\"height\";i:265;s:4:\"file\";s:20:\"2016/10/uic-logo.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"uic-logo-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"uic-logo-300x260.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:260;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:20:\"uic-logo-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(1129, 396, '_wp_attached_file', '2016/10/uic-campus.jpg'),
(1130, 396, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:600;s:6:\"height\";i:400;s:4:\"file\";s:22:\"2016/10/uic-campus.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"uic-campus-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"uic-campus-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"uic-campus-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:2:\"11\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:12:\"Canon EOS 6D\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:10:\"1430757346\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:2:\"24\";s:3:\"iso\";s:3:\"100\";s:13:\"shutter_speed\";s:6:\"0.0125\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1131, 397, '_wp_attached_file', '2016/10/uic-graduated-e1476724151410.jpg'),
(1132, 397, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:423;s:6:\"height\";i:857;s:4:\"file\";s:40:\"2016/10/uic-graduated-e1476724151410.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:40:\"uic-graduated-e1476724151410-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:40:\"uic-graduated-e1476724151410-148x300.jpg\";s:5:\"width\";i:148;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:40:\"uic-graduated-e1476724151410-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1133, 397, '_wp_attachment_backup_sizes', 'a:4:{s:9:\"full-orig\";a:3:{s:5:\"width\";i:506;s:6:\"height\";i:900;s:4:\"file\";s:17:\"uic-graduated.jpg\";}s:14:\"thumbnail-orig\";a:4:{s:4:\"file\";s:25:\"uic-graduated-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:11:\"medium-orig\";a:4:{s:4:\"file\";s:25:\"uic-graduated-169x300.jpg\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"index-thumbnail-orig\";a:4:{s:4:\"file\";s:25:\"uic-graduated-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}'),
(1977, 850, '_edit_last', '1'),
(1974, 848, '_edit_lock', '1490717003:1'),
(1140, 401, '_wp_attached_file', '2016/10/terena-logo.jpg'),
(1141, 401, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:577;s:6:\"height\";i:240;s:4:\"file\";s:23:\"2016/10/terena-logo.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"terena-logo-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"terena-logo-300x125.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:125;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:23:\"terena-logo-250x240.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:240;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(1142, 402, '_wp_attached_file', '2016/10/cego168-logo.jpg'),
(1143, 402, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:593;s:6:\"height\";i:589;s:4:\"file\";s:24:\"2016/10/cego168-logo.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"cego168-logo-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"cego168-logo-300x298.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:298;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:24:\"cego168-logo-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1144, 403, '_wp_attached_file', '2016/10/yanwu-logo.png'),
(1145, 403, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1181;s:6:\"height\";i:1181;s:4:\"file\";s:22:\"2016/10/yanwu-logo.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"yanwu-logo-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"yanwu-logo-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"yanwu-logo-768x768.png\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:24:\"yanwu-logo-1024x1024.png\";s:5:\"width\";i:1024;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"yanwu-logo-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1146, 404, '_wp_attached_file', '2016/10/cego168-wechat1.png'),
(1147, 404, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:750;s:6:\"height\";i:1334;s:4:\"file\";s:27:\"2016/10/cego168-wechat1.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"cego168-wechat1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"cego168-wechat1-169x300.png\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:28:\"cego168-wechat1-576x1024.png\";s:5:\"width\";i:576;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:27:\"cego168-wechat1-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1148, 405, '_wp_attached_file', '2016/10/cego168-wechat2.png'),
(1149, 405, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:750;s:6:\"height\";i:1334;s:4:\"file\";s:27:\"2016/10/cego168-wechat2.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"cego168-wechat2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"cego168-wechat2-169x300.png\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:28:\"cego168-wechat2-576x1024.png\";s:5:\"width\";i:576;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:27:\"cego168-wechat2-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1150, 406, '_wp_attached_file', '2016/10/cego168-userlogin.png'),
(1151, 406, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:750;s:6:\"height\";i:1334;s:4:\"file\";s:29:\"2016/10/cego168-userlogin.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"cego168-userlogin-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"cego168-userlogin-169x300.png\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:30:\"cego168-userlogin-576x1024.png\";s:5:\"width\";i:576;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:29:\"cego168-userlogin-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1152, 407, '_wp_attached_file', '2016/10/cego168-gooddetail.png'),
(1153, 407, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:750;s:6:\"height\";i:1334;s:4:\"file\";s:30:\"2016/10/cego168-gooddetail.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"cego168-gooddetail-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:30:\"cego168-gooddetail-169x300.png\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:31:\"cego168-gooddetail-576x1024.png\";s:5:\"width\";i:576;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:30:\"cego168-gooddetail-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1154, 408, '_wp_attached_file', '2016/10/cego168-mobileUserCenter.png'),
(1155, 408, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:750;s:6:\"height\";i:1334;s:4:\"file\";s:36:\"2016/10/cego168-mobileUserCenter.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:36:\"cego168-mobileUserCenter-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:36:\"cego168-mobileUserCenter-169x300.png\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:37:\"cego168-mobileUserCenter-576x1024.png\";s:5:\"width\";i:576;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:36:\"cego168-mobileUserCenter-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1156, 409, '_wp_attached_file', '2016/10/cego168-mobileCart.png'),
(1157, 409, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:750;s:6:\"height\";i:1334;s:4:\"file\";s:30:\"2016/10/cego168-mobileCart.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:30:\"cego168-mobileCart-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:30:\"cego168-mobileCart-169x300.png\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:31:\"cego168-mobileCart-576x1024.png\";s:5:\"width\";i:576;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:30:\"cego168-mobileCart-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1158, 410, '_wp_attached_file', '2016/10/cego168-PCindex.png'),
(1159, 410, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1892;s:6:\"height\";i:936;s:4:\"file\";s:27:\"2016/10/cego168-PCindex.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"cego168-PCindex-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"cego168-PCindex-300x148.png\";s:5:\"width\";i:300;s:6:\"height\";i:148;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:27:\"cego168-PCindex-768x380.png\";s:5:\"width\";i:768;s:6:\"height\";i:380;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:28:\"cego168-PCindex-1024x507.png\";s:5:\"width\";i:1024;s:6:\"height\";i:507;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:27:\"cego168-PCindex-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1160, 411, '_wp_attached_file', '2016/10/cego168-PCusercenter.png'),
(1161, 411, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1254;s:6:\"height\";i:933;s:4:\"file\";s:32:\"2016/10/cego168-PCusercenter.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"cego168-PCusercenter-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"cego168-PCusercenter-300x223.png\";s:5:\"width\";i:300;s:6:\"height\";i:223;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"cego168-PCusercenter-768x571.png\";s:5:\"width\";i:768;s:6:\"height\";i:571;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"cego168-PCusercenter-1024x762.png\";s:5:\"width\";i:1024;s:6:\"height\";i:762;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:32:\"cego168-PCusercenter-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1162, 412, '_wp_attached_file', '2016/10/cego168-PCmywork.png'),
(1163, 412, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1890;s:6:\"height\";i:936;s:4:\"file\";s:28:\"2016/10/cego168-PCmywork.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"cego168-PCmywork-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"cego168-PCmywork-300x149.png\";s:5:\"width\";i:300;s:6:\"height\";i:149;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:28:\"cego168-PCmywork-768x380.png\";s:5:\"width\";i:768;s:6:\"height\";i:380;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:29:\"cego168-PCmywork-1024x507.png\";s:5:\"width\";i:1024;s:6:\"height\";i:507;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:28:\"cego168-PCmywork-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1164, 413, '_wp_attached_file', '2016/10/cego168-goodsshow.png'),
(1165, 413, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:750;s:6:\"height\";i:1334;s:4:\"file\";s:29:\"2016/10/cego168-goodsshow.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"cego168-goodsshow-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"cego168-goodsshow-169x300.png\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:30:\"cego168-goodsshow-576x1024.png\";s:5:\"width\";i:576;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:29:\"cego168-goodsshow-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1166, 414, '_wp_attached_file', '2016/10/cego168-mobileindex.png'),
(1167, 414, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:750;s:6:\"height\";i:1334;s:4:\"file\";s:31:\"2016/10/cego168-mobileindex.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"cego168-mobileindex-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"cego168-mobileindex-169x300.png\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:32:\"cego168-mobileindex-576x1024.png\";s:5:\"width\";i:576;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:31:\"cego168-mobileindex-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1168, 415, '_wp_attached_file', '2016/10/jlt-demo.png'),
(1169, 415, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1082;s:6:\"height\";i:1920;s:4:\"file\";s:20:\"2016/10/jlt-demo.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"jlt-demo-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"jlt-demo-169x300.png\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"jlt-demo-768x1363.png\";s:5:\"width\";i:768;s:6:\"height\";i:1363;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"jlt-demo-577x1024.png\";s:5:\"width\";i:577;s:6:\"height\";i:1024;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:20:\"jlt-demo-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1170, 416, '_wp_attached_file', '2016/10/jly-login.png'),
(1171, 416, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1614;s:6:\"height\";i:857;s:4:\"file\";s:21:\"2016/10/jly-login.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"jly-login-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"jly-login-300x159.png\";s:5:\"width\";i:300;s:6:\"height\";i:159;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"jly-login-768x408.png\";s:5:\"width\";i:768;s:6:\"height\";i:408;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"jly-login-1024x544.png\";s:5:\"width\";i:1024;s:6:\"height\";i:544;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"jly-login-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1172, 417, '_wp_attached_file', '2016/10/jlt-adminindex.png');
INSERT INTO `gzp_postmeta` (`meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(1173, 417, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1890;s:6:\"height\";i:939;s:4:\"file\";s:26:\"2016/10/jlt-adminindex.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"jlt-adminindex-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"jlt-adminindex-300x149.png\";s:5:\"width\";i:300;s:6:\"height\";i:149;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:26:\"jlt-adminindex-768x382.png\";s:5:\"width\";i:768;s:6:\"height\";i:382;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:27:\"jlt-adminindex-1024x509.png\";s:5:\"width\";i:1024;s:6:\"height\";i:509;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:26:\"jlt-adminindex-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1174, 405, '_edit_lock', '1476779270:1'),
(1251, 505, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:728;s:6:\"height\";i:1051;s:4:\"file\";s:24:\"2016/11/mysql-jiagou.jpg\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"mysql-jiagou-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"mysql-jiagou-208x300.jpg\";s:5:\"width\";i:208;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:25:\"mysql-jiagou-709x1024.jpg\";s:5:\"width\";i:709;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:24:\"mysql-jiagou-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(1250, 505, '_wp_attached_file', '2016/11/mysql-jiagou.jpg'),
(1204, 482, '_edit_last', '1'),
(1205, 482, '_edit_lock', '1478103467:1'),
(1206, 482, '_syntaxhighlighter_encoded', '1'),
(1210, 485, '_edit_last', '1'),
(1209, 482, 'views', '310'),
(1211, 485, '_edit_lock', '1478536311:1'),
(1224, 489, 'views', '237'),
(1233, 497, '_edit_last', '1'),
(1214, 485, 'views', '252'),
(1235, 497, '_syntaxhighlighter_encoded', '1'),
(1245, 503, '_edit_last', '1'),
(1246, 503, '_edit_lock', '1479150070:1'),
(1238, 497, 'views', '210'),
(1247, 503, '_syntaxhighlighter_encoded', '1'),
(1248, 504, '_wp_attached_file', '2016/11/mysql-geli.jpg'),
(1249, 504, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1549;s:6:\"height\";i:324;s:4:\"file\";s:22:\"2016/11/mysql-geli.jpg\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"mysql-geli-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"mysql-geli-300x63.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:63;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"mysql-geli-768x161.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:161;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"mysql-geli-1024x214.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:214;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:22:\"mysql-geli-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(1200, 469, '_wp_attached_file', '2016/10/jlt-share.png'),
(1201, 469, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:500;s:6:\"height\";i:889;s:4:\"file\";s:21:\"2016/10/jlt-share.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"jlt-share-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"jlt-share-169x300.png\";s:5:\"width\";i:169;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:21:\"jlt-share-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1252, 506, '_wp_attached_file', '2016/11/HighPerformance-MySQL.jpg'),
(1253, 506, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1024;s:6:\"height\";i:1365;s:4:\"file\";s:33:\"2016/11/HighPerformance-MySQL.jpg\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"HighPerformance-MySQL-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"HighPerformance-MySQL-225x300.jpg\";s:5:\"width\";i:225;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:34:\"HighPerformance-MySQL-768x1024.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"HighPerformance-MySQL-768x1024.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:33:\"HighPerformance-MySQL-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:3:\"2.2\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:9:\"iPhone 6s\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:10:\"1479060090\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:4:\"4.15\";s:3:\"iso\";s:3:\"160\";s:13:\"shutter_speed\";s:16:\"0.03030303030303\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(1254, 503, '_thumbnail_id', '506'),
(1257, 503, 'views', '299'),
(1266, 509, '_thumbnail_id', '510'),
(1267, 509, '_syntaxhighlighter_encoded', '1'),
(1275, 516, '_edit_last', '1'),
(1270, 509, 'views', '295'),
(1276, 516, '_edit_lock', '1480005223:1'),
(1457, 580, '_menu_item_menu_item_parent', '83'),
(1279, 516, 'views', '218'),
(1456, 580, '_menu_item_type', 'taxonomy'),
(1282, 519, '_menu_item_type', 'taxonomy'),
(1283, 519, '_menu_item_menu_item_parent', '361'),
(1284, 519, '_menu_item_object_id', '75'),
(1285, 519, '_menu_item_object', 'category'),
(1286, 519, '_menu_item_target', ''),
(1287, 519, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1288, 519, '_menu_item_xfn', ''),
(1289, 519, '_menu_item_url', ''),
(1301, 521, '_edit_lock', '1480345112:1'),
(1291, 520, '_menu_item_type', 'taxonomy'),
(1292, 520, '_menu_item_menu_item_parent', '80'),
(1293, 520, '_menu_item_object_id', '76'),
(1294, 520, '_menu_item_object', 'category'),
(1295, 520, '_menu_item_target', ''),
(1296, 520, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1297, 520, '_menu_item_xfn', ''),
(1298, 520, '_menu_item_url', ''),
(1300, 521, '_edit_last', '1'),
(1305, 524, '_edit_last', '1'),
(1304, 521, 'views', '278'),
(1306, 524, '_edit_lock', '1481175002:1'),
(1307, 524, '_syntaxhighlighter_encoded', '1'),
(1308, 525, '_wp_attached_file', '2016/12/Image.png'),
(1309, 525, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:207;s:6:\"height\";i:389;s:4:\"file\";s:17:\"2016/12/Image.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"Image-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"Image-160x300.png\";s:5:\"width\";i:160;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:17:\"Image-207x250.png\";s:5:\"width\";i:207;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1312, 524, 'views', '242'),
(1318, 530, '_menu_item_menu_item_parent', '350'),
(1317, 530, '_menu_item_type', 'taxonomy'),
(1319, 530, '_menu_item_object_id', '80'),
(1320, 530, '_menu_item_object', 'category'),
(1321, 530, '_menu_item_target', ''),
(1322, 530, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1323, 530, '_menu_item_xfn', ''),
(1324, 530, '_menu_item_url', ''),
(2171, 944, '_menu_item_menu_item_parent', '0'),
(2170, 944, '_menu_item_type', 'taxonomy'),
(2169, 932, '_edit_lock', '1496247934:1'),
(2168, 922, '_edit_lock', '1496243793:1'),
(2167, 923, '_edit_lock', '1496241941:1'),
(1349, 534, '_edit_last', '1'),
(1340, 533, '_menu_item_type', 'taxonomy'),
(1341, 533, '_menu_item_menu_item_parent', '350'),
(1342, 533, '_menu_item_object_id', '81'),
(1343, 533, '_menu_item_object', 'category'),
(1344, 533, '_menu_item_target', ''),
(1345, 533, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1346, 533, '_menu_item_xfn', ''),
(1347, 533, '_menu_item_url', ''),
(1350, 534, '_edit_lock', '1481524941:1'),
(1351, 534, '_syntaxhighlighter_encoded', '1'),
(1355, 538, '_edit_last', '1'),
(1354, 534, 'views', '230'),
(1356, 538, '_edit_lock', '1481782031:1'),
(1360, 540, '_menu_item_type', 'taxonomy'),
(1359, 538, 'views', '159'),
(1361, 540, '_menu_item_menu_item_parent', '363'),
(1362, 540, '_menu_item_object_id', '83'),
(1363, 540, '_menu_item_object', 'category'),
(1364, 540, '_menu_item_target', ''),
(1365, 540, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1366, 540, '_menu_item_xfn', ''),
(1367, 540, '_menu_item_url', ''),
(1379, 542, '_edit_lock', '1481944172:1'),
(1369, 541, '_menu_item_type', 'taxonomy'),
(1370, 541, '_menu_item_menu_item_parent', '363'),
(1371, 541, '_menu_item_object_id', '84'),
(1372, 541, '_menu_item_object', 'category'),
(1373, 541, '_menu_item_target', ''),
(1374, 541, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1375, 541, '_menu_item_xfn', ''),
(1376, 541, '_menu_item_url', ''),
(1378, 542, '_edit_last', '1'),
(1380, 542, '_syntaxhighlighter_encoded', '1'),
(1386, 546, '_edit_last', '1'),
(1383, 542, 'views', '304'),
(1387, 546, '_edit_lock', '1487346199:1'),
(1388, 547, '_wp_attached_file', '2016/12/composer-logo.png'),
(1389, 547, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:300;s:6:\"height\";i:356;s:4:\"file\";s:25:\"2016/12/composer-logo.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"composer-logo-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"composer-logo-253x300.png\";s:5:\"width\";i:253;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:25:\"composer-logo-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1390, 548, '_wp_attached_file', '2016/12/Install-composer2.png'),
(1391, 548, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:455;s:6:\"height\";i:266;s:4:\"file\";s:29:\"2016/12/Install-composer2.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"Install-composer2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"Install-composer2-300x175.png\";s:5:\"width\";i:300;s:6:\"height\";i:175;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:29:\"Install-composer2-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1392, 549, '_wp_attached_file', '2016/12/Install-composer3.png'),
(1393, 549, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:506;s:6:\"height\";i:658;s:4:\"file\";s:29:\"2016/12/Install-composer3.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"Install-composer3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:29:\"Install-composer3-231x300.png\";s:5:\"width\";i:231;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:29:\"Install-composer3-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1394, 550, '_wp_attached_file', '2016/12/Install-composer1.png'),
(1395, 550, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:476;s:6:\"height\";i:53;s:4:\"file\";s:29:\"2016/12/Install-composer1.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"Install-composer1-150x53.png\";s:5:\"width\";i:150;s:6:\"height\";i:53;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"Install-composer1-300x33.png\";s:5:\"width\";i:300;s:6:\"height\";i:33;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:28:\"Install-composer1-250x53.png\";s:5:\"width\";i:250;s:6:\"height\";i:53;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1396, 546, '_syntaxhighlighter_encoded', '1'),
(1397, 546, '_thumbnail_id', '547'),
(1400, 546, 'views', '569'),
(1516, 600, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:400;s:6:\"height\";i:400;s:4:\"file\";s:17:\"2017/01/vuejs.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"vuejs-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"vuejs-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:17:\"vuejs-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1513, 599, '_edit_last', '1'),
(1514, 599, '_edit_lock', '1485078209:1'),
(1515, 600, '_wp_attached_file', '2017/01/vuejs.png'),
(1413, 558, '_edit_last', '1'),
(1414, 558, '_edit_lock', '1482939480:1'),
(1418, 561, '_edit_last', '1'),
(1417, 558, 'views', '191'),
(1419, 561, '_edit_lock', '1483067358:1'),
(1423, 561, '_syntaxhighlighter_encoded', '1'),
(1422, 561, 'views', '465'),
(1427, 563, '_edit_lock', '1483080784:1'),
(1426, 563, '_edit_last', '1'),
(1428, 563, '_syntaxhighlighter_encoded', '1'),
(1429, 564, '_wp_attached_file', '2016/12/fastcgi1.png'),
(1430, 564, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:650;s:6:\"height\";i:364;s:4:\"file\";s:20:\"2016/12/fastcgi1.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"fastcgi1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"fastcgi1-300x168.png\";s:5:\"width\";i:300;s:6:\"height\";i:168;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:20:\"fastcgi1-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1431, 565, '_wp_attached_file', '2016/12/fastcgi2.png'),
(1432, 565, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1173;s:6:\"height\";i:43;s:4:\"file\";s:20:\"2016/12/fastcgi2.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"fastcgi2-150x43.png\";s:5:\"width\";i:150;s:6:\"height\";i:43;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"fastcgi2-300x11.png\";s:5:\"width\";i:300;s:6:\"height\";i:11;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:19:\"fastcgi2-768x28.png\";s:5:\"width\";i:768;s:6:\"height\";i:28;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:20:\"fastcgi2-1024x38.png\";s:5:\"width\";i:1024;s:6:\"height\";i:38;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:19:\"fastcgi2-250x43.png\";s:5:\"width\";i:250;s:6:\"height\";i:43;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1436, 569, '_edit_last', '1'),
(1435, 563, 'views', '280'),
(1437, 569, '_edit_lock', '1488389540:1'),
(1438, 570, '_wp_attached_file', '2017/01/IMG_0201.jpg'),
(1439, 570, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1932;s:6:\"height\";i:2576;s:4:\"file\";s:20:\"2017/01/IMG_0201.jpg\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"IMG_0201-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"IMG_0201-225x300.jpg\";s:5:\"width\";i:225;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"IMG_0201-768x1024.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"IMG_0201-768x1024.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:20:\"IMG_0201-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(1440, 571, '_wp_attached_file', '2017/01/IMG_0282.jpg'),
(1441, 571, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:500;s:6:\"height\";i:500;s:4:\"file\";s:20:\"2017/01/IMG_0282.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"IMG_0282-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"IMG_0282-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:20:\"IMG_0282-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"1\";s:8:\"keywords\";a:0:{}}}'),
(1442, 569, '_thumbnail_id', '571'),
(1448, 576, '_edit_last', '1'),
(1445, 569, 'views', '570'),
(1449, 576, '_edit_lock', '1483586397:1'),
(1450, 576, '_oembed_14dc6e3649190acaeee46136fc4060a5', '{{unknown}}'),
(1470, 582, '_oembed_8580f52e60a68eaa67f8cbaf68b7ba1d', '{{unknown}}'),
(1453, 576, 'views', '249'),
(1460, 580, '_menu_item_target', ''),
(1461, 580, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1462, 580, '_menu_item_xfn', ''),
(1463, 580, '_menu_item_url', ''),
(1465, 582, '_edit_last', '1'),
(1466, 582, '_edit_lock', '1484125288:1'),
(1467, 582, '_syntaxhighlighter_encoded', '1'),
(1468, 582, '_oembed_c699f61b5596b908610c14fa6aa37b03', '{{unknown}}'),
(1469, 582, '_oembed_79a56216cfcf73c5d714d3ac5c684a2e', '{{unknown}}'),
(1473, 582, 'views', '419'),
(1478, 588, '_wp_attached_file', '2017/01/websecurity.jpg'),
(1479, 588, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:343;s:6:\"height\";i:220;s:4:\"file\";s:23:\"2017/01/websecurity.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"websecurity-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"websecurity-300x192.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:192;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:23:\"websecurity-250x220.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:220;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1480, 582, '_thumbnail_id', '588'),
(1562, 628, '_edit_last', '1'),
(1920, 818, '_wp_attached_file', '2017/03/http2.jpg'),
(1921, 818, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:509;s:6:\"height\";i:319;s:4:\"file\";s:17:\"2017/03/http2.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"http2-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"http2-300x188.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:188;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1492, 582, '_oembed_5912420e0e5020ef60700de0b3303b16', '{{unknown}}'),
(1493, 582, '_oembed_a1f0b3fc4cb3117070b41c1325b5a944', '{{unknown}}'),
(1494, 582, '_oembed_a06de3a35b07c87d97063fbe014be5ed', '{{unknown}}'),
(1495, 121, 'views', '4'),
(1496, 113, 'views', '4'),
(1497, 158, 'views', '4'),
(1498, 167, 'views', '4'),
(1499, 169, 'views', '4'),
(1500, 171, 'views', '4'),
(1501, 592, '_edit_last', '1'),
(1502, 592, '_edit_lock', '1484190738:1'),
(1505, 592, 'views', '378'),
(1510, 582, '_oembed_df3e9269e85dcb8dc5753357f59d64da', '{{unknown}}'),
(1511, 582, '_oembed_156d294f355e005d90cfed0a2d3c7098', '{{unknown}}'),
(1512, 582, '_oembed_1fdde2e564f44807a897287dabc9bc6f', '{{unknown}}'),
(1517, 599, '_thumbnail_id', '600'),
(1521, 604, '_edit_last', '1'),
(1520, 599, 'views', '235'),
(1522, 604, '_edit_lock', '1486540541:1'),
(1523, 605, '_wp_attached_file', '2017/02/git-1.png'),
(1524, 605, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:818;s:6:\"height\";i:539;s:4:\"file\";s:17:\"2017/02/git-1.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"git-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"git-1-300x198.png\";s:5:\"width\";i:300;s:6:\"height\";i:198;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:17:\"git-1-768x506.png\";s:5:\"width\";i:768;s:6:\"height\";i:506;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:17:\"git-1-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1525, 606, '_wp_attached_file', '2017/02/git-2.png'),
(1526, 606, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1548;s:6:\"height\";i:639;s:4:\"file\";s:17:\"2017/02/git-2.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"git-2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"git-2-300x124.png\";s:5:\"width\";i:300;s:6:\"height\";i:124;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:17:\"git-2-768x317.png\";s:5:\"width\";i:768;s:6:\"height\";i:317;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:18:\"git-2-1024x423.png\";s:5:\"width\";i:1024;s:6:\"height\";i:423;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:17:\"git-2-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1527, 607, '_wp_attached_file', '2017/02/v2-bc001b6791992c8ac903d31e736008b9_b.jpg'),
(1528, 607, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:346;s:6:\"height\";i:495;s:4:\"file\";s:49:\"2017/02/v2-bc001b6791992c8ac903d31e736008b9_b.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:49:\"v2-bc001b6791992c8ac903d31e736008b9_b-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:49:\"v2-bc001b6791992c8ac903d31e736008b9_b-210x300.jpg\";s:5:\"width\";i:210;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:49:\"v2-bc001b6791992c8ac903d31e736008b9_b-250x250.jpg\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1529, 614, '_wp_attached_file', '2017/02/git-logo.png'),
(1530, 614, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:225;s:6:\"height\";i:225;s:4:\"file\";s:20:\"2017/02/git-logo.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"git-logo-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1531, 604, '_thumbnail_id', '614'),
(1536, 615, '_edit_lock', '1496657058:1'),
(1535, 615, '_edit_last', '1'),
(1534, 604, 'views', '139'),
(1537, 616, '_wp_attached_file', '2017/02/git-work.png'),
(1538, 616, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1172;s:6:\"height\";i:340;s:4:\"file\";s:20:\"2017/02/git-work.png\";s:5:\"sizes\";a:5:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"git-work-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"git-work-300x87.png\";s:5:\"width\";i:300;s:6:\"height\";i:87;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:20:\"git-work-768x223.png\";s:5:\"width\";i:768;s:6:\"height\";i:223;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"git-work-1024x297.png\";s:5:\"width\";i:1024;s:6:\"height\";i:297;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:20:\"git-work-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1539, 615, '_thumbnail_id', '614'),
(1545, 619, '_edit_last', '1'),
(1542, 615, 'views', '201'),
(1546, 619, '_edit_lock', '1486605306:1'),
(1547, 620, '_wp_attached_file', '2017/02/xxfpm1.png'),
(1548, 620, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:479;s:6:\"height\";i:162;s:4:\"file\";s:18:\"2017/02/xxfpm1.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"xxfpm1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"xxfpm1-300x101.png\";s:5:\"width\";i:300;s:6:\"height\";i:101;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:18:\"xxfpm1-250x162.png\";s:5:\"width\";i:250;s:6:\"height\";i:162;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1549, 621, '_wp_attached_file', '2017/02/xxfpm2.png'),
(1550, 621, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:662;s:6:\"height\";i:587;s:4:\"file\";s:18:\"2017/02/xxfpm2.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"xxfpm2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"xxfpm2-300x266.png\";s:5:\"width\";i:300;s:6:\"height\";i:266;s:9:\"mime-type\";s:9:\"image/png\";}s:15:\"index-thumbnail\";a:4:{s:4:\"file\";s:18:\"xxfpm2-250x250.png\";s:5:\"width\";i:250;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1551, 622, '_wp_attached_file', '2017/02/xxfpm3.png'),
(1552, 622, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:95;s:6:\"height\";i:93;s:4:\"file\";s:18:\"2017/02/xxfpm3.png\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1555, 619, 'views', '345'),
(1563, 628, '_edit_lock', '1486952319:1'),
(1564, 629, '_wp_attached_file', '2017/02/wp_nav_menu1.png'),
(1565, 629, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:529;s:6:\"height\";i:147;s:4:\"file\";s:24:\"2017/02/wp_nav_menu1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"wp_nav_menu1-150x147.png\";s:5:\"width\";i:150;s:6:\"height\";i:147;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"wp_nav_menu1-300x83.png\";s:5:\"width\";i:300;s:6:\"height\";i:83;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1566, 630, '_wp_attached_file', '2017/02/wp_nav_menu2.png'),
(1567, 630, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:302;s:6:\"height\";i:376;s:4:\"file\";s:24:\"2017/02/wp_nav_menu2.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"wp_nav_menu2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"wp_nav_menu2-241x300.png\";s:5:\"width\";i:241;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1568, 631, '_wp_attached_file', '2017/02/wp_nav_menu3.png'),
(1569, 631, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:276;s:6:\"height\";i:209;s:4:\"file\";s:24:\"2017/02/wp_nav_menu3.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"wp_nav_menu3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1570, 628, '_syntaxhighlighter_encoded', '1'),
(1573, 628, 'views', '201'),
(1925, 821, '_edit_last', '1'),
(1580, 638, '_edit_last', '1'),
(1581, 638, '_edit_lock', '1496299445:1'),
(1582, 639, '_wp_attached_file', '2017/02/QQ截图20170213000933.png'),
(1583, 639, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1232;s:6:\"height\";i:968;s:4:\"file\";s:34:\"2017/02/QQ截图20170213000933.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:34:\"QQ截图20170213000933-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:34:\"QQ截图20170213000933-300x236.png\";s:5:\"width\";i:300;s:6:\"height\";i:236;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:34:\"QQ截图20170213000933-768x603.png\";s:5:\"width\";i:768;s:6:\"height\";i:603;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:35:\"QQ截图20170213000933-1024x805.png\";s:5:\"width\";i:1024;s:6:\"height\";i:805;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1584, 640, '_wp_attached_file', '2017/02/QQ截图20170213000756.png'),
(1585, 640, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:396;s:6:\"height\";i:737;s:4:\"file\";s:34:\"2017/02/QQ截图20170213000756.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:34:\"QQ截图20170213000756-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:34:\"QQ截图20170213000756-161x300.png\";s:5:\"width\";i:161;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1586, 641, '_wp_attached_file', '2017/02/QQ截图20170213000812.png'),
(1587, 641, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:390;s:6:\"height\";i:733;s:4:\"file\";s:34:\"2017/02/QQ截图20170213000812.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:34:\"QQ截图20170213000812-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:34:\"QQ截图20170213000812-160x300.png\";s:5:\"width\";i:160;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1600, 648, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:748;s:6:\"height\";i:225;s:4:\"file\";s:16:\"2017/02/spa1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"spa1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"spa1-300x90.png\";s:5:\"width\";i:300;s:6:\"height\";i:90;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1590, 638, 'views', '352'),
(1597, 647, '_edit_last', '1'),
(1598, 647, '_edit_lock', '1487129468:1'),
(1599, 648, '_wp_attached_file', '2017/02/spa1.png'),
(1601, 649, '_wp_attached_file', '2017/02/spa2.png'),
(1602, 649, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:765;s:6:\"height\";i:187;s:4:\"file\";s:16:\"2017/02/spa2.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"spa2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"spa2-300x73.png\";s:5:\"width\";i:300;s:6:\"height\";i:73;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1603, 650, '_wp_attached_file', '2017/02/spa3.png'),
(1604, 650, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:747;s:6:\"height\";i:228;s:4:\"file\";s:16:\"2017/02/spa3.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"spa3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"spa3-300x92.png\";s:5:\"width\";i:300;s:6:\"height\";i:92;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1605, 651, '_wp_attached_file', '2017/02/spa4.png'),
(1606, 651, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:231;s:6:\"height\";i:150;s:4:\"file\";s:16:\"2017/02/spa4.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"spa4-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1610, 653, '_menu_item_type', 'taxonomy'),
(1609, 647, 'views', '352'),
(1611, 653, '_menu_item_menu_item_parent', '86'),
(1612, 653, '_menu_item_object_id', '100'),
(1613, 653, '_menu_item_object', 'category'),
(1614, 653, '_menu_item_target', ''),
(1615, 653, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1616, 653, '_menu_item_xfn', ''),
(1617, 653, '_menu_item_url', ''),
(1630, 656, '_edit_last', '1'),
(1619, 654, '_menu_item_type', 'taxonomy'),
(1620, 654, '_menu_item_menu_item_parent', '86'),
(1621, 654, '_menu_item_object_id', '101'),
(1622, 654, '_menu_item_object', 'category'),
(1623, 654, '_menu_item_target', ''),
(1624, 654, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1625, 654, '_menu_item_xfn', ''),
(1626, 654, '_menu_item_url', ''),
(1631, 656, '_edit_lock', '1487162368:1'),
(1632, 656, '_oembed_60dd71e16918f637f67dbef150025bb4', '{{unknown}}'),
(1633, 657, '_wp_attached_file', '2017/02/ghyjn.png'),
(1634, 657, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:862;s:6:\"height\";i:492;s:4:\"file\";s:17:\"2017/02/ghyjn.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"ghyjn-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"ghyjn-300x171.png\";s:5:\"width\";i:300;s:6:\"height\";i:171;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:17:\"ghyjn-768x438.png\";s:5:\"width\";i:768;s:6:\"height\";i:438;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1637, 656, 'views', '494'),
(1640, 659, '_menu_item_type', 'taxonomy'),
(1641, 659, '_menu_item_menu_item_parent', '71'),
(1642, 659, '_menu_item_object_id', '103'),
(1643, 659, '_menu_item_object', 'category'),
(1644, 659, '_menu_item_target', ''),
(1645, 659, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1646, 659, '_menu_item_xfn', ''),
(1647, 659, '_menu_item_url', ''),
(1961, 840, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:855;s:6:\"height\";i:268;s:4:\"file\";s:19:\"2017/03/duoshuo.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"duoshuo-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"duoshuo-300x94.png\";s:5:\"width\";i:300;s:6:\"height\";i:94;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:19:\"duoshuo-768x241.png\";s:5:\"width\";i:768;s:6:\"height\";i:241;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1960, 840, '_wp_attached_file', '2017/03/duoshuo.png'),
(1658, 666, '_edit_lock', '1496252616:1'),
(1657, 666, '_edit_last', '1'),
(1659, 666, '_wp_page_template', 'templates/treeTime.php'),
(1660, 666, 'views', '187'),
(1958, 839, '_edit_last', '1'),
(1959, 839, '_edit_lock', '1490192030:1'),
(1670, 401, 'views', '2'),
(1671, 401, '_edit_lock', '1487523111:1'),
(1978, 850, '_edit_lock', '1490884389:1'),
(1976, 848, 'views', '250'),
(1677, 678, '_edit_last', '1'),
(1678, 678, '_edit_lock', '1487767156:1'),
(1679, 678, '_wp_page_template', 'templates/myJob.php'),
(1680, 678, 'views', '33'),
(1684, 685, '_edit_lock', '1487614124:1'),
(1683, 685, '_edit_last', '1'),
(1685, 686, '_wp_attached_file', '2017/02/github8.png'),
(1686, 686, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1216;s:6:\"height\";i:669;s:4:\"file\";s:19:\"2017/02/github8.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"github8-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"github8-300x165.png\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:19:\"github8-768x423.png\";s:5:\"width\";i:768;s:6:\"height\";i:423;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:20:\"github8-1024x563.png\";s:5:\"width\";i:1024;s:6:\"height\";i:563;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1687, 687, '_wp_attached_file', '2017/02/github1.png'),
(1688, 687, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:83;s:6:\"height\";i:89;s:4:\"file\";s:19:\"2017/02/github1.png\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1689, 688, '_wp_attached_file', '2017/02/github2.png'),
(1690, 688, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:376;s:6:\"height\";i:142;s:4:\"file\";s:19:\"2017/02/github2.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"github2-150x142.png\";s:5:\"width\";i:150;s:6:\"height\";i:142;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"github2-300x113.png\";s:5:\"width\";i:300;s:6:\"height\";i:113;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1691, 689, '_wp_attached_file', '2017/02/gitgub3.png'),
(1692, 689, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:361;s:6:\"height\";i:153;s:4:\"file\";s:19:\"2017/02/gitgub3.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"gitgub3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"gitgub3-300x127.png\";s:5:\"width\";i:300;s:6:\"height\";i:127;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1693, 690, '_wp_attached_file', '2017/02/github4.png');
INSERT INTO `gzp_postmeta` (`meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(1694, 690, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:516;s:6:\"height\";i:292;s:4:\"file\";s:19:\"2017/02/github4.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"github4-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"github4-300x170.png\";s:5:\"width\";i:300;s:6:\"height\";i:170;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1695, 691, '_wp_attached_file', '2017/02/gitgub5.png'),
(1696, 691, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:509;s:6:\"height\";i:292;s:4:\"file\";s:19:\"2017/02/gitgub5.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"gitgub5-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"gitgub5-300x172.png\";s:5:\"width\";i:300;s:6:\"height\";i:172;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1697, 692, '_wp_attached_file', '2017/02/github6.png'),
(1698, 692, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:80;s:6:\"height\";i:201;s:4:\"file\";s:19:\"2017/02/github6.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"github6-80x150.png\";s:5:\"width\";i:80;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1699, 693, '_wp_attached_file', '2017/02/github7.png'),
(1700, 693, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:729;s:6:\"height\";i:614;s:4:\"file\";s:19:\"2017/02/github7.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"github7-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"github7-300x253.png\";s:5:\"width\";i:300;s:6:\"height\";i:253;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1703, 685, 'views', '370'),
(1707, 693, '_edit_lock', '1488173813:1'),
(1718, 712, '_edit_last', '1'),
(1719, 712, '_edit_lock', '1488275051:1'),
(1725, 717, '_wp_attached_file', '2017/03/checkmail7.png'),
(1724, 712, 'views', '179'),
(1726, 717, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:502;s:6:\"height\";i:53;s:4:\"file\";s:22:\"2017/03/checkmail7.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"checkmail7-150x53.png\";s:5:\"width\";i:150;s:6:\"height\";i:53;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"checkmail7-300x32.png\";s:5:\"width\";i:300;s:6:\"height\";i:32;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1727, 718, '_wp_attached_file', '2017/03/checkmail8.png'),
(1728, 718, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:589;s:6:\"height\";i:55;s:4:\"file\";s:22:\"2017/03/checkmail8.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"checkmail8-150x55.png\";s:5:\"width\";i:150;s:6:\"height\";i:55;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"checkmail8-300x28.png\";s:5:\"width\";i:300;s:6:\"height\";i:28;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1729, 719, '_wp_attached_file', '2017/03/checkmail9.png'),
(1730, 719, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:896;s:6:\"height\";i:412;s:4:\"file\";s:22:\"2017/03/checkmail9.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"checkmail9-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"checkmail9-300x138.png\";s:5:\"width\";i:300;s:6:\"height\";i:138;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"checkmail9-768x353.png\";s:5:\"width\";i:768;s:6:\"height\";i:353;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1731, 720, '_wp_attached_file', '2017/03/checkmail1.png'),
(1732, 720, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:970;s:6:\"height\";i:89;s:4:\"file\";s:22:\"2017/03/checkmail1.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"checkmail1-150x89.png\";s:5:\"width\";i:150;s:6:\"height\";i:89;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"checkmail1-300x28.png\";s:5:\"width\";i:300;s:6:\"height\";i:28;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"checkmail1-768x70.png\";s:5:\"width\";i:768;s:6:\"height\";i:70;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1733, 721, '_wp_attached_file', '2017/03/checkmail2.png'),
(1734, 721, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:950;s:6:\"height\";i:242;s:4:\"file\";s:22:\"2017/03/checkmail2.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"checkmail2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"checkmail2-300x76.png\";s:5:\"width\";i:300;s:6:\"height\";i:76;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"checkmail2-768x196.png\";s:5:\"width\";i:768;s:6:\"height\";i:196;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1735, 722, '_wp_attached_file', '2017/03/checkmail3.png'),
(1736, 722, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:962;s:6:\"height\";i:33;s:4:\"file\";s:22:\"2017/03/checkmail3.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"checkmail3-150x33.png\";s:5:\"width\";i:150;s:6:\"height\";i:33;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"checkmail3-300x10.png\";s:5:\"width\";i:300;s:6:\"height\";i:10;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"checkmail3-768x26.png\";s:5:\"width\";i:768;s:6:\"height\";i:26;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1737, 723, '_wp_attached_file', '2017/03/checkmail4.png'),
(1738, 723, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:954;s:6:\"height\";i:30;s:4:\"file\";s:22:\"2017/03/checkmail4.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"checkmail4-150x30.png\";s:5:\"width\";i:150;s:6:\"height\";i:30;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"checkmail4-300x9.png\";s:5:\"width\";i:300;s:6:\"height\";i:9;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"checkmail4-768x24.png\";s:5:\"width\";i:768;s:6:\"height\";i:24;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1739, 724, '_wp_attached_file', '2017/03/checkmail5.png'),
(1740, 724, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1052;s:6:\"height\";i:52;s:4:\"file\";s:22:\"2017/03/checkmail5.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"checkmail5-150x52.png\";s:5:\"width\";i:150;s:6:\"height\";i:52;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"checkmail5-300x15.png\";s:5:\"width\";i:300;s:6:\"height\";i:15;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"checkmail5-768x38.png\";s:5:\"width\";i:768;s:6:\"height\";i:38;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"checkmail5-1024x51.png\";s:5:\"width\";i:1024;s:6:\"height\";i:51;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1741, 725, '_wp_attached_file', '2017/03/checkmail6.png'),
(1742, 725, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:761;s:6:\"height\";i:64;s:4:\"file\";s:22:\"2017/03/checkmail6.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"checkmail6-150x64.png\";s:5:\"width\";i:150;s:6:\"height\";i:64;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"checkmail6-300x25.png\";s:5:\"width\";i:300;s:6:\"height\";i:25;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1743, 716, '_edit_last', '1'),
(1744, 716, '_edit_lock', '1495561345:1'),
(1745, 716, '_syntaxhighlighter_encoded', '1'),
(1746, 726, '_wp_attached_file', '2017/03/checkmail10.png'),
(1747, 726, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:328;s:6:\"height\";i:119;s:4:\"file\";s:23:\"2017/03/checkmail10.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"checkmail10-150x119.png\";s:5:\"width\";i:150;s:6:\"height\";i:119;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"checkmail10-300x109.png\";s:5:\"width\";i:300;s:6:\"height\";i:109;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1753, 731, '_edit_last', '1'),
(1750, 716, 'views', '203'),
(1754, 731, '_edit_lock', '1496284763:1'),
(1755, 732, '_wp_attached_file', '2017/03/LNMP1.png'),
(1756, 732, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:513;s:6:\"height\";i:218;s:4:\"file\";s:17:\"2017/03/LNMP1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"LNMP1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"LNMP1-300x127.png\";s:5:\"width\";i:300;s:6:\"height\";i:127;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1757, 733, '_wp_attached_file', '2017/03/LNMP2.png'),
(1758, 733, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:895;s:6:\"height\";i:59;s:4:\"file\";s:17:\"2017/03/LNMP2.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"LNMP2-150x59.png\";s:5:\"width\";i:150;s:6:\"height\";i:59;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:16:\"LNMP2-300x20.png\";s:5:\"width\";i:300;s:6:\"height\";i:20;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:16:\"LNMP2-768x51.png\";s:5:\"width\";i:768;s:6:\"height\";i:51;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1759, 734, '_wp_attached_file', '2017/03/LNMP3.png'),
(1760, 734, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1219;s:6:\"height\";i:280;s:4:\"file\";s:17:\"2017/03/LNMP3.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"LNMP3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:16:\"LNMP3-300x69.png\";s:5:\"width\";i:300;s:6:\"height\";i:69;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:17:\"LNMP3-768x176.png\";s:5:\"width\";i:768;s:6:\"height\";i:176;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:18:\"LNMP3-1024x235.png\";s:5:\"width\";i:1024;s:6:\"height\";i:235;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1761, 735, '_wp_attached_file', '2017/03/LNMP4.png'),
(1762, 735, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1260;s:6:\"height\";i:586;s:4:\"file\";s:17:\"2017/03/LNMP4.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"LNMP4-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"LNMP4-300x140.png\";s:5:\"width\";i:300;s:6:\"height\";i:140;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:17:\"LNMP4-768x357.png\";s:5:\"width\";i:768;s:6:\"height\";i:357;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:18:\"LNMP4-1024x476.png\";s:5:\"width\";i:1024;s:6:\"height\";i:476;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1763, 736, '_wp_attached_file', '2017/03/LNMP6.png'),
(1764, 736, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:576;s:6:\"height\";i:238;s:4:\"file\";s:17:\"2017/03/LNMP6.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"LNMP6-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"LNMP6-300x124.png\";s:5:\"width\";i:300;s:6:\"height\";i:124;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1765, 737, '_wp_attached_file', '2017/03/LNMP7.png'),
(1766, 737, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:233;s:6:\"height\";i:45;s:4:\"file\";s:17:\"2017/03/LNMP7.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"LNMP7-150x45.png\";s:5:\"width\";i:150;s:6:\"height\";i:45;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1767, 738, '_wp_attached_file', '2017/03/LNMP8.png'),
(1768, 738, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:726;s:6:\"height\";i:578;s:4:\"file\";s:17:\"2017/03/LNMP8.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"LNMP8-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"LNMP8-300x239.png\";s:5:\"width\";i:300;s:6:\"height\";i:239;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1769, 739, '_wp_attached_file', '2017/03/LNMP9.png'),
(1770, 739, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:715;s:6:\"height\";i:673;s:4:\"file\";s:17:\"2017/03/LNMP9.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"LNMP9-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"LNMP9-300x282.png\";s:5:\"width\";i:300;s:6:\"height\";i:282;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1771, 740, '_wp_attached_file', '2017/03/LNMP10.png'),
(1772, 740, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:959;s:6:\"height\";i:911;s:4:\"file\";s:18:\"2017/03/LNMP10.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"LNMP10-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"LNMP10-300x285.png\";s:5:\"width\";i:300;s:6:\"height\";i:285;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:18:\"LNMP10-768x730.png\";s:5:\"width\";i:768;s:6:\"height\";i:730;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1773, 731, '_syntaxhighlighter_encoded', '1'),
(1779, 745, '_edit_last', '1'),
(1776, 731, 'views', '526'),
(1780, 745, '_edit_lock', '1488641650:1'),
(1781, 746, '_wp_attached_file', '2017/03/zhuancentos.png'),
(1782, 746, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1144;s:6:\"height\";i:94;s:4:\"file\";s:23:\"2017/03/zhuancentos.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"zhuancentos-150x94.png\";s:5:\"width\";i:150;s:6:\"height\";i:94;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"zhuancentos-300x25.png\";s:5:\"width\";i:300;s:6:\"height\";i:25;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"zhuancentos-768x63.png\";s:5:\"width\";i:768;s:6:\"height\";i:63;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"zhuancentos-1024x84.png\";s:5:\"width\";i:1024;s:6:\"height\";i:84;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1785, 748, '_wp_attached_file', '2017/03/zhuancentos2.png'),
(1786, 748, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1400;s:6:\"height\";i:91;s:4:\"file\";s:24:\"2017/03/zhuancentos2.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"zhuancentos2-150x91.png\";s:5:\"width\";i:150;s:6:\"height\";i:91;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"zhuancentos2-300x20.png\";s:5:\"width\";i:300;s:6:\"height\";i:20;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:23:\"zhuancentos2-768x50.png\";s:5:\"width\";i:768;s:6:\"height\";i:50;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:24:\"zhuancentos2-1024x67.png\";s:5:\"width\";i:1024;s:6:\"height\";i:67;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1791, 751, '_edit_lock', '1488641705:1'),
(1790, 751, '_edit_last', '1'),
(1789, 745, 'views', '229'),
(1792, 751, '_syntaxhighlighter_encoded', '1'),
(1793, 752, '_wp_attached_file', '2017/03/opcache1.png'),
(1794, 752, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1350;s:6:\"height\";i:82;s:4:\"file\";s:20:\"2017/03/opcache1.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"opcache1-150x82.png\";s:5:\"width\";i:150;s:6:\"height\";i:82;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"opcache1-300x18.png\";s:5:\"width\";i:300;s:6:\"height\";i:18;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:19:\"opcache1-768x47.png\";s:5:\"width\";i:768;s:6:\"height\";i:47;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:20:\"opcache1-1024x62.png\";s:5:\"width\";i:1024;s:6:\"height\";i:62;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1795, 753, '_wp_attached_file', '2017/03/opcache2.png'),
(1796, 753, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:464;s:6:\"height\";i:45;s:4:\"file\";s:20:\"2017/03/opcache2.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"opcache2-150x45.png\";s:5:\"width\";i:150;s:6:\"height\";i:45;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"opcache2-300x29.png\";s:5:\"width\";i:300;s:6:\"height\";i:29;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1797, 754, '_wp_attached_file', '2017/03/opcache3.png'),
(1798, 754, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:950;s:6:\"height\";i:636;s:4:\"file\";s:20:\"2017/03/opcache3.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"opcache3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"opcache3-300x201.png\";s:5:\"width\";i:300;s:6:\"height\";i:201;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:20:\"opcache3-768x514.png\";s:5:\"width\";i:768;s:6:\"height\";i:514;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1799, 755, '_wp_attached_file', '2017/03/gzip2png.png'),
(1800, 755, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:523;s:6:\"height\";i:29;s:4:\"file\";s:20:\"2017/03/gzip2png.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"gzip2png-150x29.png\";s:5:\"width\";i:150;s:6:\"height\";i:29;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"gzip2png-300x17.png\";s:5:\"width\";i:300;s:6:\"height\";i:17;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1801, 756, '_wp_attached_file', '2017/03/gzip3.png'),
(1802, 756, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:536;s:6:\"height\";i:25;s:4:\"file\";s:17:\"2017/03/gzip3.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"gzip3-150x25.png\";s:5:\"width\";i:150;s:6:\"height\";i:25;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:16:\"gzip3-300x14.png\";s:5:\"width\";i:300;s:6:\"height\";i:14;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1803, 757, '_wp_attached_file', '2017/03/gzip4.png'),
(1804, 757, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1043;s:6:\"height\";i:483;s:4:\"file\";s:17:\"2017/03/gzip4.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"gzip4-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"gzip4-300x139.png\";s:5:\"width\";i:300;s:6:\"height\";i:139;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:17:\"gzip4-768x356.png\";s:5:\"width\";i:768;s:6:\"height\";i:356;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:18:\"gzip4-1024x474.png\";s:5:\"width\";i:1024;s:6:\"height\";i:474;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1805, 758, '_wp_attached_file', '2017/03/gzip5.png'),
(1806, 758, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:524;s:6:\"height\";i:21;s:4:\"file\";s:17:\"2017/03/gzip5.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"gzip5-150x21.png\";s:5:\"width\";i:150;s:6:\"height\";i:21;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:16:\"gzip5-300x12.png\";s:5:\"width\";i:300;s:6:\"height\";i:12;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1807, 759, '_wp_attached_file', '2017/03/gzip6.png'),
(1808, 759, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:533;s:6:\"height\";i:23;s:4:\"file\";s:17:\"2017/03/gzip6.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:16:\"gzip6-150x23.png\";s:5:\"width\";i:150;s:6:\"height\";i:23;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:16:\"gzip6-300x13.png\";s:5:\"width\";i:300;s:6:\"height\";i:13;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1809, 760, '_wp_attached_file', '2017/03/gzip1.png'),
(1810, 760, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1182;s:6:\"height\";i:418;s:4:\"file\";s:17:\"2017/03/gzip1.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"gzip1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"gzip1-300x106.png\";s:5:\"width\";i:300;s:6:\"height\";i:106;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:17:\"gzip1-768x272.png\";s:5:\"width\";i:768;s:6:\"height\";i:272;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:18:\"gzip1-1024x362.png\";s:5:\"width\";i:1024;s:6:\"height\";i:362;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1813, 751, 'views', '193'),
(1820, 731, '_thumbnail_id', '732'),
(1822, 769, '_wp_attached_file', '2017/03/foryun.jpg'),
(1823, 769, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:500;s:6:\"height\";i:300;s:4:\"file\";s:18:\"2017/03/foryun.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"foryun-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"foryun-300x180.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:180;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1824, 745, '_thumbnail_id', '769'),
(1826, 751, '_thumbnail_id', '769'),
(1828, 771, '_wp_attached_file', '2017/03/tohttps10.png'),
(1829, 771, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:596;s:6:\"height\";i:104;s:4:\"file\";s:21:\"2017/03/tohttps10.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"tohttps10-150x104.png\";s:5:\"width\";i:150;s:6:\"height\";i:104;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"tohttps10-300x52.png\";s:5:\"width\";i:300;s:6:\"height\";i:52;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1830, 772, '_wp_attached_file', '2017/03/tohttps11.png'),
(1831, 772, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:386;s:6:\"height\";i:55;s:4:\"file\";s:21:\"2017/03/tohttps11.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"tohttps11-150x55.png\";s:5:\"width\";i:150;s:6:\"height\";i:55;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"tohttps11-300x43.png\";s:5:\"width\";i:300;s:6:\"height\";i:43;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1832, 773, '_wp_attached_file', '2017/03/tohttps12.png'),
(1833, 773, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:858;s:6:\"height\";i:311;s:4:\"file\";s:21:\"2017/03/tohttps12.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"tohttps12-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"tohttps12-300x109.png\";s:5:\"width\";i:300;s:6:\"height\";i:109;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"tohttps12-768x278.png\";s:5:\"width\";i:768;s:6:\"height\";i:278;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1834, 774, '_wp_attached_file', '2017/03/tohttps13.png'),
(1835, 774, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:521;s:6:\"height\";i:166;s:4:\"file\";s:21:\"2017/03/tohttps13.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"tohttps13-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"tohttps13-300x96.png\";s:5:\"width\";i:300;s:6:\"height\";i:96;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1836, 775, '_wp_attached_file', '2017/03/tohttps14.png'),
(1837, 775, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:504;s:6:\"height\";i:76;s:4:\"file\";s:21:\"2017/03/tohttps14.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"tohttps14-150x76.png\";s:5:\"width\";i:150;s:6:\"height\";i:76;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"tohttps14-300x45.png\";s:5:\"width\";i:300;s:6:\"height\";i:45;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1838, 776, '_wp_attached_file', '2017/03/tohttps.png'),
(1839, 776, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:608;s:6:\"height\";i:334;s:4:\"file\";s:19:\"2017/03/tohttps.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"tohttps-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"tohttps-300x165.png\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1840, 777, '_wp_attached_file', '2017/03/tohttps2.png'),
(1841, 777, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1234;s:6:\"height\";i:618;s:4:\"file\";s:20:\"2017/03/tohttps2.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"tohttps2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"tohttps2-300x150.png\";s:5:\"width\";i:300;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:20:\"tohttps2-768x385.png\";s:5:\"width\";i:768;s:6:\"height\";i:385;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"tohttps2-1024x513.png\";s:5:\"width\";i:1024;s:6:\"height\";i:513;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1842, 778, '_wp_attached_file', '2017/03/tohttps3.png'),
(1843, 778, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:756;s:6:\"height\";i:428;s:4:\"file\";s:20:\"2017/03/tohttps3.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"tohttps3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"tohttps3-300x170.png\";s:5:\"width\";i:300;s:6:\"height\";i:170;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1844, 779, '_wp_attached_file', '2017/03/tohttps4.png'),
(1845, 779, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:279;s:6:\"height\";i:37;s:4:\"file\";s:20:\"2017/03/tohttps4.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"tohttps4-150x37.png\";s:5:\"width\";i:150;s:6:\"height\";i:37;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1846, 780, '_wp_attached_file', '2017/03/tohttps5.png'),
(1847, 780, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:529;s:6:\"height\";i:26;s:4:\"file\";s:20:\"2017/03/tohttps5.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"tohttps5-150x26.png\";s:5:\"width\";i:150;s:6:\"height\";i:26;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"tohttps5-300x15.png\";s:5:\"width\";i:300;s:6:\"height\";i:15;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1848, 781, '_wp_attached_file', '2017/03/tohttps6.png'),
(1849, 781, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:500;s:6:\"height\";i:30;s:4:\"file\";s:20:\"2017/03/tohttps6.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"tohttps6-150x30.png\";s:5:\"width\";i:150;s:6:\"height\";i:30;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"tohttps6-300x18.png\";s:5:\"width\";i:300;s:6:\"height\";i:18;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1850, 782, '_wp_attached_file', '2017/03/tohttps7.png'),
(1851, 782, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:534;s:6:\"height\";i:23;s:4:\"file\";s:20:\"2017/03/tohttps7.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"tohttps7-150x23.png\";s:5:\"width\";i:150;s:6:\"height\";i:23;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"tohttps7-300x13.png\";s:5:\"width\";i:300;s:6:\"height\";i:13;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1852, 783, '_wp_attached_file', '2017/03/tohttps8.png'),
(1853, 783, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:352;s:6:\"height\";i:125;s:4:\"file\";s:20:\"2017/03/tohttps8.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"tohttps8-150x125.png\";s:5:\"width\";i:150;s:6:\"height\";i:125;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"tohttps8-300x107.png\";s:5:\"width\";i:300;s:6:\"height\";i:107;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1854, 784, '_wp_attached_file', '2017/03/tohttps9.png'),
(1855, 784, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:367;s:6:\"height\";i:185;s:4:\"file\";s:20:\"2017/03/tohttps9.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"tohttps9-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"tohttps9-300x151.png\";s:5:\"width\";i:300;s:6:\"height\";i:151;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1856, 785, '_edit_last', '1'),
(1857, 785, '_edit_lock', '1488651724:1'),
(1858, 785, '_syntaxhighlighter_encoded', '1'),
(1859, 786, '_wp_attached_file', '2017/03/tohttps15.png'),
(1860, 786, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1074;s:6:\"height\";i:520;s:4:\"file\";s:21:\"2017/03/tohttps15.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"tohttps15-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"tohttps15-300x145.png\";s:5:\"width\";i:300;s:6:\"height\";i:145;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"tohttps15-768x372.png\";s:5:\"width\";i:768;s:6:\"height\";i:372;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"tohttps15-1024x496.png\";s:5:\"width\";i:1024;s:6:\"height\";i:496;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1861, 785, '_thumbnail_id', '776'),
(1863, 785, 'views', '383'),
(1864, 788, '_edit_last', '1'),
(1865, 788, '_edit_lock', '1489171365:1'),
(1866, 789, '_wp_attached_file', '2017/03/Apache500_4.png'),
(1867, 789, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:480;s:6:\"height\";i:111;s:4:\"file\";s:23:\"2017/03/Apache500_4.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"Apache500_4-150x111.png\";s:5:\"width\";i:150;s:6:\"height\";i:111;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"Apache500_4-300x69.png\";s:5:\"width\";i:300;s:6:\"height\";i:69;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1868, 790, '_wp_attached_file', '2017/03/Apache500_1.png'),
(1869, 790, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:269;s:6:\"height\";i:51;s:4:\"file\";s:23:\"2017/03/Apache500_1.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"Apache500_1-150x51.png\";s:5:\"width\";i:150;s:6:\"height\";i:51;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1870, 791, '_wp_attached_file', '2017/03/Apache500_2.png'),
(1871, 791, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:710;s:6:\"height\";i:104;s:4:\"file\";s:23:\"2017/03/Apache500_2.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"Apache500_2-150x104.png\";s:5:\"width\";i:150;s:6:\"height\";i:104;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"Apache500_2-300x44.png\";s:5:\"width\";i:300;s:6:\"height\";i:44;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1872, 792, '_wp_attached_file', '2017/03/Apache500_3.png');
INSERT INTO `gzp_postmeta` (`meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(1873, 792, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:498;s:6:\"height\";i:201;s:4:\"file\";s:23:\"2017/03/Apache500_3.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"Apache500_3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"Apache500_3-300x121.png\";s:5:\"width\";i:300;s:6:\"height\";i:121;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1874, 793, '_wp_attached_file', '2017/03/Apache500_7.png'),
(1875, 793, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:486;s:6:\"height\";i:124;s:4:\"file\";s:23:\"2017/03/Apache500_7.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"Apache500_7-150x124.png\";s:5:\"width\";i:150;s:6:\"height\";i:124;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"Apache500_7-300x77.png\";s:5:\"width\";i:300;s:6:\"height\";i:77;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1876, 794, '_wp_attached_file', '2017/03/Apache500_6.png'),
(1877, 794, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:484;s:6:\"height\";i:97;s:4:\"file\";s:23:\"2017/03/Apache500_6.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"Apache500_6-150x97.png\";s:5:\"width\";i:150;s:6:\"height\";i:97;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"Apache500_6-300x60.png\";s:5:\"width\";i:300;s:6:\"height\";i:60;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1878, 795, '_wp_attached_file', '2017/03/Apache500_5.png'),
(1879, 795, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:482;s:6:\"height\";i:126;s:4:\"file\";s:23:\"2017/03/Apache500_5.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"Apache500_5-150x126.png\";s:5:\"width\";i:150;s:6:\"height\";i:126;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"Apache500_5-300x78.png\";s:5:\"width\";i:300;s:6:\"height\";i:78;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1880, 788, '_syntaxhighlighter_encoded', '1'),
(1881, 796, '_wp_attached_file', '2017/03/Apache_logo.jpg'),
(1882, 796, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:320;s:6:\"height\";i:220;s:4:\"file\";s:23:\"2017/03/Apache_logo.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"Apache_logo-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"Apache_logo-300x206.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:206;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1883, 797, '_wp_attached_file', '2017/03/Nginx_logo.jpg'),
(1884, 797, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:906;s:6:\"height\";i:519;s:4:\"file\";s:22:\"2017/03/Nginx_logo.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"Nginx_logo-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"Nginx_logo-300x172.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:172;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"Nginx_logo-768x440.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:440;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1885, 788, '_thumbnail_id', '796'),
(1887, 788, 'views', '249'),
(1890, 693, 'views', '1'),
(1894, 804, '_edit_last', '1'),
(1895, 804, '_edit_lock', '1489649466:1'),
(1896, 806, '_wp_attached_file', '2017/03/http2-6.png'),
(1897, 806, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:241;s:6:\"height\";i:103;s:4:\"file\";s:19:\"2017/03/http2-6.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"http2-6-150x103.png\";s:5:\"width\";i:150;s:6:\"height\";i:103;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1898, 807, '_wp_attached_file', '2017/03/http2-7.png'),
(1899, 807, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:492;s:6:\"height\";i:332;s:4:\"file\";s:19:\"2017/03/http2-7.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"http2-7-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"http2-7-300x202.png\";s:5:\"width\";i:300;s:6:\"height\";i:202;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1900, 808, '_wp_attached_file', '2017/03/http2-1.png'),
(1901, 808, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:845;s:6:\"height\";i:715;s:4:\"file\";s:19:\"2017/03/http2-1.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"http2-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"http2-1-300x254.png\";s:5:\"width\";i:300;s:6:\"height\";i:254;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:19:\"http2-1-768x650.png\";s:5:\"width\";i:768;s:6:\"height\";i:650;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1902, 809, '_wp_attached_file', '2017/03/http2-2.png'),
(1903, 809, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1426;s:6:\"height\";i:718;s:4:\"file\";s:19:\"2017/03/http2-2.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"http2-2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"http2-2-300x151.png\";s:5:\"width\";i:300;s:6:\"height\";i:151;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:19:\"http2-2-768x387.png\";s:5:\"width\";i:768;s:6:\"height\";i:387;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:20:\"http2-2-1024x516.png\";s:5:\"width\";i:1024;s:6:\"height\";i:516;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1904, 810, '_wp_attached_file', '2017/03/http2-3.png'),
(1905, 810, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1341;s:6:\"height\";i:126;s:4:\"file\";s:19:\"2017/03/http2-3.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"http2-3-150x126.png\";s:5:\"width\";i:150;s:6:\"height\";i:126;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"http2-3-300x28.png\";s:5:\"width\";i:300;s:6:\"height\";i:28;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:18:\"http2-3-768x72.png\";s:5:\"width\";i:768;s:6:\"height\";i:72;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:19:\"http2-3-1024x96.png\";s:5:\"width\";i:1024;s:6:\"height\";i:96;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1906, 811, '_wp_attached_file', '2017/03/http2-4.png'),
(1907, 811, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:470;s:6:\"height\";i:86;s:4:\"file\";s:19:\"2017/03/http2-4.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"http2-4-150x86.png\";s:5:\"width\";i:150;s:6:\"height\";i:86;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"http2-4-300x55.png\";s:5:\"width\";i:300;s:6:\"height\";i:55;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1908, 812, '_wp_attached_file', '2017/03/http2-5.png'),
(1909, 812, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1342;s:6:\"height\";i:101;s:4:\"file\";s:19:\"2017/03/http2-5.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"http2-5-150x101.png\";s:5:\"width\";i:150;s:6:\"height\";i:101;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"http2-5-300x23.png\";s:5:\"width\";i:300;s:6:\"height\";i:23;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:18:\"http2-5-768x58.png\";s:5:\"width\";i:768;s:6:\"height\";i:58;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:19:\"http2-5-1024x77.png\";s:5:\"width\";i:1024;s:6:\"height\";i:77;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1910, 813, '_wp_attached_file', '2017/03/http2-8.png'),
(1911, 813, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:979;s:6:\"height\";i:412;s:4:\"file\";s:19:\"2017/03/http2-8.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:19:\"http2-8-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:19:\"http2-8-300x126.png\";s:5:\"width\";i:300;s:6:\"height\";i:126;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:19:\"http2-8-768x323.png\";s:5:\"width\";i:768;s:6:\"height\";i:323;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1922, 804, '_thumbnail_id', '818'),
(1913, 804, '_syntaxhighlighter_encoded', '1'),
(1916, 804, '_oembed_70ed0270137a306b9339fbe323e4e174', '{{unknown}}'),
(1915, 804, 'views', '294'),
(1926, 821, '_edit_lock', '1495873166:1'),
(1928, 821, 'views', '91'),
(1980, 851, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:693;s:6:\"height\";i:316;s:4:\"file\";s:32:\"2017/03/aliyun-tp5-look-like.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"aliyun-tp5-look-like-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"aliyun-tp5-look-like-300x137.png\";s:5:\"width\";i:300;s:6:\"height\";i:137;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1979, 851, '_wp_attached_file', '2017/03/aliyun-tp5-look-like.png'),
(1935, 828, '_wp_attached_file', '2017/03/https_youhua5.png'),
(1936, 828, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:478;s:6:\"height\";i:415;s:4:\"file\";s:25:\"2017/03/https_youhua5.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"https_youhua5-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"https_youhua5-300x260.png\";s:5:\"width\";i:300;s:6:\"height\";i:260;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1937, 829, '_wp_attached_file', '2017/03/https_youhua6.png'),
(1938, 829, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:470;s:6:\"height\";i:215;s:4:\"file\";s:25:\"2017/03/https_youhua6.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"https_youhua6-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"https_youhua6-300x137.png\";s:5:\"width\";i:300;s:6:\"height\";i:137;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1939, 830, '_wp_attached_file', '2017/03/https_youhua7.png'),
(1940, 830, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1172;s:6:\"height\";i:782;s:4:\"file\";s:25:\"2017/03/https_youhua7.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"https_youhua7-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"https_youhua7-300x200.png\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:25:\"https_youhua7-768x512.png\";s:5:\"width\";i:768;s:6:\"height\";i:512;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:26:\"https_youhua7-1024x683.png\";s:5:\"width\";i:1024;s:6:\"height\";i:683;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1941, 831, '_wp_attached_file', '2017/03/https_youhua1.png'),
(1942, 831, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1059;s:6:\"height\";i:515;s:4:\"file\";s:25:\"2017/03/https_youhua1.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"https_youhua1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"https_youhua1-300x146.png\";s:5:\"width\";i:300;s:6:\"height\";i:146;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:25:\"https_youhua1-768x373.png\";s:5:\"width\";i:768;s:6:\"height\";i:373;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:26:\"https_youhua1-1024x498.png\";s:5:\"width\";i:1024;s:6:\"height\";i:498;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1943, 832, '_wp_attached_file', '2017/03/https_youhua2.png'),
(1944, 832, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1175;s:6:\"height\";i:836;s:4:\"file\";s:25:\"2017/03/https_youhua2.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"https_youhua2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"https_youhua2-300x213.png\";s:5:\"width\";i:300;s:6:\"height\";i:213;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:25:\"https_youhua2-768x546.png\";s:5:\"width\";i:768;s:6:\"height\";i:546;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:26:\"https_youhua2-1024x729.png\";s:5:\"width\";i:1024;s:6:\"height\";i:729;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1945, 833, '_wp_attached_file', '2017/03/https_youhua3.png'),
(1946, 833, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:826;s:6:\"height\";i:628;s:4:\"file\";s:25:\"2017/03/https_youhua3.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"https_youhua3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"https_youhua3-300x228.png\";s:5:\"width\";i:300;s:6:\"height\";i:228;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:25:\"https_youhua3-768x584.png\";s:5:\"width\";i:768;s:6:\"height\";i:584;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1947, 834, '_wp_attached_file', '2017/03/https_youhua4.png'),
(1948, 834, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:483;s:6:\"height\";i:252;s:4:\"file\";s:25:\"2017/03/https_youhua4.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"https_youhua4-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"https_youhua4-300x157.png\";s:5:\"width\";i:300;s:6:\"height\";i:157;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1949, 835, '_edit_last', '1'),
(1950, 835, '_edit_lock', '1490080646:1'),
(1953, 831, '_edit_lock', '1496254143:1'),
(1952, 835, 'views', '270'),
(1954, 837, '_wp_attached_file', '2017/03/https_youhua8.png'),
(1955, 837, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:104;s:6:\"height\";i:103;s:4:\"file\";s:25:\"2017/03/https_youhua8.png\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1956, 835, '_thumbnail_id', '837'),
(1962, 841, '_wp_attached_file', '2017/03/duoshuo1.png'),
(1963, 841, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:432;s:6:\"height\";i:391;s:4:\"file\";s:20:\"2017/03/duoshuo1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"duoshuo1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"duoshuo1-300x272.png\";s:5:\"width\";i:300;s:6:\"height\";i:272;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1964, 839, '_thumbnail_id', '841'),
(1966, 839, 'views', '163'),
(1973, 848, '_edit_last', '1'),
(1981, 852, '_wp_attached_file', '2017/03/aliyun-tp5-look-like-s.png'),
(1982, 852, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:282;s:6:\"height\";i:295;s:4:\"file\";s:34:\"2017/03/aliyun-tp5-look-like-s.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:34:\"aliyun-tp5-look-like-s-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1983, 850, '_thumbnail_id', '852'),
(1985, 850, 'views', '231'),
(1988, 852, '_edit_lock', '1491122345:1'),
(1989, 858, '_edit_last', '1'),
(1990, 858, '_edit_lock', '1491452111:1'),
(1991, 859, '_wp_attached_file', '2017/04/oss_400.png'),
(1992, 859, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:458;s:6:\"height\";i:17;s:4:\"file\";s:19:\"2017/04/oss_400.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:18:\"oss_400-150x17.png\";s:5:\"width\";i:150;s:6:\"height\";i:17;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:18:\"oss_400-300x11.png\";s:5:\"width\";i:300;s:6:\"height\";i:11;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1994, 858, 'views', '368'),
(1996, 28, '_edit_lock', '1492012358:1'),
(1997, 862, '_edit_last', '1'),
(1998, 862, '_edit_lock', '1492013679:1'),
(1999, 864, '_edit_last', '1'),
(2000, 864, '_edit_lock', '1492069348:1'),
(2001, 865, '_wp_attached_file', '2017/04/git_start1.png'),
(2002, 865, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:353;s:6:\"height\";i:74;s:4:\"file\";s:22:\"2017/04/git_start1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"git_start1-150x74.png\";s:5:\"width\";i:150;s:6:\"height\";i:74;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"git_start1-300x63.png\";s:5:\"width\";i:300;s:6:\"height\";i:63;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2003, 866, '_wp_attached_file', '2017/04/git_start2.png'),
(2004, 866, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:561;s:6:\"height\";i:291;s:4:\"file\";s:22:\"2017/04/git_start2.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"git_start2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"git_start2-300x156.png\";s:5:\"width\";i:300;s:6:\"height\";i:156;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2005, 864, '_thumbnail_id', '614'),
(2007, 864, 'views', '234'),
(2010, 870, '_edit_last', '1'),
(2011, 870, '_edit_lock', '1492494438:1'),
(2012, 871, '_edit_last', '1'),
(2013, 871, '_edit_lock', '1492527954:1'),
(2014, 871, '_syntaxhighlighter_encoded', '1'),
(2015, 872, '_wp_attached_file', '2017/04/php_trick.jpg'),
(2016, 872, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:690;s:6:\"height\";i:351;s:4:\"file\";s:21:\"2017/04/php_trick.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"php_trick-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"php_trick-300x153.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:153;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2018, 871, 'views', '319'),
(2020, 878, '_edit_last', '1'),
(2021, 878, '_edit_lock', '1493561222:1'),
(2022, 878, '_syntaxhighlighter_encoded', '1'),
(2024, 878, 'views', '163'),
(2026, 881, '_edit_last', '1'),
(2027, 881, '_edit_lock', '1493956647:1'),
(2028, 882, '_wp_attached_file', '2017/05/yunguance1.png'),
(2029, 882, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:664;s:6:\"height\";i:323;s:4:\"file\";s:22:\"2017/05/yunguance1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"yunguance1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"yunguance1-300x146.png\";s:5:\"width\";i:300;s:6:\"height\";i:146;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2030, 883, '_wp_attached_file', '2017/05/yunguance2.png'),
(2031, 883, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:926;s:6:\"height\";i:825;s:4:\"file\";s:22:\"2017/05/yunguance2.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"yunguance2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"yunguance2-300x267.png\";s:5:\"width\";i:300;s:6:\"height\";i:267;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"yunguance2-768x684.png\";s:5:\"width\";i:768;s:6:\"height\";i:684;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2032, 884, '_wp_attached_file', '2017/05/yunguance3.png'),
(2033, 884, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1016;s:6:\"height\";i:268;s:4:\"file\";s:22:\"2017/05/yunguance3.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"yunguance3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"yunguance3-300x79.png\";s:5:\"width\";i:300;s:6:\"height\";i:79;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"yunguance3-768x203.png\";s:5:\"width\";i:768;s:6:\"height\";i:203;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2034, 885, '_wp_attached_file', '2017/05/yunguance4.png'),
(2035, 885, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:161;s:6:\"height\";i:151;s:4:\"file\";s:22:\"2017/05/yunguance4.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"yunguance4-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2036, 881, '_thumbnail_id', '885'),
(2038, 881, 'views', '127'),
(2040, 888, '_edit_last', '1'),
(2041, 888, '_edit_lock', '1494171617:1'),
(2042, 889, '_wp_attached_file', '2017/05/wordpress_reply1.png'),
(2043, 889, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:825;s:6:\"height\";i:253;s:4:\"file\";s:28:\"2017/05/wordpress_reply1.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"wordpress_reply1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"wordpress_reply1-300x92.png\";s:5:\"width\";i:300;s:6:\"height\";i:92;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:28:\"wordpress_reply1-768x236.png\";s:5:\"width\";i:768;s:6:\"height\";i:236;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2044, 890, '_wp_attached_file', '2017/05/wordpress_reply2.png'),
(2045, 890, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:820;s:6:\"height\";i:620;s:4:\"file\";s:28:\"2017/05/wordpress_reply2.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"wordpress_reply2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:28:\"wordpress_reply2-300x227.png\";s:5:\"width\";i:300;s:6:\"height\";i:227;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:28:\"wordpress_reply2-768x581.png\";s:5:\"width\";i:768;s:6:\"height\";i:581;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2046, 891, '_wp_attached_file', '2017/05/wordpress_reply3.png'),
(2047, 891, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:412;s:6:\"height\";i:71;s:4:\"file\";s:28:\"2017/05/wordpress_reply3.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"wordpress_reply3-150x71.png\";s:5:\"width\";i:150;s:6:\"height\";i:71;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"wordpress_reply3-300x52.png\";s:5:\"width\";i:300;s:6:\"height\";i:52;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2048, 888, '_syntaxhighlighter_encoded', '1'),
(2050, 888, 'views', '168'),
(2052, 898, '_edit_last', '1'),
(2053, 898, '_edit_lock', '1496253840:1'),
(2054, 899, '_wp_attached_file', '2017/05/https_seo_304.png'),
(2055, 899, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1211;s:6:\"height\";i:625;s:4:\"file\";s:25:\"2017/05/https_seo_304.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"https_seo_304-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"https_seo_304-300x155.png\";s:5:\"width\";i:300;s:6:\"height\";i:155;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:25:\"https_seo_304-768x396.png\";s:5:\"width\";i:768;s:6:\"height\";i:396;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:26:\"https_seo_304-1024x528.png\";s:5:\"width\";i:1024;s:6:\"height\";i:528;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2056, 900, '_wp_attached_file', '2017/05/https_seo_418.png'),
(2057, 900, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:755;s:6:\"height\";i:859;s:4:\"file\";s:25:\"2017/05/https_seo_418.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"https_seo_418-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"https_seo_418-264x300.png\";s:5:\"width\";i:264;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2058, 901, '_wp_attached_file', '2017/05/https_seo_418_2.png'),
(2059, 901, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:718;s:6:\"height\";i:288;s:4:\"file\";s:27:\"2017/05/https_seo_418_2.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"https_seo_418_2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"https_seo_418_2-300x120.png\";s:5:\"width\";i:300;s:6:\"height\";i:120;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2060, 902, '_wp_attached_file', '2017/05/https_seo_418_3.png'),
(2061, 902, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1190;s:6:\"height\";i:625;s:4:\"file\";s:27:\"2017/05/https_seo_418_3.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"https_seo_418_3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"https_seo_418_3-300x158.png\";s:5:\"width\";i:300;s:6:\"height\";i:158;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:27:\"https_seo_418_3-768x403.png\";s:5:\"width\";i:768;s:6:\"height\";i:403;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:28:\"https_seo_418_3-1024x538.png\";s:5:\"width\";i:1024;s:6:\"height\";i:538;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2062, 903, '_wp_attached_file', '2017/05/https_seo_511_1.png'),
(2063, 903, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:722;s:6:\"height\";i:300;s:4:\"file\";s:27:\"2017/05/https_seo_511_1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"https_seo_511_1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"https_seo_511_1-300x125.png\";s:5:\"width\";i:300;s:6:\"height\";i:125;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2064, 904, '_wp_attached_file', '2017/05/https_seo_511_2.png'),
(2065, 904, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1193;s:6:\"height\";i:630;s:4:\"file\";s:27:\"2017/05/https_seo_511_2.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"https_seo_511_2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"https_seo_511_2-300x158.png\";s:5:\"width\";i:300;s:6:\"height\";i:158;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:27:\"https_seo_511_2-768x406.png\";s:5:\"width\";i:768;s:6:\"height\";i:406;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:28:\"https_seo_511_2-1024x541.png\";s:5:\"width\";i:1024;s:6:\"height\";i:541;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2066, 905, '_wp_attached_file', '2017/05/httpsGreen.jpg'),
(2067, 905, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:690;s:6:\"height\";i:460;s:4:\"file\";s:22:\"2017/05/httpsGreen.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"httpsGreen-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"httpsGreen-300x200.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2068, 898, '_thumbnail_id', '905'),
(2070, 898, 'views', '168'),
(2076, 910, '_edit_last', '1'),
(2075, 909, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1286;s:6:\"height\";i:269;s:4:\"file\";s:25:\"2017/05/yishigongji_1.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"yishigongji_1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"yishigongji_1-300x63.png\";s:5:\"width\";i:300;s:6:\"height\";i:63;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:25:\"yishigongji_1-768x161.png\";s:5:\"width\";i:768;s:6:\"height\";i:161;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:26:\"yishigongji_1-1024x214.png\";s:5:\"width\";i:1024;s:6:\"height\";i:214;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2074, 909, '_wp_attached_file', '2017/05/yishigongji_1.png'),
(2077, 910, '_edit_lock', '1495187755:1'),
(2078, 911, '_wp_attached_file', '2017/05/yishigongji_2.png'),
(2079, 911, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:404;s:6:\"height\";i:306;s:4:\"file\";s:25:\"2017/05/yishigongji_2.png\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2084, 913, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:93;s:6:\"height\";i:160;s:4:\"file\";s:25:\"2017/05/yishigongji_4.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"yishigongji_4-93x150.png\";s:5:\"width\";i:93;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2080, 912, '_wp_attached_file', '2017/05/yishigongji_3.png'),
(2081, 912, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:825;s:6:\"height\";i:316;s:4:\"file\";s:25:\"2017/05/yishigongji_3.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"yishigongji_3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"yishigongji_3-300x115.png\";s:5:\"width\";i:300;s:6:\"height\";i:115;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:25:\"yishigongji_3-768x294.png\";s:5:\"width\";i:768;s:6:\"height\";i:294;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2083, 913, '_wp_attached_file', '2017/05/yishigongji_4.png'),
(2082, 911, '_wp_attachment_backup_sizes', 'a:2:{s:9:\"full-orig\";a:3:{s:5:\"width\";i:404;s:6:\"height\";i:306;s:4:\"file\";s:17:\"yishigongji_2.png\";}s:18:\"full-1495186226477\";a:3:{s:5:\"width\";i:40;s:6:\"height\";i:30;s:4:\"file\";s:32:\"yishigongji_2-e1495186219936.png\";}}'),
(2085, 914, '_wp_attached_file', '2017/05/yishigongji_5.png'),
(2086, 914, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1121;s:6:\"height\";i:753;s:4:\"file\";s:25:\"2017/05/yishigongji_5.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"yishigongji_5-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"yishigongji_5-300x202.png\";s:5:\"width\";i:300;s:6:\"height\";i:202;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:25:\"yishigongji_5-768x516.png\";s:5:\"width\";i:768;s:6:\"height\";i:516;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:26:\"yishigongji_5-1024x688.png\";s:5:\"width\";i:1024;s:6:\"height\";i:688;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2088, 910, 'views', '87'),
(2100, 924, '_wp_attached_file', '2017/05/laruance_word.jpg'),
(2101, 924, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:346;s:6:\"height\";i:495;s:4:\"file\";s:25:\"2017/05/laruance_word.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"laruance_word-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"laruance_word-210x300.jpg\";s:5:\"width\";i:210;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2098, 923, '_wp_attached_file', '2017/05/laruance_2.png'),
(2099, 923, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:342;s:6:\"height\";i:230;s:4:\"file\";s:22:\"2017/05/laruance_2.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"laruance_2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"laruance_2-300x202.png\";s:5:\"width\";i:300;s:6:\"height\";i:202;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2096, 922, '_wp_attached_file', '2017/05/laruance_1.png');
INSERT INTO `gzp_postmeta` (`meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(2097, 922, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1119;s:6:\"height\";i:666;s:4:\"file\";s:22:\"2017/05/laruance_1.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"laruance_1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"laruance_1-300x179.png\";s:5:\"width\";i:300;s:6:\"height\";i:179;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"laruance_1-768x457.png\";s:5:\"width\";i:768;s:6:\"height\";i:457;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:23:\"laruance_1-1024x609.png\";s:5:\"width\";i:1024;s:6:\"height\";i:609;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2102, 925, '_wp_attached_file', '2017/05/测试中文.png'),
(2103, 925, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:600;s:6:\"height\";i:935;s:4:\"file\";s:24:\"2017/05/测试中文.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"测试中文-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"测试中文-193x300.png\";s:5:\"width\";i:193;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2104, 926, '_edit_last', '1'),
(2105, 926, '_edit_lock', '1495599262:1'),
(2106, 927, '_wp_attached_file', '2017/05/PHP.jpg'),
(2107, 927, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:575;s:6:\"height\";i:575;s:4:\"file\";s:15:\"2017/05/PHP.jpg\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:15:\"PHP-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:6:\"medium\";a:4:{s:4:\"file\";s:15:\"PHP-300x300.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2108, 926, '_thumbnail_id', '927'),
(2110, 926, 'views', '89'),
(2112, 930, '_edit_last', '1'),
(2113, 930, '_edit_lock', '1495682241:1'),
(2114, 931, '_wp_attached_file', '2017/05/ab测试.png'),
(2115, 931, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:613;s:6:\"height\";i:652;s:4:\"file\";s:20:\"2017/05/ab测试.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"ab测试-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"ab测试-282x300.png\";s:5:\"width\";i:282;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2116, 932, '_wp_attached_file', '2017/05/SupportApache-small.png'),
(2117, 932, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:300;s:6:\"height\";i:300;s:4:\"file\";s:31:\"2017/05/SupportApache-small.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"SupportApache-small-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2118, 930, '_thumbnail_id', '932'),
(2120, 930, 'views', '105'),
(2122, 935, '_menu_item_type', 'custom'),
(2123, 935, '_menu_item_menu_item_parent', '0'),
(2124, 935, '_menu_item_object_id', '935'),
(2125, 935, '_menu_item_object', 'custom'),
(2126, 935, '_menu_item_target', ''),
(2127, 935, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2128, 935, '_menu_item_xfn', ''),
(2129, 935, '_menu_item_url', 'https://www.gzpblog.com/'),
(2175, 944, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2131, 936, '_menu_item_type', 'post_type'),
(2132, 936, '_menu_item_menu_item_parent', '0'),
(2133, 936, '_menu_item_object_id', '5'),
(2134, 936, '_menu_item_object', 'page'),
(2135, 936, '_menu_item_target', ''),
(2136, 936, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2137, 936, '_menu_item_xfn', ''),
(2138, 936, '_menu_item_url', ''),
(2173, 944, '_menu_item_object', 'category'),
(2140, 937, '_menu_item_type', 'post_type'),
(2141, 937, '_menu_item_menu_item_parent', '936'),
(2142, 937, '_menu_item_object_id', '666'),
(2143, 937, '_menu_item_object', 'page'),
(2144, 937, '_menu_item_target', ''),
(2145, 937, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2146, 937, '_menu_item_xfn', ''),
(2147, 937, '_menu_item_url', ''),
(2149, 938, '_menu_item_type', 'post_type'),
(2150, 938, '_menu_item_menu_item_parent', '0'),
(2151, 938, '_menu_item_object_id', '8'),
(2152, 938, '_menu_item_object', 'page'),
(2153, 938, '_menu_item_target', ''),
(2154, 938, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2155, 938, '_menu_item_xfn', ''),
(2156, 938, '_menu_item_url', ''),
(2174, 944, '_menu_item_target', ''),
(2158, 939, '_menu_item_type', 'post_type'),
(2159, 939, '_menu_item_menu_item_parent', '936'),
(2160, 939, '_menu_item_object_id', '5'),
(2161, 939, '_menu_item_object', 'page'),
(2162, 939, '_menu_item_target', ''),
(2163, 939, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2164, 939, '_menu_item_xfn', ''),
(2165, 939, '_menu_item_url', ''),
(2172, 944, '_menu_item_object_id', '2'),
(2176, 944, '_menu_item_xfn', ''),
(2177, 944, '_menu_item_url', ''),
(2179, 945, '_menu_item_type', 'taxonomy'),
(2180, 945, '_menu_item_menu_item_parent', '0'),
(2181, 945, '_menu_item_object_id', '12'),
(2182, 945, '_menu_item_object', 'category'),
(2183, 945, '_menu_item_target', ''),
(2184, 945, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2185, 945, '_menu_item_xfn', ''),
(2186, 945, '_menu_item_url', ''),
(2415, 976, '_wp_page_template', 'templates/subject.php'),
(2188, 946, '_menu_item_type', 'taxonomy'),
(2189, 946, '_menu_item_menu_item_parent', '0'),
(2190, 946, '_menu_item_object_id', '6'),
(2191, 946, '_menu_item_object', 'category'),
(2192, 946, '_menu_item_target', ''),
(2193, 946, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2194, 946, '_menu_item_xfn', ''),
(2195, 946, '_menu_item_url', ''),
(2414, 976, '_edit_lock', '1499239443:1'),
(2197, 947, '_menu_item_type', 'taxonomy'),
(2198, 947, '_menu_item_menu_item_parent', '0'),
(2199, 947, '_menu_item_object_id', '16'),
(2200, 947, '_menu_item_object', 'category'),
(2201, 947, '_menu_item_target', ''),
(2202, 947, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2203, 947, '_menu_item_xfn', ''),
(2204, 947, '_menu_item_url', ''),
(2413, 976, '_edit_last', '1'),
(2206, 948, '_menu_item_type', 'taxonomy'),
(2207, 948, '_menu_item_menu_item_parent', '0'),
(2208, 948, '_menu_item_object_id', '17'),
(2209, 948, '_menu_item_object', 'category'),
(2210, 948, '_menu_item_target', ''),
(2211, 948, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2212, 948, '_menu_item_xfn', ''),
(2213, 948, '_menu_item_url', ''),
(2406, 971, '_menu_item_url', ''),
(2215, 949, '_menu_item_type', 'taxonomy'),
(2216, 949, '_menu_item_menu_item_parent', '0'),
(2217, 949, '_menu_item_object_id', '91'),
(2218, 949, '_menu_item_object', 'category'),
(2219, 949, '_menu_item_target', ''),
(2220, 949, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2221, 949, '_menu_item_xfn', ''),
(2222, 949, '_menu_item_url', ''),
(2403, 971, '_menu_item_target', ''),
(2745, 1172, '_menu_item_target', ''),
(2744, 1172, '_menu_item_object', 'category'),
(2743, 1172, '_menu_item_object_id', '138'),
(2741, 1172, '_menu_item_type', 'taxonomy'),
(2742, 1172, '_menu_item_menu_item_parent', '947'),
(2739, 1170, '_menu_item_url', ''),
(2738, 1170, '_menu_item_xfn', ''),
(2233, 951, '_menu_item_type', 'taxonomy'),
(2234, 951, '_menu_item_menu_item_parent', '0'),
(2235, 951, '_menu_item_object_id', '83'),
(2236, 951, '_menu_item_object', 'category'),
(2237, 951, '_menu_item_target', ''),
(2238, 951, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2239, 951, '_menu_item_xfn', ''),
(2240, 951, '_menu_item_url', ''),
(2401, 971, '_menu_item_object_id', '969'),
(2242, 952, '_menu_item_type', 'taxonomy'),
(2243, 952, '_menu_item_menu_item_parent', '0'),
(2244, 952, '_menu_item_object_id', '73'),
(2245, 952, '_menu_item_object', 'category'),
(2246, 952, '_menu_item_target', ''),
(2247, 952, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2248, 952, '_menu_item_xfn', ''),
(2249, 952, '_menu_item_url', ''),
(2402, 971, '_menu_item_object', 'page'),
(2251, 953, '_menu_item_type', 'taxonomy'),
(2252, 953, '_menu_item_menu_item_parent', '0'),
(2253, 953, '_menu_item_object_id', '84'),
(2254, 953, '_menu_item_object', 'category'),
(2255, 953, '_menu_item_target', ''),
(2256, 953, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2257, 953, '_menu_item_xfn', ''),
(2258, 953, '_menu_item_url', ''),
(2400, 971, '_menu_item_menu_item_parent', '0'),
(2260, 954, '_menu_item_type', 'taxonomy'),
(2261, 954, '_menu_item_menu_item_parent', '0'),
(2262, 954, '_menu_item_object_id', '19'),
(2263, 954, '_menu_item_object', 'category'),
(2264, 954, '_menu_item_target', ''),
(2265, 954, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2266, 954, '_menu_item_xfn', ''),
(2267, 954, '_menu_item_url', ''),
(2399, 971, '_menu_item_type', 'post_type'),
(2269, 955, '_menu_item_type', 'taxonomy'),
(2270, 955, '_menu_item_menu_item_parent', '0'),
(2271, 955, '_menu_item_object_id', '76'),
(2272, 955, '_menu_item_object', 'category'),
(2273, 955, '_menu_item_target', ''),
(2274, 955, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2275, 955, '_menu_item_xfn', ''),
(2276, 955, '_menu_item_url', ''),
(2397, 969, 'views', '106'),
(2278, 956, '_menu_item_type', 'taxonomy'),
(2279, 956, '_menu_item_menu_item_parent', '948'),
(2280, 956, '_menu_item_object_id', '72'),
(2281, 956, '_menu_item_object', 'category'),
(2282, 956, '_menu_item_target', ''),
(2283, 956, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2284, 956, '_menu_item_xfn', ''),
(2285, 956, '_menu_item_url', ''),
(2405, 971, '_menu_item_xfn', ''),
(2287, 957, '_menu_item_type', 'taxonomy'),
(2288, 957, '_menu_item_menu_item_parent', '0'),
(2289, 957, '_menu_item_object_id', '75'),
(2290, 957, '_menu_item_object', 'category'),
(2291, 957, '_menu_item_target', ''),
(2292, 957, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2293, 957, '_menu_item_xfn', ''),
(2294, 957, '_menu_item_url', ''),
(2398, 969, '_edit_lock', '1496291345:1'),
(2296, 958, '_menu_item_type', 'taxonomy'),
(2297, 958, '_menu_item_menu_item_parent', '948'),
(2298, 958, '_menu_item_object_id', '20'),
(2299, 958, '_menu_item_object', 'category'),
(2300, 958, '_menu_item_target', ''),
(2301, 958, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2302, 958, '_menu_item_xfn', ''),
(2303, 958, '_menu_item_url', ''),
(2404, 971, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2305, 959, '_menu_item_type', 'taxonomy'),
(2306, 959, '_menu_item_menu_item_parent', '947'),
(2307, 959, '_menu_item_object_id', '80'),
(2308, 959, '_menu_item_object', 'category'),
(2309, 959, '_menu_item_target', ''),
(2310, 959, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2311, 959, '_menu_item_xfn', ''),
(2312, 959, '_menu_item_url', ''),
(2314, 960, '_menu_item_type', 'taxonomy'),
(2315, 960, '_menu_item_menu_item_parent', '947'),
(2316, 960, '_menu_item_object_id', '114'),
(2317, 960, '_menu_item_object', 'category'),
(2318, 960, '_menu_item_target', ''),
(2319, 960, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2320, 960, '_menu_item_xfn', ''),
(2321, 960, '_menu_item_url', ''),
(2411, 974, 'views', '46'),
(2323, 961, '_menu_item_type', 'taxonomy'),
(2324, 961, '_menu_item_menu_item_parent', '947'),
(2325, 961, '_menu_item_object_id', '67'),
(2326, 961, '_menu_item_object', 'category'),
(2327, 961, '_menu_item_target', ''),
(2328, 961, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2329, 961, '_menu_item_xfn', ''),
(2330, 961, '_menu_item_url', ''),
(2412, 974, '_edit_lock', '1500015467:1'),
(2332, 962, '_menu_item_type', 'taxonomy'),
(2333, 962, '_menu_item_menu_item_parent', '948'),
(2334, 962, '_menu_item_object_id', '81'),
(2335, 962, '_menu_item_object', 'category'),
(2336, 962, '_menu_item_target', ''),
(2337, 962, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2338, 962, '_menu_item_xfn', ''),
(2339, 962, '_menu_item_url', ''),
(2341, 963, '_menu_item_type', 'taxonomy'),
(2342, 963, '_menu_item_menu_item_parent', '947'),
(2343, 963, '_menu_item_object_id', '23'),
(2344, 963, '_menu_item_object', 'category'),
(2345, 963, '_menu_item_target', ''),
(2346, 963, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2347, 963, '_menu_item_xfn', ''),
(2348, 963, '_menu_item_url', ''),
(2410, 974, '_wp_page_template', 'templates/collectLink.php'),
(2350, 964, '_menu_item_type', 'taxonomy'),
(2351, 964, '_menu_item_menu_item_parent', '947'),
(2352, 964, '_menu_item_object_id', '13'),
(2353, 964, '_menu_item_object', 'category'),
(2354, 964, '_menu_item_target', ''),
(2355, 964, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2356, 964, '_menu_item_xfn', ''),
(2357, 964, '_menu_item_url', ''),
(2408, 905, '_edit_lock', '1496253864:1'),
(2359, 965, '_menu_item_type', 'taxonomy'),
(2360, 965, '_menu_item_menu_item_parent', '947'),
(2361, 965, '_menu_item_object_id', '63'),
(2362, 965, '_menu_item_object', 'category'),
(2363, 965, '_menu_item_target', ''),
(2364, 965, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2365, 965, '_menu_item_xfn', ''),
(2366, 965, '_menu_item_url', ''),
(2409, 974, '_edit_last', '1'),
(2368, 966, '_menu_item_type', 'taxonomy'),
(2369, 966, '_menu_item_menu_item_parent', '0'),
(2370, 966, '_menu_item_object_id', '100'),
(2371, 966, '_menu_item_object', 'category'),
(2372, 966, '_menu_item_target', ''),
(2373, 966, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2374, 966, '_menu_item_xfn', ''),
(2375, 966, '_menu_item_url', ''),
(2377, 967, '_menu_item_type', 'taxonomy'),
(2378, 967, '_menu_item_menu_item_parent', '0'),
(2379, 967, '_menu_item_object_id', '101'),
(2380, 967, '_menu_item_object', 'category'),
(2381, 967, '_menu_item_target', ''),
(2382, 967, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2383, 967, '_menu_item_xfn', ''),
(2384, 967, '_menu_item_url', ''),
(2396, 969, '_wp_page_template', 'templates/link.php'),
(2386, 968, '_menu_item_type', 'taxonomy'),
(2387, 968, '_menu_item_menu_item_parent', '0'),
(2388, 968, '_menu_item_object_id', '9'),
(2389, 968, '_menu_item_object', 'category'),
(2390, 968, '_menu_item_target', ''),
(2391, 968, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2392, 968, '_menu_item_xfn', ''),
(2393, 968, '_menu_item_url', ''),
(2395, 969, '_edit_last', '1'),
(2416, 976, 'views', '67'),
(2417, 978, '_edit_last', '1'),
(2418, 978, '_edit_lock', '1500539955:1'),
(2419, 978, '_wp_page_template', 'templates/subject.php'),
(2420, 978, 'views', '63'),
(2421, 976, '_oembed_ca25a311b180783688cc22b65f575b8c', '<blockquote data-secret=\"4zFCyTAnXC\" class=\"wp-embedded-content\"><a href=\"https://www.gzpblog.com/20170316/804.html\">升级到HTTP/2，性能大提升</a></blockquote><iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" style=\"position: absolute; clip: rect(1px, 1px, 1px, 1px);\" src=\"https://www.gzpblog.com/20170316/804.html/embed#?secret=4zFCyTAnXC\" data-secret=\"4zFCyTAnXC\" width=\"500\" height=\"282\" title=\"《升级到HTTP/2，性能大提升》—锅子博客\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"></iframe>'),
(2422, 976, '_oembed_time_ca25a311b180783688cc22b65f575b8c', '1496288274'),
(2423, 986, '_edit_last', '1'),
(2424, 986, '_edit_lock', '1496303118:1'),
(2425, 987, '_wp_attached_file', '2017/06/SaltedFish_1.png'),
(2426, 987, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1211;s:6:\"height\";i:929;s:4:\"file\";s:24:\"2017/06/SaltedFish_1.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"SaltedFish_1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"SaltedFish_1-300x230.png\";s:5:\"width\";i:300;s:6:\"height\";i:230;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:24:\"SaltedFish_1-768x589.png\";s:5:\"width\";i:768;s:6:\"height\";i:589;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:25:\"SaltedFish_1-1024x786.png\";s:5:\"width\";i:1024;s:6:\"height\";i:786;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2427, 988, '_wp_attached_file', '2017/06/SaltedFish_2.png'),
(2428, 988, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1156;s:6:\"height\";i:926;s:4:\"file\";s:24:\"2017/06/SaltedFish_2.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"SaltedFish_2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"SaltedFish_2-300x240.png\";s:5:\"width\";i:300;s:6:\"height\";i:240;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:24:\"SaltedFish_2-768x615.png\";s:5:\"width\";i:768;s:6:\"height\";i:615;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:25:\"SaltedFish_2-1024x820.png\";s:5:\"width\";i:1024;s:6:\"height\";i:820;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2429, 989, '_wp_attached_file', '2017/06/SaltedFish_3.png'),
(2430, 989, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:408;s:6:\"height\";i:730;s:4:\"file\";s:24:\"2017/06/SaltedFish_3.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"SaltedFish_3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"SaltedFish_3-168x300.png\";s:5:\"width\";i:168;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2431, 990, '_wp_attached_file', '2017/06/SaltedFish_4.png'),
(2432, 990, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:599;s:4:\"file\";s:24:\"2017/06/SaltedFish_4.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"SaltedFish_4-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"SaltedFish_4-300x166.png\";s:5:\"width\";i:300;s:6:\"height\";i:166;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:24:\"SaltedFish_4-768x426.png\";s:5:\"width\";i:768;s:6:\"height\";i:426;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:25:\"SaltedFish_4-1024x568.png\";s:5:\"width\";i:1024;s:6:\"height\";i:568;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2433, 991, '_wp_attached_file', '2017/06/SaltedFish_logo.png'),
(2434, 991, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:856;s:6:\"height\";i:856;s:4:\"file\";s:27:\"2017/06/SaltedFish_logo.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"SaltedFish_logo-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"SaltedFish_logo-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:27:\"SaltedFish_logo-768x768.png\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2435, 986, '_thumbnail_id', '991'),
(2437, 986, 'views', '116'),
(2442, 1000, '_edit_last', '1'),
(2443, 1000, '_edit_lock', '1496807596:1'),
(2459, 1009, '_wp_attached_file', '2017/06/Gitbook使用流程.png'),
(2460, 1009, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:750;s:6:\"height\";i:412;s:4:\"file\";s:31:\"2017/06/Gitbook使用流程.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"Gitbook使用流程-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"Gitbook使用流程-300x165.png\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2446, 1002, '_wp_attached_file', '2017/06/使用gitbook.com2_.png'),
(2447, 1002, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:542;s:4:\"file\";s:31:\"2017/06/使用gitbook.com2_.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"使用gitbook.com2_-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"使用gitbook.com2_-300x151.png\";s:5:\"width\";i:300;s:6:\"height\";i:151;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:31:\"使用gitbook.com2_-768x385.png\";s:5:\"width\";i:768;s:6:\"height\";i:385;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:32:\"使用gitbook.com2_-1024x514.png\";s:5:\"width\";i:1024;s:6:\"height\";i:514;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2448, 1003, '_wp_attached_file', '2017/06/使用gitbook.com3_.png'),
(2449, 1003, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:423;s:6:\"height\";i:178;s:4:\"file\";s:31:\"2017/06/使用gitbook.com3_.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"使用gitbook.com3_-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"使用gitbook.com3_-300x126.png\";s:5:\"width\";i:300;s:6:\"height\";i:126;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2450, 1004, '_wp_attached_file', '2017/06/使用gitbook.com4_.png'),
(2451, 1004, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1040;s:6:\"height\";i:783;s:4:\"file\";s:31:\"2017/06/使用gitbook.com4_.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"使用gitbook.com4_-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"使用gitbook.com4_-300x226.png\";s:5:\"width\";i:300;s:6:\"height\";i:226;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:31:\"使用gitbook.com4_-768x578.png\";s:5:\"width\";i:768;s:6:\"height\";i:578;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:32:\"使用gitbook.com4_-1024x771.png\";s:5:\"width\";i:1024;s:6:\"height\";i:771;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2452, 1005, '_wp_attached_file', '2017/06/Gitbook-editor.jpg'),
(2453, 1005, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:200;s:6:\"height\";i:134;s:4:\"file\";s:26:\"2017/06/Gitbook-editor.jpg\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"Gitbook-editor-150x134.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:134;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2454, 1006, '_wp_attached_file', '2017/06/使用gitbook.com1_.png'),
(2455, 1006, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:800;s:6:\"height\";i:498;s:4:\"file\";s:31:\"2017/06/使用gitbook.com1_.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"使用gitbook.com1_-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"使用gitbook.com1_-300x187.png\";s:5:\"width\";i:300;s:6:\"height\";i:187;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:31:\"使用gitbook.com1_-768x478.png\";s:5:\"width\";i:768;s:6:\"height\";i:478;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2456, 1007, '_wp_attached_file', '2017/06/使用gitbook.com5_.png'),
(2457, 1007, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:838;s:6:\"height\";i:526;s:4:\"file\";s:31:\"2017/06/使用gitbook.com5_.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"使用gitbook.com5_-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"使用gitbook.com5_-300x188.png\";s:5:\"width\";i:300;s:6:\"height\";i:188;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:31:\"使用gitbook.com5_-768x482.png\";s:5:\"width\";i:768;s:6:\"height\";i:482;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2458, 1000, '_thumbnail_id', '1005'),
(2462, 1000, 'views', '55'),
(2737, 1170, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2736, 1170, '_menu_item_target', ''),
(2735, 1170, '_menu_item_object', 'category'),
(2734, 1170, '_menu_item_object_id', '135'),
(2733, 1170, '_menu_item_menu_item_parent', '947'),
(2732, 1170, '_menu_item_type', 'taxonomy'),
(2472, 1014, '_menu_item_type', 'taxonomy'),
(2473, 1014, '_menu_item_menu_item_parent', '0'),
(2474, 1014, '_menu_item_object_id', '22'),
(2475, 1014, '_menu_item_object', 'category'),
(2476, 1014, '_menu_item_target', ''),
(2477, 1014, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2478, 1014, '_menu_item_xfn', ''),
(2479, 1014, '_menu_item_url', ''),
(2481, 1020, '_edit_last', '1'),
(2482, 1020, '_edit_lock', '1497285954:1'),
(2483, 1021, '_wp_attached_file', '2017/06/Docker-logo.png'),
(2484, 1021, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1354;s:6:\"height\";i:1208;s:4:\"file\";s:23:\"2017/06/Docker-logo.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:23:\"Docker-logo-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"Docker-logo-300x268.png\";s:5:\"width\";i:300;s:6:\"height\";i:268;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:23:\"Docker-logo-768x685.png\";s:5:\"width\";i:768;s:6:\"height\";i:685;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:24:\"Docker-logo-1024x914.png\";s:5:\"width\";i:1024;s:6:\"height\";i:914;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2485, 1022, '_wp_attached_file', '2017/06/Docker-logo2.png'),
(2486, 1022, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:660;s:6:\"height\";i:330;s:4:\"file\";s:24:\"2017/06/Docker-logo2.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"Docker-logo2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"Docker-logo2-300x150.png\";s:5:\"width\";i:300;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2487, 1020, '_thumbnail_id', '1021'),
(2491, 1022, '_edit_lock', '1497285906:1'),
(2489, 1020, 'views', '45'),
(2492, 1026, '_menu_item_type', 'taxonomy'),
(2493, 1026, '_menu_item_menu_item_parent', '0'),
(2494, 1026, '_menu_item_object_id', '126'),
(2495, 1026, '_menu_item_object', 'category'),
(2496, 1026, '_menu_item_target', ''),
(2497, 1026, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2498, 1026, '_menu_item_xfn', ''),
(2499, 1026, '_menu_item_url', ''),
(2501, 1027, '_edit_last', '1'),
(2502, 1027, '_edit_lock', '1497921674:1'),
(2503, 1027, '_syntaxhighlighter_encoded', '1'),
(2505, 1027, 'views', '42'),
(2508, 1034, '_edit_last', '1'),
(2509, 1034, '_edit_lock', '1497934442:1'),
(2510, 1034, '_syntaxhighlighter_encoded', '1'),
(2515, 26, '_edit_lock', '1497939873:1'),
(2512, 1034, 'views', '28'),
(2516, 26, '_edit_last', '1'),
(2518, 1041, '_edit_last', '1'),
(2519, 1041, '_edit_lock', '1497977727:1'),
(2520, 1041, '_syntaxhighlighter_encoded', '1'),
(2524, 1045, '_edit_last', '1'),
(2522, 1041, 'views', '33'),
(2525, 1045, '_edit_lock', '1498114734:1'),
(2526, 1045, '_syntaxhighlighter_encoded', '1'),
(2530, 1050, '_wp_attached_file', '2017/06/qrcode_error.png'),
(2528, 1045, 'views', '42'),
(2531, 1050, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:669;s:6:\"height\";i:128;s:4:\"file\";s:24:\"2017/06/qrcode_error.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"qrcode_error-150x128.png\";s:5:\"width\";i:150;s:6:\"height\";i:128;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"qrcode_error-300x57.png\";s:5:\"width\";i:300;s:6:\"height\";i:57;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2534, 1053, '_edit_last', '1'),
(2535, 1053, '_edit_lock', '1498129318:1'),
(2536, 1053, '_syntaxhighlighter_encoded', '1'),
(2537, 1054, '_wp_attached_file', '2017/06/wechat_qrcode.png'),
(2538, 1054, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:406;s:6:\"height\";i:450;s:4:\"file\";s:25:\"2017/06/wechat_qrcode.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:25:\"wechat_qrcode-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:25:\"wechat_qrcode-271x300.png\";s:5:\"width\";i:271;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2543, 1059, '_edit_last', '1'),
(2540, 1053, 'views', '38'),
(2544, 1059, '_edit_lock', '1498189465:1'),
(2545, 1060, '_wp_attached_file', '2017/06/pace1.png'),
(2546, 1060, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:883;s:6:\"height\";i:791;s:4:\"file\";s:17:\"2017/06/pace1.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:17:\"pace1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:17:\"pace1-300x269.png\";s:5:\"width\";i:300;s:6:\"height\";i:269;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:17:\"pace1-768x688.png\";s:5:\"width\";i:768;s:6:\"height\";i:688;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2547, 1059, '_syntaxhighlighter_encoded', '1'),
(2550, 1062, '_edit_last', '1'),
(2549, 1059, 'views', '43'),
(2551, 1062, '_edit_lock', '1498205721:1'),
(2552, 1062, '_syntaxhighlighter_encoded', '1'),
(2556, 1066, '_edit_last', '1'),
(2554, 1062, 'views', '36'),
(2557, 1066, '_edit_lock', '1501204504:1'),
(2559, 1066, 'views', '65'),
(2562, 1072, '_wp_attached_file', '2017/06/Wireshark1.png'),
(2563, 1072, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:936;s:6:\"height\";i:340;s:4:\"file\";s:22:\"2017/06/Wireshark1.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"Wireshark1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"Wireshark1-300x109.png\";s:5:\"width\";i:300;s:6:\"height\";i:109;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"Wireshark1-768x279.png\";s:5:\"width\";i:768;s:6:\"height\";i:279;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2564, 1073, '_wp_attached_file', '2017/06/Wireshark2.png'),
(2565, 1073, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:938;s:6:\"height\";i:884;s:4:\"file\";s:22:\"2017/06/Wireshark2.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"Wireshark2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"Wireshark2-300x283.png\";s:5:\"width\";i:300;s:6:\"height\";i:283;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"Wireshark2-768x724.png\";s:5:\"width\";i:768;s:6:\"height\";i:724;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2566, 1074, '_wp_attached_file', '2017/06/Wireshark3.png'),
(2567, 1074, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:631;s:6:\"height\";i:453;s:4:\"file\";s:22:\"2017/06/Wireshark3.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"Wireshark3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"Wireshark3-300x215.png\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2568, 1075, '_wp_attached_file', '2017/06/Wireshark4.png'),
(2569, 1075, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:937;s:6:\"height\";i:336;s:4:\"file\";s:22:\"2017/06/Wireshark4.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"Wireshark4-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"Wireshark4-300x108.png\";s:5:\"width\";i:300;s:6:\"height\";i:108;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"Wireshark4-768x275.png\";s:5:\"width\";i:768;s:6:\"height\";i:275;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2570, 1076, '_wp_attached_file', '2017/06/Wireshark5.png'),
(2571, 1076, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:625;s:6:\"height\";i:869;s:4:\"file\";s:22:\"2017/06/Wireshark5.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"Wireshark5-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"Wireshark5-216x300.png\";s:5:\"width\";i:216;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2572, 1077, '_wp_attached_file', '2017/06/Wireshark6.png'),
(2573, 1077, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:937;s:6:\"height\";i:872;s:4:\"file\";s:22:\"2017/06/Wireshark6.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"Wireshark6-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"Wireshark6-300x279.png\";s:5:\"width\";i:300;s:6:\"height\";i:279;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:22:\"Wireshark6-768x715.png\";s:5:\"width\";i:768;s:6:\"height\";i:715;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2574, 1078, '_wp_attached_file', '2017/06/Wireshark7.png'),
(2575, 1078, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:586;s:6:\"height\";i:474;s:4:\"file\";s:22:\"2017/06/Wireshark7.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"Wireshark7-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"Wireshark7-300x243.png\";s:5:\"width\";i:300;s:6:\"height\";i:243;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2576, 1079, '_wp_attached_file', '2017/06/Wireshark8.png'),
(2577, 1079, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:628;s:6:\"height\";i:881;s:4:\"file\";s:22:\"2017/06/Wireshark8.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:22:\"Wireshark8-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:22:\"Wireshark8-214x300.png\";s:5:\"width\";i:214;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2578, 1080, '_wp_attached_file', '2017/06/Wireshark-logo.png'),
(2579, 1080, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:895;s:6:\"height\";i:894;s:4:\"file\";s:26:\"2017/06/Wireshark-logo.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"Wireshark-logo-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"Wireshark-logo-300x300.png\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:26:\"Wireshark-logo-768x767.png\";s:5:\"width\";i:768;s:6:\"height\";i:767;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2580, 1080, '_edit_lock', '1498538965:1'),
(2581, 1081, '_edit_last', '1'),
(2582, 1081, '_edit_lock', '1498539374:1'),
(2583, 1081, '_thumbnail_id', '1080'),
(2586, 1084, '_wp_attached_file', '2017/06/Fiddler1.png'),
(2585, 1081, 'views', '39'),
(2587, 1084, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:580;s:6:\"height\";i:231;s:4:\"file\";s:20:\"2017/06/Fiddler1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"Fiddler1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"Fiddler1-300x119.png\";s:5:\"width\";i:300;s:6:\"height\";i:119;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2588, 1085, '_wp_attached_file', '2017/06/Fiddler2.png'),
(2589, 1085, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:724;s:6:\"height\";i:494;s:4:\"file\";s:20:\"2017/06/Fiddler2.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"Fiddler2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"Fiddler2-300x205.png\";s:5:\"width\";i:300;s:6:\"height\";i:205;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2590, 1086, '_wp_attached_file', '2017/06/Fiddler3.png'),
(2591, 1086, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:424;s:6:\"height\";i:289;s:4:\"file\";s:20:\"2017/06/Fiddler3.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"Fiddler3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"Fiddler3-300x204.png\";s:5:\"width\";i:300;s:6:\"height\";i:204;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2592, 1087, '_wp_attached_file', '2017/06/Fiddler4.png'),
(2593, 1087, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1381;s:6:\"height\";i:792;s:4:\"file\";s:20:\"2017/06/Fiddler4.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"Fiddler4-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"Fiddler4-300x172.png\";s:5:\"width\";i:300;s:6:\"height\";i:172;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:20:\"Fiddler4-768x440.png\";s:5:\"width\";i:768;s:6:\"height\";i:440;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"Fiddler4-1024x587.png\";s:5:\"width\";i:1024;s:6:\"height\";i:587;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2594, 1088, '_wp_attached_file', '2017/06/Fiddler5.png'),
(2595, 1088, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:547;s:6:\"height\";i:367;s:4:\"file\";s:20:\"2017/06/Fiddler5.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"Fiddler5-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"Fiddler5-300x201.png\";s:5:\"width\";i:300;s:6:\"height\";i:201;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2596, 1089, '_wp_attached_file', '2017/06/Fiddler6.png'),
(2597, 1089, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:546;s:6:\"height\";i:360;s:4:\"file\";s:20:\"2017/06/Fiddler6.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"Fiddler6-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"Fiddler6-300x198.png\";s:5:\"width\";i:300;s:6:\"height\";i:198;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2598, 1090, '_wp_attached_file', '2017/06/Fiddler7.png');
INSERT INTO `gzp_postmeta` (`meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(2599, 1090, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1391;s:6:\"height\";i:787;s:4:\"file\";s:20:\"2017/06/Fiddler7.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"Fiddler7-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"Fiddler7-300x170.png\";s:5:\"width\";i:300;s:6:\"height\";i:170;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:20:\"Fiddler7-768x435.png\";s:5:\"width\";i:768;s:6:\"height\";i:435;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"Fiddler7-1024x579.png\";s:5:\"width\";i:1024;s:6:\"height\";i:579;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2600, 1091, '_wp_attached_file', '2017/06/Fiddler8.png'),
(2601, 1091, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:990;s:6:\"height\";i:724;s:4:\"file\";s:20:\"2017/06/Fiddler8.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"Fiddler8-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"Fiddler8-300x219.png\";s:5:\"width\";i:300;s:6:\"height\";i:219;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:20:\"Fiddler8-768x562.png\";s:5:\"width\";i:768;s:6:\"height\";i:562;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2602, 1092, '_wp_attached_file', '2017/06/Fiddler9.png'),
(2603, 1092, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1381;s:6:\"height\";i:532;s:4:\"file\";s:20:\"2017/06/Fiddler9.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"Fiddler9-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"Fiddler9-300x116.png\";s:5:\"width\";i:300;s:6:\"height\";i:116;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:20:\"Fiddler9-768x296.png\";s:5:\"width\";i:768;s:6:\"height\";i:296;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"Fiddler9-1024x394.png\";s:5:\"width\";i:1024;s:6:\"height\";i:394;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2604, 1093, '_wp_attached_file', '2017/06/Fiddler10.png'),
(2605, 1093, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:985;s:6:\"height\";i:692;s:4:\"file\";s:21:\"2017/06/Fiddler10.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"Fiddler10-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"Fiddler10-300x211.png\";s:5:\"width\";i:300;s:6:\"height\";i:211;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"Fiddler10-768x540.png\";s:5:\"width\";i:768;s:6:\"height\";i:540;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2606, 1094, '_wp_attached_file', '2017/06/Fiddler11.png'),
(2607, 1094, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1417;s:6:\"height\";i:948;s:4:\"file\";s:21:\"2017/06/Fiddler11.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"Fiddler11-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"Fiddler11-300x201.png\";s:5:\"width\";i:300;s:6:\"height\";i:201;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"Fiddler11-768x514.png\";s:5:\"width\";i:768;s:6:\"height\";i:514;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"Fiddler11-1024x685.png\";s:5:\"width\";i:1024;s:6:\"height\";i:685;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2608, 1095, '_wp_attached_file', '2017/06/Fiddler12.png'),
(2609, 1095, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1387;s:6:\"height\";i:787;s:4:\"file\";s:21:\"2017/06/Fiddler12.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"Fiddler12-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"Fiddler12-300x170.png\";s:5:\"width\";i:300;s:6:\"height\";i:170;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"Fiddler12-768x436.png\";s:5:\"width\";i:768;s:6:\"height\";i:436;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"Fiddler12-1024x581.png\";s:5:\"width\";i:1024;s:6:\"height\";i:581;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2610, 1096, '_wp_attached_file', '2017/06/Fiddler13.png'),
(2611, 1096, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:935;s:6:\"height\";i:262;s:4:\"file\";s:21:\"2017/06/Fiddler13.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"Fiddler13-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"Fiddler13-300x84.png\";s:5:\"width\";i:300;s:6:\"height\";i:84;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"Fiddler13-768x215.png\";s:5:\"width\";i:768;s:6:\"height\";i:215;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2612, 1097, '_wp_attached_file', '2017/06/Fiddler14.png'),
(2613, 1097, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:951;s:6:\"height\";i:703;s:4:\"file\";s:21:\"2017/06/Fiddler14.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"Fiddler14-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"Fiddler14-300x222.png\";s:5:\"width\";i:300;s:6:\"height\";i:222;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"Fiddler14-768x568.png\";s:5:\"width\";i:768;s:6:\"height\";i:568;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2614, 1098, '_wp_attached_file', '2017/06/Fiddler15.png'),
(2615, 1098, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:990;s:6:\"height\";i:174;s:4:\"file\";s:21:\"2017/06/Fiddler15.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"Fiddler15-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"Fiddler15-300x53.png\";s:5:\"width\";i:300;s:6:\"height\";i:53;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"Fiddler15-768x135.png\";s:5:\"width\";i:768;s:6:\"height\";i:135;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2616, 1099, '_wp_attached_file', '2017/06/Fiddler16.png'),
(2617, 1099, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:386;s:6:\"height\";i:719;s:4:\"file\";s:21:\"2017/06/Fiddler16.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"Fiddler16-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"Fiddler16-161x300.png\";s:5:\"width\";i:161;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2618, 1100, '_wp_attached_file', '2017/06/Fiddler17.png'),
(2619, 1100, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1552;s:6:\"height\";i:50;s:4:\"file\";s:21:\"2017/06/Fiddler17.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:20:\"Fiddler17-150x50.png\";s:5:\"width\";i:150;s:6:\"height\";i:50;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"Fiddler17-300x10.png\";s:5:\"width\";i:300;s:6:\"height\";i:10;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:20:\"Fiddler17-768x25.png\";s:5:\"width\";i:768;s:6:\"height\";i:25;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"Fiddler17-1024x33.png\";s:5:\"width\";i:1024;s:6:\"height\";i:33;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2620, 1101, '_wp_attached_file', '2017/06/Fiddler18.png'),
(2621, 1101, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1374;s:6:\"height\";i:701;s:4:\"file\";s:21:\"2017/06/Fiddler18.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"Fiddler18-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:21:\"Fiddler18-300x153.png\";s:5:\"width\";i:300;s:6:\"height\";i:153;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:21:\"Fiddler18-768x392.png\";s:5:\"width\";i:768;s:6:\"height\";i:392;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:22:\"Fiddler18-1024x522.png\";s:5:\"width\";i:1024;s:6:\"height\";i:522;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2622, 1102, '_wp_attached_file', '2017/06/Fiddler19.png'),
(2623, 1102, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1750;s:6:\"height\";i:123;s:4:\"file\";s:21:\"2017/06/Fiddler19.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:21:\"Fiddler19-150x123.png\";s:5:\"width\";i:150;s:6:\"height\";i:123;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:20:\"Fiddler19-300x21.png\";s:5:\"width\";i:300;s:6:\"height\";i:21;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:20:\"Fiddler19-768x54.png\";s:5:\"width\";i:768;s:6:\"height\";i:54;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:21:\"Fiddler19-1024x72.png\";s:5:\"width\";i:1024;s:6:\"height\";i:72;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2624, 1103, '_wp_attached_file', '2017/06/Fiddler-banner.png'),
(2625, 1103, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:789;s:6:\"height\";i:420;s:4:\"file\";s:26:\"2017/06/Fiddler-banner.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:26:\"Fiddler-banner-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:26:\"Fiddler-banner-300x160.png\";s:5:\"width\";i:300;s:6:\"height\";i:160;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:26:\"Fiddler-banner-768x409.png\";s:5:\"width\";i:768;s:6:\"height\";i:409;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2626, 1104, '_edit_last', '1'),
(2627, 1104, '_edit_lock', '1498676177:1'),
(2629, 1104, 'views', '37'),
(2631, 1109, '_wp_attached_file', '2017/07/docker-for-windows1.png'),
(2632, 1109, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:493;s:6:\"height\";i:383;s:4:\"file\";s:31:\"2017/07/docker-for-windows1.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"docker-for-windows1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"docker-for-windows1-300x233.png\";s:5:\"width\";i:300;s:6:\"height\";i:233;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2633, 1110, '_wp_attached_file', '2017/07/docker-for-windows2.png'),
(2634, 1110, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:495;s:6:\"height\";i:384;s:4:\"file\";s:31:\"2017/07/docker-for-windows2.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"docker-for-windows2-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"docker-for-windows2-300x233.png\";s:5:\"width\";i:300;s:6:\"height\";i:233;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2635, 1111, '_wp_attached_file', '2017/07/docker-for-windows3.png'),
(2636, 1111, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:490;s:6:\"height\";i:386;s:4:\"file\";s:31:\"2017/07/docker-for-windows3.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"docker-for-windows3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"docker-for-windows3-300x236.png\";s:5:\"width\";i:300;s:6:\"height\";i:236;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2637, 1112, '_wp_attached_file', '2017/07/docker-for-windows4.png'),
(2638, 1112, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:688;s:6:\"height\";i:249;s:4:\"file\";s:31:\"2017/07/docker-for-windows4.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"docker-for-windows4-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"docker-for-windows4-300x109.png\";s:5:\"width\";i:300;s:6:\"height\";i:109;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2639, 1113, '_wp_attached_file', '2017/07/docker-for-windows5.png'),
(2640, 1113, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:383;s:6:\"height\";i:940;s:4:\"file\";s:31:\"2017/07/docker-for-windows5.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"docker-for-windows5-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"docker-for-windows5-122x300.png\";s:5:\"width\";i:122;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2641, 1114, '_wp_attached_file', '2017/07/docker-for-windows6.png'),
(2642, 1114, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:468;s:6:\"height\";i:201;s:4:\"file\";s:31:\"2017/07/docker-for-windows6.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"docker-for-windows6-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"docker-for-windows6-300x129.png\";s:5:\"width\";i:300;s:6:\"height\";i:129;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2643, 1115, '_wp_attached_file', '2017/07/docker-for-windows7.png'),
(2644, 1115, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:899;s:6:\"height\";i:324;s:4:\"file\";s:31:\"2017/07/docker-for-windows7.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"docker-for-windows7-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"docker-for-windows7-300x108.png\";s:5:\"width\";i:300;s:6:\"height\";i:108;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:31:\"docker-for-windows7-768x277.png\";s:5:\"width\";i:768;s:6:\"height\";i:277;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2645, 1116, '_wp_attached_file', '2017/07/docker-for-windows8.png'),
(2646, 1116, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:950;s:6:\"height\";i:744;s:4:\"file\";s:31:\"2017/07/docker-for-windows8.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"docker-for-windows8-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"docker-for-windows8-300x235.png\";s:5:\"width\";i:300;s:6:\"height\";i:235;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:31:\"docker-for-windows8-768x601.png\";s:5:\"width\";i:768;s:6:\"height\";i:601;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2647, 1117, '_wp_attached_file', '2017/07/docker-for-windows9.png'),
(2648, 1117, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:665;s:6:\"height\";i:431;s:4:\"file\";s:31:\"2017/07/docker-for-windows9.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"docker-for-windows9-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"docker-for-windows9-300x194.png\";s:5:\"width\";i:300;s:6:\"height\";i:194;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2649, 1118, '_wp_attached_file', '2017/07/docker-for-windows10.png'),
(2650, 1118, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:673;s:6:\"height\";i:184;s:4:\"file\";s:32:\"2017/07/docker-for-windows10.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"docker-for-windows10-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"docker-for-windows10-300x82.png\";s:5:\"width\";i:300;s:6:\"height\";i:82;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2651, 1119, '_wp_attached_file', '2017/07/docker-for-windows11.png'),
(2652, 1119, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:649;s:6:\"height\";i:148;s:4:\"file\";s:32:\"2017/07/docker-for-windows11.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"docker-for-windows11-150x148.png\";s:5:\"width\";i:150;s:6:\"height\";i:148;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"docker-for-windows11-300x68.png\";s:5:\"width\";i:300;s:6:\"height\";i:68;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2653, 1120, '_wp_attached_file', '2017/07/docker-for-windows12.png'),
(2654, 1120, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1087;s:6:\"height\";i:285;s:4:\"file\";s:32:\"2017/07/docker-for-windows12.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"docker-for-windows12-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"docker-for-windows12-300x79.png\";s:5:\"width\";i:300;s:6:\"height\";i:79;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"docker-for-windows12-768x201.png\";s:5:\"width\";i:768;s:6:\"height\";i:201;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"docker-for-windows12-1024x268.png\";s:5:\"width\";i:1024;s:6:\"height\";i:268;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2655, 1121, '_wp_attached_file', '2017/07/docker-for-windows13.png'),
(2656, 1121, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:980;s:6:\"height\";i:86;s:4:\"file\";s:32:\"2017/07/docker-for-windows13.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"docker-for-windows13-150x86.png\";s:5:\"width\";i:150;s:6:\"height\";i:86;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"docker-for-windows13-300x26.png\";s:5:\"width\";i:300;s:6:\"height\";i:26;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:31:\"docker-for-windows13-768x67.png\";s:5:\"width\";i:768;s:6:\"height\";i:67;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2657, 1122, '_wp_attached_file', '2017/07/docker-for-windows14.png'),
(2658, 1122, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:327;s:6:\"height\";i:68;s:4:\"file\";s:32:\"2017/07/docker-for-windows14.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"docker-for-windows14-150x68.png\";s:5:\"width\";i:150;s:6:\"height\";i:68;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"docker-for-windows14-300x62.png\";s:5:\"width\";i:300;s:6:\"height\";i:62;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2659, 1123, '_wp_attached_file', '2017/07/docker-for-windows15.png'),
(2660, 1123, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:715;s:6:\"height\";i:83;s:4:\"file\";s:32:\"2017/07/docker-for-windows15.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"docker-for-windows15-150x83.png\";s:5:\"width\";i:150;s:6:\"height\";i:83;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"docker-for-windows15-300x35.png\";s:5:\"width\";i:300;s:6:\"height\";i:35;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2661, 1124, '_wp_attached_file', '2017/07/docker-for-windows16.png'),
(2662, 1124, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:799;s:6:\"height\";i:334;s:4:\"file\";s:32:\"2017/07/docker-for-windows16.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"docker-for-windows16-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"docker-for-windows16-300x125.png\";s:5:\"width\";i:300;s:6:\"height\";i:125;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"docker-for-windows16-768x321.png\";s:5:\"width\";i:768;s:6:\"height\";i:321;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2663, 1125, '_wp_attached_file', '2017/07/docker-for-windows17.png'),
(2664, 1125, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:823;s:6:\"height\";i:536;s:4:\"file\";s:32:\"2017/07/docker-for-windows17.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"docker-for-windows17-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"docker-for-windows17-300x195.png\";s:5:\"width\";i:300;s:6:\"height\";i:195;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"docker-for-windows17-768x500.png\";s:5:\"width\";i:768;s:6:\"height\";i:500;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2665, 1126, '_edit_last', '1'),
(2666, 1126, '_edit_lock', '1499928403:1'),
(2667, 1126, '_thumbnail_id', '1131'),
(2672, 1130, '_wp_attached_file', '2017/07/docker-logo4.png'),
(2669, 1126, 'views', '39'),
(2673, 1130, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:700;s:6:\"height\";i:345;s:4:\"file\";s:24:\"2017/07/docker-logo4.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"docker-logo4-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"docker-logo4-300x148.png\";s:5:\"width\";i:300;s:6:\"height\";i:148;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2674, 1131, '_wp_attached_file', '2017/07/docker-logo3.png'),
(2675, 1131, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:700;s:6:\"height\";i:689;s:4:\"file\";s:24:\"2017/07/docker-logo3.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"docker-logo3-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:24:\"docker-logo3-300x295.png\";s:5:\"width\";i:300;s:6:\"height\";i:295;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2677, 1133, '_edit_last', '1'),
(2678, 1133, '_edit_lock', '1499763974:1'),
(2679, 1133, '_syntaxhighlighter_encoded', '1'),
(2681, 1133, 'views', '33'),
(2684, 1138, '_edit_last', '1'),
(2685, 1138, '_edit_lock', '1499998655:1'),
(2687, 1138, 'views', '24'),
(2688, 1141, '_edit_last', '1'),
(2689, 1141, '_edit_lock', '1499928437:1'),
(2690, 1141, '_syntaxhighlighter_encoded', '1'),
(2696, 1147, '_edit_last', '1'),
(2692, 1141, 'views', '23'),
(2697, 1147, '_edit_lock', '1499999393:1'),
(2698, 1147, '_syntaxhighlighter_encoded', '1'),
(2700, 1147, 'views', '22'),
(2702, 1151, '_edit_last', '1'),
(2703, 1151, '_edit_lock', '1500350304:1'),
(2704, 1152, '_wp_attached_file', '2017/07/秒杀案例架构设计.png'),
(2705, 1152, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:495;s:6:\"height\";i:203;s:4:\"file\";s:36:\"2017/07/秒杀案例架构设计.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:36:\"秒杀案例架构设计-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:36:\"秒杀案例架构设计-300x123.png\";s:5:\"width\";i:300;s:6:\"height\";i:123;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2706, 1153, '_wp_attached_file', '2017/07/RabbitMQ架构和原理.png'),
(2707, 1153, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:710;s:6:\"height\";i:462;s:4:\"file\";s:35:\"2017/07/RabbitMQ架构和原理.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:35:\"RabbitMQ架构和原理-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:35:\"RabbitMQ架构和原理-300x195.png\";s:5:\"width\";i:300;s:6:\"height\";i:195;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2708, 1154, '_wp_attached_file', '2017/07/RabbitMQ-work-queues.png'),
(2709, 1154, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:332;s:6:\"height\";i:111;s:4:\"file\";s:32:\"2017/07/RabbitMQ-work-queues.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"RabbitMQ-work-queues-150x111.png\";s:5:\"width\";i:150;s:6:\"height\";i:111;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"RabbitMQ-work-queues-300x100.png\";s:5:\"width\";i:300;s:6:\"height\";i:100;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2710, 1155, '_wp_attached_file', '2017/07/消息队列.png'),
(2711, 1155, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:561;s:6:\"height\";i:136;s:4:\"file\";s:24:\"2017/07/消息队列.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:24:\"消息队列-150x136.png\";s:5:\"width\";i:150;s:6:\"height\";i:136;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:23:\"消息队列-300x73.png\";s:5:\"width\";i:300;s:6:\"height\";i:73;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2712, 1156, '_wp_attached_file', '2017/07/消息队列解耦案例.png'),
(2713, 1156, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:638;s:6:\"height\";i:274;s:4:\"file\";s:36:\"2017/07/消息队列解耦案例.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:36:\"消息队列解耦案例-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:36:\"消息队列解耦案例-300x129.png\";s:5:\"width\";i:300;s:6:\"height\";i:129;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2714, 1157, '_wp_attached_file', '2017/07/消息队列解耦案例程序流程.png'),
(2715, 1157, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:591;s:6:\"height\";i:288;s:4:\"file\";s:48:\"2017/07/消息队列解耦案例程序流程.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:48:\"消息队列解耦案例程序流程-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:48:\"消息队列解耦案例程序流程-300x146.png\";s:5:\"width\";i:300;s:6:\"height\";i:146;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2716, 1151, '_syntaxhighlighter_encoded', '1'),
(2720, 1161, '_edit_last', '1'),
(2718, 1151, 'views', '24'),
(2721, 1161, '_edit_lock', '1500361269:1'),
(2723, 1161, 'views', '28'),
(2724, 1166, '_edit_last', '1'),
(2725, 1166, '_edit_lock', '1500539655:1'),
(2726, 1167, '_wp_attached_file', '2017/07/播放器架构.png'),
(2727, 1167, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:610;s:6:\"height\";i:383;s:4:\"file\";s:27:\"2017/07/播放器架构.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"播放器架构-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:27:\"播放器架构-300x188.png\";s:5:\"width\";i:300;s:6:\"height\";i:188;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2728, 1166, '_syntaxhighlighter_encoded', '1'),
(2746, 1172, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(2730, 1166, 'views', '27'),
(2747, 1172, '_menu_item_xfn', ''),
(2748, 1172, '_menu_item_url', ''),
(2751, 1175, '_edit_last', '1'),
(2752, 1175, '_edit_lock', '1501489266:1'),
(2753, 1175, '_syntaxhighlighter_encoded', '1'),
(2761, 1186, '_edit_last', '1'),
(2755, 1175, 'views', '11'),
(2762, 1186, '_edit_lock', '1502376476:1'),
(2763, 1187, '_wp_attached_file', '2017/08/firebox_debug_images5.png'),
(2764, 1187, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:711;s:6:\"height\";i:36;s:4:\"file\";s:33:\"2017/08/firebox_debug_images5.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"firebox_debug_images5-150x36.png\";s:5:\"width\";i:150;s:6:\"height\";i:36;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"firebox_debug_images5-300x15.png\";s:5:\"width\";i:300;s:6:\"height\";i:15;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2765, 1188, '_wp_attached_file', '2017/08/firebox_debug_images6.png'),
(2766, 1188, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:443;s:6:\"height\";i:216;s:4:\"file\";s:33:\"2017/08/firebox_debug_images6.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"firebox_debug_images6-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"firebox_debug_images6-300x146.png\";s:5:\"width\";i:300;s:6:\"height\";i:146;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2767, 1189, '_wp_attached_file', '2017/08/firebox_debug_images7.png'),
(2768, 1189, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1134;s:6:\"height\";i:58;s:4:\"file\";s:33:\"2017/08/firebox_debug_images7.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"firebox_debug_images7-150x58.png\";s:5:\"width\";i:150;s:6:\"height\";i:58;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"firebox_debug_images7-300x15.png\";s:5:\"width\";i:300;s:6:\"height\";i:15;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"firebox_debug_images7-768x39.png\";s:5:\"width\";i:768;s:6:\"height\";i:39;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"firebox_debug_images7-1024x52.png\";s:5:\"width\";i:1024;s:6:\"height\";i:52;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2769, 1190, '_wp_attached_file', '2017/08/firebox_debug_images1.png'),
(2770, 1190, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:254;s:6:\"height\";i:33;s:4:\"file\";s:33:\"2017/08/firebox_debug_images1.png\";s:5:\"sizes\";a:1:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"firebox_debug_images1-150x33.png\";s:5:\"width\";i:150;s:6:\"height\";i:33;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2771, 1191, '_wp_attached_file', '2017/08/firebox_debug_images2.png'),
(2772, 1191, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:903;s:6:\"height\";i:27;s:4:\"file\";s:33:\"2017/08/firebox_debug_images2.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"firebox_debug_images2-150x27.png\";s:5:\"width\";i:150;s:6:\"height\";i:27;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"firebox_debug_images2-300x9.png\";s:5:\"width\";i:300;s:6:\"height\";i:9;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"firebox_debug_images2-768x23.png\";s:5:\"width\";i:768;s:6:\"height\";i:23;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2773, 1192, '_wp_attached_file', '2017/08/firebox_debug_images3.png'),
(2774, 1192, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:989;s:6:\"height\";i:19;s:4:\"file\";s:33:\"2017/08/firebox_debug_images3.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"firebox_debug_images3-150x19.png\";s:5:\"width\";i:150;s:6:\"height\";i:19;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"firebox_debug_images3-300x6.png\";s:5:\"width\";i:300;s:6:\"height\";i:6;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"firebox_debug_images3-768x15.png\";s:5:\"width\";i:768;s:6:\"height\";i:15;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2775, 1193, '_wp_attached_file', '2017/08/firebox_debug_images4.png'),
(2776, 1193, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:713;s:6:\"height\";i:466;s:4:\"file\";s:33:\"2017/08/firebox_debug_images4.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"firebox_debug_images4-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"firebox_debug_images4-300x196.png\";s:5:\"width\";i:300;s:6:\"height\";i:196;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(2778, 1186, 'views', '12');

-- --------------------------------------------------------

--
-- 表的结构 `gzp_posts`
--

CREATE TABLE `gzp_posts` (
  `ID` bigint(20) UNSIGNED NOT NULL,
  `post_author` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext NOT NULL,
  `post_title` text NOT NULL,
  `post_excerpt` text NOT NULL,
  `post_status` varchar(20) NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) NOT NULL DEFAULT 'open',
  `post_password` varchar(255) NOT NULL DEFAULT '',
  `post_name` varchar(200) NOT NULL DEFAULT '',
  `to_ping` text NOT NULL,
  `pinged` text NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext NOT NULL,
  `post_parent` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `guid` varchar(255) NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0'
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `gzp_posts`
--

INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(516, 1, '2016-11-25 00:35:35', '2016-11-24 16:35:35', '<h3>定时任务命令:</h3>\r\n1. 定时任务服务提供crontab命令来设定服务\r\n2. crontab -e //编辑某个用户的cron服务\r\n3. crontab -l //列出某个用户cron服务的详细内容\r\n4. cron -r //删除某个用户的cron服务\r\n\r\n&nbsp;\r\n<h3>定时任务crontab格式</h3>\r\n<table style=\"height: 75px;\" width=\"541\">\r\n<tbody>\r\n<tr>\r\n<td>\r\n<div>分</div></td>\r\n<td>\r\n<div>小时</div></td>\r\n<td>\r\n<div>日</div></td>\r\n<td>\r\n<div>月</div></td>\r\n<td>\r\n<div>星期</div></td>\r\n<td>\r\n<div>命令</div></td>\r\n</tr>\r\n<tr>\r\n<td>\r\n<div>*</div></td>\r\n<td>\r\n<div>*</div></td>\r\n<td>\r\n<div>*</div></td>\r\n<td>\r\n<div>*</div></td>\r\n<td>\r\n<div>*</div></td>\r\n<td>\r\n<div></div></td>\r\n</tr>\r\n<tr>\r\n<td>\r\n<div>0-59</div></td>\r\n<td>\r\n<div>0-23</div></td>\r\n<td>\r\n<div>1-31</div></td>\r\n<td>\r\n<div>1-12</div></td>\r\n<td>\r\n<div>0-6</div></td>\r\n<td>\r\n<div>command</div></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n注意: \"*\"代表取值范围内的数字; \"/\"代表每, 比如每分钟等\r\n\r\n&nbsp;\r\n<h3>定时任务例子:</h3>\r\n*/1 * * * * php /data/www/cron.php 意思是每分钟执行cron.php\r\n50 7 * * * /sbin/sercive sshd start 意思是每天7:50开启ssh服务\r\n<h3></h3>\r\n<h3>启动crontab服务</h3>\r\n一般启动服务用/sbin/service crond start\r\n\r\n若是根用户的cron服务可以用 sudo service crond start\r\n\r\n这里还是要注意下不同版本linux系统启动的服务的命令也不同\r\n\r\n&nbsp;\r\n<h3>查看服务是否已经运行</h3>\r\nps -ax | grep cron', 'Linux定时任务crontab', '', 'publish', 'open', 'open', '', 'linux%e5%ae%9a%e6%97%b6%e4%bb%bb%e5%8a%a1crontab', '', '', '2016-11-25 00:35:35', '2016-11-24 16:35:35', '', 0, 'http://www.gzpblog.com/?p=516', 0, 'post', '', 0),
(5, 1, '2016-01-17 20:58:00', '2016-01-17 20:58:00', '我本是一枚扫大街的（环境科学专业），却走上了IT男的不归路。\r\n\r\n为什么？我仅仅是想做一些自己想做的事情，自己控制自己的人生，我从来没有这么充实过。\r\n\r\n但是起步有点晚，也知道自己落下了很多，也比较想快速提升自己，导致有点急功近利，又或者说，有点急躁。我不断地提醒自己，不要急，慢慢来，一步一步走！\r\n\r\n2015.7.1 毕业；2015.9.1 前往上海，开始转行历程，开始学习PHP；2016.2.16 开始了我的第一份工作，做电商B2B平台的开发；并（尴尬地）学会了各种修理网络，修理电脑的技巧。2016.5.24 第一次跳槽，有点快，做APP服务端接口，后台管理系统，微信公众号及其接口。2016.11.27 由于某些原因，离开上海，回到广东，于是开始在深圳工作。\r\n\r\n我现在主学PHP，不过我希望接下来一段时间内我的学习路线是这样的：\r\n<ul>\r\n 	<li>PHP的道路不要停，巩固基础，而且接下来要学Swoole。</li>\r\n 	<li>学习Golang，不能只会一门语言，Go看起来非常对我的胃口，适当学习起来。</li>\r\n 	<li>写写前端，不用太深入，自己写东西时能够实现自己的需求就行。</li>\r\n 	<li>补补计算机基础，数据结构算法，网络通信什么的。</li>\r\n</ul>\r\n不止是这些，还有很多其它额外的东西要学，比如最近开始了解Docker；还有一些其它与业务有联系的生态，Redis啊MongoDB啊等等很多内容；还有最近出现不久的PHP-X似乎也很有意思。\r\n\r\n虽然起步慢了很多，但是我正在好好学，目前为止我很充实，对技术有很高的热情。感觉自己成长也比较快，不过有也个硬伤，似乎成长为了依赖搜索引擎的业务型选手，比如有一个函数可以实现这个功能，但是想不起来具体叫什么或者具体的参数，但是搜一下，可以很快地反应过来，对对对就是这个，然后拿来用。其实也就是基础不够扎实，包括很多计算器基础的知识，确实落下了很多。\r\n\r\n2017.6.11更新\r\n\r\n&nbsp;\r\n\r\n来来来，搞起！\r\n\r\n扫大街的终于想起了那一夜键盘滋啦滋啦声的恐惧......\r\n\r\n&nbsp;\r\n\r\n我的博客历程：<a href=\"http://www.gzpblog.com/blog-time\" target=\"_blank\" rel=\"noopener noreferrer\">博客历程</a>\r\n\r\n如果你的博客也时常更新一些有价值的内容，希望能相互沟通，并且有兴趣交换友链，可以给我留言，<a href=\"https://www.gzpblog.com/friendlink\" target=\"_blank\" rel=\"noopener noreferrer\">友链</a>。', '关于我', '', 'publish', 'open', 'open', '', 'message', '', '', '2017-06-11 17:17:32', '2017-06-11 09:17:32', '', 0, 'http://www.gzpblog.com/?p=2', 0, 'page', '', 20),
(6, 1, '2016-01-18 20:10:00', '2016-01-18 20:10:00', '刚刚接触php，平台搭建是一个非常头痛的事，因为不想直接装集成环境包，想自己手动搭建平台，了解其中的构造，因此折腾了好久。然而，网上的教程有些实在太久远，或是不全面，就自己整合了一下搭建平台的过程以便以后参考使用\r\n<blockquote>环境: win10 64bit(32位的同理，下载相关软件必须是对应的32位版本)\r\nApache：httpd-2.4.16-win64-VC14\r\nPHP：php-5.6.14-win32-VC11-x64\r\nMySQL：mysql-5.6.27-winx64\r\n<img class=\"alignnone size-full wp-image-92\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/177819186.jpg\" alt=\"177819186\" width=\"554\" height=\"66\" /></blockquote>\r\n<h2>1.下载安装</h2>\r\n<h3>1）安装apache前必须先安装VC11（Visual C++ 2012）</h3>\r\n32位：VSU_4\\vcredist_x86.exe\r\n64位：VSU_4\\vcredist_x64.exe\r\n下载网址：<a href=\"https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=30679\" target=\"_blank\">https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=30679</a>\r\n<h3>2） 安装VC14 (Visual Studio 2015)</h3>\r\n64位：vc_redist.x64.exe\r\n32位vc_redist.x86.exe\r\n下载网址: <a href=\"https://www.microsoft.com/en-us/download/confirmation.aspx?id=48145\" target=\"_blank\">https://www.microsoft.com/en-us/download/confirmation.aspx?id=48145</a>\r\n<h3>3）下载Apache2.4.16</h3>\r\n下载地址： <a href=\"http://www.apachelounge.com/download/\" target=\"_blank\">http://www.apachelounge.com/download/</a>\r\n下载Apache 2.4 binaries VC14\r\n<h3>4）下载PHP</h3>\r\n下载地址：<a href=\"http://windows.php.net/download#php-5.6\" target=\"_blank\">http://windows.php.net/download#php-5.6</a>\r\n注意：PHP分为线程安全版（Thread Safe）和非线程安全版（Non Thread Safe），Apache服务器用线程安全版（Thread Safe），找到对应系统的zip文件下载。\r\n<h3>5）下载MySQL</h3>\r\nMSI installer为安装版，ZIP Archive为免安装版， 这里使用免安装版。\r\n下载地址: <a href=\"http://dev.mysql.com/downloads/mysql/\" target=\"_blank\">http://dev.mysql.com/downloads/mysql/</a>\r\n<h2>2.配置Apache</h2>\r\n下载Apache 2.4 binaries VC14，将下载到的文件解压，这里以解压到E盘为例。\r\n<ul>\r\n 	<li>用记事本打开 E:\\Apache24\\conf\\httpd.conf</li>\r\n 	<li>第37行，关键词：ServerRoot \"c:/Apache24\",修改成“E:/Apache24”（按自己解压路径自改）。</li>\r\n 	<li>第209行，关键词：ServerAdmin admin@example.com，这是Apache管理员Email地址，可不改。</li>\r\n 	<li>第218行，关键词：#ServerName\r\nwww.example.com:80，这是Apache的服务器地址，把前面的”#“去掉，把”www.example.com“改成”localhost“。</li>\r\n 	<li>第242行，关键词：DocumentRoot\r\n\"c:/Apache24/htdocs\"，改成“E:/www”，这是网站的根目录，事先请先创建好这个目录，否则也会报错。</li>\r\n 	<li>第243行，关键词：，改成“E:/www”，这个也是网站根目录，必须和上面的改成一样，否则无法打开网站。</li>\r\n 	<li>第276行，关键词：DirectoryIndex index.html，首页设置，可以添加一些网页，比如“index.php\r\nindex.htm”等,注意文件名要用空格隔开。</li>\r\n 	<li>第359行，关键词：ScriptAlias /cgi-bin/\r\n\"c:/Apache24/cgi-bin/\"，Apache服务器的关键文件目录，修改为自己Apache的安装目录下的“cgi-bin”文件夹如ScriptAlias\r\n/cgi-bin/ \"E:/Apache24/cgi-bin/\"。</li>\r\n 	<li>第375行，关键词：，改为 。 配置完成</li>\r\n</ul>\r\n你可以打开Apache安装目录下的“bin”文件夹中的“httpd.exe”测试服务器，如果一闪而过，则说明你的配置文件有问题。如果打开一个空的命令提示符就是配置成功，不要关闭这个命令提示符，打开浏览器，在地址栏输入“localhost”然后回车，如果显示“It works!”或者其他网页，如图，则说明你的服务器配置成功。\r\n<img class=\"alignnone size-full wp-image-99\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1095480201.jpg\" alt=\"1095480201\" width=\"327\" height=\"245\" />\r\n<h2>3.配置php5.6</h2>\r\n解压压缩包，这里以路径”E:\\PHP5.6”为例。\r\n<ul>\r\n 	<li>将PHP目录下的”php.ini-production\"改名为\"php.ini\"，如图:\r\n<img class=\"alignnone size-full wp-image-108\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/4051746677.jpg\" alt=\"4051746677\" width=\"219\" height=\"48\" /></li>\r\n 	<li>打开改名后的“php.ini”文件。</li>\r\n 	<li>第736行，关键词：; extension_dir = \"ext\"，把前面的“;”去掉</li>\r\n 	<li>第878行开始，是PHP的扩展库的开关设置，把相应的扩展库的前面的“;”去掉就可以打开对应扩展库。这里去掉了php_fileinfo.dll、php_gd2.dll、php_mysql.dll、php_mysqli.dll、php_pdo_mysql.dll前面的“；”。\r\n<img class=\"alignnone size-full wp-image-102\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2527315217.jpg\" alt=\"2527315217\" width=\"266\" height=\"411\" /></li>\r\n</ul>\r\n保存，设置好了。\r\n<h2>4.整合apache和php</h2>\r\n<ul>\r\n 	<li>再次打开apache路径(“[Apache_home]\\conf\\httpd.conf”)下的httpd.conf，在最后加上以下内容让apache支持php：</li>\r\n</ul>\r\n<blockquote>LoadModule php5_module \"E:/PHP5.6/php5apache2_4.dll\"\r\nAddHandler application/x-httpd-php .php\r\nPHPIniDir \"E:/PHP5.6\"</blockquote>\r\n接下来需要配置安装Apache的主服务，有了它，Apache才可启动：\r\n<ul>\r\n 	<li>以管理员身份打开CMD窗口（命令提示符），输入：\"E:\\Apache24\\bin\\httpd.exe\" -k install -n\r\napache</li>\r\n 	<li>然后回车，注意包含引号。</li>\r\n 	<li>服务安装完毕，完毕后，会自动测试，若有问题，窗口会提示错误，此时，请根据错误自行排查，正常安装完毕提示安装成功如下图所示：</li>\r\n</ul>\r\n<img class=\"alignnone size-full wp-image-91\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/145737461.jpg\" alt=\"145737461\" width=\"554\" height=\"104\" />\r\n<ul>\r\n 	<li>在安装目录中找到E:\\Apache24\\bin\\ApacheMonitor.exe,双击打开，点击start即可启动apache服务，Stop”关闭apache服务。</li>\r\n</ul>\r\n<img class=\"alignnone size-full wp-image-111\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/4261596487.jpg\" alt=\"4261596487\" width=\"526\" height=\"342\" />\r\n<ul>\r\n 	<li>若Apache服务器软件不想用了，想要卸载，需要先卸载apache服务，如果直接删除安装路径的文件夹，会有残余文件在电脑，可能会造成不必要的麻烦，所以在CMD命令窗口下，输入：sc delete apache （apache是Apache服务器的服务名）</li>\r\n</ul>\r\n测试一下apache是否配置成功并支持php,在网站根目录下（如E:/www）创建一个txt文件，写入：\r\n\r\n保存,重命名txt文件为phpinfo.php文件，打开浏览器，localhost-&gt;phpinfo.php，如果出现以下页面显示php信息，则配置成功。\r\n<img class=\"alignnone size-full wp-image-93\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/191073368.jpg\" alt=\"191073368\" width=\"554\" height=\"532\" />\r\n<h2>5.配置MySQL</h2>\r\n<h1>1)设置环境变量以及配置文件</h1>\r\n<ul>\r\n 	<li>解压压缩包放到合适的位置，这里为E：\\MySQL \\ ，文件夹名称改为MySQL Server 5.6，最后路径为E：\\MySQL\r\n\\MySQL Server 5.6</li>\r\n 	<li>配置环境变量：我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量</li>\r\n 	<li>找到下面系统变量的path选项，双击：\r\n<img class=\"alignnone size-full wp-image-98\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/636966948.jpg\" alt=\"636966948\" width=\"328\" height=\"393\" /></li>\r\n</ul>\r\n<ul>\r\n 	<li>编辑系统变量，在后面追加mysql bin 文件夹路径，这里为;E:\\MySQL\\MySQL Server 5.6\\bin\r\n<img class=\"alignnone size-full wp-image-110\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/4108902883.jpg\" alt=\"4108902883\" width=\"504\" height=\"137\" /></li>\r\n</ul>\r\n<ul>\r\n 	<li>找到mysql安装路径下的my-default.ini 文件，在这里路径为E:\\MySQL\\MySQL Server\r\n5.6\\my-default.ini</li>\r\n 	<li>打开my-default.ini，在其中修改或添加配置：</li>\r\n</ul>\r\n<blockquote>[mysqld]\r\nbasedir=E:\\MySQL\\MySQL Server 5.6（mysql所在目录）\r\ndatadir=E:\\MySQL\\MySQL Server 5.6\\data （mysql所在目录\\data）</blockquote>\r\n<ul>\r\n 	<li>重命名my-default.ini为my.ini</li>\r\n</ul>\r\n<h1>2)安装mysql服务：</h1>\r\n<ul>\r\n 	<li>以管理员身份运行CMD，输入：cd E:\\MySQL\\MySQL Server 5.6\\bin\r\n进入mysql的bin文件夹(不管有没有配置过环境变量，也要进入bin文件夹，否则之后启动服务仍然会报错误2)</li>\r\n 	<li>输入mysqld –install ，回车显示安装成功。</li>\r\n</ul>\r\n<img class=\"alignnone size-full wp-image-109\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/4099657754.jpg\" alt=\"4099657754\" width=\"449\" height=\"130\" />\r\n<ul>\r\n 	<li>启动mysql服务：CMD界面输入net start mysql：</li>\r\n</ul>\r\n<img class=\"alignnone size-full wp-image-96\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/442536786.jpg\" alt=\"442536786\" width=\"308\" height=\"85\" />\r\n<ul>\r\n 	<li>登录，初始用户名为root，密码为空，直接回车跳过：</li>\r\n</ul>\r\n<img class=\"alignnone size-full wp-image-103\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2748039769.jpg\" alt=\"2748039769\" width=\"554\" height=\"244\" />\r\n<ul>\r\n 	<li>更改初始用户名root：</li>\r\n</ul>\r\n<blockquote>mysql&gt; use mysql;\r\nmysql&gt; UPDATE user SET user=\'newName\' WHERE user=\'root\';\r\nmysql&gt; flush privileges;</blockquote>\r\n<ul>\r\n 	<li>更改密码：</li>\r\n</ul>\r\n<blockquote>mysql&gt; use mysql;\r\nmysql&gt; UPDATE user SET password=PASSWORD(\"new password\") WHERE user=\'username\';\r\nmysql&gt; flush privileges;</blockquote>\r\n<ul>\r\n 	<li>exit或者quit退出mysql登录：</li>\r\n</ul>\r\n<img class=\"alignnone size-full wp-image-100\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1505568065.jpg\" alt=\"1505568065\" width=\"229\" height=\"58\" />\r\n<ul>\r\n 	<li>Net stop mysql 可关闭mysql服务：</li>\r\n</ul>\r\n<img class=\"alignnone size-full wp-image-95\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/231732575.jpg\" alt=\"231732575\" width=\"345\" height=\"127\" />\r\n<ul>\r\n 	<li>删除mysql服务：\r\n只要在CMD里输入命令就可以将服务删除：sc delete mysql\r\n（mysql是你要删除的服务名）</li>\r\n 	<li>查看mysql是否已经和php配置好：\r\n再次用浏览器打开phpinfo.php，如果找到如下图所示mysql部分即可：\r\n<img class=\"alignnone size-full wp-image-97\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/503852648.jpg\" alt=\"503852648\" width=\"554\" height=\"456\" /></li>\r\n</ul>', 'Windows下搭建PHP开发环境：Apache2.4+PHP5.6+MySQL5.6', '', 'publish', 'open', 'open', '', '29', '', '', '2016-10-08 01:32:52', '2016-10-07 17:32:52', '', 0, 'http://www.gzpblog.com/?p=29', 0, 'post', '', 1),
(7, 1, '2016-01-19 19:32:00', '2016-01-19 19:32:00', '<h3><strong>一. Views插件下载</strong></h3>\r\n下载地址: <a href=\"http://pan.baidu.com/s/1o6UErTC\" target=\"_blank\">http://pan.baidu.com/s/1o6UErTC</a>\r\n<h3>二. 使用方法:</h3>\r\n<ul>\r\n 	<li>在typecho1.0版本中出现数据库插入失败的问题,要手动修改一下数据库,首先打开phpmyadmin(数据库管理),找到contents表,点结构:<img class=\"alignnone size-full wp-image-107\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/3658389805.png\" alt=\"3658389805\" width=\"900\" height=\"335\" /></li>\r\n 	<li>插入一个字段:<img class=\"alignnone size-full wp-image-105\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/3158687516.png\" alt=\"3158687516\" width=\"492\" height=\"50\" /></li>\r\n 	<li> 具体如下:<img class=\"alignnone size-full wp-image-104\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2878285641.png\" alt=\"2878285641\" width=\"1678\" height=\"240\" /></li>\r\n 	<li>在要显示浏览次数的地方输入如下代码:</li>\r\n</ul>\r\n\r\n[php]&lt;!--?php Views_Plugin::theViews(); ?--&gt;[/php]\r\n', 'typecho实现浏览次数计算的插件及使用方法', '', 'publish', 'open', 'open', '', '42', '', '', '2016-10-09 23:59:43', '2016-10-09 15:59:43', '', 0, 'http://www.gzpblog.com/?p=42', 0, 'post', '', 0),
(8, 1, '2016-02-06 15:37:00', '2016-02-06 15:37:00', '', '归档', '', 'publish', 'open', 'open', '', 'search', '', '', '2016-10-08 00:35:30', '2016-10-07 16:35:30', '', 0, 'http://www.gzpblog.com/?p=71', 0, 'page', '', 0),
(9, 1, '2016-03-01 16:35:00', '2016-03-01 16:35:00', '<p>网站上线之后设置伪静态时遇到一点小问题，后台开启地址重写功能一直提示失败，情况是服务器配置不支持。不同的主机服务器配置不一样。</p>\r\n<p>那么我所使用的阿里云虚拟主机是Apache服务器，Apache服务器下如果一直开启失败，就要手动上传一个.htaccess文件到网站根目录下,首先在本地新建一个文件,写以下代码:</p>\r\n[code]\r\nRewriteEngine On \r\nRewriteBase / \r\nRewriteCond %{REQUEST_FILENAME} !-f \r\nRewriteCond %{REQUEST_FILENAME} !-d \r\nRewriteRule ^(.*)$ /index.php/$1 [L] \r\n[/code]\r\n<p>上传到网站根目录下(linux主机上传到htdocs下)，重命名为.htaccess，然后再在后台开启rewrite地址重写功能，这时候还会提示服务器配置不支持，但前台页面地址已经去index并且可以正常浏览了。</p>\r\n', 'Typecho伪静态.htaccess文件写法', '', 'publish', 'open', 'open', '', '78', '', '', '2016-10-09 23:56:31', '2016-10-09 15:56:31', '', 0, 'http://www.gzpblog.com/?p=78', 0, 'post', '', 0),
(10, 1, '2016-03-03 21:59:00', '2016-03-03 21:59:00', '百度搜一下“成功的一百条秘诀”，唰唰唰好多条。再搜”成功的法则“，很好，唰唰唰又是好多条，什么成功的多少多少条法则啊，什么不成功的多少多少条原因啊，什么改变人生的多少多少条习惯啊，这种文章太多了。好吧，成功的一百条秘诀，第一条和第十条换一下，第多少多少条换一下，duang！又是一篇励志好文！\r\n\r\n说实在的，这种东西，太多了！从小到大，见到的太多了！即使你不喜欢看这些，在中国这种教育模式下，估计你也是”吸收“了很多这种类型的鼓励了，开学典礼校长发个话啊，班主任训话啊，多了多了。\r\n\r\n况且，父母的洗脑才是最主要的。都说中国的父母喜欢拿自家孩子和别人比，这倒是真的。我爸就是喜欢说别人的孩子多厉害，”那个谁谁谁的孩子啊，多厉害啊，去美国留学回来，开了多少家店了啊。”这个时候，我妈就会不喜了，“人家孩子考试不及格的时候你怎么不说？现在倒是来说。”当然，我妈也是这样，而且最近经常会说这些，“那个那个叔叔，多厉害啊，你看他以前身无分文，现在风生水起啊！”是啊，是厉害啊，可是，我到了40岁，究竟是个什么样，还不知道呢啊，我不一定就差啊。\r\n\r\n“给我好好加油啊！你看人家马云，以前还是麦当劳收银员啊！你要向别人学习！你有什么课程啊能学到东西的你就去报！去听！”\r\n\r\n马云厉害啊，人家是传奇，但是，一直以来，我的理念是非常不喜欢向别人学习的，可以参考。\r\n\r\n我们从小到大都是“向别人学习”，“向别人学习”，“向别人学习”。你究竟是谁啊，你还是你自己吗。成功人士的讲坛什么的，是挺多的，名人说过的话，也挺多的，可是，成功的永远就是那些给我们当楷模的。为什么？\r\n\r\n是的，假设马云开了个座谈会，分享自己成功的经验，100个人在场，听了。那么，为什么“马云”只有一个1个，而不是101个。“因为你们只听不做，没用！”好，100个人，听了之后付诸实践的，而不是听听就算了的，有10个。咦，那么为什么还是只有1个马云，而不是11个马云？好。10个人去做了，那么，做完了的，有几个？好吧，有2个。“那么，为什么没有3个马云！你告诉我！”因为，这两个人里，真的能力能达到马云那样吗？就像景德镇的陶瓷很出名，你去仿造，就能造出景德镇一样上好的陶瓷吗？不一定！\r\n\r\n不能否定将来一定没有第二个“马云”，但是，这个概率真的非常非常低！又说：“马云成功还没几年，并不能说明什么。”那好办，“马云”=？，再换个老点的名人呗，想换谁换谁，道理一样。\r\n\r\n马云是传奇，他走过的路他已经走过了，你再走一遍，他永远是在你前面，他永远在你前面，左手握“传”，右手握“奇”，笑着看你。\r\n\r\n两个人一起去割麦子，人家走在你前面，你在后面。人家走过的路，已经割完了，你跟着，你能割到啥！\r\n\r\n“不对啊，为什么马化腾跟在MSN后面，为毛QQ还是成功了啊！”“傻孩子，虽然目的一样，但是走的路不一样啊，美国人用QQ吗？并不。”\r\n\r\n”还是不对啊，为什么那啥啥啥走在前面，腾讯走在后面，还是被腾讯超过然后挤掉啊？“”傻孩子，人家来的晚，但是人家开法拉利啊，你开着拖拉机，也不换，这没办法咯。“这，就是是另一方面了。\r\n\r\n所以，我一直觉得，走自己的道路才是最主要的，要做自己，你可能不知道该怎么走接下来的路，但这正是你要做的事，去开辟你自己的道路，去成为下一个传奇。即使没成功，没事，真的没事，不是每个人都能达到所谓的“成功”，况且”成功“的定义对不同的人，都是不一样的。也许，你自己的目标，虽然很小，实现了，那就是成功了，你怕什么。\r\n\r\n我之前跟一位叔叔说过，“即使没成功，至少我努力过！”“一定能成功！不能这么说！”对，不能这么说。\r\n\r\n再多的励志道理，再多的优秀生活习惯，再多的经典案例，都不如自己脚踏实地去探索生活！未来是什么样，谁都不知道。\r\n\r\n真要说点励志故事的话吧，还是来点有用的，李开复的成功秘诀就是做最好的自己，只有突破自我才能到达成功的巅峰。\r\n\r\n所以，扯这么多，想说的就是，不要因为过于向往他人的成功而忘了你自己是个什么。当然，这只是我，一个只有22岁刚刚踏入社会的我的想法，未来我的看法会不会改变，我不知道。因为未来，谁都不知道。\r\n\r\n<img class=\"alignnone size-full wp-image-127\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/3119391764.png\" alt=\"3119391764\" width=\"684\" height=\"457\" />', '走自己的路', '', 'publish', 'open', 'open', '', '83', '', '', '2016-10-08 02:01:40', '2016-10-07 18:01:40', '', 0, 'http://www.gzpblog.com/?p=83', 0, 'post', '', 3),
(11, 1, '2016-03-04 00:20:00', '2016-03-04 00:20:00', '<h2>一.什么是Gravatar头像?</h2>\r\n如果在Gravatar的服务器上放置了你自己的头像，那么在任何支持Gravatar的blog或者留言本上留言时，只要提供你与这个头像关联的email地址，就能够显示出你的Gravatar头像来。gravatar在wordpress上的话，还是蛮常见的，但是typecho也是支持的，但是需要装个小插件，因为国内Gravatar是被墙了。\r\n<h2>二.设置Gravatar头像</h2>\r\n<ul>\r\n 	<li>首先，需要翻墙工具，这里推荐一个免费的，下载地址点击：<a href=\"https://s3.amazonaws.com/57wj-4j1q-wa7e/zh/index.html\" target=\"_blank\">寒风，Psiphon</a></li>\r\n</ul>\r\n当然，因为是免费的，所以超级慢，想快一点就用付费的VPN软件吧，也不贵，但是这个免费的用来设置个头像也是够了。\r\n<ul>\r\n 	<li>直接打开这个软件连接上就可以。</li>\r\n 	<li>点sign in注册，输入你的邮箱名称密码，这些不用说。然后就有一封邮件到你邮箱了</li>\r\n 	<li>到邮箱查看邮件，是这样的：<img class=\"alignnone size-full wp-image-121\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2255649394.png\" alt=\"2255649394\" width=\"621\" height=\"344\" />点蓝色方块activate account。</li>\r\n 	<li>然后点sign in to gravatar。<img class=\"alignnone size-full wp-image-129\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/4143100091.png\" alt=\"4143100091\" width=\"680\" height=\"316\" /></li>\r\n 	<li>接下来到这个页面，点击下面那段话的Add one by clicking here。<img class=\"alignnone size-full wp-image-115\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1119564827.png\" alt=\"1119564827\" width=\"1020\" height=\"588\" /></li>\r\n 	<li>弹出来的这个界面这样子，接下来不用说了，选一种方式设置图片就好<img class=\"alignnone size-full wp-image-113\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/53396810.png\" alt=\"53396810\" width=\"952\" height=\"361\" /></li>\r\n</ul>\r\n这样就好，就这么简单，然后在支持Gravatar的地方用你的邮箱评论什么的,就会显示头像了。', 'Gravatar头像以及被墙后如何设置Gravatar头像', '', 'publish', 'open', 'open', '', '86', '', '', '2016-10-08 02:06:31', '2016-10-07 18:06:31', '', 0, 'http://www.gzpblog.com/?p=86', 0, 'post', '', 1),
(12, 1, '2016-03-07 09:32:00', '2016-03-07 09:32:00', '前台页面script代码如下:\r\n\r\n[js]$.ajax({\r\n    type:&quot;get|post&quot;,           //提交方式\r\n    url:&quot;xxxx.php&quot;,            //提交地址\r\n    data:&quot;名=值&amp;amp;名=值...&quot;,      //提交的参数(可有可无)\r\n    async:true|false,          //通信方式(可有可无，默认true)\r\n    dataType:&quot;html|json|xml&quot;,  //返回值类型(可有可无，默认html)\r\n    error: function(参数){},   //出错时调用的函数(可有可无)\r\n    success:function(参数){}   //接收服务器响应结果   \r\n});\r\n[/js]\r\n\r\n在URL对应后台文件接收数据并对数据进行处理然后进行数据交互即可,例如php文件中接收json数据:\r\n<ul>\r\n 	<li>将一维关联数组$arr,转换为json字符串可以使用json_encode($arr)</li>\r\n 	<li>将json字符串,转换为一维关联数组可以使用json_decode(jason字符串);</li>\r\n</ul>\r\n在php文件中如果用json数据类型传输,就直接echo json_encode(数组)就将数据传递到前台,success中函数直接拿来使用实现数据交互.\r\n\r\ndatatype返回值的取舍,html类型一般在服务器返回一个值时使用，json类型在服务器端返回多个值时使用，xml也是服务器返回多个值时使用,一般不怎么用。', 'Jquery实现ajax方法', '', 'publish', 'open', 'open', '', '94', '', '', '2016-10-13 12:05:43', '2016-10-13 04:05:43', '', 0, 'http://www.gzpblog.com/?p=94', 0, 'post', '', 0),
(13, 1, '2016-03-09 10:15:00', '2016-03-09 10:15:00', '<ul>\r\n 	<li>什么是自动推送工具？</li>\r\n</ul>\r\n自动推送JS代码是百度站长平台最新推出的轻量级链接提交组件，站长只需将自动推送的JS代码放置在站点每一个页面源代码中，当页面被访问时，页面链接会自动推送给百度，有利于新页面更快被百度发现。\r\n<ul>\r\n 	<li>下载Typecho百度自动推送插件baiduPush</li>\r\n</ul>\r\n把百度自动推送的js代码弄成一个typecho小插件，直接启用就能用。\r\n下载地址:<a href=\"http://yun.baidu.com/s/1hrbpS7U\" target=\"_blank\">baiduPush for Typecho</a>\r\n<ul>\r\n 	<li>使用</li>\r\n</ul>\r\n解压后直接上传到usr/plugins下，登录网站后台插件处直接启用即可。', 'Typecho百度自动推送插件baiduPush for Typecho', '', 'publish', 'open', 'open', '', '95', '', '', '2016-10-08 03:02:59', '2016-10-07 19:02:59', '', 0, 'http://www.gzpblog.com/?p=95', 0, 'post', '', 3),
(14, 1, '2016-03-13 21:15:00', '2016-03-13 21:15:00', '看了《疯狂动物城》,我已经忘不了那只树獭了哈哈哈哈!!!!!\r\n<img class=\"alignnone size-full wp-image-114\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/947229738.gif\" alt=\"947229738\" width=\"247\" height=\"194\" />\r\n\r\n一般来说听到中文配音的外语片都感觉蛋疼,但是这部片子看着看着我竟然就忘了吐槽中文配音了,而且树獭的片段,感觉中文配音更搞笑!!!一想到那只树獭就想笑啊,个人觉得年度笑点,年度动画片,没得说了!\r\n哈哈哈哈，给个片段链接：<a href=\"https://movie.douban.com/trailer/191795/#content\" target=\"_blank\">树獭片段</a>\r\n\r\n看了一下豆瓣的分数,也是高得不行,不过确实不错啊明年奥斯卡妥妥了.这次迪斯尼的风格也是有点神奇啊.\r\n<img class=\"alignnone size-full wp-image-128\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/3961432814.png\" alt=\"3961432814\" width=\"633\" height=\"343\" />\r\n\r\n这个片子，萌点笑点剧情，该有的，都有的，强烈推荐啊！', '《疯狂动物城》，那只树獭，哈哈哈......', '', 'publish', 'open', 'open', '', '97', '', '', '2016-10-08 03:02:30', '2016-10-07 19:02:30', '', 0, 'http://www.gzpblog.com/?p=97', 0, 'post', '', 1),
(15, 1, '2016-03-16 21:23:00', '2016-03-16 13:23:00', '最近开始搞一下微信公众平台开发,感觉应该蛮有意思的,看起来也不难.\r\n<h2>1.注册微信公众平台账号</h2>\r\n官网:<a href=\"https://mp.weixin.qq.com/\" target=\"_blank\">https://mp.weixin.qq.com/</a>\r\n注册什么的就不用说了,按步骤来就行了.\r\n<h2>2. 准备服务器</h2>\r\n准备服务器资源，百度BAE新浪ACE什么的也都可以的,作为例子这里使用PHP环境+MySQL数据库作为程序运行环境.\r\n<h2>3. 上传接口文件</h2>\r\n微信开发者文档里就有php代码例子下载,如下:\r\n\r\n[php]\r\n/* 微信接口文件 */\r\n//define your token\r\ndefine(&quot;TOKEN&quot;, &quot;weixin&quot;);\r\n$wechatObj = new wechatCallbackapiTest();\r\n$wechatObj-&gt;valid();\r\n   \r\nclass wechatCallbackapiTest\r\n{\r\n   public function valid()\r\n   {\r\n       $echoStr = $_GET[&quot;echostr&quot;];\r\n       //valid signature , option\r\n      if($this-&gt;checkSignature())\r\n      {\r\n       echo $echoStr;\r\n       exit;\r\n      }\r\n    }\r\n\r\npublic function responseMsg()\r\n{\r\n    //get post data, May be due to the different environments\r\n    $postStr = $GLOBALS[&quot;HTTP_RAW_POST_DATA&quot;];\r\n\r\n    //extract post data\r\n    if (!empty($postStr)){\r\n            /* libxml_disable_entity_loader is to prevent XML eXternal Entity Injection,\r\n               the best way is to check the validity of xml by yourself */\r\n            libxml_disable_entity_loader(true);\r\n            $postObj = simplexml_load_string($postStr, \'SimpleXMLElement\', LIBXML_NOCDATA);\r\n            $fromUsername = $postObj-&gt;FromUserName;\r\n            $toUsername = $postObj-&gt;ToUserName;\r\n            $keyword = trim($postObj-&gt;Content);\r\n            $time = time();\r\n            $textTpl = &quot;&lt;xml&gt;\r\n &lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt;\r\n &lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt;\r\n &lt;CreateTime&gt;%s&lt;/CreateTime&gt;\r\n &lt;MsgType&gt;&lt;![CDATA[%s]]&gt;&lt;/MsgType&gt;\r\n &lt;Content&gt;&lt;![CDATA[%s]]&gt;&lt;/Content&gt;\r\n &lt;FuncFlag&gt;0&lt;/FuncFlag&gt;\r\n &lt;/xml&gt;&quot;;              \r\n            if(!empty( $keyword ))\r\n            {\r\n                $msgType = &quot;text&quot;;\r\n                $contentStr = &quot;Welcome to wechat world!&quot;;\r\n                $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);\r\n                echo $resultStr;\r\n            }else{\r\n                echo &quot;Input something...&quot;;\r\n            }\r\n\r\n    }else {\r\n        echo &quot;&quot;;\r\n        exit;\r\n    }\r\n}\r\n    \r\nprivate function checkSignature()\r\n{\r\n    // you must define TOKEN by yourself\r\n    if (!defined(&quot;TOKEN&quot;)) {\r\n        throw new Exception(\'TOKEN is not defined!\');\r\n    }\r\n    \r\n    $signature = $_GET[&quot;signature&quot;];\r\n    $timestamp = $_GET[&quot;timestamp&quot;];\r\n    $nonce = $_GET[&quot;nonce&quot;];\r\n            \r\n    $token = TOKEN;\r\n    $tmpArr = array($token, $timestamp, $nonce);\r\n    // use SORT_STRING rule\r\n    sort($tmpArr, SORT_STRING);\r\n    $tmpStr = implode( $tmpArr );\r\n    $tmpStr = sha1( $tmpStr );\r\n    \r\n    if( $tmpStr == $signature ){\r\n        return true;\r\n    }else{\r\n        return false;\r\n    }\r\n}\r\n}\r\n[/php]\r\n\r\n创建一个php文件,命名为wechat_gz.php,将以上代码内容写入,上传到根目录下,需要注意的是define(\"TOKEN\", \"weixin\");这里的token要记住.\r\n<h2>4. 设置服务器配置</h2>\r\n&nbsp;\r\n<pre><code><img class=\"alignnone size-full wp-image-119\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1946475855.png\" alt=\"1946475855\" width=\"907\" height=\"272\" /></code></pre>\r\n在公众平台后台开发选项的基本配置中有一些服务器配置选项如图所示,\r\n\r\n<img class=\"alignnone size-full wp-image-112\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/31446533.png\" alt=\"31446533\" width=\"755\" height=\"809\" />\r\n\r\nURL处填写刚才上传的文件的url地址;token写文件中定义的TOKEN值,这里是weixin;EncodingAESKey是随机生成的密匙,点生成就好,确定后提交!\r\n在服务器配置页面启用,弹出启用成功,开发模式就已经启用成功了.', '微信公众平台开发----准备开发和接口接入', '', 'publish', 'open', 'open', '', '100', '', '', '2016-10-10 00:51:30', '2016-10-09 16:51:30', '', 0, 'http://www.gzpblog.com/?p=100', 0, 'post', '', 0),
(16, 1, '2016-03-16 22:52:00', '2016-03-16 14:52:00', '微信接口接上之后我们就可以开始开发功能了,微信接口接入可参考:<a href=\"http://www.gzpblog.com/20160316/100.html\" target=\"_blank\">http://www.gzpblog.com/20160316/100.html</a>\r\n\r\n需要注意的是$wechatObj-&gt;valid()和$wechatObj-&gt;responseMsg(),valid是用来调试时验证接口用的,在接入后我们就不需要用到了,可以注释掉,然后调用$wechatObj-&gt;responseMsg()来实现功能.\r\n\r\n这里实现公众号关注自动回复和普通消息回复作为例子.\r\n\r\n[php]\r\n/* 微信接口文件*/\r\n//define your token\r\ndefine(&quot;TOKEN&quot;, &quot;wechatgzp&quot;);\r\n$wechatObj = new wechatCallbackapiTest(); //实例化封装类\r\n//$wechatObj-&gt;valid(); //注释掉这里\r\n$wechatObj-&gt;responseMsg(); //这里调用回复功能封装的函数\r\n\r\nclass wechatCallbackapiTest\r\n{\r\npublic function valid()\r\n    {\r\n        $echoStr = $_GET[&quot;echostr&quot;];\r\n\r\n        //valid signature , option\r\n        if($this-&gt;checkSignature()){\r\n            echo $echoStr;\r\n            exit;\r\n        }\r\n    }\r\n\r\npublic function responseMsg()\r\n{\r\n        //get post data, May be due to the different environments\r\n        $postStr = $GLOBALS[&quot;HTTP_RAW_POST_DATA&quot;];\r\n\r\n        //extract post data\r\n        if (!empty($postStr)){\r\n                /* libxml_disable_entity_loader is to prevent XML eXternal Entity Injection,\r\n                   the best way is to check the validity of xml by yourself */\r\n                libxml_disable_entity_loader(true);\r\n                $postObj = simplexml_load_string($postStr, \'SimpleXMLElement\', LIBXML_NOCDATA);\r\n                $fromUsername = $postObj-&gt;FromUserName;\r\n                $toUsername = $postObj-&gt;ToUserName;\r\n                $keyword = trim($postObj-&gt;Content);\r\n                $time = time();\r\n                $textTpl = &quot;&lt;xml&gt;\r\n &lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt;\r\n &lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt;\r\n &lt;CreateTime&gt;%s&lt;/CreateTime&gt;\r\n &lt;MsgType&gt;&lt;![CDATA[%s]]&gt;&lt;/MsgType&gt;\r\n &lt;Content&gt;&lt;![CDATA[%s]]&gt;&lt;/Content&gt;\r\n &lt;FuncFlag&gt;0&lt;/FuncFlag&gt;\r\n &lt;/xml&gt;&quot;;\r\n\r\n                //加载图文模版\r\n                $picTpl = &quot;&lt;xml&gt;\r\n &lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt;\r\n &lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt;\r\n &lt;CreateTime&gt;%s&lt;/CreateTime&gt;\r\n &lt;MsgType&gt;&lt;![CDATA[%s]]&gt;&lt;/MsgType&gt;\r\n &lt;ArticleCount&gt;1&lt;/ArticleCount&gt;\r\n &lt;Articles&gt;\r\n &lt;item&gt;\r\n &lt;Title&gt;&lt;![CDATA[%s]]&gt;&lt;/Title&gt;\r\n &lt;Description&gt;&lt;![CDATA[%s]]&gt;&lt;/Description&gt;\r\n &lt;PicUrl&gt;&lt;![CDATA[%s]]&gt;&lt;/PicUrl&gt;\r\n &lt;Url&gt;&lt;![CDATA[%s]]&gt;&lt;/Url&gt;\r\n &lt;/item&gt;\r\n &lt;/Articles&gt;\r\n &lt;FuncFlag&gt;1&lt;/FuncFlag&gt;\r\n &lt;/xml&gt; &quot;;\r\n\r\n                //用户输入内容了\r\n                if(!empty( $keyword ))\r\n                {\r\n                    $msgType = &quot;text&quot;;\r\n                    $contentStr = &quot;欢迎关注!更多内容,敬请期待!&quot;;\r\n                    $resultStr = sprintf($textTpl, $fromUsername, $toUsername, $time, $msgType, $contentStr);\r\n                    echo $resultStr;\r\n                }\r\n\r\n                //判断是否是新关注\r\n                elseif(trim($postObj-&gt;MsgType) == &quot;event&quot; and trim($postObj-&gt;Event) == &quot;subscribe&quot;)\r\n                {\r\n                     $msgType = &quot;news&quot;;\r\n                     $title = &quot;大兄弟别跑听锅锅说话&quot;; //标题\r\n                     $data  = date(\'Y-m-d\'); //时间\r\n                     $desription = &quot;感谢您关注【大兄弟别跑听锅锅说话】&quot;.&quot;\\n&quot;.&quot;微信号：gzpblog&quot;.&quot;\\n&quot;.&quot;博客网址:http://www.gzpblog.com&quot;.&quot;\\n&quot;.&quot;更多内容,敬请期待!&quot;; //简介\r\n                     $image = &quot;http://www.gzpblog.com/usr/uploads/shuta.jpg&quot;; //图片地址\r\n                     $turl = &quot;http://www.gzpblog.com&quot;; //链接地址\r\n                    $resultStr = sprintf($picTpl, $fromUsername, $toUsername, $time, $msgType, $title,$desription,$image,$turl);\r\n                    echo $resultStr;\r\n                }\r\n        }\r\n        else\r\n        {\r\n            echo &quot;&quot;;\r\n            exit;\r\n        }\r\n}\r\n}\r\n[/php]\r\n\r\n在这里我们用了两种回复格式,关注时自动回复用的是带图片的新闻模式,而普通消息回复则是纯文字.判断关注使用事件来判断,而普通消息回复判断其keyword,各消息类型的推送XML数据包结构在开发者文档中列出来,这里就不列了,给个地址:<a href=\"http://mp.weixin.qq.com/wiki/17/f298879f8fb29ab98b2f2971d42552fd.html\" target=\"_blank\">http://mp.weixin.qq.com/wiki/17/f298879f8fb29ab98b2f2971d42552fd.html</a>\r\n\r\n以本网站公众号为例,实现的效果如下:\r\n<img class=\"alignnone size-large wp-image-124\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2705660894-576x1024.png\" alt=\"2705660894\" width=\"576\" height=\"1024\" />\r\n\r\n实际上,这只是其中的一个简单小功能,然后我们会发现,个人公众号,不能通过认证,能调用的接口权限很少,只能实现一些简单功能,具体权限也可以在官方文档中找到.而且,连自定义菜单这种功能,个人公众号都无法调用接口,实在蛋疼得很.\r\n\r\n当然,还是有一些功能挺有意思的等待去发掘,将微信服务器和博客的共用可能可以打造出一些有意思的效果,不过不知道能不能实现,现在只是想想,以后有时间研究研究.', '微信公众平台开发 - 消息回复', '', 'publish', 'open', 'open', '', '105', '', '', '2016-10-10 00:48:29', '2016-10-09 16:48:29', '', 0, 'http://www.gzpblog.com/?p=105', 0, 'post', '', 1),
(17, 1, '2016-03-25 09:36:00', '2016-03-25 09:36:00', '<p>在看别人的代码或者做二次开发的时候,我们经常会发现sql语句总总有where 1=1,那么这个where 1=1 的作用是什么呢?</p>\n<p>其实很简单,就是为了拼动态sql,例如 $sql = &quot;SELECT * FROM TABLE a WHERE aaa = 1&quot;这个语句,那么现在如果有多个where判断并且想用拼动态sql的形式的话,就有:<br />\n$sql = &quot;SELECT * FROM WHERE bbb=1 &quot;;<br />\n$sql .= &quot; AND aaa=1&quot;;</p>\n<p>那么问题来了,就是这个sql拼起来的时候,如果,没有&quot;bbb=1&quot;,&quot;.=&quot;的这个sql段就是where第一个判断,这样where和and就冲突了,所以还得判断是否是第一个条件,为了避免这种情况,在where后加1=1,就可以直接拼上有and的sql段了,因为第一个条件永远是1=1,<strong>而且where 1=1 在sql语句中是没有任何作用的</strong>.</p>\n', 'SQL语句中WHERE 1=1 的作用', '', 'publish', 'open', 'open', '', '115', '', '', '2016-03-25 09:36:00', '2016-03-25 09:36:00', '', 0, 'http://www.gzpblog.com/?p=115', 0, 'post', '', 1),
(18, 1, '2016-03-29 23:48:00', '2016-03-29 23:48:00', '终于！终于！换宿舍啦！终于不用挤在一间8人间里只有一个床位啦！高兴得一塌糊涂，虽然经济瞬间紧张了，但是可以自己一个人住一个小房子，感觉还是非常不错，更何况家具该有的都有。\r\n\r\n然而事情远远没有如此简单！\r\n\r\n刚搬进来就发现，地上好多一粒粒的黑颗粒！蟑螂屎？还是老鼠屎？感觉应该是老鼠屎，嗯，一开始，就是这么觉得的。也就没当回事，毕竟，大扫除之后，感觉还是蛮舒服的。而且重点是，楼下，很多！吃的！\r\n\r\n当晚就吃了个鸡腿排，啧啧，然后吃完鸡腿骨完事扔垃圾桶。\r\n\r\n第二天，wtf？这什么鬼？\r\n\r\n这掉到外面是什么鬼?不以为意,扔回垃圾桶！\r\n<img class=\"alignnone size-full wp-image-118\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1763035875.jpg\" alt=\"1763035875\" width=\"368\" height=\"653\" />\r\n\r\n然而，神奇的是,下一次又出现在了那个位置！那个位置！突然心里一阵凉意，只能安慰自己那是老鼠搞的！\r\n\r\n因为房子没有窗户，只有厕所有一个小窗，所有平时白天灯一关，也是乌漆吗黑。好的，周末留了几包薯片在桌子上，周一上班啦！然而，当我回到家里时，我的内心是奔溃的。\r\n<img class=\"alignnone size-full wp-image-126\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/3115824438.jpg\" alt=\"3115824438\" width=\"368\" height=\"653\" /><img class=\"alignnone size-full wp-image-123\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2595756476.jpg\" alt=\"2595756476\" width=\"653\" height=\"490\" />\r\n\r\n这。。。。。简直，感觉和一窝老鼠住在一块啊。\r\n\r\n咦，这是什么？\r\n<img class=\"alignnone size-full wp-image-125\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2760593199.jpg\" alt=\"2760593199\" width=\"490\" height=\"490\" />\r\n\r\n看起来是试图进攻可比克未遂？可比克这包装，够硬。\r\n<img class=\"alignnone size-full wp-image-120\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2152528169.jpg\" alt=\"2152528169\" width=\"300\" height=\"300\" />\r\n\r\n然而我瞅了一眼整个房间，感觉可能有老鼠出来的地方就是这里了。\r\n<img class=\"alignnone size-full wp-image-122\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2593195352.jpg\" alt=\"2593195352\" width=\"1836\" height=\"3264\" />\r\n\r\n啥也别说了，来来来！准备大战300回合！\r\n<img class=\"alignnone size-full wp-image-117\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1474477264.png\" alt=\"1474477264\" width=\"373\" height=\"663\" />\r\n<img class=\"alignnone size-large wp-image-116\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1269685963-576x1024.png\" alt=\"1269685963\" width=\"576\" height=\"1024\" />', '建中路剿鼠记(一)', '', 'publish', 'open', 'open', '', '116', '', '', '2016-10-08 02:58:28', '2016-10-07 18:58:28', '', 0, 'http://www.gzpblog.com/?p=116', 0, 'post', '', 0),
(19, 1, '2016-04-01 13:16:00', '2016-04-01 13:16:00', '最近在搞一个多选的功能，发现实现下拉框多选比较麻烦，网上搜是有一些js插件什么的可以实现，但是比较麻烦。于是搞了这么一个JS的弹出框，进行多选提交后显示在页面上。\r\n\r\n效果是这样的,初始的样式如下，可点击选择：\r\n<img class=\"alignnone size-full wp-image-133\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/926381641.png\" alt=\"926381641\" width=\"188\" height=\"34\" />\r\n\r\n点击选择后弹出一个选择框，多选的：\r\n<img class=\"alignnone size-full wp-image-138\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2505066357.png\" alt=\"2505066357\" width=\"464\" height=\"318\" />\r\n\r\n点击选择将同步更新到页面上，然后进行后续操作：\r\n<img class=\"alignnone size-full wp-image-136\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2323188462.png\" alt=\"2323188462\" width=\"256\" height=\"35\" />\r\n\r\n<strong>页面代码</strong>\r\n<pre><code> \r\n[html]\r\n&lt;input type=&quot;hidden&quot; id=&quot;select&quot; /&gt;\r\n &lt;div class=&quot;servicelist&quot; id=&quot;servicelist&quot;&gt;\r\n &lt;div class=&quot;title&quot;&gt;选择地区&lt;label onclick=&quot;this.parentNode.parentNode.style.display=\'none\'&quot;&gt;X&lt;/label&gt;&lt;/div&gt;\r\n &lt;div class=&quot;content&quot;&gt;\r\n &lt;ul&gt;\r\n &lt;li&gt;&lt;input type=&quot;checkbox&quot; value=&quot;广东&quot; onclick=&quot;chk_choose()&quot; id=&quot;chk_service_1&quot; /&gt;\r\n &lt;span id=&quot;label_service_1&quot; onclick=&quot;document.getElementById(\'chk_service_1\').click()&quot;&gt;广东&lt;/span&gt;&lt;/li&gt;\r\n &lt;li&gt;&lt;input type=&quot;checkbox&quot; value=&quot;北京&quot; onclick=&quot;chk_choose()&quot; id=&quot;chk_service_2&quot; /&gt;\r\n &lt;span id=&quot;label_service_2&quot; onclick=&quot;document.getElementById(\'chk_service_2\').click()&quot;&gt;北京&lt;/span&gt;&lt;/li&gt;\r\n &lt;li&gt;&lt;input type=&quot;checkbox&quot; value=&quot;上海&quot; onclick=&quot;chk_choose()&quot; id=&quot;chk_service_3&quot; /&gt;\r\n &lt;span id=&quot;label_service_3&quot; onclick=&quot;document.getElementById(\'chk_service_3\').click()&quot;&gt;上海&lt;/span&gt;&lt;/li&gt;\r\n &lt;li&gt;&lt;input type=&quot;checkbox&quot; value=&quot;天津&quot; onclick=&quot;chk_choose()&quot; id=&quot;chk_service_4&quot; /&gt;\r\n &lt;span id=&quot;label_service_4&quot; onclick=&quot;document.getElementById(\'chk_service_4\').click()&quot;&gt;天津&lt;/span&gt;&lt;/li&gt; \r\n &lt;/ul&gt;\r\n &lt;/div&gt;\r\n &lt;/div&gt;\r\n &lt;input type=&quot;submit&quot; value=&quot;确定&quot; class=&quot;button&quot; /&gt;\r\n[/html]\r\n\r\n     \r\n \r\n</code></pre>\r\n<strong>JS代码:</strong>\r\n<pre><code>\r\n[js]\r\n\r\n &lt;script&gt;\r\n function choose_service()\r\n {\r\n var servicelist = document.getElementById(&quot;servicelist&quot;);\r\n servicelist.style.left = (document.body.clientWidth-450)/2+&quot;px&quot;;\r\n servicelist.style.display = &quot;block&quot;;\r\n }\r\n function chk_choose()\r\n {\r\n document.getElementById(&quot;select&quot;).value = &quot;&quot;;\r\n document.getElementById(&quot;choose_service&quot;).innerHTML = &quot;&quot;;\r\n var servicelist = document.getElementById(&quot;servicelist&quot;);\r\n var chks = document.getElementsByTagName(&quot;input&quot;);\r\n var vals = &quot;&quot;;\r\n var names = &quot;&quot;;\r\n for(var i = 0;i&lt;chks.length;i++)\r\n {\r\n var chk = chks[i];\r\n if(chk.type!=&quot;checkbox&quot;&amp;&amp;chk.type!=&quot;CHECKBOX&quot;)\r\n continue;\r\n if(chk.id.indexOf(&quot;chk_service_&quot;)==-1)\r\n continue;\r\n var user_id = chk.id.replace(&quot;chk_service_&quot;,&quot;&quot;);\r\n if(chk.checked){\r\n vals+=chk.value+&quot;,&quot;;\r\n names+=document.getElementById(&quot;label_service_&quot;+user_id).innerHTML+&quot;,&quot;;\r\n }\r\n }\r\n names = names.substring(0,names.length-1);\r\n vals = vals.substring(0,vals.length-1);\r\n \r\n document.getElementById(&quot;select&quot;).value = vals?vals:&quot;&quot;;\r\n document.getElementById(&quot;choose_service&quot;).innerHTML = names?names:&quot;请选择&quot;;\r\n }\r\n &lt;/script&gt;\r\n[/js]\r\n\r\n\r\n<strong>css样式,可自行修改:</strong>\r\n\r\n[css]\r\n &lt;style&gt;\r\n .servicelist{ position:fixed; top:20px; border-radius:5px; width:450px; height:300px; border:1px solid #92B4CB; left:20px; top:100px; display:none;}\r\n \r\n .servicelist .title{ width:440px; border-radius:5px; border:1px solid #92B4CB; height:30px; line-height:30px; color:#fff; background:#007AB3; font-size:15px; padding-left:10px; font-weight:bold;}\r\n \r\n .servicelist .title label{ float:right; margin-right:20px; cursor:pointer;}\r\n \r\n .servicelist .content{ background:#fff; width:430px; padding:10px; height:245px;}\r\n \r\n .servicelist .content ul{list-style:none;}\r\n \r\n .servicelist .content ul li{ float:left; display:inline-block; width:80px; margin-bottom:10px;}\r\n \r\n .servicelist .content ul li span{ cursor:pointer;}\r\n \r\n #choose_service{ cursor:pointer;}\r\n &lt;/style&gt;\r\n[/css]\r\n</code></pre>\r\n&nbsp;', 'JS多选弹出选择框代码实例', '', 'publish', 'open', 'open', '', '127', '', '', '2016-10-10 00:31:08', '2016-10-09 16:31:08', '', 0, 'http://www.gzpblog.com/?p=127', 0, 'post', '', 0),
(20, 1, '2016-04-05 23:56:00', '2016-04-05 23:56:00', '就在我写完<a href=\"http://www.gzpblog.com/20160329/116.html\" target=\"_blank\">建中路剿鼠记(一)</a>，然后去睡觉的时候，发生了一件事，我发现，如图：\r\n<img class=\"alignnone size-full wp-image-141\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/3523161483.jpg\" alt=\"3523161483\" width=\"368\" height=\"368\" />\r\n\r\n<img class=\"alignnone size-full wp-image-134\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1482183358.jpg\" alt=\"1482183358\" width=\"368\" height=\"368\" />\r\n\r\n我的内心是奔溃的。我的床沦陷了。。。。。\r\n\r\n还好快递给力，老鼠贴已到！\r\n<img class=\"alignnone size-full wp-image-130\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/331199711.jpg\" alt=\"331199711\" width=\"490\" height=\"276\" />\r\n\r\n为了预防这玩意不管用，我还买了发泡胶！用来封老鼠洞！准备抓老鼠与封老鼠洞双管齐下！！不然这日子没法过了！\r\n<img class=\"alignnone size-full wp-image-143\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/4106656255.jpg\" alt=\"4106656255\" width=\"368\" height=\"368\" />\r\n\r\n但是，我竟然发现，老鼠洞口不是空调上的那个洞！因为那个洞是封死的！死的！\r\n查了一下资料，说，只要一根手指能穿过的地方，成年老鼠就能穿过去，细思级恐，缩骨功啊。那就只能是从厕所那边通过门缝穿进来了！于是乎，我铸了一道防御工事！\r\n<img class=\"alignnone size-full wp-image-132\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/915657141.jpg\" alt=\"915657141\" width=\"490\" height=\"368\" />\r\n\r\n<img class=\"alignnone size-full wp-image-142\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/4030579334.jpg\" alt=\"4030579334\" width=\"490\" height=\"368\" />\r\n肯定是从那上面下来的，因为油烟机顶上，巨量老鼠屎！\r\n\r\n经过这几天的老鼠贴测试，竟然抓不到老鼠！防御工事竟然起了作用。瞬间感觉自己屌屌的！', '建中路剿鼠记(二)', '', 'publish', 'open', 'open', '', '131', '', '', '2016-10-08 02:56:02', '2016-10-07 18:56:02', '', 0, 'http://www.gzpblog.com/?p=131', 0, 'post', '', 0),
(21, 1, '2016-04-06 00:14:00', '2016-04-06 00:14:00', '发一张我现在的状态：\r\n\r\n<img class=\"alignnone size-full wp-image-140\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/3002222694.jpg\" alt=\"3002222694\" width=\"368\" height=\"490\" />\r\n\r\n感觉没有老鼠的生活真好，不用开着灯睡觉的感觉真好！不过现在完全不敢在室内弄出香香的味道，以免招惹老鼠，吃完这个面，还得把袋子垃圾扔出去，以免引来老鼠，万一我的发泡胶被捅破了老鼠进来了，我又得折腾了，多不好。\r\n\r\n不知道没老鼠的生活可以坚持多久呢，少了老鼠的陪伴，生活还少了些许乐趣呢。啧啧……人鼠大战暂时告一段落！', '建中路剿鼠记(三)', '', 'publish', 'open', 'open', '', '139', '', '', '2016-10-08 02:54:08', '2016-10-07 18:54:08', '', 0, 'http://www.gzpblog.com/?p=139', 0, 'post', '', 0),
(22, 1, '2016-04-07 00:59:00', '2016-04-07 00:59:00', '如果要用js来获取当前的时间,比如\"2016年4月7日星期四\",我们可以这样写:\r\n\r\n\r\n[js]\r\n\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;script language=JavaScript&gt;\r\nvar today = new Date();\r\nfunction initArray()\r\n{\r\nthis.length=initArray.arguments.length\r\nfor(var i=0;i&lt;this.length;i++)\r\nthis[i+1]=initArray.arguments[i]\r\n}\r\nvar d = new initArray\r\n(\r\n&quot;星期日&quot;,\r\n&quot;星期一&quot;,\r\n&quot;星期二&quot;,\r\n&quot;星期三&quot;,\r\n&quot;星期四&quot;,\r\n&quot;星期五&quot;,\r\n&quot;星期六&quot;\r\n);\r\n\r\ndocument.write\r\n(\r\n&quot;&lt;font style=\'font-size:9pt;font-family: 宋体\'&gt; &quot;,\r\ntoday.getYear(),&quot;年&quot;,\r\ntoday.getMonth()+1,&quot;月&quot;,\r\ntoday.getDate(),&quot;日&quot;,\r\nd[today.getDay()+1],\r\n&quot;&lt;/font&gt;&quot;\r\n);\r\n&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n[/js]\r\n', '用JS来获取当前日期的代码', '', 'publish', 'open', 'open', '', '144', '', '', '2016-10-10 00:26:34', '2016-10-09 16:26:34', '', 0, 'http://www.gzpblog.com/?p=144', 0, 'post', '', 0),
(23, 1, '2016-04-08 11:37:00', '2016-04-08 11:37:00', '<strong>1. 下载Sublime Text</strong>\r\n下载地址：<a href=\"http://www.sublimetext.com/3\" target=\"_blank\">Sublime Text 3下载地址</a>\r\n\r\n<strong>2. 激活Sublime Text</strong>\r\nSublime Text下载之后是可以免激活免费使用的，但是会偶尔弹出来叫你激活。所以最好激活一下，弹框很烦的。网上可以搜索一下激活码，找一个激活即可，当然了，你想买购买官方激活码我也不会阻止你。在help栏底下找到更新license的选项，把找到的注册码粘贴进去就好。\r\n\r\n<strong>3. 安装Package Control</strong>\r\n使用Ctrl+`快捷键，调出一个窗口，把下面的代码复制粘贴进去，回车：\r\n[code]\r\nimport urllib.request,os; pf = \'Package Control.sublime-package\'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), \'wb\').write(urllib.request.urlopen( \'http://sublime.wbond.net/\' + pf.replace(\' \',\'%20\')).read())\r\n[/code]\r\n注意这个是Sublime Text 3的，2和3不一样。\r\n\r\n<strong>4. 安装插件</strong>\r\n安装插件方法：点击Package Control，上面会出来一个输入框，我们输入install，就会自动有提示那个install package，我们点击一下install package（或者直接输入），输入框会消失，然后弹出一个输入框，在这个输入框搜索插件的名字。\r\n\r\n删除插件：打开Package Control，输入remove package，选择要删除的插件回车即可。\r\n\r\n下面是几个推荐插件：\r\n\r\nConvertToUTF8：Sublime一开始是不支持gbk编码的，所以会导致出现中文乱码，所以这个是必须装的了\r\n\r\nEmmet：快速生成HTML代码段的插件，非常方便\r\n\r\nSideBar Enhancements：侧边栏功能增强插件,增加很多实用功能\r\n\r\nAllAutocomplete：匹配所有打开的文件来提示代码', '用Sublime Text编辑web代码---Sublime Text的安装与插件', '', 'publish', 'open', 'open', '', '145', '', '', '2016-10-09 23:49:26', '2016-10-09 15:49:26', '', 0, 'http://www.gzpblog.com/?p=145', 0, 'post', '', 0),
(24, 1, '2016-04-11 09:04:00', '2016-04-11 09:04:00', '<p>人们或许只知道圣埃克絮佩里是《小王子》的作者，然而在他的《风沙星辰》中，有一篇《飞机》，里面有这样的段落：</p>\n<blockquote>\n<p>“是时候应该让科技发展回归初衷了。真正的完善是机械一边完成着它所应尽的职责，却一边淡出人的视野。真正的完善不是当你无法添加新的功能的时刻，而是你已经无法在其中减去任何功能的那个瞬间，到那时机械本身早已彻底的融入我们的日常之中，如同被海水打磨的石子一般，让我们甚至无法察觉到我们在使用它。”</p>\n</blockquote>\n<p>有一种科技，很可能完美地印证他的“预言”。</p>\n<p>当你戴上它们时，已然辨别不出虚拟与真实。沉浸式的交互在你的脑海里勾勒出多维的空间。在那里你化身远古战士打败城堡里的怪兽，你看见真实的梦境，你还可能成为泰坦尼克号上的游客，为jack和rose拍照片。</p>\n<p>游戏只是虚拟现实技术“入侵”的开始，军事、教育、医疗，无所不能。甚至在以往被认为不可能“数字化”的感性与哲学领域——人们已经在像Second Life这样的虚拟世界里起诉对方或是爱上对方了。</p>\n<p>人们总说“理想很丰满，现实很骨感”，虚拟现实的确可能打破这个魔咒。</p>\n<p>一个成功的例子是，美国国家多发性硬化症协会与好莱坞数字特效电影公司Luma Pictures合作搭档，为两名患有多发性硬化症的人士成功创造了自定义虚拟现实体验。在另一个时空，瘫痪病人也能起舞。</p>\n<p>革命同样发生在教育领域，来源于信息载体的变化。课堂不再是四四方方的教室，按下一个按钮就可以得到远程一对一的教育。人们得以用机器辅助进行换位思考，从而减少社会犯罪的发生或者对于减肥建立信心。</p>\n<p>然而，我们创造了工具，工具也反过来塑造了我们。</p>\n<p>我们正变得越来越懒：科技的进步已经渐渐让我们几乎忘记了不断精简的流程的根源，就像是你不会去思考心脏是如何跳动的一样，它们变成了理所当然的一个存在。问题的答案，全息技术都能告诉你，基于千万比特的数据。</p>\n<p>科技的泛滥性，也许是让我们停顿下来思考的砝码——就像智能手机引起的巨大争议一样。我们的确拥有了哪怕只是几十年前的人们都难以想象的便捷生活。信息技术带来了爆炸的知识，也压缩了隐私的空间，让每个人都有可能在一夜之间成为舆论的攻击对象。如今在聚餐之前，每个人都低头浏览着社交媒体的动态，以至于我们的口头表达开始在生活中退场，成为配角。越来越多的时间，我们“一起孤单”。</p>\n<p><strong>“视虚拟现实为一种安抚全世界穷人的工具，这种想法狭隘得骇人听闻。”麻省理工大学大众传媒中心主管伊森说。</strong></p>\n<p>因为提供一种美好的视角，不能解决真实存在的苦难。我们搁置现实问题，任其堆积恶化，而这只是因为任何想要解决问题的民主意志都被更愿意躲进虚拟世界的人们截断了。</p>\n<p>“网络过度使用综合症”第一次被写入《精神疾病诊断与统计手册》2013年的修订版附录里。人类可能避免自己对虚拟的现实“上瘾”吗？</p>\n<p>当我们都躲在虚拟世界的时候，我们还愿意同外部世界连接吗？全球化的脚步也许会慢下来。人类的历史是一部加速度历史。时间支配着、定义着空间。由此，空间距离的重要性降低了。全球性大城市的特征是匿名性和非整合性。都市生活的匿名性、个人主义、传统与宗教信仰权威的丧失、实用主义充斥之下，空间也被重新书写了。而站在现在，我们很难说，这样是好是坏。</p>\n<p>其实所谓的虚拟和现实，都在于我们的大脑，外在的刺激只是起因，感知才是虚拟现实的根本。大脑计算的和科技传送的所有东西都是“信息”，一个能够解释的思维需要有逻辑性。所以，神经科学与虚拟现实密不可分。站在这个角度，虚拟现实对于人类并不陌生。当我们的意识开始第一次脱离实体物质世界时，我们已经来到了虚拟之境。“世界脑”，以一种悄无声息的方式构造出一张巨大的网，没有人能够挣脱。</p>\n<p>我们的头顶除了蓝天白云，还有另一朵“云”。那里有我们遇到的人，吃过的菜肴，每个人的表情，还有数学难题和化学方程式。使用GPS的人已经渐渐失去原有的方向感，那么储存了所有我们的信息的“投影仪”也可能让记忆力不再被需要。</p>\n<p>《黑客帝国》里，人类由机器“生产”而来，终其一生都在“母体”中沉睡，而其思想在电脑虚拟出来的世界中。人们认为自己生活的实际就是真实的，直到有一天......</p>\n<p>科技是一种隐喻。它或许会主宰，但现实仍在。当惊喜冷却下来，是时候回望。</p>\n<p>本文系作者 偶像陈大发 授权钛媒体发表，并经钛媒体编辑，原文链接：<a href=\"http://www.tmtpost.com/1669292.html\" target=\"_blank\">当我们都躲在虚拟世界的时候，谁还会愿意同外部世界连接</a>。</p>\n', '当我们都躲在虚拟世界的时候，谁还会愿意同外部世界连接', '', 'publish', 'open', 'open', '', '148', '', '', '2016-04-11 09:04:00', '2016-04-11 09:04:00', '', 0, 'http://www.gzpblog.com/?p=148', 0, 'post', '', 0),
(25, 1, '2016-04-19 20:40:00', '2016-04-19 20:40:00', '<p>最近VR真是热火朝天，不了解一下都不行了，但是目前用过VR的人也挺少。我们来看看VR眼镜是个什么鬼吧。</p>\n<p>VR产品现在主要有三种：手机VR，VR头盔，一体机。</p>\n<p><strong>1. 手机VR</strong></p>\n<p>应该说是比较低端的VR产品，就是放大版的3D眼镜，原理是利用眼镜中的两个凸透镜，分别将手机屏幕的分屏图像投射到左右眼球上，利用大脑的自动识别能力，呈现一个全沉浸的画面。</p>\n<p>相关产品：三星GEAR VR，暴风魔镜，Google Cardboard，大朋魔镜、灵镜小白、小宅魔镜、Playglass等。</p>\n<p><strong>2. VR头盔</strong></p>\n<p>需要PC主机而不是手机的VR设备，体验肯定就比手机盒子要好很多，但是设备要求也更高了。</p>\n<p>相关：Oculus Rift CV1，HTC vive ，PS VR</p>\n<p><strong>3. 一体机</strong></p>\n<p>VR一体机的形态介于头盔和手机盒子之间，比手机盒子体验好，又比头盔便宜，但是论性能、论便携性都不是最佳。意思就是，把手机做到眼镜里面去。一体机是未来趋势，但是现在还很不成熟。</p>\n<p>相关产品：3GlassesVR，Simlens，大朋M2，灵境小黑</p>\n', '目前的VR都是些什么VR---VR眼镜分类', '', 'publish', 'open', 'open', '', '150', '', '', '2016-04-19 20:40:00', '2016-04-19 20:40:00', '', 0, 'http://www.gzpblog.com/?p=150', 0, 'post', '', 0),
(26, 1, '2016-04-21 15:32:00', '2016-04-21 15:32:00', 'PHP导出Excel文件的方法，一般来说，两种，一种是直接写一小段代码导出，简单粗暴，方便，这种方法常用，不多说，网上大把资料，都有用，现在介绍一下另一种方法，十分好用，就是用一个第三方小插件。\r\n\r\n<strong>插件名字</strong>：PHPExcel\r\n<strong>Github地址</strong>：<a href=\"https://github.com/PHPOffice/PHPExcel\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/PHPOffice/PHPExcel</a>\r\n<strong>使用方法</strong>：也很简单粗暴，下载下来的包，将classes复制到localhost下或者网站根目录下，看你用来导什么数据了，然后Example目录下有一堆的例子文件，把Example目录也复制过去，试试需要哪些功能然后选择使用，这个插件功能特别强大，导数据的时候同时还能生成各种统计数据或者图表，只需要加一些php代码处理一下你的数据就可以。\r\n<strong>注意</strong>：注意两个点，一个是注意classes这个目录引入时的路径，取决于你想生成Excel的php文件在哪，还有一个就是注意编码格式的问题，编码格式有问题会导致导出数据失败。', 'PHP导出Excel文件', '', 'publish', 'open', 'open', '', '151', '', '', '2017-06-20 14:26:53', '2017-06-20 06:26:53', '', 0, 'http://www.gzpblog.com/?p=151', 0, 'post', '', 0),
(1040, 1, '2017-06-20 14:26:53', '2017-06-20 06:26:53', 'PHP导出Excel文件的方法，一般来说，两种，一种是直接写一小段代码导出，简单粗暴，方便，这种方法常用，不多说，网上大把资料，都有用，现在介绍一下另一种方法，十分好用，就是用一个第三方小插件。\r\n\r\n<strong>插件名字</strong>：PHPExcel\r\n<strong>Github地址</strong>：<a href=\"https://github.com/PHPOffice/PHPExcel\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/PHPOffice/PHPExcel</a>\r\n<strong>使用方法</strong>：也很简单粗暴，下载下来的包，将classes复制到localhost下或者网站根目录下，看你用来导什么数据了，然后Example目录下有一堆的例子文件，把Example目录也复制过去，试试需要哪些功能然后选择使用，这个插件功能特别强大，导数据的时候同时还能生成各种统计数据或者图表，只需要加一些php代码处理一下你的数据就可以。\r\n<strong>注意</strong>：注意两个点，一个是注意classes这个目录引入时的路径，取决于你想生成Excel的php文件在哪，还有一个就是注意编码格式的问题，编码格式有问题会导致导出数据失败。', 'PHP导出Excel文件', '', 'inherit', 'closed', 'closed', '', '26-revision-v1', '', '', '2017-06-20 14:26:53', '2017-06-20 06:26:53', '', 26, 'https://www.gzpblog.com/20170620/1040.html', 0, 'revision', '', 0),
(27, 1, '2016-04-21 22:58:00', '2016-04-21 22:58:00', '自从工作了，邮箱帐号越来越多了，于是乎，我觉得得下一个类似foxmail的客户端了，方便查邮件。是的，以前一直懒得下。然而，我神奇地发现了一款叫WPS邮箱的东西。当时我就被吸引了，这安装界面有点酷炫！\r\n<img class=\"alignnone size-full wp-image-139\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2573520395.png\" alt=\"2573520395\" width=\"697\" height=\"416\" />\r\n\r\n这妥妥的不能停，得装完啊。\r\n<img class=\"alignnone size-full wp-image-137\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2409789491.png\" alt=\"2409789491\" width=\"703\" height=\"396\" />\r\n<img class=\"alignnone size-full wp-image-135\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1652754813.png\" alt=\"1652754813\" width=\"702\" height=\"387\" />\r\n\r\n界面也特别简洁，看着听舒服的，比foxmail好看得多啊是不是。啧啧，不是在打广告，完全是因为觉得略不错，来分享一下。\r\n<img class=\"alignnone size-full wp-image-131\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/718198307.png\" alt=\"718198307\" width=\"1033\" height=\"622\" />', '推荐一款邮箱客户端，WPS邮箱', '', 'publish', 'open', 'open', '', '153', '', '', '2016-10-08 02:52:19', '2016-10-07 18:52:19', '', 0, 'http://www.gzpblog.com/?p=153', 0, 'post', '', 3);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(28, 1, '2016-04-26 13:05:00', '2016-04-26 13:05:00', '<p>1、用单引号代替双引号来包含字符串，这样做会更快一些。因为 PHP 会在双引号包围的 字符串中搜寻变量，单引号则不会，注意：只有 echo 能这么做，它是一种可以把多个字符 串当作参数的“函数”(译注：PHP 手册中说 echo 是语言结构，不是真正的函数，故把函数 加上了双引号)。</p>\n<p><strong>2、$row[\'id\'] 的速度是$row[id]的 7 倍。</strong></p>\n<p>3、echo 比 print 快，并且使用 echo 的多重参数(译注：指用逗号而不是句点)代替字符串 连接，比如 echo $str1,$str2。</p>\n<p>4、在执行 for 循环之前确定最大循环数，不要每循环一次都计算最大值，最好运用 foreach 代替。</p>\n<p>5、注销那些不用的变量尤其是大数组，以便释放内存。</p>\n<p>6、尽量避免使用__get，__set，__autoload。</p>\n<p>7、require_once()代价昂贵。</p>\n<p>8、include 文件时尽量使用绝对路径，因为它避免了 PHP 去 include_path 里查找文件的速 度，解析操作系统路径所需的时间会更少。</p>\n<p>9、如果你想知道脚本开始执行(译注：即服务器端收到客户端请求)的时刻，使用 $_SERVER[\'REQUEST_TIME\'] 要好于 time()。$_SERVER[\'REQUEST_TIME\']保存了发起该请求时刻的时间戳，而time()则返回当前时刻的Unix时间戳。</p>\n<p>10、函数代替正则表达式完成相同功能。这种函数是指strtok、strstr、strpos、str_replace、substr、explode、implode等等</p>\n<p>11、str_replace 函数比 preg_replace 函数快，但 strtr 函数的效率是 str_replace 函数的四倍。字符串操作比正则替换要快。</p>\n<p>12、如果一个字符串替换函数，可接受数组或字符作为参数，并且参数长度不太长，那么 可以考虑额外写一段替换代码， 使得每次传递参数是一个字符， 而不是只写一行代码接受数 组作为查询和替换的参数。</p>\n<p>13、使用选择分支语句(译注：即 switch case)好于使用多个 if，else if 语句。</p>\n<p>14、用@屏蔽错误消息的做法非常低效，极其低效。</p>\n<p>15、打开 apache 的 mod_deflate 模块，可以提高网页的浏览速度。</p>\n<p>16、数据库连接当使用完毕时应关掉，不要用长连接。</p>\n<p>17、错误消息代价昂贵。</p>\n<p>18、在方法中递增局部变量，速度是最快的。几乎与在函数中调用局部变量的速度相当。</p>\n<p>19、递增一个全局变量要比递增一个局部变量慢 2 倍。</p>\n<p>20、递增一个对象属性(如：$this-&gt;prop++)要比递增一个局部变量慢 3 倍。</p>\n<p><strong>21、递增一个未预定义的局部变量要比递增一个预定义的局部变量慢 9 至 10 倍。</strong></p>\n<p><strong>22、仅定义一个局部变量而没在函数中调用它，同样会减慢速度(其程度相当于递增一个局 部变量)。PHP 大概会检查看是否存在全局变量。</strong></p>\n<p>23、方法调用看来与类中定义的方法的数量无关。</p>\n<p>24、派生类中的方法运行起来要快于在基类中定义的同样的方法。</p>\n<p><strong>25、调用带有一个参数的空函数，其花费的时间相当于执行 7 至 8 次的局部变量递增操作。 类似的方法调用所花费的时间接近于 15 次的局部变量递增操作。</strong></p>\n<p>26、Apache 解析一个 PHP 脚本的时间要比解析一个静态 HTML 页面慢 2 至 10 倍。尽量 多用静态 HTML 页面，少用脚本。</p>\n<p>27、除非脚本可以缓存，否则每次调用时都会重新编译一次。引入一套 PHP 缓存机制通常 可以提升 25%至 100%的性能，以免除编译开销。</p>\n<p>28、尽量做缓存，可使用 memcached。memcached 是一款高性能的内存对象缓存系统， 可用来加速动态 Web 应用程序，减轻数据库负载。对运算码 (OP code)的缓存很有用，使 得脚本不必为每个请求做重新编译。</p>\n<p>29、 当操作字符串并需要检验其长度是否满足某种要求时， 你想当然地会使用 strlen()函数。 此函数执行起来相当快，因为它不做任何计算，只返回在 zval 结构(C 的内置数据结构，用 于存储 PHP 变量)中存储的已知字符串长度。但是，由于 strlen()是函数，多多少少会有些 慢，因为函数调用会经过诸多步骤，如字母小写化(译注：指函数名小写化（PHP 不区分函 数名大小写)、哈希查找（会跟随被调用的函数一起执行）。在某些情况下，你可以使用 isset() 技巧加速执行你的代码。<br />\n举例：<br />\nif (strlen($foo) &lt; 5) { echo “Foo is too short”$$ }</p>\n<p>(与下面的技巧做比较)</p>\n<p>if (!isset($foo{5})) { echo “Foo is too short”$$ }</p>\n<p>调用 isset()恰巧比 strlen()快，因为与后者不同的是，isset()作为一种语言结构，意味着它 的执行不需要函数查找和字母小写化。 也就是说， 实际上在检验字符串长度的顶层代码中你 没有花太多开销。</p>\n<p>30、当执行变量$i 的递增或递减时，$i++会比++$i 慢一些。这种差异是 PHP 特有的，并不 适用于其他语言， 所以请不要修改你的 C 或 Java 代码并指望它们能立即变快， 没用的。 ++$i 更快是因为它只需要 3 条指令(opcodes)，$i++则需要 4 条指令。后置递增实际上会产生一 个临时变量，这个临时变量随后被递增。而前置递增直接在原值上递增。这是最优化处理的 一种，正如 Zend 的 PHP 优化器所作的那样。牢记这个优化处理不失为一个好主意，因为 并不是所有的指令优化器都会做同样的优化处理， 并且存在大量没有装配指令优化器的互联 网服务提供商(ISPs)和服务器。</p>\n<p>31、并不是事必面向对象(OOP)，面向对象往往开销很大，每个方法和对象调用都会消耗很 多内存。</p>\n<p>32、并非要用类实现所有的数据结构，数组也很有用。</p>\n<p>33、不要把方法细分得过多，仔细想想你真正打算重用的是哪些代码?</p>\n<p>34、当你需要时，你总能把代码分解成方法。</p>\n<p>35、尽量采用大量的 PHP 内置函数。</p>\n<p>36、如果在代码中存在大量耗时的函数，你可以考虑用 C 扩展的方式实现它们。</p>\n<p>37、 评估检验(profile)你的代码。 检验器会告诉你，代码的哪些部分消耗了多少时间。 Xdebug 调试器包含了检验程序，评估检验总体上可以显示出代码的瓶颈。</p>\n<p>38、mod_zip 可作为 Apache 模块，用来即时压缩你的数据，并可让数据传输量降低 80%。</p>\n<p>39、在可以用 file_get_contents 替代 file、fopen、feof、fgets 等系列方法的情况下，尽量 用 file_get_contents，因为他的效率高得多!但是要注意 file_get_contents 在打开一个 URL 文件时候的 PHP 版本问题。</p>\n<p>40、尽量的少进行文件操作，虽然 PHP 的文件操作效率也不低的;</p>\n<p>41、优化 Select SQL 语句，在可能的情况下尽量少的进行 Insert、Update 操作。</p>\n<p>42、尽可能的使用 PHP 内部函数。</p>\n<p>43、循环内部不要声明变量，尤其是大变量：对象。</p>\n<p><strong>44、多维数组尽量不要循环嵌套赋值。</strong></p>\n<p>45、foreach 效率更高，尽量用 foreach 代替 while 和 for 循环;</p>\n<p>46、“用 i+=1 代替 i=i+1。符合 c/c++的习惯，效率还高”。</p>\n<p>47、对 global 变量，应该用完就 unset()掉;</p>\n', '一些利于PHP优化需要注意的点', '', 'publish', 'open', 'open', '', '159', '', '', '2016-04-26 13:05:00', '2016-04-26 13:05:00', '', 0, 'http://www.gzpblog.com/?p=159', 0, 'post', '', 1),
(29, 1, '2016-05-05 15:06:00', '2016-05-05 15:06:00', '<p><em>编者按：本文作者曹政，常用 ID:caoz ，资深 IT 人，从事互联网工作十余年。技术大牛、数据控、历史控、考证控。曾参与创建一统统计、cnzz 站长统计，曾主持搭建百度商业分析支撑平台。文章首发于其微信公众号 “caoz 的梦呓”（微信号：caozsay），授权 36 氪发布。</em></p>\n<p><a href=\"http://36kr.com/p/5046498.html\" target=\"_blank\">傲慢与偏见之 - 谷歌中国逆袭史</a></p>\n<p><a href=\"http://36kr.com/p/5046514.html\" target=\"_blank\">傲慢与偏见之 - 防火墙与竞争力</a></p>\n<p><a href=\"http://36kr.com/p/5046613.html\" target=\"_blank\">傲慢与偏见之- 因果倒置的锦上添花</a></p>\n<p>先回答个问题。</p>\n<p>如果防火墙没有拦着 youtube，或者说 youtube 落地中国，优酷土豆是不是完蛋了呢？ 我的回答是，绝对不会。</p>\n<p>现在在台湾，在新加坡，都有很多人，反向翻墙；小米盒子目前在这边卖的非常火，有人专门通过对小米盒子刷机，增加一个代理服务器设置，提供反向代理服务，让用户在海外也可以访问优酷土豆的资源。因为很多视频版权信息是只限大陆地区用户访问的。</p>\n<p>youtube 上你能看美剧么？你能看大片么？你能看各种国产神剧后宫剧偶像剧乃至韩剧么？ 很抱歉，统统不能。真心说，从中国人的日常娱乐来说，youtube 上其实没啥可看的，也就有一些国产网络剧，还都整理的乱七八糟的。</p>\n<p>顺便，再补一个案例， 全球最大的团购网站，groupon 进入中国，跟腾讯合作，推出高朋，结果咋样了。百度带不起乐酷天，腾讯带不起高朋，阿里带不起雅虎，洋巨头自己决策傲慢，水土不服，和墙没毛关系就失败的例子太多了。</p>\n<p>回到今天主题，先说结论</p>\n<p>1、就整体的技术创新能力而言，美国还是比中国领先的，如果不承认这一点，那就过于盲目自大了。 整个互联网的技术架构，最新的一些技术标准，基本都是美国人的，这事我们必须承认，差距重大。<br />\n2、说中国的互联网公司只会山寨，没有创新，是不公平的。但是说很多中国互联网公司是山寨起步，是事实，不过话说回来，这事不丢人。<br />\n3、创新分 产品形态创新，商业模式创新，应用技术创新，技术理论创新。</p>\n<p>在互联网商业模式创新上， 我个人认为中国对比美国甚至有一定的领先性。</p>\n<p>在产品形态创新上，目前基本追平，部分领域领先。</p>\n<p>在应用技术创新上，基本追平，部分领域领先。</p>\n<p>在技术理论创新上，落后巨大。</p>\n<p>结论讲完，下面说我的逻辑，观点和案例。</p>\n<p><strong>1、中国互联网在初期，比美国落后，这是事实</strong>，我相信所有人都不会质疑，美国创建了互联网的标准和最早的应用，在这种情况下，中国互联网在初期一直是跟随美国，人家先搞了门户，搜索，即时通讯，电子商务，你说我们的企业跟随不跟随，跟随就说是山寨，没出息，这是不是过分。</p>\n<p>有一种人的逻辑是这样的，外国巨头的产品 就是好就是好就是好，中国的对标产品如果像人家巨头的，就是你看你看，山寨人家了吧；如果不像，就是，你看你看，人家做的啥，你做的是啥，没出息了吧。</p>\n<p><strong>2、但是在发展过程中，我们逐渐形成了自己的特色，商业模式创新，以及产品形态创新这块，很多企业走到了美国的前面。</strong></p>\n<p>网络游戏，史玉柱开创了道具付费的模式，在最初，游戏是通过授权和购买时间来获得收益的，道具付费模式是史玉柱开启的，并随着中国游戏的输出开始流行海外，在海外游戏行业甚至管这个叫做中国模式。大家不是夸 supercell 么，皇室战争的开箱子抽卡，您如果有较长时间的游戏行业经验就知道，这种开箱子抽卡模式绝逼不是欧美开始的，您见过欧美哪个传统经典游戏是靠开箱子抽卡坑钱的。</p>\n<p>信息安全，360 的商业模式到今天老外都看不太懂，浑水做空 360 的时候，我身边认识的但凡有点资历的互联网从业者都疯狂买入 360 股票，各个靠这个发财。浑水真不是个白痴公司，人家硬是看不懂这玩意啊，美国完全没对标模式的公司。（说个题外话，中国概念股丑闻，嘉汉林业财务造假就是被浑水捅出来的，连带让空神保尔森亏了好像 4 亿多美元的样子。）</p>\n<p>即时通讯，腾讯最早确实是山寨 icq，连名字都叫 oicq，被人家告改名为 QQ，可是今天你看 icq 还在么？别说 icq 了，收购 icq 的 AOL 还值几个钱，而腾讯帝国的生意做到多大了。这时候你还揪着山寨史不放是不是脑子有问题了。前段时间 facebook 的一个小姑娘告诉我，他们一个客户端产品线的高管去访问了腾讯，回来跟大家分享，说一开始觉得这个产品线商业变现的问题是市场的问题，从腾讯回来后才意识到，还是自己产品本身的问题。</p>\n<p>其实话说回来，很多东西也是互相学习，现在腾讯朋友圈的广告形态，新的广告系统正在测试，更精准定向的投放策略正在不断推进，这块，我老实说，要想提升转化效果，肯定要跟 facebook 学人家的广告平台，我猜腾讯现在也是这样做的，就像当初百度学谷歌的广告平台一样，确实这块，人家做的好，有优势。 但腾讯的客户端产品的功能涵盖和体验满足度的一些特色，也是 facebook 客户端产品远远达不到的。</p>\n<p>移动支付，支付宝和微信支付，用户体验和商业模式，全球领先，不客气的说，就是这样。 移动互联网我们确实走的非常靠前。</p>\n<p>团购，美团，点评的用户体验超过 groupon 一大截有没有，我在新加坡跟 groupon 产品经理聊天，什么过期退，随时退，免预订，直接买单优惠等等，我当时功能还没玩全，就把我觉得 groupon 的一些槽点（必须提前预约，无法退款）说了一下，人家就听傻了，说中国团购这样商家怎么会愿意，唉，这都成标配了你不知道。</p>\n<p>搜索引擎，贴吧在美国真没有对标产品，google 的 groups 对比贴吧，人气完全不在一个量级好不好。</p>\n<p>电子商务，昨天有人说了，淘宝干掉易趣不是因为免费么?对的，淘宝你说做电子商务，从 c2c 起步，是不是山寨 ebay，你当然可以这么说，可是一上来商业模式就不一样有没有，和 360 对付瑞星一样。易趣是收发布费，上架费和交易佣金的，而且为了避免跑单还要屏蔽商家和客户的直接沟通；但淘宝呢，全免费开放给商家，还怕你们不沟通弄个旺旺，对手就没搞明白你免费你怎么会有机会？现在你去看阿里的上市财报，你看淘宝的利润率，比 ebay 低么？从史玉柱到 360 到淘宝，中国模式大放光彩。 当然，现在，大家都知道，淘宝的免费，可不是真的免费。</p>\n<p>除了淘宝模式外，唯品会模式，貌似中国独有吧。此外，微商模式，线上线下无缝打通，店家把店铺整合到微信里，扫一个二维码关注即可，直接提供客户支持，这玩意秒老外一条街有没有。</p>\n<p>现在，只要不存在傲慢和偏见，就能看到，中国互联网在用户体验满足度，商业模式的创新度（当然，你要说是坑钱技巧，我也不反驳），以及产品形态丰富度上，很多地方都已经超过了欧美同行，某些评论家如果还认为中国互联网公司只会山寨，没有创新，那真是无话可说了。</p>\n<p><strong>3、说说出海，中国互联网企业在海外是否有竞争力的问题</strong></p>\n<p>中国互联网公司，出海最靠前的是猎豹，傅盛开始做可牛影像，做不过美图秀秀，搞可牛杀毒，被 360 摁的死死的，搞猎豹在国内已经没法跟 360pk 了，在移动端把 360 模式推到海外去，结果横扫天下没对手。</p>\n<p>成都品果科技，camera360，在国内美拍的强大压力下，哪有啥存在感，但是横扫海外各国市场有没有。</p>\n<p>还有很多有意思的东西，比如我前段时间发现一个，英文的，表情输入法，我对这玩意还是蛮敏感的，一看就给好多人分享，说这个东西好，你看它产品体验也一般，但是方向杠杠的，绝对有前途，没多久，融资新闻爆出来，果然也是中国公司做的。</p>\n<p>中国企业，在移动互联网领域，其实出海已经颇具规模，前段时间我看白鲸社区里交流还在讲，中东移动免费榜上半壁江山都是中国公司的产品了。当然，必须说一点，目前比较成功的还都是工具性产品，产品形态越简单的，越容易成功，比如 apus 这样的桌面工具；其次是游戏出海，但也已经遇到了本地化的一些障碍，而社交应用，电商应用，障碍就会更多。</p>\n<p>但这里又存在一个问题，比如 wish 算不算中国公司呢？很多中国发起的公司，中国人创建的公司，为了瞄准海外市场，会有意识抹掉中国痕迹，比如山寨游戏大王 ucool 也是。</p>\n<p><strong>4、美国公司也山寨，比如说，你要说全球的 it 公司里，谁的山寨技术最强，山寨能力最强，绝对不是腾讯，而是更牛逼的霸主，微软。</strong></p>\n<p>请问，除了 dos 勉强算是微软原创产品，微软的热门流行产品，哪个不是山寨出身，从 windows 到 ie，到 office 到各种编程工具，连数据库都是买的别人的产品改头换面的。</p>\n<p>话说当年日 本，韩国，在崛起的时候，都是山寨美国产品，正如本文开始所说，你落后么，你最开始想要追上对手，肯定是从学习对手开始。但是发展到一定规模和能力的时候，你自己的技术和能力就起来了。华为也是，华为开始的时候就是瞄着欧美热门交换产品做，其实真没啥丢人的，日韩很多电子产业和汽车产业巨头都是这么起来的。</p>\n<p>丢人的是，山寨你都学不到点上，邯郸学步，到最后除了山寨外一无所长。</p>\n<p>说个典型的坏案例。</p>\n<p>中国某上市公司，学习美国巨头的产品，可以说是以像素为单位来山寨的，某天，他们发现，这个巨头产品灰度测试了一个新版本，请注意，灰度测试，他们可是讲究行动力的团队，要做到比美国巨头公司上线还快！</p>\n<p>于是，公司紧急任务，全盘山寨了新版本并快速上线，老板大喜，哈哈，以后不明真相的群众肯定会以为是美国巨头山寨了我们。 但他们不知道，这个灰度上线的版本在美国巨头那边的用户测试数据非常不理想，用户留存，用户活跃度均不如之前版本，经过几次讨论认为是一个失败的版本并被放弃。所以这个公司的这次升级的效果么，呵呵，呵呵。</p>\n<p><strong>5、知识产权</strong></p>\n<p>美国人说，中国你不遵守知识产权，你不尊重技术。</p>\n<p>知识产权该不该遵守，要不要尊重技术，实话说，真的需要。</p>\n<p>一个不尊重技术，不尊重知识的国家，在现代社会里，是不太可能有太好前途的。</p>\n<p>但这里也存在一个历史原因，知识产权也是一套规则，而且是商业规则，然后，这个商业规则在制定和执行的时候，中国还处于一个基本上对商业规则完全蛮荒的时代。</p>\n<p>我举个例子，你拉朋友去打德州扑克，一个完全不会玩的朋友，你扔给他一个规则表，让他第一把就玩真钱的，你觉得合适么。你总要让人家看你们打几把熟悉一下规则吧。</p>\n<p>知识产权要遵守，但是如果说中国是单方面不遵守知识产权的获益方，这其实并不是事实，当年青蒿素，就是拿诺贝尔那个，多少亿美刀的商业价值被老外轻松的拿走了，不就是欺负我们国人不懂这玩意知识产权的重要性，现在青蒿素还有几个核心专利在中国人手里，有多少核心及周边专利在外国人手里。</p>\n<p>还有很多中国公司出海遇到一些知识产权诉讼，因为不懂这方面的知识，不敢应诉，很多案例都是缺席败诉，很多本来并不侵权的事情，也都直接失去了很多商业机会。</p>\n<p>重申一下，知识产权不仅是一种知识保护，更是一个商业规则，中国因为某些历史及政治信仰原因，在商业规则上可以说是起步非常的晚，犯过非常多的错误，交了非常多的学费，在全球一体化的现代社会，我们应该尊重和跟进全球公认的商业规则，但如果一昧用西方的观点来抨击中国知识产权的问题，一昧用西方标准来责难中国知识产权上曾经犯过的错误，这也是不公平的，也是一种傲慢和偏见。</p>\n<p>有兴趣的请移步下文，有华为发展的案例。请相信我，下文其实是我历史文章里最有价值但最被低估的一篇。</p>\n<p><a href=\"http://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&amp;mid=209643427&amp;idx=1&amp;sn=bf4c2dd26fdc6271a2cbfbb0746ca03c&amp;scene=21#wechat_redirect\" target=\"_blank\">从青蒿素说一下专利与知识产权 [更新]</a></p>\n<p><strong>6、美国的领先性表现在哪里</strong></p>\n<p>两周前，师姐问我的最后一个问题是关于信息安全，中国和美国的信息安全对比如何，因为美国也特别关注这玩意，其实中国很多人也很关心这个话题。</p>\n<p>大部分国人对这个问题的看法都是错的，基本上两个极端，妄自尊大和妄自菲薄。</p>\n<p>我先说个结论，如果中美政府信息安全开战，中国的黑客是可以渗透进入美国政府和军队网络的，这个我有信心，中国政府和安全公司手里还是有一把 0day 的，那么反过来呢？美国肯定可以轻松渗透和瘫痪中国的政府和军队网络，恩，大体上是双方互爆的局面，但多半我们要吃一些亏的。</p>\n<p>为什么我们会吃一些亏，整个互联网的协议都是美国人设计的，很多基础设施，哪怕是国产的一些路由设备，上面跑的也有很多是西方的芯片和存储设备，所以最近这些年开始所谓去 iot，国产化，但要做到完全甩开人家，目前还是不太现实的。人家硬件上如果留了接口什么的，你根本还没比就输了有没有，为啥美国政府那么敌视华为，他们太清楚这玩意里面能放什么了，他们也太清楚自己都放过什么了。</p>\n<p>再说第二个观点。</p>\n<p>在成熟的安全技术理论下的漏洞挖掘，我们跟美国应该没什么差距，大家水平应该是差不多的样子。举例来说，现在全球破解苹果系统最强的团队，是中国的盘古团队。</p>\n<p>但是在新的安全技术理论拓展上，我们应该是有差距的，而且，我估计，差距可能还不小。想想整个网络的协议层都是人家的。</p>\n<p>不仅是信息安全。我前段时间说过这个例子。</p>\n<p>阿里说他们技术第一，因为在并发处理上，双 11 是全球没有对手的，这就是我说的，在成熟的应用场景和技术理论下的深入挖掘，中国人可以做的非常出色。</p>\n<p>但是谷歌的 alphago 那么厉害，让中国互联网巨头惭愧不，这就是，在新的技术理论拓展上，我们还是处于学习和跟进状态。话说，alphago 这个算法论文出来后，中国也有一个公司基于这个技术路线图，做了一个相当强的围棋 AI，实话实说，我们在跟进新的技术理论方面，是很厉害的，但是毕竟，我们还只是跟进者。</p>\n<p><strong>7，关于创新的难点</strong></p>\n<p>我说一个关于创新问题的最大难点</p>\n<p>在已知场景，已知目标或已知障碍的情况下，你去寻找优化点，寻找突破点，这是我们国人擅长的领域。这当然也是创新。</p>\n<p>在未知场景，或已知场景很顺畅，没有障碍没有目标的情况下，你突然找到新的场景，新的目标，寻求突破，这就难了。</p>\n<p>举例来说，我说，淘宝目前并发很高，业绩持续增长，在数据库上出现瓶颈，需要技术上能再支撑额外 50%访问量，业务场景已知，障碍已知，目标已知，技术人员咔嚓咔嚓，寻找优化点和解决方案，这事我们很牛逼了，甚至基本上天下无敌了。</p>\n<p>我说，现在雅虎门户一统天下，网民上网需求格局已定，门户广告模式未来二十年预期如何如何。</p>\n<p>跑出来一个人说，你错了，用户上网入口要的不是门户，是搜索。</p>\n<p>我说，我们手机优化的非常好，声音清晰度极高，信号接受度很好，而且电池待机能力特别强，还支持各种通讯录的导入导出和铃声什么什么的。</p>\n<p>跑过来一个叫乔布斯的说，你错了，手机是用来娱乐玩的，是用户的上网终端和娱乐终端，打电话根本就不是重点好么。</p>\n<p>这就是创新最难的地方，在这块，我们跟美国相比，确实还是有差距。</p>\n<p>本文来自36氪，出处：<a href=\"http://36kr.com/p/5046648.html\" target=\"_blank\">http://36kr.com/p/5046648.html</a></p>\n', '傲慢与偏见之——山寨与创新', '', 'publish', 'open', 'open', '', '161', '', '', '2016-05-05 15:06:00', '2016-05-05 15:06:00', '', 0, 'http://www.gzpblog.com/?p=161', 0, 'post', '', 1),
(30, 1, '2016-05-09 23:43:00', '2016-05-09 23:43:00', '作为一个站长的话，SEO是一项特别需要注意的事，好的优化意味着流量，当然，像我这种纯博客，虽然不说要优化得多好，但是作为一个爱折腾的人，不整怎么能行？多学一点SEO优化的知识也不错。那么，一个网站，引入流量的重要工具，就是搜索引擎，一般大一些的搜索引擎都有站长平台，使用这类平台对于站长来说，是有一定帮助的。\r\n\r\n那么，现在我们来分析一下国内各大搜索引擎的站长平台，鉴于谷歌目前在国内的状况，我们只对百度，360，搜狗和Bing进行分析。\r\n\r\n<strong>一. Bing网站管理员</strong>\r\n\r\n为什么要第一个来说Bing呢？因为个人认为，Bing的站长平台是这些之中最好用的。我们单纯看一下这张图就知道为什么这么说了。\r\n\r\n<img class=\"alignnone size-full wp-image-144\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1129067328.png\" alt=\"1129067328\" width=\"217\" height=\"840\" />\r\n\r\n功能特别多，特别实用，来总结一些比较有用的功能：\r\n1）sitemap提交。提交之后抓取效率比较高，不需要等很久。\r\n2）提交URL。手动提交网址。\r\n3）拒绝链接。处理垃圾外链。\r\n<strong>4）移动友好页面。查找你的站点中哪些区域可能需要加以改进以符合移动友好最佳做法。</strong>\r\n<strong>5）索引资源管理器。管理索引。</strong>\r\n6）搜索关键字。针对Bing搜索引擎。\r\n<strong>7）SEO 分析程序。检测页面的SEO状况，可以根据报告进行改进。非常有用的功能。</strong>\r\n<strong>8）移动设备适用性测试工具。对网页进行分析并告知网页是否适用于移动设备。通过视图配置检测，是否限制缩放控制，页面内容是否适合设备宽度，页面上的文字易读性，链接和点击目标是否足够大，且可进行点触操作，等方面进行检测并返回结果。</strong>\r\n9）关键字研究。关键字研究有助于排名。\r\n\r\n<img class=\"alignnone size-full wp-image-147\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/3775035113.png\" alt=\"3775035113\" width=\"840\" height=\"608\" />\r\n\r\n10）Bingbot提取。查看Bing的抓取效果。\r\n11）恶意软件。检测恶意软件。\r\n12）网络钓鱼。检测网络钓鱼。\r\n\r\n<strong>二. 百度站长平台</strong>\r\n百度的收录情况怎么样呢，只能说对站点的收录还算比较不错的了，可以做到排名和收录同时进行，但需要一段时间，毕竟Bing是微软的，收录中文站定自然还是百度在行一点。那么百度站长平台的一个情况是怎么样的呢。有以下这些比较好的功能：\r\n\r\n1）站点信息首页比较直观的流量搜索词，索引量，链接提交，抓取频次，异常等的统计。\r\n<strong>2）移动友好度。对页面进行分析，报告相应网页是否采用了适合在移动设备上浏览的设计，并给出优化建议。在这一块比Bing更详细，具体到用什么大小的字体了。</strong>\r\n<strong>3）结构化数据。更好地收录站点，包括提交sitemap，自动推送，主动推送。</strong>\r\n4）网站体检。检测网站安全问题。\r\n5）闭站保护。对网站进行改版时有用的工具。\r\n<strong>6）Site App。网站移动化，制作移动APP的工具。</strong>\r\n\r\n因为百度有自己的专门做统计的“百度统计”，所以实际上有很多其它功能在百度统计中，而不弄到站长平台里，站长平台结合百度统计使用也是一个搭配。\r\n\r\n<strong>三. 360搜索</strong>\r\n360搜索的收录速度非常快，URL提交后可以做到快速收录，但是对网站的排名却很慢，收录了很多，但是排名却没做出来。360的平台有以下好用的功能：\r\n1）Sitemap提交。提交sitemap，不多说。\r\n<strong>2）URL收录。360URL收录的速度是很快的。</strong>\r\n3）自动收录。类似于百度的主动推送。\r\n4）闭站保护。保护收录。\r\n5）智能摘要。获得具有时效性的展现，有别于一般网站结果的展现，会吸引更多用户的点击。\r\n<strong>6）网站安全检测。作为一个做杀毒软件的公司，安全检测这一块自然不错，我们可以看到360的安全检测项目特别多特别详细。</strong>\r\n\r\n<strong>四. 搜狗站长平台</strong>\r\n\r\n搜狗平台是最不好用的平台了，要啥没啥。sitemap提交还要审核通过，我就申请了两次不成功。而搜狗本身的搜录效果又特别的差，好几个月了，本网站的主页才被收录，而且目前为止也只有一个主页。那么搜狗平台的一些有用功能：\r\n1）url提交。其实效率极低。\r\n2）网站举报。怎么说呢，那么多个平台，确实也只有搜狗有这么功能，用不用就一回事了。\r\n3）网站申诉。被搜狗视为有作弊行为的网站，在清除作弊内容后，可以通过网站申诉申请解除作弊处罚。\r\n其它的确实没啥特别的功能可以说了。', '各大搜索引擎站长平台功能分析——百度，360，搜狗，Bing', '', 'publish', 'open', 'open', '', '162', '', '', '2016-10-08 02:50:29', '2016-10-07 18:50:29', '', 0, 'http://www.gzpblog.com/?p=162', 0, 'post', '', 0),
(31, 1, '2016-05-16 22:55:00', '2016-05-16 22:55:00', '<strong>1. 引用模块:</strong>\r\n形式1：import module-name。 import后面跟空格，然后是模块名称，例如：<code>import os</code>\r\n\r\n形式2：from module1 import module11。 module1是一个大模块，里面还有子模块module11，只想用module11，就这么写了。\r\n\r\n<strong>2. 检测类型:</strong> <code>type()</code>\r\n\r\n<strong>3. 查看模块中包含的工具:</strong> <code>dir(module)</code>\r\n\r\n<strong>4. 查看模块的使用方法:</strong> <code>help(module.name)</code>\r\n例如: <code>help(math.pow)</code>\r\n\r\n<strong>5. 常用的几个数学函数:</strong>\r\n求绝对值 <code>abs()</code>\r\n四舍五入 <code>round()</code>\r\n\r\n<strong>6. windows命令提示符运行python文件:</strong>\r\n命令提示符下进入.py文件运行的目录,运行<code>python ***.py</code>\r\n\r\n<strong>7. 直接运行.py文件</strong>,像.exe那样. windows下不行,Mac和Linux下加:\r\n<code>#!/usr/bin/env python3</code>\r\n\r\n然后，通过命令给hello.py 以执行权限：\r\n\r\n<code>$ chmod a+x hello.py</code>\r\n\r\n<strong>8. print()</strong> 在括号中加上字符串，就可以向屏幕上输出指定的文字。比如输出\'hello, world\' ，用代码实现如下：\r\n[python]&gt;&gt;&gt; print(\'hello, world\')\r\n[/python]\r\nprint()函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出：\r\n[python]\r\n&gt;&gt;&gt; print(\'The quick brown fox\', \'jumps over\', \'the lazy dog\')\r\nThe quick brown fox jumps over the lazy dog\r\n&gt;&gt;&gt; print(\'100 + 200 =\', 100 + 200) \r\n100 + 200 = 300\r\n[/python]\r\n<strong>9. input()</strong>让用户输入字符串\r\n[python]&gt;&gt;&gt; name = input()\r\nguo\r\n&gt;&gt;&gt; name\r\n\'guo\'\r\n[/python]\r\n<strong>10.</strong> 如果字符串里面有很多字符都需要转义，就需要加很多\\ ，为了简化，Python还允许<strong>用r\'\' 表示\'\' 内部的\r\n字符串默认不转义</strong>：\r\n[python]\r\n&gt;&gt;&gt; print(\'\\\\\\t\\\\\')\r\n\\ \\\r\n&gt;&gt;&gt; print(r\'\\\\\\t\\\\\')\r\n\\\\\\t\\\\\r\n[/python]\r\n<strong>11.</strong> Python允许<strong>用<code>\'\'\'...\'\'\'</code> 的格式表示多行内容</strong>，可以自己试试：\r\n[python]\r\n&gt;&gt;&gt; print(\'\'\'line1\r\n... line2\r\n... line3\'\'\')\r\n[/python]\r\n\r\n<strong>12. python标识布尔值True,False必须开头大写</strong>\r\n\r\n<strong>13.</strong> 告诉Python解释器，按照<strong>UTF-8编码</strong>读取源代码:\r\n<code># -*- coding: utf-8 -*-</code>\r\n\r\n申明了UTF-8编码并不意味着你的.py 文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8 without BOM编码.\r\n\r\n<strong>14. 关于python格式化:</strong>\r\n\r\n字符串常见占位符:\r\n\r\n%d 整数 (%2d 两位整数 %02d 两位整数,前面是0)\r\n\r\n%f 浮点数 (%.2f 小数点后两位)\r\n\r\n%s 字符串\r\n\r\n%x 十六进制整数\r\n\r\n格式化例子:\r\n[python]\r\n&gt;&gt;&gt; \'Hi, %s, you have $%d.\' % (\'Michael\', 1000000)\r\n\'Hi, Michael, you have $1000000.\'\r\n[/python]\r\n(格式: <code>\'内容\' % (变量,变量)</code> 注:如果只有一个变量可以省略括号)\r\n\r\n如果不太确定应该用什么， %s 永远起作用，它会把任何数据类型转换为字符串.\r\n\r\n有些时候，字符串里面的<code>%</code> 是一个普通字符怎么办？这个时候就需要转义，用<code>%%</code> 来表示一个<code>%</code>.\r\n\r\n<strong>15. list,tuple,dict,set区别</strong>\r\n\r\n<strong>list</strong>: <code>l = [1,2,\'12\']</code> 可以删除,赋值,替换等.内容可以重复\r\n\r\n<strong>tuple</strong>: <code>t = (1,2,\'12\')</code> 不变的list,不能重新赋值替换,删除等.内容可以重复.\r\n\r\n<strong>dict</strong>: <code>d = { \'Adam\': 95, \'Lisa\': 85, \'Bart\': 59, \'Paul\': 75 }</code> Key-Value键值对,哈希算法.key不重复\r\n\r\n<strong>set</strong>: <code>s = set([\'A\', \'B\', \'C\'])</code> 就像是把Dict中的key抽出来了一样，类似于一个List，但是内容又不能重复,大小写是敏感的.\r\n\r\n交互模式输出显示:\r\n<code>list: [value,value]</code>\r\n<code>tuple: (value,value)</code>\r\n<code>dict: {key:value,key:value}</code>\r\n<code>set: {key,key}</code>', 'Python学习笔记1——Python基础知识小记', '', 'publish', 'open', 'open', '', '168', '', '', '2016-10-09 23:47:07', '2016-10-09 15:47:07', '', 0, 'http://www.gzpblog.com/?p=168', 0, 'post', '', 0),
(32, 1, '2016-05-19 19:51:00', '2016-05-19 19:51:00', '<h2>1.list——列表</h2>\r\nPython内置的一种数据类型。list是一种有序的集合，可以随时添加和删除其中的元素，类似于php索引数组。\r\n\r\n[python]\r\n&gt;&gt;&gt; classmates = [\'Michael\', \'Bob\', \'Tracy\']\r\n&gt;&gt;&gt; classmates\r\n[\'Michael\', \'Bob\', \'Tracy\']\r\n&gt;&gt;&gt; classmates[0]\r\n\'Michael\'\r\n&gt;&gt;&gt; classmates[-1]\r\n\'Tracy\'\r\n[/python]\r\n\r\n<h2>2. list的操作</h2>\r\n<ul>\r\n 	<li><strong>往list中追加元素到末尾： append()</strong></li>\r\n</ul>\r\n\r\n[python]\r\n&gt;&gt;&gt; classmates.append(\'Adam\')\r\n&gt;&gt;&gt; classmates\r\n[\'Michael\', \'Bob\', \'Tracy\', \'Adam\']\r\n[/python]\r\n\r\n<ul>\r\n 	<li><strong>把元素插入到指定的位置：insert（）</strong></li>\r\n</ul>\r\n比如索引号为1 的位置：\r\n\r\n[python]\r\n&gt;&gt;&gt; classmates.insert(1, \'Jack\')\r\n&gt;&gt;&gt; classmates\r\n[\'Michael\', \'Jack\', \'Bob\', \'Tracy\', \'Adam\']\r\n[/python]\r\n\r\n<ul>\r\n 	<li><strong>删除list末尾的元素：pop()</strong></li>\r\n</ul>\r\n\r\n[python]\r\n&gt;&gt;&gt; classmates.pop()\r\n\'Adam\'\r\n&gt;&gt;&gt; classmates\r\n[\'Michael\', \'Jack\', \'Bob\', \'Tracy\']\r\n[/python]\r\n\r\n<ul>\r\n 	<li><strong>删除指定位置的元素：pop(i)</strong>\r\ni 是索引位置</li>\r\n</ul>\r\n\r\n[python]\r\n&gt;&gt;&gt; classmates.pop(1)\r\n\'Jack\'\r\n&gt;&gt;&gt; classmates\r\n[\'Michael\', \'Bob\', \'Tracy\']\r\n[/python]\r\n\r\n<ul>\r\n 	<li><strong>某个元素替换成别的元素：直接赋值给对应的索引位置：</strong></li>\r\n</ul>\r\n\r\n[python]\r\n&gt;&gt;&gt; classmates[1] = \'Sarah\'\r\n&gt;&gt;&gt; classmates\r\n[\'Michael\', \'Sarah\', \'Tracy\']\r\n[/python]\r\n\r\n<ul>\r\n 	<li>list里面的元素的数据类型也可以不同，list元素也可以是另一个list。</li>\r\n 	<li>如果一个list中一个元素也没有，就是一个空的list，它的长度为0。</li>\r\n</ul>\r\n<h2>3. tuple——元组</h2>\r\ntuple和list非常类似，但是tuple一旦初始化就不能修改<code>]</code>\r\n\r\n&nbsp;\r\n\r\n[python]&gt;&gt;&gt; classmates = (\'Michael\', \'Bob\', \'Tracy\')[/python]\r\n\r\n&nbsp;\r\n<ul>\r\n 	<li>获取元素的方法和list是一样的，但不能赋值成另外的元素。</li>\r\n 	<li>因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。</li>\r\n</ul>\r\n<h2>4. tuple操作</h2>\r\n<ul>\r\n 	<li><strong>定义一个空的tuple，可以写成()</strong> ：</li>\r\n</ul>\r\n\r\n[python]\r\n&gt;&gt;&gt; t = () \r\n&gt;&gt;&gt; t \r\n()\r\n[/python]\r\n\r\n<ul>\r\n 	<li>但是要定义一个只有1个元素的tuple，如果你这么定义：</li>\r\n</ul>\r\n\r\n[python]\r\n&gt;&gt;&gt; t = (1) \r\n&gt;&gt;&gt; t \r\n1\r\n[/python]\r\n\r\n定义的不是tuple，是1 这个数！<strong>这是因为括号() 既可以表示tuple，又可以表示数学公式中的小括号</strong>，这\r\n就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是1 。\r\n\r\n所以，<strong>只有1个元素的tuple定义时必须加一个逗号,</strong> ，来消除歧义：\r\n\r\n[python]\r\n&gt;&gt;&gt; t = (1,) \r\n&gt;&gt;&gt; t \r\n(1,)\r\n[/python]\r\n\r\nPython在显示只有1个元素的tuple时，也会加一个逗号, ，以免你误解成数学计算意义上的括号。\r\n<ul>\r\n 	<li><strong>一个“可变的”tuple：</strong></li>\r\n</ul>\r\n\r\n[python]\r\n&gt;&gt;&gt; t = (\'a\', \'b\', [\'A\', \'B\']) \r\n&gt;&gt;&gt; t[2][0] = \'X\' \r\n&gt;&gt;&gt; t[2][1] = \'Y\' \r\n&gt;&gt;&gt; t \r\n(\'a\', \'b\', [\'X\', \'Y\'])\r\n[/python]\r\n\r\ntuple所谓的“不变”是指<strong>tuple的每个元素，指向永远不变</strong>。即指向\'a\' ，就不能改成指向\'b\' ，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的。\r\n<h2>5. dict——字典</h2>\r\n类似于php中关联数组。例子：\r\n\r\n[python]\r\n&gt;&gt;&gt; d = {\'Michael\': 95, \'Bob\': 75, \'Tracy\': 85}\r\n&gt;&gt;&gt; d[\'Michael\']\r\n95\r\n[/python]\r\n\r\n<h2>6. dict操作</h2>\r\n<ul>\r\n 	<li>把数据放入dict的方法，除了初始化时指定外，还可以通过key放入：</li>\r\n</ul>\r\n\r\n[python]\r\n&gt;&gt;&gt; d[\'Adam\'] = 67\r\n&gt;&gt;&gt; d[\'Adam\']\r\n67\r\n[/python]\r\n\r\n由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉。\r\n<ul>\r\n 	<li>如果key不存在，dict就会报错.要避免key不存在的错误，有两种办法，一是通过in 判断key是否存在：</li>\r\n</ul>\r\n\r\n[python]\r\n&gt;&gt;&gt; \'Thomas\' in d\r\nFalse\r\n[/python]\r\n\r\n二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：\r\n\r\n[python]\r\n&gt;&gt;&gt; d.get(\'Thomas\')\r\n&gt;&gt;&gt; d.get(\'Thomas\', -1)\r\n-1\r\n[/python]\r\n\r\n<strong>注意：返回None 的时候Python的交互式命令行不显示结果。</strong>\r\n<ul>\r\n 	<li><strong>删除一个key： pop(key)</strong>\r\n对应的value也会从dict中删除.</li>\r\n</ul>\r\n<ul>\r\n 	<li><strong>dict内部存放的顺序和key放入的顺序是没有关系的。</strong></li>\r\n 	<li>和list比较，dict有以下几个特点：1). 查找和插入的速度极快，不会随着key的增加而增加；\r\n2). 需要占用大量的内存，内存浪费多。</li>\r\n</ul>\r\n<ul>\r\n 	<li><strong>dict的key必须是不可变对象.</strong>\r\n这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完\r\n全混乱了。这个通过key计算位置的算法称为<strong>哈希算法（Hash）</strong>。<strong>list是可变的，就不能作为key</strong>。</li>\r\n</ul>\r\n<h2>7. set——集合</h2>\r\nset和dict类似，也是一组key的集合，但<strong>不存储value</strong>。由于key不能重复，所以，在set中，<strong>没有重复的\r\nkey</strong>。\r\n<ul>\r\n 	<li>要创建一个set，需要提供一个list作为输入集合：</li>\r\n</ul>\r\n\r\n[python]\r\n&gt;&gt;&gt; s = set([1, 2, 3])\r\n&gt;&gt;&gt; s\r\n{1, 2, 3}\r\n[/python]\r\n\r\n<ul>\r\n 	<li>重复元素在set中自动被过滤：</li>\r\n</ul>\r\n\r\n[python]\r\n&gt;&gt;&gt; s = set([1, 1, 2, 2, 3, 3])\r\n&gt;&gt;&gt; s\r\n{1, 2, 3}\r\n[/python]\r\n\r\n<h2>8. set操作</h2>\r\n<ul>\r\n 	<li><strong>添加元素到set中：add(key)</strong></li>\r\n</ul>\r\n可以重复添加，但不会有效果：\r\n\r\n[python]\r\n&gt;&gt;&gt; s.add(4)\r\n&gt;&gt;&gt; s\r\n{1, 2, 3, 4}\r\n&gt;&gt;&gt; s.add(4)\r\n&gt;&gt;&gt; s\r\n{1, 2, 3, 4}\r\n[/python]\r\n\r\n<ul>\r\n 	<li><strong>删除元素：remove(key)</strong>：</li>\r\n</ul>\r\n\r\n[python]\r\n&gt;&gt;&gt; s.remove(4)\r\n&gt;&gt;&gt; s\r\n{1, 2, 3}\r\n[/python]\r\n\r\n<ul>\r\n 	<li>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操\r\n作：</li>\r\n</ul>\r\n\r\n[python]\r\n&gt;&gt;&gt; s1 = set([1, 2, 3])\r\n&gt;&gt;&gt; s2 = set([2, 3, 4])\r\n&gt;&gt;&gt; s1 &amp; s2\r\n{2, 3}\r\n&gt;&gt;&gt; s1 | s2\r\n{1, 2, 3, 4}\r\n[/python]\r\n\r\n<ul>\r\n 	<li>set和dict的唯一区别仅在于没有存储对应的value，但是，<strong>set的原理和dict一样，所以，同样不可以放入\r\n可变对象</strong>，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”.</li>\r\n</ul>\r\n<h2>9. str是不变对象，而list是可变对象</h2>\r\n\r\n[python]\r\n&gt;&gt;&gt; a = \'abc\'\r\n&gt;&gt;&gt; b = a.replace(\'a\', \'A\')\r\n&gt;&gt;&gt; b\r\n\'Abc\'\r\n&gt;&gt;&gt; a\r\n\'abc\'\r\n[/python]\r\n\r\n<blockquote>a 是变量，而\'abc\' 才是字符串对象！有些时候，我们经常说，对象a 的内容是\'abc\' ，但其实是指， a本身是一个变量，它指向的对象的内容才是\'abc\' 。\r\n\r\n当我们调用a.replace(\'a\', \'A\') 时，实际上调用方法replace 是作用在字符串对象\'abc\' 上的，而这个方法\r\n虽然名字叫replace ，但却没有改变字符串\'abc\' 的内容。相反， replace 方法创建了一个新字符串 \'Abc\'\r\n并返回，如果我们用变量b 指向该新字符串，就容易理解了，变量a 仍指向原有的字符串\'abc\' ， 但变量b 却指向新字符串\'Abc\' 了。</blockquote>', 'Python学习笔记2——list，tuple，dict，set', '', 'publish', 'open', 'open', '', '170', '', '', '2016-10-09 23:38:51', '2016-10-09 15:38:51', '', 0, 'http://www.gzpblog.com/?p=170', 0, 'post', '', 0),
(33, 1, '2016-05-19 22:54:00', '2016-05-19 22:54:00', '<h2>前台提示</h2>\r\n<strong>1. 显示一个提示信息，调用以下函数：</strong>\r\n\r\n<strong>show_message</strong>($content, $links = \'\', $hrefs = \'\', $type = \'info\', $auto_redirect = true)\r\n\r\n$content：提示内容\r\n\r\n$links：跳转链接名称\r\n\r\n$hrefs：跳转链接地址\r\n\r\n$type：提示信息类型warning, error, info\r\n\r\n$auto_redirect：是否自动跳转，默认为是\r\n\r\n<strong>2. 显示错误信息，调用：</strong>\r\n\r\n<strong>show</strong>($link = \'\', $href= \'\')\r\n\r\n$link：跳转链接名字\r\n\r\n$href：跳转链接地址\r\n\r\n<strong>3. 例子：</strong>\r\n\r\n[php]\r\nif (add_message($message))\r\n{\r\n   show_message($_LANG[\'add_message_success\'], $_LANG[\'message_list_lnk\'], \'user.php?act=message_list&amp;amp;order_id=\' .$message[\'order_id\'],\'info\');\r\n}\r\nelse\r\n{\r\n   $err-&amp;gt;show($_LANG[\'message_list_lnk\'], \'user.php?act=message_list\');\r\n}\r\n[/php]\r\n\r\n&nbsp;\r\n<h2>后台提示</h2>\r\n<strong>1. 系统提示信息</strong>\r\n\r\nsys_msg($msg_detail, $msg_type = 0, $links = array(), $auto_redirect = true)\r\n\r\n$msg_detail：提示消息内容\r\n\r\n$msg_type：跳转类型， 0消息，1错误，2询问\r\n\r\n$links：可选的跳转链接，为数组\r\n\r\n$auto_redirect： 是否自动跳转\r\n\r\n<strong>2. 例子:</strong>\r\n\r\n[php]\r\n$links[] = array(\r\n\'text\' =&gt; $_LANG[\'order_info\'],\r\n\'href\' =&gt; \'order.php?act=delivery_info&amp;delivery_id=\' . $delivery_id\r\n);\r\n\r\nsys_msg(sprintf($_LANG[\'act_good_vacancy\'], $value[\'goods_name\']), 1, $links);\r\n[/php]\r\n', 'ECshop前台和后台提示信息调用', '', 'publish', 'open', 'open', '', '172', '', '', '2016-10-09 23:09:08', '2016-10-09 15:09:08', '', 0, 'http://www.gzpblog.com/?p=172', 0, 'post', '', 0),
(34, 1, '2016-05-19 23:36:00', '2016-05-19 23:36:00', '这里放一个,用Jquery实现动态添加和删除tr行的小例子,之前自己琢磨的,毕竟js不熟,摸索中,下面是实现的样子,当然没有样式：\r\n<img class=\"alignnone size-full wp-image-145\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1398985470.png\" alt=\"1398985470\" width=\"613\" height=\"91\" />\r\n\r\n点击添加按钮可以添加一行：\r\n<img class=\"alignnone size-full wp-image-146\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/3581344272.png\" alt=\"3581344272\" width=\"619\" height=\"161\" />\r\n\r\n点击删除可以删除本行：\r\n<img class=\"alignnone size-full wp-image-148\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/4069227203.png\" alt=\"4069227203\" width=\"364\" height=\"147\" />\r\n\r\n基本功能是这样，下面是代码：\r\n\r\n[html]\r\n\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\r\n\r\n&lt;!-- 这里是引用了一个百度的jquery库,可换为本地jquery库 --&gt;\r\n&lt;script src=&quot;http://apps.bdimg.com/libs/jquery/1.6.4/jquery.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;table id=&quot;allDatas&quot;&gt;\r\n&lt;tr&gt;\r\n&lt;th&gt;选择图片&lt;/th&gt;\r\n&lt;th&gt;图片名称&lt;/th&gt;\r\n&lt;th&gt;描述&lt;/th&gt;\r\n&lt;th&gt;操作&lt;/th&gt;\r\n&lt;/tr&gt;\r\n&lt;tr&gt;\r\n&lt;td&gt;&lt;input type=&quot;file&quot; name=&quot;imageFile1&quot;/&gt;&lt;/td&gt;\r\n&lt;td&gt;&lt;input name=&quot;imageName&quot;&gt;&lt;/input&gt;&lt;/td&gt;\r\n&lt;td&gt;&lt;input name=&quot;note&quot; /&gt; &lt;/td&gt;\r\n&lt;td&gt;&lt;a href=&quot;javascript:;&quot; onclick=&quot;deleteCurrentRow(this);&quot;&gt;&lt;font color=\'red\'&gt;删除&lt;/font&gt;&lt;/a&gt; &lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;\r\n&lt;button onclick=&quot;javascript:addCurrentRow();&quot; &gt;添加&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\nfunction addCurrentRow()\r\n{\r\nvar trcomp=&quot;&lt;tr&gt;&lt;td&gt;&lt;input type=\'file\' name=\'imageFile\'/&gt;&lt;/td&gt;&lt;td&gt;&lt;input name=\'imageName\'&gt;&lt;/input&gt;&lt;/td&gt;&lt;td&gt;&lt;input name=\'note\' /&gt;&lt;/td&gt;&lt;td&gt;&lt;a href=\'javascript:;\' onclick=\'deleteCurrentRow(this);\'&gt;&lt;font color=\'red\'&gt;删除&lt;/font&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&quot;;\r\n$(&quot;#allDatas tr:last-child&quot;).after(trcomp);\r\n}\r\n\r\nfunction deleteCurrentRow(obj)\r\n{\r\nvar isDelete=confirm(&quot;真的要删除吗？&quot;);\r\nif(isDelete)\r\n{\r\nvar tr=obj.parentNode.parentNode;\r\nvar tbody=tr.parentNode;\r\ntbody.removeChild(tr);\r\n}\r\n}\r\n&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n\r\n[/html]\r\n', '用Jquery实现动态添加和删除tr行', '', 'publish', 'open', 'open', '', '183', '', '', '2016-10-13 12:04:56', '2016-10-13 04:04:56', '', 0, 'http://www.gzpblog.com/?p=183', 0, 'post', '', 1),
(35, 1, '2016-05-26 09:11:00', '2016-05-26 09:11:00', '<p>关于vivaldi浏览器，不解释了，谁用谁知道。</p>\n<p>解决falsh视频无法播放问题，这个浏览器用的flash插件是Adobe Flash Player 21 <strong>PPAPI</strong>的，所以要下这个版本的flash插件。</p>\n<p>下载地址：<br />\n官方的：<a href=\"http://labs.adobe.com/downloads/flashplayer.html\" target=\"_blank\">Adobe Flash Player 21</a><br />\n看不懂英文去这里下吧：<a href=\"http://www.391k.com/pcsoft/152702.html\" target=\"_blank\">Adobe Flash Player 21</a></p>\n', 'Vivaldi浏览器解决falsh视频无法播放问题', '', 'publish', 'open', 'open', '', '187', '', '', '2016-05-26 09:11:00', '2016-05-26 09:11:00', '', 0, 'http://www.gzpblog.com/?p=187', 0, 'post', '', 1),
(36, 1, '2016-05-26 22:28:00', '2016-05-26 22:28:00', '<strong>1.移除 HTML 标签</strong>\r\n\r\n[php]$text = strip_tags($input, &quot;&quot;);[/php]\r\n\r\n<strong>2.返回 $start 和 $end 之间的文本</strong>\r\n\r\n[php]\r\n\r\nfunction GetBetween($content,$start,$end){\r\n$r = explode($start, $content);\r\nif (isset($r[1])){\r\n$r = explode($end, $r[1]);\r\nreturn $r[0];\r\n}\r\nreturn \'\';\r\n}\r\n\r\n[/php]\r\n\r\n<strong>3.将url转换成链接</strong>\r\n\r\n[php]\r\n\r\n$url = &quot;Jean-Baptiste Jung (http://www.webdevcat.com)&quot;;\r\n$url = preg_replace(&quot;#http://([A-z0-9./-]+)#&quot;, \'&lt;a href=&quot;http://www.catswhocode.com/blog/$1&quot; style=&quot;font-size: 12px; vertical-align: baseline; background-color: transparent; margin: 0px; padding: 0px; color: #3777af; text-decoration: none; font-weight: bold&quot;&gt;$0&lt;/a&gt;\', $url);\r\n[/php]\r\n\r\n<strong>4.切分字符串为140个字符</strong>\r\n\r\n[php]\r\nfunction split_to_chunks($to,$text){\r\n$total_length = (140 - strlen($to));\r\n$text_arr = explode(&quot; &quot;,$text);\r\n$i=0;\r\n$message[0]=&quot;&quot;;\r\nforeach ($text_arr as $word){\r\nif ( strlen($message[$i] . $word . \' \') &lt;= $total_length ){\r\nif ($text_arr[count($text_arr)-1] == $word){\r\n$message[$i] .= $word;\r\n} else {\r\n$message[$i] .= $word . \' \';\r\n}\r\n} else {\r\n$i++;\r\nif ($text_arr[count($text_arr)-1] == $word){\r\n$message[$i] = $word;\r\n} else {\r\n$message[$i] = $word . \' \';\r\n}\r\n}\r\n}\r\nreturn $message;\r\n}\r\n[/php]\r\n\r\n<strong>5.删除字符串中的URL</strong>\r\n\r\n[php]\r\n$string = preg_replace(\'/\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&amp;@#\\/%?=~_|$!:,.;]*[A-Z0-9+&amp;@#\\/%=~_|$]/i\', \'\', $string);\r\n[/php]\r\n\r\n&nbsp;\r\n\r\n<strong>6.将字符串转成SEO友好的字符串</strong>\r\n\r\n[php]\r\nfunction slug($str){\r\n$str = strtolower(trim($str));\r\n$str = preg_replace(\'/[^a-z0-9-]/\', \'-\', $str);\r\n$str = preg_replace(\'/-+/\', &quot;-&quot;, $str);\r\nreturn $str;\r\n}\r\n[/php]\r\n\r\n<strong>7.解析 CSV 文件</strong>\r\n\r\n[php]\r\n$fh = fopen(&quot;contacts.csv&quot;, &quot;r&quot;);\r\nwhile($line = fgetcsv($fh, 1000, &quot;,&quot;)) {\r\necho &quot;Contact: {$line[1]}&quot;;\r\n}\r\n[/php]\r\n\r\n<strong>8.字符串搜索</strong>\r\n\r\n[php]\r\nfunction contains($str, $content, $ignorecase=true){\r\nif ($ignorecase){\r\n$str = strtolower($str);\r\n$content = strtolower($content);\r\n}\r\nreturn strpos($content,$str) ? true : false;\r\n}\r\n[/php]\r\n\r\n<strong>9.检查字符串是否以某个串开始</strong>\r\n\r\n[php]\r\nfunction String_Begins_With($needle, $haystack {\r\nreturn (substr($haystack, 0, strlen($needle))==$needle);\r\n}\r\n[/php]\r\n\r\n<strong>10.从字符串中提取email地址</strong>\r\n\r\n[php]\r\nfunction extract_emails($str){\r\n// This regular expression extracts all emails from a string:\r\n$regexp = \'/([a-z0-9_\\.\\-])+\\@(([a-z0-9\\-])+\\.)+([a-z0-9]{2,4})+/i\';\r\npreg_match_all($regexp, $str, $m);\r\n\r\nreturn isset($m[0]) ? $m[0] : array();\r\n}\r\n\r\n$test_string = \'This is a test string...\r\n\r\ntest1@example.org\r\n\r\nTest different formats:\r\ntest2@example.org;\r\n&lt;a href=&quot;test3@example.org&quot;&gt;foobar&lt;/a&gt;\r\n&lt;test4@example.org&gt;\r\n\r\nstrange formats:\r\ntest5@example.org\r\ntest6[at]example.org\r\ntest7@example.net.org.com\r\ntest8@ example.org\r\ntest9@!foo!.org\r\n\r\nfoobar\r\n\';\r\n\r\nprint_r(extract_emails($test_string));\r\n[/php]\r\n\r\n<h2>知识点整理:</h2>\r\n<strong>1.strip_tags -移除字符串中的HTML和PHP标签</strong>\r\n语法: string strip_tags ( string $str [, string $allowable_tags ] )\r\n描述: $allowable_tags是不移除的标签\r\n\r\n<strong>2.explode -使用字符串分割另一个字符串</strong>\r\n语法: array explode ( string $separator , string $string [, int $limit ] )\r\n描述: $separator是分界点,如果设置了 limit 参数，则返回的数组包含最多 limit 个元素，而最后那个元素将包含 string 的剩余部分。\r\n注意: 如果 separator 为空字符串（\"\"），explode() 将返回 FALSE。如果 separator 所包含的值在 string 中找不到，那么 explode() 将返回包含 string 单个元素的数组。\r\n\r\n<strong>3.preg_replace —执行正则表达式的搜索和替换</strong>\r\n语法: mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit ] )\r\n描述: 在 subject 中搜索 pattern 模式的匹配项并替换为 replacement 。如果指定了 limit ，则仅替换 limit 个匹配，如果省略 limit 或者其值为 -1，则所有的匹配项都会被替换。\r\n\r\n<strong>4.strlen -获得字符串长度</strong>\r\n语法: int strlen ( string $string )\r\n\r\n<strong>5.trim -去掉字符串前后的空格</strong>\r\n语法: string trim ( string $str [, string $charlist ] )\r\n描述: $charlist存在则去掉$charlist中的成分\r\n\r\n<strong>6.什么是CSV文件?</strong>\r\n\"CSV\" 是逗号分隔文件 (Comma Separated Values)的首字母英文缩写，是一种用来存储数据的纯文本格式，通常用于电子表格或数据库软件。在 CSV 文件中，数据“栏”以逗号分隔，可允许程序通过读取文件为数据重新创建正确的栏结构，并在每次遇到逗号时开始新的一栏。\r\n\r\n<strong>7.strpos -返回字符串在另一个字符串中第一次出现的位置</strong>\r\n语法: int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )\r\n描述: $needle是要查找出来的字符串,$haystrack是要在这里面查找\r\n\r\n<strong>8.substr -返回一部分字符串</strong>\r\n语法: string substr ( string $string , int $start [, int $length ] )\r\n描述: $string规定要返回其中一部分的字符串,$start规定在字符串的何处开始,$length规定要返回的字符串长度。默认是直到字符串的结尾。\r\n\r\n来源: 开源中国社区', '10个php关于字符串处理的代码片段', '', 'publish', 'open', 'open', '', '189', '', '', '2016-10-10 00:21:17', '2016-10-09 16:21:17', '', 0, 'http://www.gzpblog.com/?p=189', 0, 'post', '', 0),
(37, 1, '2016-05-31 09:14:00', '2016-05-31 09:14:00', '<strong>1. js返回上一页</strong>\r\n\r\n[js]href=&quot;javascript :;&quot; onClick=&quot;javascript :history.back(-1);&quot;[/js]\r\n\r\n<strong>2. 获取字符串的编码</strong>\r\n\r\n[php]\r\n$encode = mb_detect_encoding($string, array(\'ASCII\',\'UTF-8\',\'GB2312\',\'GBK\',\'BIG5\')); \r\necho $encode;\r\n[/php]\r\n\r\nEUC-CN EUC-CN是GB2312最常用的表示方法。浏览器编码表上的“GB2312”，通常都是指“EUC-CN”表示法。\r\n\r\n<strong>3. 报错Table \'c_stats\' is marked as crashed and should be repaired</strong>\r\nphpmyadmin中直接修复表或者REPAIR TABLE <code>c_stats</code>;\r\n\r\n<strong>4. 判断是否引入了css或者js文件</strong>\r\n\r\n[js]\r\nfunction isInclude(name){\r\nvar js= /js$/i.test(name);\r\nvar es=document.getElementsByTagName(js?\'script\':\'link\');\r\nfor(var i=0;i&lt;es.length;i++)\r\nif(es[i][js?\'src\':\'href\'].indexOf(name)!=-1)return true;\r\nreturn false;\r\n}\r\nalert(isInclude(&quot;abc.js&quot;));\r\nalert(isInclude(&quot;efg.css&quot;));\r\n[/js]\r\n\r\n<strong>5. html中checked是预先选定而不是当前选定</strong>\r\n当前选定判断用: ```if(document.getElementById(\'\').check){}```\r\n\r\n<strong>6. mysql存坐标——geometry</strong>\r\n插入数据：\r\n\r\n[code]INSERT INTO `geometry2`.`gemo` VALUES(GeomFromText(\'POINT(1 1)\'));[/code]\r\n\r\n查询数据：\r\n\r\n[code]SELECT AsText(pos) FROM `geometry2`.`gemo`;[/code]\r\n', '这段时间工作中碰到的一些问题(php,js,mysql)', '', 'publish', 'open', 'open', '', '191', '', '', '2016-10-09 22:11:28', '2016-10-09 14:11:28', '', 0, 'http://www.gzpblog.com/?p=191', 0, 'post', '', 0),
(38, 1, '2016-06-13 23:41:00', '2016-06-13 23:41:00', '接触编程也大概有九个月了吧。一开始想着，程序员应该对自己好一点，是的吧，给自己买了部比较好的笔记本（对我来说，挺好了），鼠标啊键盘啊什么的，还是用的比较low的。最近几天突然思考起一个事情，这笔记本码起代码来，着实有点不怎么顺手的。\r\n\r\n瞬间想到了外接键盘！于是乎，端午节的假期，两天时间在看键盘。还是那句，“程序员嘛，对自己好点嘛”。好的，机械键盘走起。\r\n\r\n看图！<img class=\"alignnone size-full wp-image-155\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/3834160044.png\" alt=\"3834160044\" width=\"1078\" height=\"580\" />\r\n\r\n对的，人生第一个机械键盘，就是这个。\r\n\r\n一开始也是纠结了很久，到底选个什么轴呢？黑轴，青轴，茶轴，红轴？本来想来一发黑轴的，因为青轴吵，茶轴没感觉，黑轴看着不错还便宜。最后还是选择了红轴，因为似乎挺多人推荐红轴的。\r\n\r\n当然，既然是第一个机械键盘，当然是买一个入门级的试试水啦。千挑万挑，挑了这一款： <a href=\"http://detail.zol.com.cn/keyboard/index865472.shtml\" target=\"_blank\">Ducky魔力鸭 2087s S2</a>，必须樱桃轴，红轴，没背光，码代码感觉没必要背光了，而且似乎想要可以再DIY。嗯，恰好粉丝节嘛，下单！\r\n\r\n顺丰妥妥的第二天就到了\r\n<img class=\"alignnone size-full wp-image-150\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1824703186.png\" alt=\"1824703186\" width=\"1076\" height=\"588\" />\r\n\r\n外壳:\r\n<img class=\"alignnone size-full wp-image-153\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2636851374.png\" alt=\"2636851374\" width=\"1007\" height=\"584\" />\r\n\r\n拆开了！哎哟还有一个啥玩意盖着~\r\n<img class=\"alignnone size-full wp-image-151\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2033684534.png\" alt=\"2033684534\" width=\"1073\" height=\"753\" />\r\n\r\n完整的，长这个样，感觉，挺好，就是要一个这种样子的，就是不知道没有小键盘会不会不习惯，不过那都不是事。\r\n<img class=\"alignnone size-full wp-image-154\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/3236160541.png\" alt=\"3236160541\" width=\"1345\" height=\"938\" />\r\n\r\n好的，重点是：\r\n<img class=\"alignnone size-full wp-image-149\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1567451059.png\" alt=\"1567451059\" width=\"1342\" height=\"953\" />\r\n桌子太小了！！！！！！！\r\n\r\n不过，到目前为止，都挺满意的，敲起来跟飞起来了一样。总体感觉不错，虽然没有玩过其它轴，网吧玩过青轴，但是红轴这个质感确实不错，有一定的声音，直上直下，有弹簧的感觉, 就是感觉shift这个键,有点紧。\r\n\r\n就这样，用着吧，感觉入了这个坑，以后敲普通薄膜键盘都会不顺手了。', '程序员要对自己好一点系列之——人生第一个机械键盘', '', 'publish', 'open', 'open', '', '203', '', '', '2016-10-08 02:46:12', '2016-10-07 18:46:12', '', 0, 'http://www.gzpblog.com/?p=203', 0, 'post', '', 0),
(39, 1, '2016-06-29 14:51:00', '2016-06-29 06:51:00', '<strong>1. php中的 <code>$_SERVER[\"HTTP_REFERER\"]</code></strong>\r\n\r\n获取前一页面的 URL 地址。\r\n\r\n<strong>2. json传值时,ios解析问题</strong>\r\n\r\n某些数组传过去时，ios解析成obj而不是数组。\r\n因为php中索引数组转为array，而关联数组转为obj。\r\n\r\n<strong>3. 一个svn版本：</strong>\r\n<a href=\"http://www.cnblogs.com/rushoooooo/archive/2011/04/29/2032346.html\" target=\"_blank\">http://www.cnblogs.com/rushoooooo/archive/2011/04/29/2032346.html</a>\r\n\r\n<strong>4. 删除文件unlink($delete_img)</strong>\r\n\r\n\r\n[php]\r\n$delete_img = &quot;&quot;//获取原图片路径\r\n&lt;pre&gt;&lt;code&gt;if (file_exists($delete_img))//检测图片是否还在\r\n{\r\n    unlink($delete_img)\r\n}\r\n[/php]\r\n</code></pre>\r\n<strong>5. stdClass object对象</strong>\r\n\r\nstdClass（）可以随时让一个变量成为一个类对象的实例而不需要先声明类才能创建类对象的实例。通过这个方法将数组变成一个对象解析成json传到app端。\r\n创建： \r\n[php]&lt;code&gt;new stdclass();[/php]\r\n</code>\r\n\r\n<strong>6. 获取ip地址</strong>\r\n<pre><code>\r\n[php]\r\nfunction getIP()\r\n{\r\n    static $realip;\r\n    if (isset($_SERVER)){\r\n        if (isset($_SERVER[&quot;HTTP_X_FORWARDED_FOR&quot;])){\r\n            $realip = $_SERVER[&quot;HTTP_X_FORWARDED_FOR&quot;];\r\n        } else if (isset($_SERVER[&quot;HTTP_CLIENT_IP&quot;])) {\r\n            $realip = $_SERVER[&quot;HTTP_CLIENT_IP&quot;];\r\n        } else {\r\n            $realip = $_SERVER[&quot;REMOTE_ADDR&quot;];\r\n        }\r\n    } else {\r\n        if (getenv(&quot;HTTP_X_FORWARDED_FOR&quot;)){\r\n            $realip = getenv(&quot;HTTP_X_FORWARDED_FOR&quot;);\r\n        } else if (getenv(&quot;HTTP_CLIENT_IP&quot;)) {\r\n            $realip = getenv(&quot;HTTP_CLIENT_IP&quot;);\r\n        } else {\r\n            $realip = getenv(&quot;REMOTE_ADDR&quot;);\r\n        } www.111cn.net\r\n    }\r\n    return $realip;\r\n}\r\n[/php]\r\n</code></pre>', '六月工作笔记，php接口相关较多', '', 'publish', 'open', 'open', '', '205', '', '', '2016-10-14 02:22:01', '2016-10-13 18:22:01', '', 0, 'http://www.gzpblog.com/?p=205', 0, 'post', '', 0),
(40, 1, '2016-06-29 17:55:00', '2016-06-29 17:55:00', '<h2>1.linux区分大小写</h2>\n<p>linux严格区分大小写,不管是在哪里。所以很多看不出来的报错其实就是某处一个小小的大小写疏漏。</p>\n<h2>2. 注意读写权限</h2>\n<p>如果没有读写权限，很多程序是无法执行的</p>\n', '初入linux之新手两大坑', '', 'publish', 'open', 'open', '', '208', '', '', '2016-06-29 17:55:00', '2016-06-29 17:55:00', '', 0, 'http://www.gzpblog.com/?p=208', 0, 'post', '', 0),
(41, 1, '2016-07-12 14:19:00', '2016-07-12 14:19:00', '搞了一个基于高德地图Web服务API，关键字搜索服务的东西，先来效果图：\r\n\r\n<a href=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1867581207.png\"><img class=\"alignnone size-full wp-image-158\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1867581207.png\" alt=\"1867581207\" width=\"1112\" height=\"185\" /></a>\r\n\r\n搜索不到内容时：\r\n<a href=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2652457207.png\"><img class=\"alignnone size-full wp-image-161\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2652457207.png\" alt=\"2652457207\" width=\"739\" height=\"129\" /></a>\r\n\r\n接下来是代码，用的Tp框架；前端代码，样式就省略了：\r\n\r\n[html]\r\n城市：&lt;input type=&quot;text&quot; id=&quot;searchPlaceCity&quot; placeholder=&quot;输入城市&quot;&gt;\r\n关键字:&lt;input type=&quot;text&quot; id=&quot;searchPlaceInfo&quot; placeholder=&quot;请输入关键字进行搜索...&quot;&gt;\r\n&lt;a href=&quot;javascript:searchPlace()&quot;&gt;搜索&lt;/a&gt;\r\n[/html]\r\n\r\njs部分代码:\r\n\r\n[js]\r\n&lt;script&gt;\r\n /* 高德地图api获取数据 */\r\n function searchPlace()\r\n {\r\n var ajaxUrl=&quot;{:U(\'Map/searchPlace\')}&quot;;\r\n var keyword= $(&quot;#searchPlaceInfo&quot;).val(); //获取输入的关键字\r\n var city = $(&quot;#searchPlaceCity&quot;).val(); //获取输入的城市\r\n $.post(ajaxUrl,{\'keyword\':keyword,\'city\':city},function(data)\r\n {\r\n $(\'#searchResult\').html(\'\r\n&lt;table id=&quot;searchTable&quot; &gt;\r\n&lt;tr id=&quot;tableTitle&quot;&gt;\r\n&lt;td&gt;名称&lt;/td&gt;\r\n&lt;td&gt;省份/直辖市&lt;/td&gt;\r\n&lt;td&gt;城市/区&lt;/td&gt;\r\n&lt;td&gt;区划/县&lt;/td&gt;\r\n&lt;td&gt;详细地址&lt;/td&gt;\r\n&lt;td&gt;电话&lt;/td&gt;\r\n&lt;td&gt;坐标&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;\r\n\r\n\');\r\n if (jQuery.isArray(data))\r\n {\r\n if (data.length == 0)\r\n {\r\n $(\'#searchTable\').append(\'\r\n&lt;tr&gt;\r\n&lt;td colspan=&quot;7&quot;&gt;搜索不到内容，请尝试其它关键字！&lt;/td&gt;\r\n&lt;/tr&gt;\r\n\r\n\');\r\n }\r\n else\r\n {\r\n $.each(data,function(key,value){\r\n $(\'#searchTable\').append(\'\r\n&lt;tr&gt;\r\n&lt;td&gt;\'+value.name+\'&lt;/td&gt;\r\n&lt;td&gt;\'+value.pname+\'&lt;/td&gt;\r\n&lt;td&gt;\'+value.cityname+\'&lt;/td&gt;\r\n&lt;td&gt;\'+value.adname+\'&lt;/td&gt;\r\n&lt;td&gt;\'+value.address+\'&lt;/td&gt;\r\n&lt;td&gt;\'+value.tel+\'&lt;/td&gt;\r\n&lt;td&gt;\'+value.location+\'&lt;/td&gt;\r\n&lt;/tr&gt;\r\n\r\n\');\r\n });\r\n }\r\n }\r\n else\r\n {\r\n $(\'#searchTable\').append(\'\r\n&lt;tr&gt;\r\n&lt;td colspan=&quot;7&quot;&gt;\'+data+\'&lt;/td&gt;\r\n&lt;/tr&gt;\r\n\r\n\');\r\n }\r\n });\r\n }\r\n&lt;/script&gt;\r\n[/js]\r\n\r\n后台php代码:\r\n\r\n[php]\r\n\r\n&lt;?php namespace Home\\Controller; use Think\\Controller; class MapController extends Controller { public function searchPlace() { $keyword = $_REQUEST[\'keyword\'];//获取keyword $city = $_REQUEST[\'city\']; //获取城市 $url = &quot;http://restapi.amap.com/v3/place/text&quot;; $key = &quot;2f18a06**********************&quot;;//高德开发者帐号给的key $request = $url.\'?key=\'.$key.\'&amp;keywords=\'.$keyword.\'&amp;city=\'.$city; /* 发送请求 */ $get = file_get_contents($request); $result = json_decode($get); $status = $result-&gt;status;//请求状态\r\n$message = $result-&gt;info; //请求返回信息\r\nif($status == 1)//请求成功\r\n{\r\n$pois = $result-&gt;pois; //地理位置信息\r\n$this -&gt; ajaxReturn($pois);\r\n}\r\nelse//请求失败\r\n{\r\n$message = &quot;搜索失败，请尝试其它关键字！&quot;;\r\n$this -&gt; ajaxReturn($message);\r\n}\r\n}\r\n}\r\n\r\n[/php]\r\n\r\n<pre></pre>', 'php地理信息搜索功能——接入高德地图Web服务API，关键字搜索', '', 'publish', 'open', 'open', '', '211', '', '', '2016-10-11 17:46:04', '2016-10-11 09:46:04', '', 0, 'http://www.gzpblog.com/?p=211', 0, 'post', '', 0),
(42, 1, '2016-07-21 14:48:00', '2016-07-21 14:48:00', '最近在接统计的时候,发现现在的主流第三方APP统计并不支持接口接入获取信息,为了不搞得太复杂,决定直接在第三方那边查看统计信息即可。为了方便，我在想怎么把一个站点显示到我的一个div中?\r\n\r\n然后发现，原来就这么简单。我想实现这样的效果：\r\n<img class=\"alignnone size-full wp-image-163\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/399959680.png\" alt=\"399959680\" width=\"1620\" height=\"881\" />\r\n\r\n只需要添加一个:\r\n\r\n[html]\r\n&lt;div&gt;\r\n &lt;iframe src=&quot;https://www.umeng.com/&quot; width=&quot;100%&quot; height=&quot;800px&quot; scrolling=&quot;yes&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;\r\n&lt;/div&gt;\r\n[/html]\r\n\r\n<strong>几个可添加的属性：</strong>\r\n<strong>src</strong>:为嵌入的网页的地址；\r\n<strong>width,height</strong>:为嵌入的网页的宽度和高度，数值越大，范围越大；要隐藏显示嵌入的内容，可把这两个数值设置为 0 ；\r\n<strong>scrolling</strong>:为嵌入的网页的滚动设置，允许滚动为scrolling=\"yes\",设置为\"no\"为不允许滚动;\r\n<strong>ALLOWTRANSPARENCY=\"true\"</strong>:为允许透明设置，把true改为no为不透明；\r\n<strong>frameBorder</strong>:为嵌入的网页的边框设置，0 表示无边框,数值越大边框越粗；\r\n<strong>marginwidth,marginheight</strong>:设置嵌入网页到边距的距离，0 表示无边距。\r\n\r\n其中，主要是<strong>scrolling=\"yes\"</strong>这个，设为yes显示出滚动条。', '网页中局部显示其它站点（div嵌iframe）', '', 'publish', 'open', 'open', '', '215', '', '', '2016-10-08 17:02:56', '2016-10-08 09:02:56', '', 0, 'http://www.gzpblog.com/?p=215', 0, 'post', '', 0),
(43, 1, '2016-07-22 12:12:00', '2016-07-22 12:12:00', 'PHP，自然大多数时间是在与web打交道，当然PHP不仅可以完成B/S架构，也能实现 C/S架构的S部分，就是主要就是用于服务端(server)的开发。\r\n\r\n最近在思考一个问题，安卓，ios那边经常说的crash， 究竟是个什么玩意？系统奔溃是怎么个奔溃法？我们在做web页面的时候自然不会有这样的问题，出错了报个错，排查一下，有时候甚至echo，printr，dump一下刷新几下页面瞅瞅再解决一下就完事了（PHP的神奇之处）。最近在写接口时，发现必须要了解一下这方面的内容，不然接口的问题也是会导致app端直接crash的。\r\n<blockquote>Crash:在正常计算机系统运行过程中，因某种原因宕机，或主机、程序停止工作等情况。</blockquote>\r\ncrash，就是奔溃了，程序崩溃，出错了，在app端是很严重的，一个环节出错，就完了，没有phper想的那么简单。最近看ios和安卓的进行调试，看得我十分蛋疼。错了，重来；错了，重来;错了，重来......\r\n\r\n所以在接口中，如果正常情况返回json（如果是json，现在基本都json了吧）信息，我们要避免的是出错时，返回其它除了json外的错误信息。\r\n<blockquote>在输出JSON 时，不能有任何其它输出，否则，客户端将会获取错误的数据信息，98%直接导致客户端 Crash！</blockquote>\r\n就是说错误信息也是在json中输出。开发API和Web的区别是，如果是Web的话，可能代码出错了，不会导致特别严重的错误，php的话很容易排查,可能是与数据库交互失败了,也可能就是某个地方逻辑运行出错啊等等。但如果是API接口，基本上，客户端直接Crash，然后闪退之类的。\r\n\r\nphp中有这么一个函数：<code>error_reporting(report_level)</code>\r\nreport_level参数有以下这些值:\r\n值 常量 描述\r\n1 E_ERROR 致命的运行时错误。 错误无法恢复过来。脚本的执行被暂停\r\n2 E_WARNING 非致命的运行时错误。 脚本的执行不会停止\r\n4 E_PARSE 编译时解析错误。解析错误应该只由分析器生成\r\n8 E_NOTICE 运行时间的通知。\r\n16 E_CORE_ERROR 在PHP启动时的致命错误。这就好比一个在PHP核心的E_ERROR\r\n32 E_CORE_WARNING 在PHP启动时的非致命的错误。这就好比一个在PHP核心E_WARNING警告\r\n64 E_COMPILE_ERROR 致命的编译时错误。 这就像由Zend脚本引擎生成了一个E_ERROR\r\n128 E_COMPILE_WARNING 非致命的编译时错误，由Zend脚本引擎生成了一个E_WARNING警告\r\n256 E_USER_ERROR 致命的用户生成的错误。\r\n512 E_USER_WARNING 非致命的用户生成的警告。\r\n1024 E_USER_NOTICE 用户生成的通知。\r\n2048 E_STRICT 运行时间的通知。\r\n4096 E_RECOVERABLE_ERROR 捕捉致命的错误。\r\n8191 E_ALL来 所有的错误和警告\r\n\r\n一个来自w3school的例子:\r\n\r\n[php]\r\n&lt;?php\r\n//禁用错误报告\r\nerror_reporting(0);\r\n\r\n//报告运行时错误\r\nerror_reporting(E_ERROR | E_WARNING | E_PARSE);\r\n\r\n//报告所有错误\r\nerror_reporting(E_ALL);\r\n?&gt;\r\n[/php]\r\n\r\n<pre></pre>', '接口探究之——APP端Crash是什么', '', 'publish', 'open', 'open', '', '218', '', '', '2016-10-08 17:01:15', '2016-10-08 09:01:15', '', 0, 'http://www.gzpblog.com/?p=218', 0, 'post', '', 0),
(44, 1, '2016-07-25 09:33:00', '2016-07-25 09:33:00', '如图所示：\r\n<img class=\"alignnone size-full wp-image-159\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2218718646.png\" alt=\"2218718646\" width=\"496\" height=\"185\" />\r\n\r\n其实这是一个挺常见的系统报错，缺乏VC++库。\r\n\r\n我安装的是python3.5.2，这个版本需要的vc版本是2015的了，下载：<a href=\"https://www.microsoft.com/en-us/download/confirmation.aspx?id=52982\" target=\"_blank\">Microsoft Visual C++ 2015</a>\r\n\r\n安装完后就正常了：\r\n<img class=\"alignnone size-full wp-image-160\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2600205519.png\" alt=\"2600205519\" width=\"673\" height=\"438\" />', '首次安装Python后运行报错——0xc000007b', '', 'publish', 'open', 'open', '', '222', '', '', '2016-10-08 02:33:41', '2016-10-07 18:33:41', '', 0, 'http://www.gzpblog.com/?p=222', 0, 'post', '', 1),
(45, 1, '2016-07-26 11:51:00', '2016-07-26 11:51:00', '先看一下w3school的一个例子:\r\n<code></code>\r\n\r\n\r\n[code]\r\n\r\n&gt; SELECT Customer,SUM(OrderPrice) FROM Orders\r\nGROUP BY Customer\r\nHAVING SUM(OrderPrice)&lt;2000[/code]\r\n\r\n\r\n这是一个正确的having子句用法。\r\n\r\n关于having子句的用法，之前一直不太熟悉。但是，随着SQL用得越来越多，其实having子句的需求也是越来越体现出来；人总是在不断的进步与学习的。\r\n\r\n对于having子句的认识，来自于这么一个简单的需求，改了一下上面的sql做个例子:\r\n<code>\r\n\r\n[code]SELECT Customer,SUM(OrderPrice) FROM Orders WHERE SUM(OrderPrice)&lt;2000[/code]\r\n\r\n</code>\r\n这是一个错误的SQL语句，因为where后面的SUM(OrderPrice)&lt;2000是无法实现的，WHERE 关键字无法与合计函数一起使用。就是说SUM()和&lt;的组合在WHERE中无法生效。这个时候就需要用到having子句了。', 'SQL中HAVING子句的用途', '', 'publish', 'open', 'open', '', '223', '', '', '2016-10-08 16:58:33', '2016-10-08 08:58:33', '', 0, 'http://www.gzpblog.com/?p=223', 0, 'post', '', 0),
(46, 1, '2016-07-26 15:06:00', '2016-07-26 15:06:00', '有没有办法做到天天熬夜又不会死太早？\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n<h1>没有</h1>', '有没有办法做到天天熬夜又不会死太早？', '', 'publish', 'open', 'open', '', '224', '', '', '2016-10-08 02:31:39', '2016-10-07 18:31:39', '', 0, 'http://www.gzpblog.com/?p=224', 0, 'post', '', 0),
(47, 1, '2016-07-28 14:27:00', '2016-07-28 14:27:00', '<strong>1. 标题</strong>\r\n<pre><code># 一级标题\r\n## 二级标题\r\n### 三级标题\r\n\r\n</code><strong>2. 列表</strong></pre>\r\n<pre><code>-或者* 无序列表\r\n直接1. 2. 有序列表\r\n\r\n</code><strong>3. 引用</strong></pre>\r\n<pre><code>文本前加入&gt;\r\n\r\n</code><strong>4. 图片与链接</strong></pre>\r\n<pre><code>[baidu](http://www.baidu.com)   链接\r\n![picture](http://www.picture.com/picture.png) 图片\r\n\r\n</code><strong>5. 粗体与斜体</strong></pre>\r\n<pre><code>**文本**  粗体\r\n*文本*    斜体\r\n\r\n</code><strong>6. 表格(typecho好像不支持表格)</strong></pre>\r\n<pre><code>| Tables        | Are           | Cool  |\r\n| ------------- |:-------------:| -----:|\r\n| col 3 is      | right-aligned | $1600 |\r\n| col 2 is      | centered      |   $12 |\r\n| zebra stripes | are neat      |    $1 |\r\n\r\n--右边加:是居右,左边加:是居左,两边都加是居中\r\n\r\n</code><strong>7. 代码</strong></pre>\r\n<pre><code>`code`\r\n</code></pre>\r\n<strong>8. 分割线</strong>\r\n<pre><code>另起一行，连续输入三个星号***\r\n</code></pre>', 'Markdown基础常用语法', '', 'publish', 'open', 'open', '', '230', '', '', '2016-10-08 02:31:00', '2016-10-07 18:31:00', '', 0, 'http://www.gzpblog.com/?p=230', 0, 'post', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(48, 1, '2016-07-28 20:33:00', '2016-07-28 20:33:00', '今天，我无聊用搜狗搜了一下我的博客，当时我就尿了：\r\n<img class=\"alignnone size-full wp-image-162\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/3291208411.png\" alt=\"3291208411\" width=\"478\" height=\"321\" />\r\n\r\n这。。。这。。。这就很尴尬了！搜狗收录的效率极其低就算了，好不容易收了几个页面，竟然还把admin下的登录入口给收了，还排到第二。这让我顿时十分蛋疼。\r\n\r\n通常情况下，后台登陆入口都会在admin下，用typecho的话肯定也就是admin下了，一般就懒得改了，麻烦。而且想我这种个人小博客，也没什么黑的价值。一般情况下搜索引擎都不抓这个页面的，我观察了百度和360都不会抓admin下，搜狗真的是，不知道为啥。\r\n\r\n既然这样，只好把robots.txt加上了（一直忘了加= =！）。\r\nrobots.txt文件写好放到根目录，搜索引擎爬虫抓取时第一时间访问这个文件，然后你告诉它，哪些可以抓，哪些不能抓。其实现在线上工具很方便，最偷懒的办法就是，直接用线上工具生成一下，复制黏贴过来，然后把robots.txt文件上传到网站根目录就可以。\r\n\r\n这里给个链接：<a href=\"http://tool.chinaz.com/robots/\" target=\"_blank\">站长之家robots.txt生成工具</a>\r\n\r\n比如我要屏蔽掉我的网站的admin下的所有东西，生成出来就这样：\r\n<pre><code># robots.txt generated at http://tool.chinaz.com/robots/ \r\nUser-agent: *\r\nDisallow: \r\nDisallow: /admin/\r\nSitemap: http://www.gzpblog.com/sitemap.xml\r\n</code></pre>\r\n创建一个robots.txt文件，粘贴进去，上传到网站根目录就可以了。保证能够正常抓取到就行。\r\n\r\n测试一下能不能抓取，可以，完成，就这样。\r\n<img class=\"alignnone size-full wp-image-157\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1021041937.png\" alt=\"1021041937\" width=\"822\" height=\"371\" />\r\n<img class=\"alignnone size-full wp-image-164\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/840893558.png\" alt=\"840893558\" width=\"811\" height=\"407\" />', '关于站点robots.txt——使用以及必要性', '', 'publish', 'open', 'open', '', '232', '', '', '2016-10-10 01:10:30', '2016-10-09 17:10:30', '', 0, 'http://www.gzpblog.com/?p=232', 0, 'post', '', 3),
(49, 1, '2016-08-03 09:25:00', '2016-08-03 09:25:00', '<strong>1.</strong> 调用函数时,函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”\r\n[python]  &gt;&gt;&gt;a = abs # 变量a指向abs函数\r\n        &gt;&gt;&gt; a(-1) # 所以也可以通过a调用abs函数\r\n    1\r\n[/python]\r\n\r\n<strong>2.</strong> 定义函数:使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号: ，然后，在缩进块中编写函数体，函数的返回值用return 语句返回。\r\n\r\n求绝对值的例子：\r\n[python]    def my_abs(x):\r\n        if x &amp;gt;= 0:\r\n            return x\r\n        else:\r\n            return -x\r\n[/python]\r\n<strong>3.</strong> 空函数\r\n\r\n如果想定义一个什么事也不做的空函数，可以用pass 语句：\r\n[python]    def nop():\r\n        pass\r\n[/python]\r\npass 语句什么都不做，那有什么用？实际上pass 可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass ，让代码能运行起来。\r\n\r\npass 还可以用在其他语句里，比如：\r\n[python]    if age&gt;= 18:\r\n        pass\r\n[/python]\r\n缺少了pass ，代码运行就会有语法错误。\r\n\r\n<strong>4.</strong> 定义函数时参数检查\r\n\r\n数据类型检查可以用内置函数isinstance() 实现.\r\n[python]    def my_abs(x):\r\n    if not isinstance(x, (int, float)):\r\n        raise TypeError(\'bad operand type\')\r\n    if x &amp;gt;= 0:\r\n        return x\r\n    else:\r\n        return -x\r\n[/python]\r\n<strong>5.</strong> 在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。\r\n\r\n例子:\r\n[python]import math\r\ndef move(x, y, step, angle=0):\r\n    nx = x + step * math.cos(angle)\r\n    ny = y - step * math.sin(angle)\r\n    return nx, ny\r\n\r\n&gt;&gt;&gt; x, y = move(100, 100, 60, math.pi / 6)\r\n&gt;&gt;&gt; print(x, y)\r\n151.96152422706632 70.0\r\n\r\n&gt;&gt;&gt; r = move(100, 100, 60, math.pi / 6)\r\n&gt;&gt;&gt; print(r)\r\n(151.96152422706632, 70.0)\r\n[/python]\r\n<strong>6.</strong> 函数执行完毕也没有return 语句时，自动return None 。\r\n\r\n<strong>7.</strong> 定义默认参数要牢记一点：默认参数必须指向不变对象！在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。\r\n\r\n参考学习:<a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\" target=\"_blank\">廖雪峰的官方网站</a>', 'Python学习笔记3——函数', '', 'publish', 'open', 'open', '', '237', '', '', '2016-10-08 16:50:08', '2016-10-08 08:50:08', '', 0, 'http://www.gzpblog.com/?p=237', 0, 'post', '', 2),
(50, 1, '2016-08-17 17:29:00', '2016-08-17 17:29:00', '<strong>1. 切片(Slice)</strong>\r\n\r\n类似于php的substr, 取到哪里并不包括那一个,比如L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。\r\n\r\n[code]\r\n[哪里开始取:取到哪里]\r\n[哪里开始取:取到哪里:每几个取一个]\r\n[:]  原样复制\r\n[/code]\r\n\r\nlist,tuple,string都可以用切片;原来是什么类型,取了之后就是什么类型\r\n\r\n<strong>2. 迭代(Iteration)</strong>\r\n<pre><code>用for循环</code></pre>\r\n\r\n[python]\r\nfor...in:\r\n    ...\r\n    ...\r\n[/python]\r\n\r\n<pre><code>迭代dict时,只迭代key\r\n</code></pre>\r\n\r\n[python]\r\nfor key in d:\r\n    ...\r\n[/python]\r\n\r\n<pre><code>只迭代value\r\n</code></pre>\r\n\r\n[python]\r\nfor value in d.value():\r\n    ...\r\n[/python]\r\n\r\n<pre><code>同时迭代key和value</code></pre>\r\n\r\n[python]\r\nfor k, v in d.items():\r\n    ...\r\n[/python]\r\n\r\n判断一个对象是否可迭代对象,用collections模块的iterable类型判断:\r\n\r\n[python]\r\n&gt;&gt;&gt;from collections import Iterable\r\n&gt;&gt;&gt;isinstance(\'abc\', Iterable) # str是否可迭代\r\nTrue\r\n&gt;&gt;&gt;isinstance([1,2,3], Iterable) # list是否可迭代\r\nTrue\r\n&gt;&gt;&gt;isinstance(123, Iterable) # 整数是否可迭代\r\nFalse\r\n[/python]\r\n\r\n字符串也是可迭代对象;任何可迭代对象都可以作用于for循环，包括我们自定义的数据类型，只要符合迭代条件，就可以使用for循环。\r\n\r\n<strong>3.列表(list)生成式 (List Comprehensions)</strong>\r\n\r\n[code]\r\n&gt;&gt;&gt;list(range(1, 11))\r\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n&gt;&gt;&gt; [x * x for x in range(1, 11)]\r\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\r\n&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0]\r\n[4, 16, 36, 64, 100]\r\n&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0]\r\n[4, 16, 36, 64, 100]\r\n&gt;&gt;&gt; [m + n for m in \'ABC\' for n in \'XYZ\']\r\n[\'AX\', \'AY\', \'AZ\', \'BX\', \'BY\', \'BZ\', \'CX\', \'CY\', \'CZ\']\r\n\r\n&gt;&gt;&gt; d = {\'x\': \'A\', \'y\': \'B\', \'z\': \'C\' }\r\n&gt;&gt;&gt; [k + \'=\' + v for k, v in d.items()]\r\n[\'y=B\', \'x=A\', \'z=C\']\r\n&gt;&gt;&gt; L = [\'Hello\', \'World\', \'IBM\', \'Apple\']\r\n&gt;&gt;&gt; [s.lower() for s in L]\r\n[\'hello\', \'world\', \'ibm\', \'apple\']\r\n[/code]\r\n\r\n列出当前目录下的所有文件和目录名，可以通过一行代码实现：\r\n\r\n[code]\r\n&gt;&gt;&gt; import os # 导入os模块，模块的概念后面讲到\r\n&gt;&gt;&gt; [d for d in os.listdir(\'.\')] # os.listdir可以列出文件和目录\r\n[\'.emacs.d\', \'.ssh\', \'.Trash\', \'Adlm\', \'Applications\', \'Desktop\', \'Documents\', \'Downloads\', \'Library\', \'Movies\', \'Music\', \'Pictures\', \'Public\', \'VirtualBox VMs\', \'Workspace\', \'XCode\']\r\n[/code]\r\n\r\n<strong>4. 生成器(generator)</strong>\r\n\r\n如果列表元素可以按照某种算法推算出来,不创建整个列表,一边循环一边计算.\r\n\r\n创建一个生成器:\r\n\r\n1). 把一个列表生成式的[]改成()，就创建了一个generator\r\n例:\r\n\r\n[python]\r\n&gt;&gt;&gt; L = [x * x for x in range(10)]\r\n&gt;&gt;&gt; L\r\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\r\n&gt;&gt;&gt; g = (x * x for x in range(10))\r\n&gt;&gt;&gt; g\r\n[/python]\r\n\r\n如果要一个一个打印出生成器的元素，可以通过next()函数获得generator的下一个返回值,generator是可迭代对象:\r\n\r\n[python]\r\n&gt;&gt;&gt; g = (x * x for x in range(10))\r\n&gt;&gt;&gt; for n in g:\r\n...     print(n)\r\n... \r\n0\r\n1\r\n4\r\n9\r\n16\r\n25\r\n36\r\n49\r\n64\r\n81\r\n[/python]\r\n\r\n2). 如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数\r\n\r\n[python]\r\ndef fib(max):\r\n    n, a, b = 0, 0, 1\r\n    while n &amp;amp;amp;lt; max:\r\n        yield b\r\n        a, b = b, a + b\r\n        n = n + 1\r\n    return \'done\'\r\n[/python]\r\n\r\ngenerator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行\r\n\r\n但是用for循环调用generator时，发现拿不到generator的return语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中：\r\n\r\n[python]\r\n&gt;&gt;&gt; g = fib(6)\r\n&gt;&gt;&gt; while True:\r\n...     try:\r\n...         x = next(g)\r\n...         print(\'g:\', x)\r\n...     except StopIteration as e:\r\n...         print(\'Generator return value:\', e.value)\r\n...         break\r\n...\r\ng: 1\r\ng: 1\r\ng: 2\r\ng: 3\r\ng: 5\r\ng: 8\r\nGenerator return value: done\r\n[/python]\r\n\r\n<strong>5. 迭代器(Iterator)</strong>\r\n\r\n可以直接作用于for循环的数据类型有以下几种：\r\n\r\n一类是集合数据类型，如list、tuple、dict、set、str等；\r\n\r\n一类是generator，包括生成器和带yield的generator function。\r\n\r\n这些可以直接作用于for循环的对象统称为可迭代对象：Iterable。\r\n\r\n而生成器不但可以作用于for循环，还可以被next()函数不断调用并返回下一个值，直到最后抛出StopIteration错误表示无法继续返回下一个值了。\r\n\r\n可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。\r\n\r\n生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。\r\n\r\n把list、dict、str等Iterable变成Iterator可以使用iter()函数：\r\n\r\n[python]\r\n&gt;&gt;&gt; isinstance(iter([]), Iterator)\r\nTrue\r\n&gt;&gt;&gt; isinstance(iter(\'abc\'), Iterator)\r\nTrue\r\n[/python]\r\n\r\nPython的for循环本质上就是通过不断调用next()函数实现的\r\n\r\n总结记录自:<a href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317568446245b3e1c8837414168bcd2d485e553779e000\" target=\"_blank\">聊雪峰的官方网站-python教程</a>:', 'Python学习笔记4——高级特性', '', 'publish', 'open', 'open', '', '249', '', '', '2016-10-08 16:38:21', '2016-10-08 08:38:21', '', 0, 'http://www.gzpblog.com/?p=249', 0, 'post', '', 0),
(51, 1, '2016-08-23 13:39:00', '2016-08-23 13:39:00', 'PHP中对数组的处理是最常用的必备技能之一。自己总结了一下几个最常用的处理数组的高级函数。\r\n<h3>1. array_merge()</h3>\r\n合并数组，将一个或多个数组的单元合并起来，一个数组中的值附加在前一个数组的后面，最后返回一个数组。\r\n关联数组:有相同的字符串键名时，则该键名后面的值将覆盖前一个值\r\n索引数组:后面的值将不会覆盖原来的值，而是附加到后面\r\n<pre><code>array array_merge (array array1 array2…,arrayN)  \r\n</code></pre>\r\n例子：\r\n\r\n[php]\r\n&lt;?php \r\n$a = array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;); \r\n$b = array(&quot;1&quot;,&quot;2&quot;,&quot;3&quot;); \r\n$c = array_merge($a, $b); \r\nprint_r($c); \r\n \r\n// 输出结果\r\n// Array ( [0] =&amp;gt; a [1] =&amp;gt; b [2] =&amp;gt; c [3] =&amp;gt; 1 [4] =&amp;gt; 2 [5] =&amp;gt; 3 ) \r\n?&gt;;\r\n\r\n[/php]\r\n\r\n<h3>2. array_merge_recursive()</h3>\r\n功能同array_merge()，只不过遇到相同值时处理方式不同\r\n关联数组：有相同的字符串键名时，则该键值变成一个数组，将相同键值放在一个数组里\r\n\r\n[php]\r\n&lt;?php \r\n$a = array(&quot;a&quot; =&amp;gt; &quot;123&quot;, &quot;b&quot; =&amp;gt; &quot;yes&quot;); \r\n$b = array(&quot;c&quot; =&amp;gt; &quot;no&quot;, &quot;a&quot; =&amp;gt; &quot;aaa&quot;); \r\n$d = array_merge_recursive($a, $b); \r\nprint_r($d); \r\n \r\n// 输出结果 \r\n// Array ( [a] =&amp;gt; Array ( [0] =&amp;gt; 123 [1] =&amp;gt; aaa ) [b] =&amp;gt; yes [c] =&amp;gt; no ) \r\n?&gt; \r\n[/php]\r\n\r\n<h3>3. array_slice()</h3>\r\n拆分索引数组,类似于substr()的用法, offset开始切,切length这么多个, 不设置length则是切到尾\r\n<pre><code>array array_slice (array array, int offset[,int length])  \r\n</code></pre>\r\n\r\n[php]\r\n&lt;?php \r\n \r\n$a = array(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;); \r\n$b = array_slice($a, 3); \r\nprint_r($b); \r\n \r\n// 输出 \r\n// Array ( [0] =&amp;gt; D [1] =&amp;gt; E [2] =&amp;gt; F [3] =&amp;gt; G ) \r\n?&gt;\r\n[/php]\r\n\r\n<h3>4. array_multisort()</h3>\r\n返回排序数组:\r\n<pre><code>array_multisort(array1,sorting order,sorting type,array2,array3...)\r\n</code></pre>\r\n这个函数功能很强大,有几个用法:\r\n\r\n<strong>1) 直接进行排序</strong>\r\n\r\n[php]\r\n&lt;?php\r\n$a1=array(&quot;Dog&quot;,&quot;Cat&quot;);\r\n$a2=array(&quot;Fido&quot;,&quot;Missy&quot;);\r\narray_multisort($a1,$a2);\r\nprint_r($a1);\r\nprint_r($a2);\r\n\r\n// Array ( [0] =&gt; Cat [1] =&gt; Dog ) Array ( [0] =&gt; Missy [1] =&gt; Fido )\r\n?&gt;\r\n[/php]\r\n\r\n<strong>2) 设置排序方式进行排序</strong>\r\n\r\n[php]\r\n&lt;?php\r\n/* 设置倒序正序 */\r\n$a1=array(&quot;Dog&quot;,&quot;Dog&quot;,&quot;Cat&quot;);\r\n$a2=array(&quot;Pluto&quot;,&quot;Fido&quot;,&quot;Missy&quot;);\r\narray_multisort($a1,SORT_ASC,$a2,SORT_DESC);\r\nprint_r($a1);\r\nprint_r($a2);\r\n\r\n// Array ( [0] =&gt; Cat [1] =&gt; Dog [2] =&gt; Dog ) Array ( [0] =&gt; Missy [1] =&gt; Pluto [2] =&gt; Fido )\r\n\r\n/* 设置倒序正序,排序标准 */\r\n$a1=array(1,30,15,7,25);\r\n$a2=array(4,30,20,41,66);\r\n$num=array_merge($a1,$a2);\r\narray_multisort($num,SORT_DESC,SORT_NUMERIC);\r\nprint_r($num);\r\n\r\n// Array ( [0] =&gt; 66 [1] =&gt; 41 [2] =&gt; 30 [3] =&gt; 30 [4] =&gt; 25 [5] =&gt; 20 [6] =&gt; 15 [7] =&gt; 7 [8] =&gt; 4 [9] =&gt; 1 )\r\n?&gt;\r\n[/php]\r\n\r\n<strong>3) 二维数组根据某键值进行排序</strong>\r\n\r\n[php]\r\n&lt;?php\r\n/* time为要排序字段, SORT_DESC降序排列, $all要排序的数组 */\r\nforeach ($all as $k =&gt; $v)\r\n{\r\n$time[] = $v[\'time\'];\r\n}\r\narray_multisort($time, SORT_DESC, $all);\r\n?&gt;\r\n[/php]\r\n\r\n<h3>5. array_intersect()和array_intersect_assoc()</h3>\r\narray_intersect()返回一个保留了键的数组，这个数组只由第一个数组中出现的且在其他每个输入数组中都出现的值组成。\r\narray_intersect_assoc()返回一个在第一个数组中出现，且在所有其他输入数组中也出现的键/值对组成的数组。\r\n应用场景: 共同好友推荐\r\n\r\n[php]\r\n\r\n&lt;?php\r\n$a = array(&quot;Kevin&quot;,&quot;Mike&quot;,&quot;Jone&quot;);\r\n$b = array(&quot;Jack&quot;,&quot;Kevin&quot;,&quot;Anna&quot;);\r\n$c = array(&quot;Steven&quot;,&quot;Json&quot;,&quot;Kevin&quot;);\r\n$output = array_intersect($a, $b, $c);\r\nprint_r($output);\r\n\r\n// output\r\n// Array ( [0] =&gt; Kevin )\r\n?&gt;\r\n\r\n[/php]\r\n\r\n<pre></pre>', 'PHP处理数组常用高级函数', '', 'publish', 'open', 'open', '', '251', '', '', '2016-10-10 00:57:15', '2016-10-09 16:57:15', '', 0, 'http://www.gzpblog.com/?p=251', 0, 'post', '', 0),
(52, 1, '2016-09-14 15:16:00', '2016-09-14 15:16:00', '<p>科技发展真是上了天一般，稍微一不留神，就与这时代的列车脱轨了。</p>\n<p>依稀记得小时候，趴在地上看报纸，报纸上说，电动汽车将在十年之后出现，那时候心里想着：车还能用电啊，老牛逼了！啥时候有啊！一心的期盼。</p>\n<p>那一年，微博才刚刚开始，而我，拿着诺基亚手机，刷着wap版微博。高二高三那段时间，每天放学回家晚上睡觉前，趟在床上，看看又有哪位明星加入了微博。大嘴姚晨盘踞粉丝榜第一；神奇的李开复；章子怡一如既往的稀土部队不加V；等等都是我茶余饭后无聊时打发的回忆。</p>\n<p>那一年，我依旧拿着诺基亚手机，用UC玩着传说中的网页版网游，点一下造兵造坦克，点一下出击攻城。只不过，玩的都是文字。</p>\n<p>那一年，iPhone横空出世。iPhone的价格，使得手握一台苹果，是多么的高逼格。</p>\n<p>那几年，互联网发展的速度，远比我们想的要快得多。而我们，一不留神，就脱轨了。</p>\n<p>大学报考志愿，心怀着对计算机的渴望的翅膀扑腾扑腾，却被父母拍了下来。环境科学，一个在我还没入学时心中的印象是跟园林相关一类的专业，进去后发现要学生物，学化学，学生物化学，学能源等等。</p>\n<p>因为性格的原因，话少，死宅。死宅到什么程度？有一次基友约我出去吃寿司。<br />\n“走啊走啊。我买美团券！四人餐，超便宜！”<br />\n“吃得饱？”<br />\n“四人餐啊！”<br />\n“对啊，不是团购吗！不是一个意思！”<br />\n那时候的我，对于美团这一类软件，毫无概念。理论上，宅家里应该更对APP更熟才对？因为没事下软件玩一玩？但是我却没有。在日益取代PC端的移动端面前，我毫无概念。一方面，移动端app逐渐走进生活日常，出去浪更能接触常用app，而死宅只能对着电脑自娱自乐了；再一个，那时候的我还停留在手机只要能打电话发短信玩微信就行了的阶段，所以我买的手机是便宜的，省钱，高端黑科技与我又毫无关联了。经济基础和时代观念成为了与时代接轨的要素，而我只能庆幸自己是最早注册微信的用户之一，以至于不会当别人问我微信时还不知道微信是什么鬼而报了QQ号。</p>\n<p>那时候的我，对未来没有任何的概念，迷茫。可能跟很多大学生一样，迷茫。在环境科学这一块，其实兴趣并不大，我甚至想象不出将来毕业后的场景。在当今中国，所谓的环保重视是很有限的，说环境科学要火也是有限的，因为经济不管怎么都是第一要素，环境治理是基于经济发展的，经济倒退何来钱去治理。即使环境重视起来了，也是一门小众学科，环境治理不可能让所有人停下手上的工作，而只需要一批人去做就行。当然，36行行行出状元也是对的，走环境这条路也一样，不管走什么路，有心去做努力就能做好，不管如何问心无愧。四年了，环境科学也没见就火起来了，柴静也救不了你。也许，是因为，我的兴趣点，偏了。</p>\n<p>毕业后的我，果然，转行了。毫无防备，毫无征兆，顺其自然地，走上了IT的路子。一个从未接触过的领域，而且是技术类的领域，我竟一点也不怂，相反，这段时间的工作中，感觉特别充实，总是莫名其妙地上班下班一天就过去了。</p>\n<p>当然，人是要有追求的，不能单纯地当一个快乐的码农，要往更高的方向瞅一瞅（当然快乐的码农也没错，人各有志）。不要永远等着老司机来带你，列车一直在开，挤不挤得上，看本事了。</p>\n', '这世界不止眼前的苟且，还有诗和远方', '', 'publish', 'open', 'open', '', '254', '', '', '2016-09-14 15:16:00', '2016-09-14 15:16:00', '', 0, 'http://www.gzpblog.com/?p=254', 0, 'post', '', 0),
(53, 1, '2016-09-05 08:17:00', '2016-09-05 08:17:00', '<img class=\"alignnone size-full wp-image-166\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/777808097.jpg\" alt=\"777808097\" width=\"600\" height=\"256\" />\r\n\r\n自Google X成立以来，这个全世界最神秘的实验室曾多次给我们带来了技术上的震撼，这其中就包括无人驾驶汽车、Google Glass 这些有着划时代意义的产品。据介绍，“Google X”实验室内部列举了100项未来高科技的创意清单，并持续追踪、研究这些创新技术的最新进展。\r\n\r\n由于从技术研发到实现商业化这一过程中，需要巨大的人力物力以及资金支持，对此，业内人士预言，Google X 对于谷歌而言将会是一个巨大的赌注，既有可能成为谷歌的下一个大商机，也有可能会是巨大的失败。\r\n\r\n今年年初， 谷歌开始对Google X进行结构重组并更换了全新的Logo，同时表示将会采取商业化的运作方式，将一些具有前瞻性的项目转化为可行性业务。对于这一调整。业内人表示，重要项目上的失败是此次调整的主要原因。这些项目的失败，也让谷歌意识到需要将商业化作为项目开展的重要考虑因素。那么过去几年里，Google X都有哪些“失败”项目呢？\r\n<h2>太空电梯</h2>\r\n<img class=\"alignnone size-full wp-image-171\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/3863321313.jpg\" alt=\"3863321313\" width=\"560\" height=\"339\" />\r\n\r\n建造一个太空电梯一直是Google创始人及其它硅谷企业家的梦想，Google X提出的这种太空天梯能够将信息和物品送到太空。从理论上说，它需要一根电缆固定在地球上，从而实现不需要火箭的太空旅行。\r\n\r\n但是，由于“太空电梯”项目对材料强度要求太高，以至于比目前人类制造出的最结实的钢材还要高出几百倍，所以Google短时间内还找不到可用的材料；其次，就算有一种碳纳米管可以达到他们的要求，但人类目前用这种材料制造出的线缆也不能超过一米。所以，最终Google只好暂时性地冻结了这个项目。\r\n<h2>悬滑板</h2>\r\n<img class=\"alignnone size-full wp-image-168\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1731264397.jpg\" alt=\"1731264397\" width=\"448\" height=\"252\" />\r\n\r\n该项目的主要目的是让物体可以悬浮在空中并根据需要能够任意移动。由于悬浮之后物体间的摩擦力就消失了，这样人们就可以轻松地移动笨重的物体，在工业制造及仓储领域的用处是极大的。\r\n\r\n不过想达到目的不是一件容易事，虽然人们可以用磁铁的特性将物体悬浮起来，但由于磁铁是有磁极的，所以并不能让物体随意地向各个方向移动。在解决这个问题的过程中，Google X实验室的工作人员找到了一种特殊的石墨，可以在某种程度上达到项目要求的效果，但由于花费和其能带来的效用不成比例，以及可能因环境变化而引发未知的风险，所以这个项目最终也被搁置了。\r\n<h2>隐形传输</h2>\r\n<img class=\"alignnone size-full wp-image-169\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1816564950.jpg\" alt=\"1816564950\" width=\"500\" height=\"375\" />\r\n\r\nGoogle X实验室曾设想借助一些特殊的扫描技术和设备，让人和物品可以瞬间移动。这个名为“teleportation”（隐形传输）的研究项目，却由于伦理问题最终被放弃。因为该技术的实现原理是在传输之前必须彻底摧毁原有的物体，并在目的地重组成一模一样的物体（好吓人！），这是违反物理学定律的。所以这个项目自然也就不了了之。\r\n<h2>Google Fiber</h2>\r\n<img class=\"alignnone size-full wp-image-170\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/2966484317.jpg\" alt=\"2966484317\" width=\"640\" height=\"334\" />\r\n\r\n正如雷锋网(搜索“雷锋网”公众号关注)之前报道过，Google Fiber计划于2010年宣布，按照此前的构想，谷歌光纤项目将能够提供比正常网络速度快100倍的超高速互联网服务，而且用户使用起来似乎很便宜。\r\n\r\n在过去的几年中，谷歌一直在与10多个城市和社区合作，以此打造光纤基础设施，从而为千家万户提供千兆比特速度的网络服务——让用户能够即时上传流视频或在几秒钟之内下载完整的影片。\r\n\r\n当然，所有的这一切都需要时间和资金。据《华尔街日报》的消息，事实上，谷歌已经为这些项目花费了数亿美元的资金，而且此服务目前只能在6个大城市中有效，相当于每年扩展一座城市。\r\n\r\n由于成本过于高昂，已经远远超出谷歌的预期，这项举措也在遭遇挫折，最近，Google fiber也正进行大裁员，并且谷歌已经暂停了向加州圣何塞市，以及俄勒冈州波特兰市提供光纤服务的计划。谷歌正考虑利用更加廉价的方法为人们提供服务，比如利用无线技术。\r\n<h2>自动化立体农业</h2>\r\n<img class=\"alignnone size-full wp-image-165\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/717950664.jpg\" alt=\"717950664\" width=\"640\" height=\"448\" />\r\n\r\n谷歌称，在这个星球上 9 个人里面就有 1 个人营养不良，因此Google X希望在这方面能够有所贡献。Google X提出的立体农业的用水量是传统作业的十分之一，占地也只有传统方式的百分之一，而且种植的食物可毗邻消费地，免去了长途运输问题。Google X已经在许多问题上都取得了进展，比如自动收割、高效照明等，但最终由于无法用这种方式培育出谷物、稻米等主要作物，所以最后这个项目也被毙掉了。\r\n<h2>谷歌眼镜</h2>\r\n<img class=\"alignnone size-full wp-image-167\" src=\"http://www.gzpblog.com/wp-content/uploads/2016/10/1109755314.jpg\" alt=\"1109755314\" width=\"550\" height=\"270\" />\r\n\r\n作为Google X 研发出的著名产品，Google Glass在发布之初，就展现了智能眼镜主导人类未来的蓝图。但是由于产品定位上不明确，以及Google Glass高昂的售价和闭塞的渠道对消费者和开发者非常不友好，种种原因导致了谷歌最终停滞了这个项目。\r\n\r\n“失败文化”一直是Google X的信条之一，在这里谷歌半路夭折的项目不在少数。不过，它同样孕育了不少成功的产品，比如无人驾驶汽车和智能隐形眼镜，也许在未来这个神秘的实验室真的能够成为谷歌改变世界的秘密武器。当然，在这些创意转化为实际的路上仍然面临着不小的阻力，但是就像他们所说的那样，“如果接受不了失败，那么你也承受不起卓越。”\r\n\r\n来源: 雷锋网\r\n原文: <a href=\"http://www.leiphone.com/news/201608/uXIE5aOZxwJy4EUz.html\" target=\"_blank\">万万没想到，Google X 实验室竟然有这么多不靠谱的项目</a>', 'Google X 实验室竟然有这么多不靠谱的项目', '', 'publish', 'open', 'open', '', '256', '', '', '2016-10-08 02:24:12', '2016-10-07 18:24:12', '', 0, 'http://www.gzpblog.com/?p=256', 0, 'post', '', 0),
(54, 1, '2016-09-20 10:52:00', '2016-09-20 10:52:00', '就是一个普通的表单验证提交：\r\n\r\n[code]&lt;input type=&quot;botton&quot; &lt;/code&gt;&lt;code&gt;onclick=&quot;javascript:checkUserInfo()&quot;&lt;/code&gt;&lt;code&gt;/&gt;[/code]\r\n\r\n&nbsp;\r\n\r\ncheckUserInfo()是一个jquery验证方法，错误返回false。问题在于：返回false后表单提交。\r\n\r\n发现只需要把：\r\n\r\n[code]onclick=&quot;checkUserInfo()&quot;[/code]\r\n\r\n改成：\r\n\r\n[code]onclick=&quot;return checkUserInfo()&quot;[/code]\r\n\r\n返回false的时候就可以阻止表单提交了。', 'Jquery表单验证后失败时不提交', '', 'publish', 'open', 'open', '', '264', '', '', '2016-10-13 12:03:24', '2016-10-13 04:03:24', '', 0, 'http://www.gzpblog.com/?p=264', 0, 'post', '', 0),
(55, 1, '2016-09-29 00:49:00', '2016-09-29 00:49:00', '最近据说有一件事在开发者间引起了地震， 就是微信小程序。\r\n“小程序”？\r\n<blockquote>小程序是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或者搜一下即可打开应用。也体现了“用完即走”的理念，用户不用关心是否安装太多应用的问题。应用将无处不在，随时可用，但又无需安装卸载。</blockquote>\r\n张小龙是这么解释的，那么意思是这种模式要颠覆传统的APP模式，将最近非常火的H5更推向一个新高度。相当于将H5更深入的扎根于微信的一连串生态中。使用微信一个APP即可免去下载其它乱七八糟的APP，这对于不同开发者来说就复杂了，但是对于小型企业来说受益也很大。\r\n\r\n我关注这么几个问题：\r\n\r\n1 如果小程序广泛推广起来，小程序会将原来的微信无可替代的地位强化为不可撼动的神级地位，其它互联网大佬们买单吗？\r\n\r\n2. 所有的应用使用者都会习惯于放弃原有生态而依赖于微信吗？\r\n\r\n3 企业们会在前景未知的情况下，愿意将未来的发展方向转移到微信这块上来以减少开发投入吗？\r\n\r\n4 支付宝开始收手续费，小程序可以轻松调用微信支付这一点非常适合高效率开发微信电商，未来移动电子支付版图是否改写？\r\n\r\n5 小程序的开放是否会使微信变得鱼龙混杂,而使原来的社交应用变了味?\r\n\r\n6 前端程序员收益多大？安卓，iOS受影响多大？\r\n\r\n7 执着于社交应用不放弃的阿里，或者说支付宝，后续会有动作吗？\r\n\r\n8 更高权限的各种权限应用产生后是否带来安全性问题？\r\n\r\n9 微信朋友圈是否会被微商更大程度影响生态？\r\n\r\n其实，我一直以来，都觉得微信是一款做得挺不错的产品，真的腾讯的所有产品中，就觉得微信做得比较不错。腾讯用qq，微信抢先连续打通两条用户通道一直以来都带来了极大的好处，而且才有了后续发展和如今地位。\r\n\r\n这次的小程序，又会带来什么影响呢？持续关注。', '微信小程序——未来将如何颠覆?', '', 'publish', 'open', 'open', '', '266', '', '', '2016-10-08 02:15:11', '2016-10-07 18:15:11', '', 0, 'http://www.gzpblog.com/?p=266', 0, 'post', '', 0),
(56, 1, '2016-09-30 16:08:00', '2016-09-30 08:08:00', '现在的一个状况是，PHP懂个基础，可以独立开发一个后台，APP接口，进行数据库操作，写点简单js。但是，都是最基础的操作，用最简单的方式实现功能，没有太多性能啊之类上的考虑，以目前的知识也无法考虑到，毕竟接触编程也不久，所以现在急于提升自己。\r\n\r\n虽然说，有些基础东西的东西也还没有彻底打扎实，但是总觉得这是一个过程，慢慢打就扎实了，所以还是觉得学点新技术比较好。但是问题来了，每当下班回到家坐在电脑前的时候，想学点东西，却不知道该从哪里开始。这时候发现了制定一个学习计划的重要性。所以列了一个清单，准备一条一条来，当然之后可能会调整，没关系，先照这个开始：\r\n<h3>PHP相关：</h3>\r\n1. 熟悉正则表达式，并能写正则。\r\n\r\n2. 如何使php代码更严谨。\r\n\r\n3. php实现冒泡排序，选择排序，插入排序和快速排序。\r\n\r\n4. 深入理解mysql数据库防sql注入。\r\n\r\n5. php开发之网站安全(SQL注入、验证码、刷新提交、漏洞扫描、DOS攻击、跨域攻击)\r\n\r\n6. 命名空间的探究，和高级功能。\r\n\r\n7. 魔术方法的应用；写实例。\r\n\r\n8. 序列化 (Serialize/Unserialize) 研究，与json的比较\r\n\r\n9. 自己封装一些常用的功能类：分页类；验证码类；图像处理类；文件上传类；数据验证类。\r\n\r\n10. php加密方法探究。\r\n\r\n11. api接口安全性问题(加密等)\r\n\r\n12. 影响mysql中innodb/myisam性能的配置选项。\r\n\r\n13. 索引探究：MyISAM与InnoDB的区别；MyISAM的主键索引和其它索引的区别；InnoDB的主键索引和其它索引的区别。\r\n\r\n14. php应用mysql事务；写实例。\r\n\r\n15. php文件“高级”操作。\r\n\r\n16. PHP“高级”图像操作。\r\n\r\n17. PHP设计模式。\r\n\r\n18. PHP SPL（标准库）使用。\r\n\r\n19. 深入了解HTTP协议。\r\n\r\n20. 了解浏览器的运行机制。\r\n\r\n21. AB并发测试与调优。\r\n\r\n22. 认识key-value存储系统（mencache，redis）\r\n\r\n23. 学习如何使用memcache\r\n\r\n24. 学习如何使用redis\r\n\r\n25. memcache与redis比较\r\n\r\n26. 了解Memcached的内存结构(slab机制)，redis了解常用数据类型底层实现存储结构(SDS/链表/SkipList/HashTable)等等。\r\n\r\n27. 了解一下Redis的事务、RDB、AO\r\n\r\n28. 什么是消息队列，如何实现消息队列。\r\n\r\n29. PHP+memcache实现消息队列\r\n\r\n30. 用php+redis实现消息队列\r\n\r\n31. php的缓存\r\n\r\n32. 用memcache和redis实现php缓存操作\r\n\r\n33. 什么是分布式架构，分布式与集群的区别，以及分布式如何实现。\r\n\r\n34. 了解mongodb，以及在php上的应用。\r\n\r\n35. 学习使用mongodb\r\n\r\n36. mongodb，redis，memcache比较。\r\n\r\n37. 什么是哈希算法？\r\n\r\n38. 一致性哈希的应用\r\n\r\n39. PHP hashTbale\r\n\r\n40. 什么是Socket编程，学习Socket编程。\r\n\r\n41. 编写php简单的Socket通信实例\r\n\r\n42. 学习Laravel框架\r\n\r\n43. 了解php-fpm的大部分配置选项和含义\r\n\r\n44. MySQL的核心关键技术，比如事务机制(隔离级别、锁等)、对触发器、 分区等技术。\r\n\r\n45. MySQL性能选项：innodb_log_buffer_size/back_log/table_open_cache/thread_cache_size/innodb_lock_wait_timeout等。\r\n\r\n46. MySQL性能：磁盘优化(SAS迁移到SSD)、服务器优化(内存、服务器本身配置)、连接池软件选择应用\r\n\r\n47. MySQL备份技术的深入熟悉，包括灾备 还原、对Binlog的深入理解，冷热备份，多IDC备份等\r\n\r\n48. Redis进阶：做一些复杂的数据结构的应用(zset做排行榜排序操作/事务处理用来保证原子性在秒杀类场景应用之类的使用操作)\r\n\r\n49. 一个高可用的Redis应用架构和集群\r\n\r\n50. php服务器压力测试和性能测试探究\r\n\r\n51. SQL优化总结\r\n\r\n52. 如何架构一个PHP高并发高负载系统\r\n\r\n53. 架构与部署(ECS、RDS、OCS、OSS、SLB)的研究\r\n<h3>其它相关：</h3>\r\n1. 学会搭建LAMP环境\r\n\r\n2. 不断熟悉linux下的操作命令\r\n\r\n3. 尝试svn和git\r\n\r\n4. 熟悉python\r\n\r\n5. 第一步：会用python写爬虫\r\n\r\n6. 学习shell编程\r\n\r\n7. 用shell小一些小脚本\r\n\r\n8. 学会用PS搞一些简单小东西\r\n\r\n9. 学习Node.js\r\n\r\n10. 学习React\r\n\r\n11. 学习React Native\r\n\r\n&nbsp;', '咸鱼要翻身——未来我的学习计划', '', 'publish', 'open', 'open', '', '267', '', '', '2016-10-29 00:59:39', '2016-10-28 16:59:39', '', 0, 'http://www.gzpblog.com/?p=267', 0, 'post', '', 0),
(489, 1, '2016-11-09 17:16:28', '2016-11-09 09:16:28', '方法：检查用户的agent字符串，它是浏览器发送的HTTP请求的一部分。用 $_SERVER[\'HTTP_USER_AGENT\']得到agent字符串信息。\r\n\r\n比如：\r\n\r\n[php]\r\n&lt;?php\r\n    echo $_SERVER[\'HTTP_USER_AGENT\'];\r\n?&gt;\r\n[/php]\r\n\r\n有可能是打印出这样的：\r\n\r\n[php]\r\n\r\nMozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\n\r\n[/php]\r\n\r\n&nbsp;\r\n\r\n封装成函数：\r\n\r\n[php]\r\nfunction my_get_browser(){\r\n    if(empty($_SERVER[\'HTTP_USER_AGENT\'])){\r\n        return \'robot！\';\r\n    }\r\n    if( (false == strpos($_SERVER[\'HTTP_USER_AGENT\'],\'MSIE\')) &amp;&amp; (strpos($_SERVER[\'HTTP_USER_AGENT\'], \'Trident\')!==FALSE) ){\r\n        return \'Internet Explorer 11.0\';\r\n    }\r\n    if(false!==strpos($_SERVER[\'HTTP_USER_AGENT\'],\'MSIE 10.0\')){\r\n        return \'Internet Explorer 10.0\';\r\n    }\r\n    if(false!==strpos($_SERVER[\'HTTP_USER_AGENT\'],\'MSIE 9.0\')){\r\n        return \'Internet Explorer 9.0\';\r\n    }\r\n    if(false!==strpos($_SERVER[\'HTTP_USER_AGENT\'],\'MSIE 8.0\')){\r\n        return \'Internet Explorer 8.0\';\r\n    }\r\n    if(false!==strpos($_SERVER[\'HTTP_USER_AGENT\'],\'MSIE 7.0\')){\r\n        return \'Internet Explorer 7.0\';\r\n    }\r\n    if(false!==strpos($_SERVER[\'HTTP_USER_AGENT\'],\'MSIE 6.0\')){\r\n        return \'Internet Explorer 6.0\';\r\n    }\r\n    if(false!==strpos($_SERVER[\'HTTP_USER_AGENT\'],\'Edge\')){\r\n        return \'Edge\';\r\n    }\r\n    if(false!==strpos($_SERVER[\'HTTP_USER_AGENT\'],\'Firefox\')){\r\n        return \'Firefox\';\r\n    }\r\n    if(false!==strpos($_SERVER[\'HTTP_USER_AGENT\'],\'Chrome\')){\r\n        return \'Chrome\';\r\n    }\r\n    if(false!==strpos($_SERVER[\'HTTP_USER_AGENT\'],\'Safari\')){\r\n        return \'Safari\';\r\n    }\r\n    if(false!==strpos($_SERVER[\'HTTP_USER_AGENT\'],\'Opera\')){\r\n        return \'Opera\';\r\n    }\r\n    if(false!==strpos($_SERVER[\'HTTP_USER_AGENT\'],\'360SE\')){\r\n        return \'360SE\';\r\n    }\r\n     //微信浏览器\r\n    if(false!==strpos($_SERVER[\'HTTP_USER_AGENT\'],\'MicroMessage\')){\r\n        return \'MicroMessage\';\r\n    }&gt;\r\n}\r\n[/php]\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'php检查浏览页面的访问者在用什么浏览器', '', 'publish', 'open', 'open', '', 'php%e6%a3%80%e6%9f%a5%e6%b5%8f%e8%a7%88%e9%a1%b5%e9%9d%a2%e7%9a%84%e8%ae%bf%e9%97%ae%e8%80%85%e5%9c%a8%e7%94%a8%e4%bb%80%e4%b9%88%e6%b5%8f%e8%a7%88%e5%99%a8', '', '', '2016-11-09 21:16:24', '2016-11-09 13:16:24', '', 0, 'http://www.gzpblog.com/?p=489', 0, 'post', '', 0),
(61, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', '', '首页', '', 'publish', 'closed', 'closed', '', '%e9%a6%96%e9%a1%b5', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 0, 'http://www.gzpblog.com/?p=61', 1, 'nav_menu_item', '', 0),
(62, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '62', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 0, 'http://www.gzpblog.com/?p=62', 42, 'nav_menu_item', '', 0),
(63, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '63', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 0, 'http://www.gzpblog.com/?p=63', 43, 'nav_menu_item', '', 0),
(64, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '64', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 71, 'http://www.gzpblog.com/?p=64', 30, 'nav_menu_item', '', 0),
(65, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '65', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 11, 'http://www.gzpblog.com/?p=65', 32, 'nav_menu_item', '', 0),
(66, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '66', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 10, 'http://www.gzpblog.com/?p=66', 17, 'nav_menu_item', '', 0),
(67, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '67', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 18, 'http://www.gzpblog.com/?p=67', 27, 'nav_menu_item', '', 0),
(68, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '68', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 10, 'http://www.gzpblog.com/?p=68', 15, 'nav_menu_item', '', 0),
(69, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '69', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 10, 'http://www.gzpblog.com/?p=69', 16, 'nav_menu_item', '', 0),
(70, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '70', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 11, 'http://www.gzpblog.com/?p=70', 33, 'nav_menu_item', '', 0),
(71, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '71', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 5, 'http://www.gzpblog.com/?p=71', 7, 'nav_menu_item', '', 0),
(72, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '72', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 3, 'http://www.gzpblog.com/?p=72', 3, 'nav_menu_item', '', 0),
(73, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '73', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 0, 'http://www.gzpblog.com/?p=73', 2, 'nav_menu_item', '', 0),
(74, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '74', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 0, 'http://www.gzpblog.com/?p=74', 6, 'nav_menu_item', '', 0),
(75, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '75', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 3, 'http://www.gzpblog.com/?p=75', 4, 'nav_menu_item', '', 0),
(76, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '76', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 4, 'http://www.gzpblog.com/?p=76', 13, 'nav_menu_item', '', 0),
(77, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '77', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 5, 'http://www.gzpblog.com/?p=77', 10, 'nav_menu_item', '', 0),
(78, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '78', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 7, 'http://www.gzpblog.com/?p=78', 8, 'nav_menu_item', '', 0),
(79, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '79', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 11, 'http://www.gzpblog.com/?p=79', 34, 'nav_menu_item', '', 0),
(80, 1, '2016-10-08 00:36:51', '2016-10-07 16:36:51', ' ', '', '', 'publish', 'closed', 'closed', '', '80', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 4, 'http://www.gzpblog.com/?p=80', 26, 'nav_menu_item', '', 0),
(82, 1, '2016-10-08 00:36:52', '2016-10-07 16:36:52', ' ', '', '', 'publish', 'closed', 'closed', '', '82', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 3, 'http://www.gzpblog.com/?p=82', 5, 'nav_menu_item', '', 0),
(83, 1, '2016-10-08 00:36:52', '2016-10-07 16:36:52', ' ', '', '', 'publish', 'closed', 'closed', '', '83', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 4, 'http://www.gzpblog.com/?p=83', 14, 'nav_menu_item', '', 0),
(84, 1, '2016-10-08 00:36:52', '2016-10-07 16:36:52', ' ', '', '', 'publish', 'closed', 'closed', '', '84', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 5, 'http://www.gzpblog.com/?p=84', 11, 'nav_menu_item', '', 0),
(85, 1, '2016-10-08 00:36:52', '2016-10-07 16:36:52', ' ', '', '', 'publish', 'closed', 'closed', '', '85', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 4, 'http://www.gzpblog.com/?p=85', 31, 'nav_menu_item', '', 0),
(86, 1, '2016-10-08 00:36:52', '2016-10-07 16:36:52', ' ', '', '', 'publish', 'closed', 'closed', '', '86', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 0, 'http://www.gzpblog.com/?p=86', 12, 'nav_menu_item', '', 0),
(88, 1, '2016-10-08 00:59:56', '2016-10-07 16:59:56', '', 'bitbug_favicon (1)', '', 'inherit', 'open', 'closed', '', 'bitbug_favicon-1', '', '', '2016-10-08 00:59:56', '2016-10-07 16:59:56', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/bitbug_favicon-1.ico', 0, 'attachment', 'image/x-icon', 0),
(87, 1, '2016-10-08 00:46:15', '2016-10-07 16:46:15', ' ', '', '', 'publish', 'closed', 'closed', '', '87', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 11, 'http://www.gzpblog.com/?p=87', 35, 'nav_menu_item', '', 0),
(89, 1, '2016-10-08 01:06:48', '2016-10-07 17:06:48', '', '2wei', '', 'inherit', 'open', 'closed', '', '2wei', '', '', '2016-10-08 01:06:48', '2016-10-07 17:06:48', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2wei.jpg', 0, 'attachment', 'image/jpeg', 0),
(90, 1, '2016-10-08 01:06:49', '2016-10-07 17:06:49', '', 'logo.jpg', '', 'inherit', 'open', 'closed', '', 'logo-jpg', '', '', '2016-10-08 01:06:49', '2016-10-07 17:06:49', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/logo.jpg.jpg', 0, 'attachment', 'image/jpeg', 0),
(91, 1, '2016-10-08 01:21:02', '2016-10-07 17:21:02', '', '145737461', '', 'inherit', 'open', 'closed', '', '145737461', '', '', '2016-10-08 01:29:31', '2016-10-07 17:29:31', '', 6, 'http://www.gzpblog.com/wp-content/uploads/2016/10/145737461.jpg', 0, 'attachment', 'image/jpeg', 0),
(92, 1, '2016-10-08 01:21:02', '2016-10-07 17:21:02', '', '177819186', '', 'inherit', 'open', 'closed', '', '177819186', '', '', '2016-10-08 01:25:36', '2016-10-07 17:25:36', '', 6, 'http://www.gzpblog.com/wp-content/uploads/2016/10/177819186.jpg', 0, 'attachment', 'image/jpeg', 0),
(93, 1, '2016-10-08 01:21:03', '2016-10-07 17:21:03', '', '191073368', '', 'inherit', 'open', 'closed', '', '191073368', '', '', '2016-10-08 01:30:07', '2016-10-07 17:30:07', '', 6, 'http://www.gzpblog.com/wp-content/uploads/2016/10/191073368.jpg', 0, 'attachment', 'image/jpeg', 0),
(94, 1, '2016-10-08 01:21:04', '2016-10-07 17:21:04', '', '212284596', '', 'inherit', 'open', 'closed', '', '212284596', '', '', '2016-10-08 01:21:04', '2016-10-07 17:21:04', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/212284596.png', 0, 'attachment', 'image/png', 0),
(95, 1, '2016-10-08 01:21:05', '2016-10-07 17:21:05', '', '231732575', '', 'inherit', 'open', 'closed', '', '231732575', '', '', '2016-10-08 01:32:25', '2016-10-07 17:32:25', '', 6, 'http://www.gzpblog.com/wp-content/uploads/2016/10/231732575.jpg', 0, 'attachment', 'image/jpeg', 0),
(96, 1, '2016-10-08 01:21:05', '2016-10-07 17:21:05', '', '442536786', '', 'inherit', 'open', 'closed', '', '442536786', '', '', '2016-10-08 01:31:25', '2016-10-07 17:31:25', '', 6, 'http://www.gzpblog.com/wp-content/uploads/2016/10/442536786.jpg', 0, 'attachment', 'image/jpeg', 0),
(97, 1, '2016-10-08 01:21:06', '2016-10-07 17:21:06', '', '503852648', '', 'inherit', 'open', 'closed', '', '503852648', '', '', '2016-10-08 01:32:40', '2016-10-07 17:32:40', '', 6, 'http://www.gzpblog.com/wp-content/uploads/2016/10/503852648.jpg', 0, 'attachment', 'image/jpeg', 0),
(98, 1, '2016-10-08 01:21:06', '2016-10-07 17:21:06', '', '636966948', '', 'inherit', 'open', 'closed', '', '636966948', '', '', '2016-10-08 01:30:27', '2016-10-07 17:30:27', '', 6, 'http://www.gzpblog.com/wp-content/uploads/2016/10/636966948.jpg', 0, 'attachment', 'image/jpeg', 0),
(99, 1, '2016-10-08 01:21:07', '2016-10-07 17:21:07', '', '1095480201', '', 'inherit', 'open', 'closed', '', '1095480201', '', '', '2016-10-08 01:26:38', '2016-10-07 17:26:38', '', 6, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1095480201.jpg', 0, 'attachment', 'image/jpeg', 0),
(100, 1, '2016-10-08 01:21:07', '2016-10-07 17:21:07', '', '1505568065', '', 'inherit', 'open', 'closed', '', '1505568065', '', '', '2016-10-08 01:32:08', '2016-10-07 17:32:08', '', 6, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1505568065.jpg', 0, 'attachment', 'image/jpeg', 0),
(101, 1, '2016-10-08 01:21:08', '2016-10-07 17:21:08', '', '1932857986', '', 'inherit', 'open', 'closed', '', '1932857986', '', '', '2016-10-08 01:21:08', '2016-10-07 17:21:08', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1932857986.png', 0, 'attachment', 'image/png', 0),
(102, 1, '2016-10-08 01:21:09', '2016-10-07 17:21:09', '', '2527315217', '', 'inherit', 'open', 'closed', '', '2527315217', '', '', '2016-10-08 01:29:11', '2016-10-07 17:29:11', '', 6, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2527315217.jpg', 0, 'attachment', 'image/jpeg', 0),
(103, 1, '2016-10-08 01:21:09', '2016-10-07 17:21:09', '', '2748039769', '', 'inherit', 'open', 'closed', '', '2748039769', '', '', '2016-10-08 01:31:41', '2016-10-07 17:31:41', '', 6, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2748039769.jpg', 0, 'attachment', 'image/jpeg', 0),
(104, 1, '2016-10-08 01:21:10', '2016-10-07 17:21:10', '', '2878285641', '', 'inherit', 'open', 'closed', '', '2878285641', '', '', '2016-10-08 01:36:51', '2016-10-07 17:36:51', '', 7, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2878285641.png', 0, 'attachment', 'image/png', 0),
(105, 1, '2016-10-08 01:21:11', '2016-10-07 17:21:11', '', '3158687516', '', 'inherit', 'open', 'closed', '', '3158687516', '', '', '2016-10-08 01:36:21', '2016-10-07 17:36:21', '', 7, 'http://www.gzpblog.com/wp-content/uploads/2016/10/3158687516.png', 0, 'attachment', 'image/png', 0),
(107, 1, '2016-10-08 01:21:12', '2016-10-07 17:21:12', '', '3658389805', '', 'inherit', 'open', 'closed', '', '3658389805', '', '', '2016-10-08 01:35:52', '2016-10-07 17:35:52', '', 7, 'http://www.gzpblog.com/wp-content/uploads/2016/10/3658389805.png', 0, 'attachment', 'image/png', 0),
(108, 1, '2016-10-08 01:21:13', '2016-10-07 17:21:13', '', '4051746677', '', 'inherit', 'open', 'closed', '', '4051746677', '', '', '2016-10-08 01:28:55', '2016-10-07 17:28:55', '', 6, 'http://www.gzpblog.com/wp-content/uploads/2016/10/4051746677.jpg', 0, 'attachment', 'image/jpeg', 0),
(109, 1, '2016-10-08 01:21:13', '2016-10-07 17:21:13', '', '4099657754', '', 'inherit', 'open', 'closed', '', '4099657754', '', '', '2016-10-08 01:30:59', '2016-10-07 17:30:59', '', 6, 'http://www.gzpblog.com/wp-content/uploads/2016/10/4099657754.jpg', 0, 'attachment', 'image/jpeg', 0),
(110, 1, '2016-10-08 01:21:14', '2016-10-07 17:21:14', '', '4108902883', '', 'inherit', 'open', 'closed', '', '4108902883', '', '', '2016-10-08 01:30:42', '2016-10-07 17:30:42', '', 6, 'http://www.gzpblog.com/wp-content/uploads/2016/10/4108902883.jpg', 0, 'attachment', 'image/jpeg', 0),
(111, 1, '2016-10-08 01:21:14', '2016-10-07 17:21:14', '', '4261596487', '', 'inherit', 'open', 'closed', '', '4261596487', '', '', '2016-10-08 01:28:29', '2016-10-07 17:28:29', '', 6, 'http://www.gzpblog.com/wp-content/uploads/2016/10/4261596487.jpg', 0, 'attachment', 'image/jpeg', 0),
(112, 1, '2016-10-08 01:21:23', '2016-10-07 17:21:23', '', '31446533', '', 'inherit', 'open', 'closed', '', '31446533', '', '', '2016-10-10 00:50:55', '2016-10-09 16:50:55', '', 15, 'http://www.gzpblog.com/wp-content/uploads/2016/10/31446533.png', 0, 'attachment', 'image/png', 0),
(113, 1, '2016-10-08 01:21:24', '2016-10-07 17:21:24', '', '53396810', '', 'inherit', 'open', 'closed', '', '53396810', '', '', '2016-10-08 02:05:34', '2016-10-07 18:05:34', '', 11, 'http://www.gzpblog.com/wp-content/uploads/2016/10/53396810.png', 0, 'attachment', 'image/png', 0),
(114, 1, '2016-10-08 01:21:28', '2016-10-07 17:21:28', '', '947229738', '', 'inherit', 'open', 'closed', '', '947229738', '', '', '2016-10-08 03:02:13', '2016-10-07 19:02:13', '', 14, 'http://www.gzpblog.com/wp-content/uploads/2016/10/947229738.gif', 0, 'attachment', 'image/gif', 0),
(115, 1, '2016-10-08 01:21:29', '2016-10-07 17:21:29', '', '1119564827', '', 'inherit', 'open', 'closed', '', '1119564827', '', '', '2016-10-08 02:05:17', '2016-10-07 18:05:17', '', 11, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1119564827.png', 0, 'attachment', 'image/png', 0),
(116, 1, '2016-10-08 01:21:36', '2016-10-07 17:21:36', '', '1269685963', '', 'inherit', 'open', 'closed', '', '1269685963', '', '', '2016-10-08 02:57:58', '2016-10-07 18:57:58', '', 18, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1269685963.png', 0, 'attachment', 'image/png', 0),
(117, 1, '2016-10-08 01:21:38', '2016-10-07 17:21:38', '', '1474477264', '', 'inherit', 'open', 'closed', '', '1474477264', '', '', '2016-10-08 02:57:47', '2016-10-07 18:57:47', '', 18, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1474477264.png', 0, 'attachment', 'image/png', 0),
(118, 1, '2016-10-08 01:21:39', '2016-10-07 17:21:39', '', '1763035875', '', 'inherit', 'open', 'closed', '', '1763035875', '', '', '2016-10-08 02:56:26', '2016-10-07 18:56:26', '', 18, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1763035875.jpg', 0, 'attachment', 'image/jpeg', 0),
(119, 1, '2016-10-08 01:21:40', '2016-10-07 17:21:40', '', '1946475855', '', 'inherit', 'open', 'closed', '', '1946475855', '', '', '2016-10-10 00:50:28', '2016-10-09 16:50:28', '', 15, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1946475855.png', 0, 'attachment', 'image/png', 0),
(120, 1, '2016-10-08 01:21:41', '2016-10-07 17:21:41', '', '2152528169', '', 'inherit', 'open', 'closed', '', '2152528169', '', '', '2016-10-08 02:57:16', '2016-10-07 18:57:16', '', 18, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2152528169.jpg', 0, 'attachment', 'image/jpeg', 0),
(121, 1, '2016-10-08 01:21:41', '2016-10-07 17:21:41', '', '2255649394', '', 'inherit', 'open', 'closed', '', '2255649394', '', '', '2016-10-08 02:04:41', '2016-10-07 18:04:41', '', 11, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2255649394.png', 0, 'attachment', 'image/png', 0),
(122, 1, '2016-10-08 01:21:44', '2016-10-07 17:21:44', '', '2593195352', '', 'inherit', 'open', 'closed', '', '2593195352', '', '', '2016-10-08 02:57:28', '2016-10-07 18:57:28', '', 18, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2593195352.jpg', 0, 'attachment', 'image/jpeg', 0),
(123, 1, '2016-10-08 01:21:47', '2016-10-07 17:21:47', '', '2595756476', '', 'inherit', 'open', 'closed', '', '2595756476', '', '', '2016-10-08 02:56:51', '2016-10-07 18:56:51', '', 18, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2595756476.jpg', 0, 'attachment', 'image/jpeg', 0),
(124, 1, '2016-10-08 01:21:51', '2016-10-07 17:21:51', '', '2705660894', '', 'inherit', 'open', 'closed', '', '2705660894', '', '', '2016-10-10 00:47:23', '2016-10-09 16:47:23', '', 16, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2705660894.png', 0, 'attachment', 'image/png', 0),
(125, 1, '2016-10-08 01:21:53', '2016-10-07 17:21:53', '', '2760593199', '', 'inherit', 'open', 'closed', '', '2760593199', '', '', '2016-10-08 02:57:03', '2016-10-07 18:57:03', '', 18, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2760593199.jpg', 0, 'attachment', 'image/jpeg', 0),
(126, 1, '2016-10-08 01:21:54', '2016-10-07 17:21:54', '', '3115824438', '', 'inherit', 'open', 'closed', '', '3115824438', '', '', '2016-10-08 02:56:42', '2016-10-07 18:56:42', '', 18, 'http://www.gzpblog.com/wp-content/uploads/2016/10/3115824438.jpg', 0, 'attachment', 'image/jpeg', 0),
(127, 1, '2016-10-08 01:21:55', '2016-10-07 17:21:55', '', '3119391764', '', 'inherit', 'open', 'closed', '', '3119391764', '', '', '2016-10-08 02:01:36', '2016-10-07 18:01:36', '', 10, 'http://www.gzpblog.com/wp-content/uploads/2016/10/3119391764.png', 0, 'attachment', 'image/png', 0),
(128, 1, '2016-10-08 01:21:55', '2016-10-07 17:21:55', '', '3961432814', '', 'inherit', 'open', 'closed', '', '3961432814', '', '', '2016-10-08 03:02:25', '2016-10-07 19:02:25', '', 14, 'http://www.gzpblog.com/wp-content/uploads/2016/10/3961432814.png', 0, 'attachment', 'image/png', 0),
(129, 1, '2016-10-08 01:21:56', '2016-10-07 17:21:56', '', '4143100091', '', 'inherit', 'open', 'closed', '', '4143100091', '', '', '2016-10-08 02:05:00', '2016-10-07 18:05:00', '', 11, 'http://www.gzpblog.com/wp-content/uploads/2016/10/4143100091.png', 0, 'attachment', 'image/png', 0),
(130, 1, '2016-10-08 01:22:09', '2016-10-07 17:22:09', '', '331199711', '', 'inherit', 'open', 'closed', '', '331199711', '', '', '2016-10-08 02:55:05', '2016-10-07 18:55:05', '', 20, 'http://www.gzpblog.com/wp-content/uploads/2016/10/331199711.jpg', 0, 'attachment', 'image/jpeg', 0),
(131, 1, '2016-10-08 01:22:09', '2016-10-07 17:22:09', '', '718198307', '', 'inherit', 'open', 'closed', '', '718198307', '', '', '2016-10-08 02:52:11', '2016-10-07 18:52:11', '', 27, 'http://www.gzpblog.com/wp-content/uploads/2016/10/718198307.png', 0, 'attachment', 'image/png', 0),
(132, 1, '2016-10-08 01:22:11', '2016-10-07 17:22:11', '', '915657141', '', 'inherit', 'open', 'closed', '', '915657141', '', '', '2016-10-08 02:55:45', '2016-10-07 18:55:45', '', 20, 'http://www.gzpblog.com/wp-content/uploads/2016/10/915657141.jpg', 0, 'attachment', 'image/jpeg', 0),
(133, 1, '2016-10-08 01:22:11', '2016-10-07 17:22:11', '', '926381641', '', 'inherit', 'open', 'closed', '', '926381641', '', '', '2016-10-10 00:28:09', '2016-10-09 16:28:09', '', 19, 'http://www.gzpblog.com/wp-content/uploads/2016/10/926381641.png', 0, 'attachment', 'image/png', 0),
(134, 1, '2016-10-08 01:22:12', '2016-10-07 17:22:12', '', '1482183358', '', 'inherit', 'open', 'closed', '', '1482183358', '', '', '2016-10-08 02:54:54', '2016-10-07 18:54:54', '', 20, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1482183358.jpg', 0, 'attachment', 'image/jpeg', 0),
(135, 1, '2016-10-08 01:22:13', '2016-10-07 17:22:13', '', '1652754813', '', 'inherit', 'open', 'closed', '', '1652754813', '', '', '2016-10-08 02:51:58', '2016-10-07 18:51:58', '', 27, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1652754813.png', 0, 'attachment', 'image/png', 0),
(136, 1, '2016-10-08 01:22:14', '2016-10-07 17:22:14', '', '2323188462', '', 'inherit', 'open', 'closed', '', '2323188462', '', '', '2016-10-10 00:29:03', '2016-10-09 16:29:03', '', 19, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2323188462.png', 0, 'attachment', 'image/png', 0),
(137, 1, '2016-10-08 01:22:14', '2016-10-07 17:22:14', '', '2409789491', '', 'inherit', 'open', 'closed', '', '2409789491', '', '', '2016-10-08 02:51:51', '2016-10-07 18:51:51', '', 27, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2409789491.png', 0, 'attachment', 'image/png', 0),
(138, 1, '2016-10-08 01:22:15', '2016-10-07 17:22:15', '', '2505066357', '', 'inherit', 'open', 'closed', '', '2505066357', '', '', '2016-10-10 00:28:33', '2016-10-09 16:28:33', '', 19, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2505066357.png', 0, 'attachment', 'image/png', 0),
(139, 1, '2016-10-08 01:22:16', '2016-10-07 17:22:16', '', '2573520395', '', 'inherit', 'open', 'closed', '', '2573520395', '', '', '2016-10-08 02:51:37', '2016-10-07 18:51:37', '', 27, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2573520395.png', 0, 'attachment', 'image/png', 0),
(140, 1, '2016-10-08 01:22:16', '2016-10-07 17:22:16', '', '3002222694', '', 'inherit', 'open', 'closed', '', '3002222694', '', '', '2016-10-08 02:54:03', '2016-10-07 18:54:03', '', 21, 'http://www.gzpblog.com/wp-content/uploads/2016/10/3002222694.jpg', 0, 'attachment', 'image/jpeg', 0),
(141, 1, '2016-10-08 01:22:17', '2016-10-07 17:22:17', '', '3523161483', '', 'inherit', 'open', 'closed', '', '3523161483', '', '', '2016-10-08 02:54:38', '2016-10-07 18:54:38', '', 20, 'http://www.gzpblog.com/wp-content/uploads/2016/10/3523161483.jpg', 0, 'attachment', 'image/jpeg', 0),
(142, 1, '2016-10-08 01:22:18', '2016-10-07 17:22:18', '', '4030579334', '', 'inherit', 'open', 'closed', '', '4030579334', '', '', '2016-10-08 02:55:58', '2016-10-07 18:55:58', '', 20, 'http://www.gzpblog.com/wp-content/uploads/2016/10/4030579334.jpg', 0, 'attachment', 'image/jpeg', 0),
(143, 1, '2016-10-08 01:22:18', '2016-10-07 17:22:18', '', '4106656255', '', 'inherit', 'open', 'closed', '', '4106656255', '', '', '2016-10-08 02:55:32', '2016-10-07 18:55:32', '', 20, 'http://www.gzpblog.com/wp-content/uploads/2016/10/4106656255.jpg', 0, 'attachment', 'image/jpeg', 0),
(144, 1, '2016-10-08 01:22:22', '2016-10-07 17:22:22', '', '1129067328', '', 'inherit', 'open', 'closed', '', '1129067328', '', '', '2016-10-08 02:50:05', '2016-10-07 18:50:05', '', 30, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1129067328.png', 0, 'attachment', 'image/png', 0),
(145, 1, '2016-10-08 01:22:23', '2016-10-07 17:22:23', '', '1398985470', '', 'inherit', 'open', 'closed', '', '1398985470', '', '', '2016-10-10 00:22:16', '2016-10-09 16:22:16', '', 34, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1398985470.png', 0, 'attachment', 'image/png', 0),
(146, 1, '2016-10-08 01:22:23', '2016-10-07 17:22:23', '', '3581344272', '', 'inherit', 'open', 'closed', '', '3581344272', '', '', '2016-10-10 00:22:50', '2016-10-09 16:22:50', '', 34, 'http://www.gzpblog.com/wp-content/uploads/2016/10/3581344272.png', 0, 'attachment', 'image/png', 0),
(147, 1, '2016-10-08 01:22:24', '2016-10-07 17:22:24', '', '3775035113', '', 'inherit', 'open', 'closed', '', '3775035113', '', '', '2016-10-08 02:50:21', '2016-10-07 18:50:21', '', 30, 'http://www.gzpblog.com/wp-content/uploads/2016/10/3775035113.png', 0, 'attachment', 'image/png', 0),
(148, 1, '2016-10-08 01:22:25', '2016-10-07 17:22:25', '', '4069227203', '', 'inherit', 'open', 'closed', '', '4069227203', '', '', '2016-10-10 00:23:08', '2016-10-09 16:23:08', '', 34, 'http://www.gzpblog.com/wp-content/uploads/2016/10/4069227203.png', 0, 'attachment', 'image/png', 0),
(149, 1, '2016-10-08 01:22:40', '2016-10-07 17:22:40', '', '1567451059', '', 'inherit', 'open', 'closed', '', '1567451059', '', '', '2016-10-08 02:46:04', '2016-10-07 18:46:04', '', 38, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1567451059.png', 0, 'attachment', 'image/png', 0),
(150, 1, '2016-10-08 01:22:45', '2016-10-07 17:22:45', '', '1824703186', '', 'inherit', 'open', 'closed', '', '1824703186', '', '', '2016-10-08 02:44:55', '2016-10-07 18:44:55', '', 38, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1824703186.png', 0, 'attachment', 'image/png', 0),
(151, 1, '2016-10-08 01:22:51', '2016-10-07 17:22:51', '', '2033684534', '', 'inherit', 'open', 'closed', '', '2033684534', '', '', '2016-10-08 02:45:37', '2016-10-07 18:45:37', '', 38, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2033684534.png', 0, 'attachment', 'image/png', 0),
(152, 1, '2016-10-08 01:22:54', '2016-10-07 17:22:54', '', '2449832473', '', 'inherit', 'open', 'closed', '', '2449832473', '', '', '2016-10-08 01:22:54', '2016-10-07 17:22:54', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2449832473.png', 0, 'attachment', 'image/png', 0),
(153, 1, '2016-10-08 01:22:57', '2016-10-07 17:22:57', '', '2636851374', '', 'inherit', 'open', 'closed', '', '2636851374', '', '', '2016-10-08 02:45:22', '2016-10-07 18:45:22', '', 38, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2636851374.png', 0, 'attachment', 'image/png', 0),
(154, 1, '2016-10-08 01:23:05', '2016-10-07 17:23:05', '', '3236160541', '', 'inherit', 'open', 'closed', '', '3236160541', '', '', '2016-10-08 02:45:50', '2016-10-07 18:45:50', '', 38, 'http://www.gzpblog.com/wp-content/uploads/2016/10/3236160541.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(155, 1, '2016-10-08 01:23:09', '2016-10-07 17:23:09', '', '3834160044', '', 'inherit', 'open', 'closed', '', '3834160044', '', '', '2016-10-08 02:44:38', '2016-10-07 18:44:38', '', 38, 'http://www.gzpblog.com/wp-content/uploads/2016/10/3834160044.png', 0, 'attachment', 'image/png', 0),
(156, 1, '2016-10-08 01:23:15', '2016-10-07 17:23:15', '', '4134043583', '', 'inherit', 'open', 'closed', '', '4134043583', '', '', '2016-10-08 01:23:15', '2016-10-07 17:23:15', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/4134043583.png', 0, 'attachment', 'image/png', 0),
(157, 1, '2016-10-08 01:23:21', '2016-10-07 17:23:21', '', '1021041937', '', 'inherit', 'open', 'closed', '', '1021041937', '', '', '2016-10-08 02:28:12', '2016-10-07 18:28:12', '', 48, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1021041937.png', 0, 'attachment', 'image/png', 0),
(158, 1, '2016-10-08 01:23:22', '2016-10-07 17:23:22', '', '1867581207', '', 'inherit', 'open', 'closed', '', '1867581207', '', '', '2016-10-08 02:42:05', '2016-10-07 18:42:05', '', 41, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1867581207.png', 0, 'attachment', 'image/png', 0),
(159, 1, '2016-10-08 01:23:23', '2016-10-07 17:23:23', '', '2218718646', '', 'inherit', 'open', 'closed', '', '2218718646', '', '', '2016-10-08 02:33:25', '2016-10-07 18:33:25', '', 44, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2218718646.png', 0, 'attachment', 'image/png', 0),
(160, 1, '2016-10-08 01:23:23', '2016-10-07 17:23:23', '', '2600205519', '', 'inherit', 'open', 'closed', '', '2600205519', '', '', '2016-10-08 02:33:36', '2016-10-07 18:33:36', '', 44, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2600205519.png', 0, 'attachment', 'image/png', 0),
(161, 1, '2016-10-08 01:23:24', '2016-10-07 17:23:24', '', '2652457207', '', 'inherit', 'open', 'closed', '', '2652457207', '', '', '2016-10-08 02:42:13', '2016-10-07 18:42:13', '', 41, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2652457207.png', 0, 'attachment', 'image/png', 0),
(162, 1, '2016-10-08 01:23:24', '2016-10-07 17:23:24', '', '3291208411', '', 'inherit', 'open', 'closed', '', '3291208411', '', '', '2016-10-08 02:27:52', '2016-10-07 18:27:52', '', 48, 'http://www.gzpblog.com/wp-content/uploads/2016/10/3291208411.png', 0, 'attachment', 'image/png', 0),
(163, 1, '2016-10-08 01:23:26', '2016-10-07 17:23:26', '', '399959680', '', 'inherit', 'open', 'closed', '', '399959680', '', '', '2016-10-08 02:34:47', '2016-10-07 18:34:47', '', 42, 'http://www.gzpblog.com/wp-content/uploads/2016/10/399959680.png', 0, 'attachment', 'image/png', 0),
(164, 1, '2016-10-08 01:23:27', '2016-10-07 17:23:27', '', '840893558', '', 'inherit', 'open', 'closed', '', '840893558', '', '', '2016-10-08 02:28:28', '2016-10-07 18:28:28', '', 48, 'http://www.gzpblog.com/wp-content/uploads/2016/10/840893558.png', 0, 'attachment', 'image/png', 0),
(165, 1, '2016-10-08 01:23:34', '2016-10-07 17:23:34', '', '717950664', '', 'inherit', 'open', 'closed', '', '717950664', '', '', '2016-10-08 02:23:55', '2016-10-07 18:23:55', '', 53, 'http://www.gzpblog.com/wp-content/uploads/2016/10/717950664.jpg', 0, 'attachment', 'image/jpeg', 0),
(166, 1, '2016-10-08 01:23:35', '2016-10-07 17:23:35', '', '777808097', '', 'inherit', 'open', 'closed', '', '777808097', '', '', '2016-10-08 02:22:39', '2016-10-07 18:22:39', '', 53, 'http://www.gzpblog.com/wp-content/uploads/2016/10/777808097.jpg', 0, 'attachment', 'image/jpeg', 0),
(167, 1, '2016-10-08 01:23:35', '2016-10-07 17:23:35', '', '1109755314', '', 'inherit', 'open', 'closed', '', '1109755314', '', '', '2016-10-08 02:24:09', '2016-10-07 18:24:09', '', 53, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1109755314.jpg', 0, 'attachment', 'image/jpeg', 0),
(168, 1, '2016-10-08 01:23:36', '2016-10-07 17:23:36', '', '1731264397', '', 'inherit', 'open', 'closed', '', '1731264397', '', '', '2016-10-08 02:23:12', '2016-10-07 18:23:12', '', 53, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1731264397.jpg', 0, 'attachment', 'image/jpeg', 0),
(169, 1, '2016-10-08 01:23:37', '2016-10-07 17:23:37', '', '1816564950', '', 'inherit', 'open', 'closed', '', '1816564950', '', '', '2016-10-08 02:23:25', '2016-10-07 18:23:25', '', 53, 'http://www.gzpblog.com/wp-content/uploads/2016/10/1816564950.jpg', 0, 'attachment', 'image/jpeg', 0),
(170, 1, '2016-10-08 01:23:37', '2016-10-07 17:23:37', '', '2966484317', '', 'inherit', 'open', 'closed', '', '2966484317', '', '', '2016-10-08 02:23:40', '2016-10-07 18:23:40', '', 53, 'http://www.gzpblog.com/wp-content/uploads/2016/10/2966484317.jpg', 0, 'attachment', 'image/jpeg', 0),
(171, 1, '2016-10-08 01:23:38', '2016-10-07 17:23:38', '', '3863321313', '', 'inherit', 'open', 'closed', '', '3863321313', '', '', '2016-10-08 02:22:55', '2016-10-07 18:22:55', '', 53, 'http://www.gzpblog.com/wp-content/uploads/2016/10/3863321313.jpg', 0, 'attachment', 'image/jpeg', 0),
(240, 1, '2016-10-08 03:34:10', '2016-10-07 19:34:10', '折腾了好久，终于转完了，又转回了WordPress。之前嫌弃WordPress臃肿，然后玩zblog，最后确定Typecho，简洁好用。\r\n\r\n&nbsp;\r\n\r\n然而，后来却发现，Typecho几年不更新了，怎么瞅都瞅不出啥动静。听说开发团队精力都放在sf了。这对于我这种喜欢折腾的人来说，这不更新，功能太少，没东西折腾简直难受啊！索性还是玩回WordPress吧！\r\n\r\n&nbsp;\r\n\r\n转WordPress自然是转好了，但是也是损失惨重，因为浏览量数据是插件的，这部分数据是没了（并没有那么多时间去研究代码自己弄哎）。文章数据导出不知为何有些数据也丢了，很烦，得花点时间找回数据补一下。搜索引擎方面，感觉惨不忍睹了，虽然本来就是没多少，这回雪上加霜，还好我不是玩这方面的。\r\n\r\n其它倒是没啥了，用了一贯的沐风的主题，和之前Typecho的一样，自己做了修改。\r\n\r\n&nbsp;\r\n\r\n果断申请个闭站保护，恢复数据先哎！\r\n\r\n&nbsp;', '博客从typecho转到WordPress', '', 'publish', 'open', 'open', '', '%e5%8d%9a%e5%ae%a2%e4%bb%8etypecho%e8%bd%ac%e5%88%b0wordpress', '', '', '2016-10-08 03:36:21', '2016-10-07 19:36:21', '', 0, 'http://www.gzpblog.com/?p=240', 0, 'post', '', 0),
(269, 1, '2016-10-09 10:44:48', '2016-10-09 02:44:48', '<div><b>1) sql进行排序; 实现查询排名</b></div>\r\n<div>\r\n\r\n[code]$sql = &quot;SELECT rank_id, user_id, card_nums, @curRank := @curRank + 1 AS rank\r\n                    FROM __USER_RANK__ p, (\r\n                    SELECT @curRank := 0\r\n                    ) q\r\n                    ORDER BY card_nums DESC, user_id ASC &quot;;\r\n[/code]\r\n\r\n</div>\r\n<div>sql FROM 多表时:</div>\r\n<div>    FROM 表1 (as)别名,表2(as)别名</div>\r\n<div>结果是两个表的合并起来的,所有再嵌套表链接时:</div>\r\n<div>    FROM 表1 (as)别名 (LEFT JOIN....). ,表2(as)别名\r\n&nbsp;\r\n</div>\r\n\r\n<div></div>\r\n<div><b>2) MySQL申明变量</b></div>\r\n<div>\r\n\r\n<strong>mysql中变量不用事前申明，在用的时候直接用“@变量名”使用就可以了。</strong>\r\n\r\n第一种用法：set @num=1; 或set @num:=1; //这里要使用变量来保存数据，直接使用@num变量\r\n\r\n第二种用法：select @num:=1; 或 select @num:=字段名 from 表名 where ……\r\n\r\n注意上面两种赋值符号，使用set时可以用“=”或“：=”，但是使用select时必须用“：=赋值”\r\n\r\n&nbsp;\r\n</div>\r\n<div></div>\r\n<div><b>3) </b><b>$GLOBALS[\'HTTP_RAW_POST_DATA\'] 和 php://input </b></div>\r\n<div>\r\n\r\nPHP默认只识别application/x-www.form-urlencoded标准的数据类型，因此，对型如text/xml 或者 soap 或者 application/octet-stream 之类的内容无法解析，如果用$_POST数组来接收就会失败。\r\n\r\n另外还有一项 php://input 也可以实现此这个功能；php://input 允许读取 POST 的原始数据。和 $HTTP_RAW_POST_DATA 比起来，它给内存带来的压力较小，并且不需要任何特殊的 php.ini 设置。\r\n\r\nphp://input 不能用于 enctype=\"multipart/form-data\"。\r\n\r\n&nbsp;\r\n<b>4) 截取字符串时计数按一个中文一个字符计算的方式截取\r\n</b>\r\n\r\n[php]mb_substr( $str, $start, $length, $encoding )[/php]\r\n\r\n$str，需要截断的字符串\r\n$start，截断开始处，起始处为0\r\n$length，要截取的字数\r\n$encoding，网页编码，如utf-8,GB2312,GBK\r\n\r\n<b>当有除了中文外其它字符时(比如英文), 都会按substr()那样计算.<b>$encoding不传没效果</b></b>\r\n\r\n&nbsp;\r\n<b><b><b>5) php过滤html标签</b></b></b>\r\n\r\nphp过滤所有html的函数：\r\n\r\n[php]strip_tags(string)[/php]\r\n\r\n如果想过滤掉除了&lt;img src=\"\"&gt;之外的所有html标签：strip_tags(string,\"&lt;img&gt;\");\r\n\r\n过滤除了&lt;img src=\"\"&gt;&lt;p&gt;xxx&lt;/p&gt;&lt;b&gt;&lt;/b&gt;之外的所有html标签：strip_tags(string,\"&lt;img&gt;&lt;p&gt;&lt;b&gt;\");\r\n\r\n&nbsp;\r\n<b><b><b>6) php if,elseif小细节</b></b></b>\r\n\r\n在一个if......elseif......语句中, 如果if成立并执行了, 会直接忽略elseif中的部分, elseif()中的判断不执行;\r\n\r\n需要改成if()... if()...\r\n\r\n&nbsp;\r\n<b><b><b><b><b><b>7) SQL中的DISTINCT</b></b></b>\r\n</b></b></b>\r\n\r\n用于仅列出不同（distinct）的值;\r\n\r\n[php]select distinct name from A[/php]\r\n\r\n例如字段name中出现了相同值, 用distinct时,就只查找出第一条\r\n\r\n</div>', '九月工作笔记', '', 'publish', 'open', 'open', '', '%e4%b9%9d%e6%9c%88%e5%b7%a5%e4%bd%9c%e7%ac%94%e8%ae%b0', '', '', '2016-10-09 10:51:17', '2016-10-09 02:51:17', '', 0, 'http://www.gzpblog.com/?p=269', 0, 'post', '', 0),
(278, 1, '2016-10-09 16:42:42', '2016-10-09 08:42:42', '<h2>1. PHP中验证正则表达式</h2>\r\n\r\n[php]\r\n&lt;?php \r\n$str = \'a1234\';\r\n if (preg_match(&quot;^[a-zA-Z0-9]{4,16}$&quot;, $str)) \r\n{\r\n echo &quot;验证成功&quot;; \r\n} \r\nelse \r\n{\r\n echo &quot;验证失败&quot;; \r\n} \r\n?&gt;;\r\n[/php]\r\n\r\n<h2>2. 常用的正则表达式</h2>\r\n<table style=\"height: 2308px;\" border=\"1\" width=\"1026\" cellspacing=\"0\" cellpadding=\"2\">\r\n<tbody>\r\n<tr>\r\n<th>用户名</th>\r\n<td>/^[a-z0-9_-]{3,16}$/</td>\r\n</tr>\r\n<tr>\r\n<th>匹配帐号是否合法</th>\r\n<td>\r\n<div>\r\n\r\n^[a-zA-Z][a-zA-Z0-9_]{4,15}$\r\n\r\n(字母开头，允许5-16字节，允许字母数字下划线)\r\n\r\n</div></td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">密码</th>\r\n<td>/^[a-z0-9_-]{6,18}$/</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">密码2</th>\r\n<td>(?=^.{8,}$)(?=.*\\d)(?=.*\\W+)(?=.*[A-Z])(?=.*[a-z])(?!.*\\n).*$\r\n(由数字/大写字母/小写字母/标点符号组成，四种都必有，8位以上)</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">十六进制值</th>\r\n<td>/^#?([a-f0-9]{6}|[a-f0-9]{3})$/</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">电子邮箱</th>\r\n<td>/^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/\r\n/^[a-z\\d]+(\\.[a-z\\d]+)*@([\\da-z](-[\\da-z])?)+(\\.{1,2}[a-z]+)+$/或\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">URL</th>\r\n<td>/^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/ 或 [a-zA-z]+://[^\\s]*</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">IP 地址</th>\r\n<td>/((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)/\r\n/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/ 或 ((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">HTML 标签</th>\r\n<td>/^&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*)&lt;\\/\\1&gt;|\\s+\\/&gt;)$/或&lt;(.*)(.*)&gt;.*&lt;\\/\\1&gt;|&lt;(.*) \\/&gt;</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">删除代码\\\\注释</th>\r\n<td>(?&lt;!http:|\\S)//.*$</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">匹配双字节字符(包括汉字在内)</th>\r\n<td>[^\\x00-\\xff]\r\n（可以用来计算字符串的长度；一个双字节字符长度计2，ASCII字符计1）</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">汉字(字符)</th>\r\n<td>[\\u4e00-\\u9fa5]</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">Unicode编码中的汉字范围</th>\r\n<td>/^[\\u2E80-\\u9FFF]+$/</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">中文及全角标点符号(字符)</th>\r\n<td>[\\u3000-\\u301e\\ufe10-\\ufe19\\ufe30-\\ufe44\\ufe50-\\ufe6b\\uff01-\\uffee]</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">日期(年-月-日)</th>\r\n<td>(\\d{4}|\\d{2})-((0?([1-9]))|(1[1|2]))-((0?[1-9])|([12]([1-9]))|(3[0|1]))</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">日期(月/日/年)</th>\r\n<td>((0?[1-9]{1})|(1[1|2]))/(0?[1-9]|([12][1-9])|(3[0|1]))/(\\d{4}|\\d{2})</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">时间(小时:分钟, 24小时制)</th>\r\n<td>((1|0?)[0-9]|2[0-3]):([0-5][0-9])</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">中国大陆固定电话号码</th>\r\n<td>(\\d{4}-|\\d{3}-)?(\\d{8}|\\d{7})\r\n（匹配形式如 0511-4405222 或 021-87888822）</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">中国大陆手机号码</th>\r\n<td>1\\d{10}</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">中国大陆邮政编码</th>\r\n<td>[1-9]\\d{5}\r\n[1-9]\\d{5}(?!\\d)（中国大陆邮政编码为6位数字）</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">中国大陆身份证号(15位或18位)</th>\r\n<td>\\d{15}(\\d\\d[0-9xX])?\r\n\\d{15}|\\d{18}</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">非负浮点数（正浮点数 + 0）</th>\r\n<td>^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">非正浮点数（负浮点数 + 0）</th>\r\n<td>\r\n<div>\r\n\r\n^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$\r\n\r\n</div></td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">正浮点数</th>\r\n<td>\r\n<div>\r\n\r\n^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$\r\n\r\n</div></td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">负浮点数</th>\r\n<td>\r\n<div>\r\n\r\n^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$\r\n\r\n</div></td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">浮点数</th>\r\n<td>\r\n<div>\r\n\r\n^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$\r\n\r\n</div></td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">非负整数(正整数或零)</th>\r\n<td>\\d+\r\n\r\n^[1-9]\\d*|0$</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">非正整数(负整数或零)</th>\r\n<td>^-[1-9]\\d*|0$</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">正整数</th>\r\n<td>[0-9]*[1-9][0-9]*</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">负整数</th>\r\n<td>-[0-9]*[1-9][0-9]*</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">整数</th>\r\n<td>-?\\d+</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">小数</th>\r\n<td>(-?\\d+)(\\.\\d+)?</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">空白行</th>\r\n<td>\\n\\s*\\r 或者 \\n\\n(editplus) 或者 ^[\\s\\S ]*\\n</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">QQ号码</th>\r\n<td>[1-9]\\d{4,}\r\n（腾讯QQ号从10000开始）</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">不包含abc的单词</th>\r\n<td>\\b((?!abc)\\w)+\\b</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">匹配首尾空白字符</th>\r\n<td>^\\s*|\\s*$\r\n（可以用来删除行首行尾的空白字符；包括空格、制表符、换页符等等）</td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">匹配空白行</th>\r\n<td>\r\n<div>\r\n\r\n\\n\\s*\\r\r\n\r\n（可以用来删除空白行）\r\n\r\n</div></td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">匹配由26个英文字母组成的字符串</th>\r\n<td>\r\n<div>\r\n\r\n^[A-Za-z]+$\r\n\r\n</div></td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">匹配由26个英文字母的大写组成的字符串</th>\r\n<td>\r\n<div>\r\n\r\n^[A-Z]+$\r\n\r\n</div></td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">匹配由26个英文字母的小写组成的字符串</th>\r\n<td>\r\n<div>\r\n\r\n^[a-z]+$\r\n\r\n</div></td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">匹配由数字和26个英文字母组成的字符串</th>\r\n<td>\r\n<div>\r\n\r\n^[A-Za-z0-9]+$\r\n\r\n</div></td>\r\n</tr>\r\n<tr>\r\n<th scope=\"row\">匹配由数字、26个英文字母或者下划线组成的字符串</th>\r\n<td>\r\n<div>\r\n\r\n^\\w+$\r\n\r\n</div></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n&nbsp;\r\n<h2>3. 正则表达式字符表</h2>\r\n<table style=\"height: 1633px;\" border=\"1\" width=\"1023\" cellspacing=\"0\" cellpadding=\"2\">\r\n<tbody>\r\n<tr>\r\n<th>字符</th>\r\n<th>描述</th>\r\n</tr>\r\n<tr>\r\n<th>\\</th>\r\n<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>\"匹配字符\"<code>n</code>\"。\"<code>\\n</code>\"匹配一个换行符。串行\"<code>\\\\</code>\"匹配\"<code>\\</code>\"而\"<code>\\(</code>\"则匹配\"<code>(</code>\"。</td>\r\n</tr>\r\n<tr>\r\n<th>^</th>\r\n<td>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“<code>\\n</code>\"或\"<code>\\r</code>\"之后的位置。</td>\r\n</tr>\r\n<tr>\r\n<th>$</th>\r\n<td>匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“<code>\\n</code>\"或\"<code>\\r</code>\"之前的位置。</td>\r\n</tr>\r\n<tr>\r\n<th>*</th>\r\n<td>匹配前面的子表达式零次或多次。例如，zo*能匹配“<code>z</code>\"以及\"<code>zoo</code>\"。*等价于{0,}。</td>\r\n</tr>\r\n<tr>\r\n<th>+</th>\r\n<td>匹配前面的子表达式一次或多次。例如，“<code>zo+</code>\"能匹配\"<code>zo</code>\"以及\"<code>zoo</code>\"，但不能匹配\"<code>z</code>\"。+等价于{1,}。</td>\r\n</tr>\r\n<tr>\r\n<th>?</th>\r\n<td>匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>\"可以匹配\"<code>does</code>\"或\"<code>does</code>\"中的\"<code>do</code>\"。?等价于{0,1}。</td>\r\n</tr>\r\n<tr>\r\n<th>{n}</th>\r\n<td>n是一个非负整数。匹配确定的n次。例如，“<code>o{2}</code>\"不能匹配\"<code>Bob</code>\"中的\"<code>o</code>\"，但是能匹配\"<code>food</code>\"中的两个o。</td>\r\n</tr>\r\n<tr>\r\n<th>{n,}</th>\r\n<td>n是一个非负整数。至少匹配n次。例如，“<code>o{2,}</code>\"不能匹配\"<code>Bob</code>\"中的\"<code>o</code>\"，但能匹配\"<code>foooood</code>\"中的所有o。\"<code>o{1,}</code>\"等价于\"<code>o+</code>\"。\"<code>o{0,}</code>\"则等价于\"<code>o*</code>\"。</td>\r\n</tr>\r\n<tr>\r\n<th>{n,m}</th>\r\n<td>m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“<code>o{1,3}</code>\"将匹配\"<code>fooooood</code>\"中的前三个o。\"<code>o{0,1}</code>\"等价于\"<code>o?</code>\"。请注意在逗号和两个数之间不能有空格。</td>\r\n</tr>\r\n<tr>\r\n<th>?</th>\r\n<td>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>\"，\"<code>o+?</code>\"将匹配单个\"<code>o</code>\"，而\"<code>o+</code>\"将匹配所有\"<code>o</code>\"。</td>\r\n</tr>\r\n<tr>\r\n<th>.</th>\r\n<td>匹配除“<code>\\</code><code>n</code>\"之外的任何单个字符。要匹配包括\"<code>\\</code><code>n</code>\"在内的任何字符，请使用像\"<code>(.|\\n)</code>\"的模式。</td>\r\n</tr>\r\n<tr>\r\n<th>(pattern)</th>\r\n<td>匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“<code>\\(</code>\"或\"<code>\\)</code>\"。</td>\r\n</tr>\r\n<tr>\r\n<th>(?:pattern)</th>\r\n<td>匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“<code>(|)</code>\"来组合一个模式的各个部分是很有用。例如\"<code>industr(?:y|ies)</code>\"就是一个比\"<code>industry|industries</code>\"更简略的表达式。</td>\r\n</tr>\r\n<tr>\r\n<th>(?=pattern)</th>\r\n<td>正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“<code>Windows(?=95|98|NT|2000)</code>\"能匹配\"<code>Windows2000</code>\"中的\"<code>Windows</code>\"，但不能匹配\"<code>Windows3.1</code>\"中的\"<code>Windows</code>\"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>\r\n</tr>\r\n<tr>\r\n<th>(?!pattern)</th>\r\n<td>正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“<code>Windows(?!95|98|NT|2000)</code>\"能匹配\"<code>Windows3.1</code>\"中的\"<code>Windows</code>\"，但不能匹配\"<code>Windows2000</code>\"中的\"<code>Windows</code>\"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</td>\r\n</tr>\r\n<tr>\r\n<th>(?&lt;=pattern)</th>\r\n<td>反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“<code>(?&lt;=95|98|NT|2000)Windows</code>\"能匹配\"<code>2000Windows</code>\"中的\"<code>Windows</code>\"，但不能匹配\"<code>3.1Windows</code>\"中的\"<code>Windows</code>\"。</td>\r\n</tr>\r\n<tr>\r\n<th>(?&lt;!pattern)</th>\r\n<td>反向否定预查，与正向否定预查类拟，只是方向相反。例如“<code>(?&lt;!95|98|NT|2000)Windows</code>\"能匹配\"<code>3.1Windows</code>\"中的\"<code>Windows</code>\"，但不能匹配\"<code>2000Windows</code>\"中的\"<code>Windows</code>\"。</td>\r\n</tr>\r\n<tr>\r\n<th>x|y</th>\r\n<td>匹配x或y。例如，“<code>z|food</code>\"能匹配\"<code>z</code>\"或\"<code>food</code>\"。\"<code>(z|f)ood</code>\"则匹配\"<code>zood</code>\"或\"<code>food</code>\"。</td>\r\n</tr>\r\n<tr>\r\n<th>[xyz]</th>\r\n<td>字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>\"可以匹配\"<code>plain</code>\"中的\"<code>a</code>\"。</td>\r\n</tr>\r\n<tr>\r\n<th>[^xyz]</th>\r\n<td>负值字符集合。匹配未包含的任意字符。例如，“<code>[^abc]</code>\"可以匹配\"<code>plain</code>\"中的\"<code>p</code>\"。</td>\r\n</tr>\r\n<tr>\r\n<th>[a-z]</th>\r\n<td>字符范围。匹配指定范围内的任意字符。例如，“<code>[a-z]</code>\"可以匹配\"<code>a</code>\"到\"<code>z</code>\"范围内的任意小写字母字符。</td>\r\n</tr>\r\n<tr>\r\n<th>[^a-z]</th>\r\n<td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“<code>[^a-z]</code>\"可以匹配任何不在\"<code>a</code>\"到\"<code>z</code>\"范围内的任意字符。</td>\r\n</tr>\r\n<tr>\r\n<th>\\b</th>\r\n<td>匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\\b</code>\"可以匹配\"<code>never</code>\"中的\"<code>er</code>\"，但不能匹配\"<code>verb</code>\"中的\"<code>er</code>\"。</td>\r\n</tr>\r\n<tr>\r\n<th>\\B</th>\r\n<td>匹配非单词边界。“<code>er\\B</code>\"能匹配\"<code>verb</code>\"中的\"<code>er</code>\"，但不能匹配\"<code>never</code>\"中的\"<code>er</code>\"。</td>\r\n</tr>\r\n<tr>\r\n<th>\\cx</th>\r\n<td>匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“<code>c</code>\"字符。</td>\r\n</tr>\r\n<tr>\r\n<th>\\d</th>\r\n<td>匹配一个数字字符。等价于[0-9]。</td>\r\n</tr>\r\n<tr>\r\n<th>\\D</th>\r\n<td>匹配一个非数字字符。等价于[^0-9]。</td>\r\n</tr>\r\n<tr>\r\n<th>\\f</th>\r\n<td>匹配一个换页符。等价于\\x0c和\\cL。</td>\r\n</tr>\r\n<tr>\r\n<th>\\n</th>\r\n<td>匹配一个换行符。等价于\\x0a和\\cJ。</td>\r\n</tr>\r\n<tr>\r\n<th>\\r</th>\r\n<td>匹配一个回车符。等价于\\x0d和\\cM。</td>\r\n</tr>\r\n<tr>\r\n<th>\\s</th>\r\n<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。</td>\r\n</tr>\r\n<tr>\r\n<th>\\S</th>\r\n<td>匹配任何非空白字符。等价于[^ \\f\\n\\r\\t\\v]。</td>\r\n</tr>\r\n<tr>\r\n<th>\\t</th>\r\n<td>匹配一个制表符。等价于\\x09和\\cI。</td>\r\n</tr>\r\n<tr>\r\n<th>\\v</th>\r\n<td>匹配一个垂直制表符。等价于\\x0b和\\cK。</td>\r\n</tr>\r\n<tr>\r\n<th>\\w</th>\r\n<td>匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>\"。</td>\r\n</tr>\r\n<tr>\r\n<th>\\W</th>\r\n<td>匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>\"。</td>\r\n</tr>\r\n<tr>\r\n<th>\\xn</th>\r\n<td>匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\\x41</code>\"匹配\"<code>A</code>\"。\"<code>\\x041</code>\"则等价于\"<code>\\x04&amp;1</code>\"。正则表达式中可以使用ASCII编码。.</td>\r\n</tr>\r\n<tr>\r\n<th>\\num</th>\r\n<td>匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\\1</code>\"匹配两个连续的相同字符。</td>\r\n</tr>\r\n<tr>\r\n<th>\\n</th>\r\n<td>标识一个八进制转义值或一个向后引用。如果\\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。</td>\r\n</tr>\r\n<tr>\r\n<th>\\nm</th>\r\n<td>标识一个八进制转义值或一个向后引用。如果\\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\\nm将匹配八进制转义值nm。</td>\r\n</tr>\r\n<tr>\r\n<th>\\nml</th>\r\n<td>如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</td>\r\n</tr>\r\n<tr>\r\n<th>\\un</th>\r\n<td>匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\\u00A9匹配版权符号（©）。</td>\r\n</tr>\r\n</tbody>\r\n</table>', '正则表达式', '', 'publish', 'open', 'open', '', '%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f', '', '', '2016-10-09 16:45:13', '2016-10-09 08:45:13', '', 0, 'http://www.gzpblog.com/?p=278', 0, 'post', '', 0),
(383, 1, '2016-10-17 15:48:14', '2016-10-17 07:48:14', '<div><strong>虚拟机快捷键:</strong></div>\r\n<div>    Ctrl+Alt 鼠标退出虚拟机回到本机</div>\r\n<div>    Ctrl+Alt+Enter 虚拟机全屏</div>\r\n<div></div>\r\n<div><strong>启动:</strong></div>\r\n<div>    快点按F2进去Bios系统;</div>\r\n<div>    修改Boot启动项为CD-ROM; 安装完后改回硬盘启动</div>\r\n<div>    (虚拟机的安装不用这个操作,虚拟机比较智能,会自动帮你进行这项操作)</div>\r\n<div></div>\r\n<div><strong>安装欢迎界面:</strong></div>\r\n<div>    \"Install or upgrade an existing system\": 安装或升级现有的系统</div>\r\n<div>    \"Install system with basic video driver\": 安装过程采用基本的显卡驱动</div>\r\n<div>    \"Rescue installed system\": 进入系统修复模式</div>\r\n<div>    \"Boot from local drive \": 退出安装从硬盘启动</div>\r\n<div>    \"Memory test\": 存储介质检测</div>\r\n<div>    (安装选择第一个, 长时间不选会自动选择第一项)</div>\r\n<div></div>\r\n<div><strong>Disc Found:</strong></div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup1.png\"><img class=\"alignnone size-full wp-image-389\" src=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup1.png\" alt=\"centos6.6setup1\" width=\"716\" height=\"406\" /></a><img src=\"file:///C:/Users/gzp/AppData/Local/YNote/data/a3355222@163.com/df85e20716eb4392bf018042a0fc8306/clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"3187ADD9434941BAA50C316EC30AA88A\" data-attr-org-img-file=\"file:///C:/Users/gzp/AppData/Local/YNote/data/a3355222@163.com/df85e20716eb4392bf018042a0fc8306/clipboard.png\" /></div>\r\n<div>弹出是否检测光盘是否可以正常安装; 选择skip跳过</div>\r\n<div></div>\r\n<div></div>\r\n<div><strong>安装:</strong></div>\r\n<div>    <img src=\"file:///C:/Users/gzp/AppData/Local/YNote/data/a3355222@163.com/b7384e100c51486ebf71726ea6b48cdf/clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"BBB3ACA394E24742BF16F52AD89ED2FF\" data-attr-org-img-file=\"file:///C:/Users/gzp/AppData/Local/YNote/data/a3355222@163.com/b7384e100c51486ebf71726ea6b48cdf/clipboard.png\" /><a href=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup2.png\"><img class=\"alignnone size-full wp-image-390\" src=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup2.png\" alt=\"centos6.6setup2\" width=\"798\" height=\"597\" /></a></div>\r\n<div>    选择基本存储设备, 然后无脑安装.</div>\r\n<div></div>\r\n<div><strong>分区部分:</strong></div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup3.png\"><img class=\"alignnone size-full wp-image-391\" src=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup3.png\" alt=\"centos6.6setup3\" width=\"796\" height=\"595\" /></a></div>\r\n<div>选择自定义分区;</div>\r\n<div></div>\r\n<div><img src=\"file:///C:/Users/gzp/AppData/Local/YNote/data/a3355222@163.com/1d006acea407423db688ce575f04893e/clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"2F50C34625F748B8924FB3AA96BC79FD\" data-attr-org-img-file=\"file:///C:/Users/gzp/AppData/Local/YNote/data/a3355222@163.com/1d006acea407423db688ce575f04893e/clipboard.png\" /><a href=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup4.png\"><img class=\"alignnone size-full wp-image-392\" src=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup4.png\" alt=\"centos6.6setup4\" width=\"223\" height=\"382\" /></a>创建分区时都用标准分区</div>\r\n<div></div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup5.png\"><img class=\"alignnone size-full wp-image-384\" src=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup5.png\" alt=\"centos6.6setup5\" width=\"497\" height=\"464\" /></a><img src=\"file:///C:/Users/gzp/AppData/Local/YNote/data/a3355222@163.com/1934fe6f377845239c085f4336b0d37e/clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"E80359D3C94E4CA0984898215D9671B8\" data-attr-org-img-file=\"file:///C:/Users/gzp/AppData/Local/YNote/data/a3355222@163.com/1934fe6f377845239c085f4336b0d37e/clipboard.png\" />swap分区创建</div>\r\n<div></div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup6.png\"><img class=\"alignnone size-full wp-image-385\" src=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup6.png\" alt=\"centos6.6setup6\" width=\"500\" height=\"470\" /></a><img src=\"file:///C:/Users/gzp/AppData/Local/YNote/data/a3355222@163.com/93cb1122c12f4c268dd17932a0595849/clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"BC45B17122C1468C9E97ED5C17C7EE72\" data-attr-org-img-file=\"file:///C:/Users/gzp/AppData/Local/YNote/data/a3355222@163.com/93cb1122c12f4c268dd17932a0595849/clipboard.png\" />根分区创建</div>\r\n<div><img src=\"file:///C:/Users/gzp/AppData/Local/YNote/data/a3355222@163.com/6fa586b8fe6c4f7a8f29ea99e1096101/clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"2E12A91997A443A58FDD4DF3B88972FB\" data-attr-org-img-file=\"file:///C:/Users/gzp/AppData/Local/YNote/data/a3355222@163.com/6fa586b8fe6c4f7a8f29ea99e1096101/clipboard.png\" /></div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup7.png\"><img class=\"alignnone size-full wp-image-386\" src=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup7.png\" alt=\"centos6.6setup7\" width=\"793\" height=\"594\" /></a></div>\r\n<div>最后差不多应该是这样的,然后下一步</div>\r\n<div></div>\r\n<div><strong>软件包选择:</strong></div>\r\n<div>    desktop (桌面)</div>\r\n<div>    Minimal desktop (最小化桌面)</div>\r\n<div>    Minimal (最小化)  <strong>一般来说装这个, 需要什么再装什么</strong></div>\r\n<div>    Basic Server (基本服务器) <strong> 初学装这个, 基本功能都有</strong></div>\r\n<div>    Database Server (数据库服务器)</div>\r\n<div>    Web Server (网页服务器)</div>\r\n<div>    Virtual Host (虚拟主机)</div>\r\n<div>    software development workstation(软件开发工作站)</div>\r\n<div><img src=\"file:///C:/Users/gzp/AppData/Local/YNote/data/a3355222@163.com/9fdab019e6774bc7b9ce9c556999ab28/clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"ED2C9048F339491CB765410BCE76CB36\" data-attr-org-img-file=\"file:///C:/Users/gzp/AppData/Local/YNote/data/a3355222@163.com/9fdab019e6774bc7b9ce9c556999ab28/clipboard.png\" /></div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup8.png\"><img class=\"alignnone size-full wp-image-387\" src=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup8.png\" alt=\"centos6.6setup8\" width=\"796\" height=\"595\" /></a></div>\r\n<div></div>\r\n<div>然后等待装完即可:</div>\r\n<div><img src=\"file:///C:/Users/gzp/AppData/Local/YNote/data/a3355222@163.com/44f39c1b496143ca889a08b689cbe6db/clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"0D86B53A43ED40019609BB8DD0BD01AF\" data-attr-org-img-file=\"file:///C:/Users/gzp/AppData/Local/YNote/data/a3355222@163.com/44f39c1b496143ca889a08b689cbe6db/clipboard.png\" /><a href=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup9.png\"><img class=\"alignnone size-full wp-image-388\" src=\"http://files.gzpblog.com/wp/2016/10/centos6.6setup9.png\" alt=\"centos6.6setup9\" width=\"800\" height=\"599\" /></a></div>\r\n<div></div>\r\n<div><strong>安装日志:</strong></div>\r\n<div>/root/install.log; 存储了安装在系统中的软件包及其版本信息</div>\r\n<div>/root/install.log.syslog: 存储了安装过程中留下的事件记录</div>\r\n<div>/root/anaconda-ks.cfg: 以Kickstart配置文件的格式记录安装过程中设置的选项信息</div>\r\n<div></div>\r\n<div></div>', 'VMware安装Centos6.6虚拟机', '', 'publish', 'open', 'open', '', 'vmware%e5%ae%89%e8%a3%85centos6-6%e8%99%9a%e6%8b%9f%e6%9c%ba', '', '', '2016-10-17 15:48:14', '2016-10-17 07:48:14', '', 0, 'http://www.gzpblog.com/?p=383', 0, 'post', '', 0),
(331, 1, '2016-10-11 17:11:40', '0000-00-00 00:00:00', 'eyJ0aXRsZSI6Ik5leHRHRU4gXHU3ZjI5XHU3NTY1XHU1NmZlIFx1NTdmYVx1Nzg0MFx1NzI0OCIsImVudGl0eV90eXBlcyI6WyJpbWFnZSJdLCJwcmV2aWV3X2ltYWdlX3JlbHBhdGgiOiJcL25leHRnZW4tZ2FsbGVyeVwvcHJvZHVjdHNcL3Bob3RvY3JhdGlfbmV4dGdlblwvbW9kdWxlc1wvbmV4dGdlbl9iYXNpY19nYWxsZXJ5XC9zdGF0aWNcL3RodW1iX3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJnYWxsZXJpZXMiLCJ2aWV3X29yZGVyIjoxMDAwMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjEuNTAiLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwiaW1hZ2VzX3Blcl9wYWdlIjoiMjAiLCJudW1iZXJfb2ZfY29sdW1ucyI6MCwidGh1bWJuYWlsX3dpZHRoIjoyNDAsInRodW1ibmFpbF9oZWlnaHQiOjE2MCwic2hvd19hbGxfaW5fbGlnaHRib3giOjAsImFqYXhfcGFnaW5hdGlvbiI6MCwidXNlX2ltYWdlYnJvd3Nlcl9lZmZlY3QiOjAsInRlbXBsYXRlIjoiIiwiZGlzcGxheV9ub19pbWFnZXNfZXJyb3IiOjEsImRpc2FibGVfcGFnaW5hdGlvbiI6MCwic2hvd19zbGlkZXNob3dfbGluayI6MSwic2xpZGVzaG93X2xpbmtfdGV4dCI6IltcdTY2M2VcdTc5M2FcdTVlN2JcdTcwNmZcdTcyNDddIiwib3ZlcnJpZGVfdGh1bWJuYWlsX3NldHRpbmdzIjowLCJ0aHVtYm5haWxfcXVhbGl0eSI6IjEwMCIsInRodW1ibmFpbF9jcm9wIjoxLCJ0aHVtYm5haWxfd2F0ZXJtYXJrIjowLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn0sImhpZGRlbl9mcm9tX3VpIjpmYWxzZSwiX19kZWZhdWx0c19zZXQiOnRydWV9', 'NextGEN 缩略图 基础版', '', 'draft', 'closed', 'closed', '', '', '', '', '2016-10-11 17:11:40', '0000-00-00 00:00:00', 'eyJ0aXRsZSI6Ik5leHRHRU4gXHU3ZjI5XHU3NTY1XHU1NmZlIFx1NTdmYVx1Nzg0MFx1NzI0OCIsImVudGl0eV90eXBlcyI6WyJpbWFnZSJdLCJwcmV2aWV3X2ltYWdlX3JlbHBhdGgiOiJcL25leHRnZW4tZ2FsbGVyeVwvcHJvZHVjdHNcL3Bob3RvY3JhdGlfbmV4dGdlblwvbW9kdWxlc1wvbmV4dGdlbl9iYXNpY19nYWxsZXJ5XC9zdGF0aWNcL3RodW1iX3ByZXZpZXcuanBnIiwiZGVmYXVsdF9zb3VyY2UiOiJnYWxsZXJpZXMiLCJ2aWV3X29yZGVyIjoxMDAwMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjEuNTAiLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwiaW1hZ2VzX3Blcl9wYWdlIjoiMjAiLCJudW1iZXJfb2ZfY29sdW1ucyI6MCwidGh1bWJuYWlsX3dpZHRoIjoyNDAsInRodW1ibmFpbF9oZWlnaHQiOjE2MCwic2hvd19hbGxfaW5fbGlnaHRib3giOjAsImFqYXhfcGFnaW5hdGlvbiI6MCwidXNlX2ltYWdlYnJvd3Nlcl9lZmZlY3QiOjAsInRlbXBsYXRlIjoiIiwiZGlzcGxheV9ub19pbWFnZXNfZXJyb3IiOjEsImRpc2FibGVfcGFnaW5hdGlvbiI6MCwic2hvd19zbGlkZXNob3dfbGluayI6MSwic2xpZGVzaG93X2xpbmtfdGV4dCI6IltcdTY2M2VcdTc5M2FcdTVlN2JcdTcwNmZcdTcyNDddIiwib3ZlcnJpZGVfdGh1bWJuYWlsX3NldHRpbmdzIjowLCJ0aHVtYm5haWxfcXVhbGl0eSI6IjEwMCIsInRodW1ibmFpbF9jcm9wIjoxLCJ0aHVtYm5haWxfd2F0ZXJtYXJrIjowLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn0sImhpZGRlbl9mcm9tX3VpIjpmYWxzZSwiX19kZWZhdWx0c19zZXQiOnRydWV9', 0, 'http://www.gzpblog.com/?post_type=display_type&p=331', 0, 'display_type', '', 0),
(332, 1, '2016-10-11 17:11:40', '0000-00-00 00:00:00', 'eyJ0aXRsZSI6Ik5leHRHRU4gXHU1ZTdiXHU3MDZmXHU3MjQ3IFx1NTdmYVx1Nzg0MFx1NzI0OCIsImVudGl0eV90eXBlcyI6WyJpbWFnZSJdLCJwcmV2aWV3X2ltYWdlX3JlbHBhdGgiOiJcL25leHRnZW4tZ2FsbGVyeVwvcHJvZHVjdHNcL3Bob3RvY3JhdGlfbmV4dGdlblwvbW9kdWxlc1wvbmV4dGdlbl9iYXNpY19nYWxsZXJ5XC9zdGF0aWNcL3NsaWRlc2hvd19wcmV2aWV3LmpwZyIsImRlZmF1bHRfc291cmNlIjoiZ2FsbGVyaWVzIiwidmlld19vcmRlciI6MTAwMTAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfc2xpZGVzaG93IiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjEuNTAiLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwiZ2FsbGVyeV93aWR0aCI6NjAwLCJnYWxsZXJ5X2hlaWdodCI6NDAwLCJ0aHVtYm5haWxfd2lkdGgiOjI0MCwidGh1bWJuYWlsX2hlaWdodCI6MTYwLCJjeWNsZV9pbnRlcnZhbCI6MTAsImN5Y2xlX2VmZmVjdCI6bnVsbCwiZWZmZWN0X2NvZGUiOiJjbGFzcz1cIm5nZy1mYW5jeWJveFwiIHJlbD1cIiVHQUxMRVJZX05BTUUlXCIiLCJzaG93X3RodW1ibmFpbF9saW5rIjoxLCJ0aHVtYm5haWxfbGlua190ZXh0IjoiW1x1NjYzZVx1NzkzYVx1N2YyOVx1NzU2NVx1NTZmZV0iLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifSwiaGlkZGVuX2Zyb21fdWkiOmZhbHNlLCJfX2RlZmF1bHRzX3NldCI6dHJ1ZX0=', 'NextGEN 幻灯片 基础版', '', 'draft', 'closed', 'closed', '', '', '', '', '2016-10-11 17:11:40', '0000-00-00 00:00:00', 'eyJ0aXRsZSI6Ik5leHRHRU4gXHU1ZTdiXHU3MDZmXHU3MjQ3IFx1NTdmYVx1Nzg0MFx1NzI0OCIsImVudGl0eV90eXBlcyI6WyJpbWFnZSJdLCJwcmV2aWV3X2ltYWdlX3JlbHBhdGgiOiJcL25leHRnZW4tZ2FsbGVyeVwvcHJvZHVjdHNcL3Bob3RvY3JhdGlfbmV4dGdlblwvbW9kdWxlc1wvbmV4dGdlbl9iYXNpY19nYWxsZXJ5XC9zdGF0aWNcL3NsaWRlc2hvd19wcmV2aWV3LmpwZyIsImRlZmF1bHRfc291cmNlIjoiZ2FsbGVyaWVzIiwidmlld19vcmRlciI6MTAwMTAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfc2xpZGVzaG93IiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjEuNTAiLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwiZ2FsbGVyeV93aWR0aCI6NjAwLCJnYWxsZXJ5X2hlaWdodCI6NDAwLCJ0aHVtYm5haWxfd2lkdGgiOjI0MCwidGh1bWJuYWlsX2hlaWdodCI6MTYwLCJjeWNsZV9pbnRlcnZhbCI6MTAsImN5Y2xlX2VmZmVjdCI6bnVsbCwiZWZmZWN0X2NvZGUiOiJjbGFzcz1cIm5nZy1mYW5jeWJveFwiIHJlbD1cIiVHQUxMRVJZX05BTUUlXCIiLCJzaG93X3RodW1ibmFpbF9saW5rIjoxLCJ0aHVtYm5haWxfbGlua190ZXh0IjoiW1x1NjYzZVx1NzkzYVx1N2YyOVx1NzU2NVx1NTZmZV0iLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifSwiaGlkZGVuX2Zyb21fdWkiOmZhbHNlLCJfX2RlZmF1bHRzX3NldCI6dHJ1ZX0=', 0, 'http://www.gzpblog.com/?post_type=display_type&p=332', 0, 'display_type', '', 0),
(333, 1, '2016-10-11 17:11:40', '0000-00-00 00:00:00', 'eyJ0aXRsZSI6Ik5leHRHRU4gSW1hZ2VCcm93c2VyIFx1NTdmYVx1Nzg0MFx1NzI0OCIsImVudGl0eV90eXBlcyI6WyJpbWFnZSJdLCJwcmV2aWV3X2ltYWdlX3JlbHBhdGgiOiJcL25leHRnZW4tZ2FsbGVyeVwvcHJvZHVjdHNcL3Bob3RvY3JhdGlfbmV4dGdlblwvbW9kdWxlc1wvbmV4dGdlbl9iYXNpY19pbWFnZWJyb3dzZXJcL3N0YXRpY1wvcHJldmlldy5qcGciLCJkZWZhdWx0X3NvdXJjZSI6ImdhbGxlcmllcyIsInZpZXdfb3JkZXIiOjEwMDIwLCJuYW1lIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX2ltYWdlYnJvd3NlciIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4xLjUwIiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsInRlbXBsYXRlIjoiIiwibmdnX3RyaWdnZXJzX2Rpc3BsYXkiOiJuZXZlciJ9LCJoaWRkZW5fZnJvbV91aSI6ZmFsc2UsIl9fZGVmYXVsdHNfc2V0Ijp0cnVlfQ==', 'NextGEN ImageBrowser 基础版', '', 'draft', 'closed', 'closed', '', '', '', '', '2016-10-11 17:11:40', '0000-00-00 00:00:00', 'eyJ0aXRsZSI6Ik5leHRHRU4gSW1hZ2VCcm93c2VyIFx1NTdmYVx1Nzg0MFx1NzI0OCIsImVudGl0eV90eXBlcyI6WyJpbWFnZSJdLCJwcmV2aWV3X2ltYWdlX3JlbHBhdGgiOiJcL25leHRnZW4tZ2FsbGVyeVwvcHJvZHVjdHNcL3Bob3RvY3JhdGlfbmV4dGdlblwvbW9kdWxlc1wvbmV4dGdlbl9iYXNpY19pbWFnZWJyb3dzZXJcL3N0YXRpY1wvcHJldmlldy5qcGciLCJkZWZhdWx0X3NvdXJjZSI6ImdhbGxlcmllcyIsInZpZXdfb3JkZXIiOjEwMDIwLCJuYW1lIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX2ltYWdlYnJvd3NlciIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4xLjUwIiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsInRlbXBsYXRlIjoiIiwibmdnX3RyaWdnZXJzX2Rpc3BsYXkiOiJuZXZlciJ9LCJoaWRkZW5fZnJvbV91aSI6ZmFsc2UsIl9fZGVmYXVsdHNfc2V0Ijp0cnVlfQ==', 0, 'http://www.gzpblog.com/?post_type=display_type&p=333', 0, 'display_type', '', 0),
(334, 1, '2016-10-11 17:11:40', '0000-00-00 00:00:00', 'eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgU2luZ2xlUGljIiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX3NpbmdsZXBpY1wvc3RhdGljXC9wcmV2aWV3LmdpZiIsImRlZmF1bHRfc291cmNlIjoiZ2FsbGVyaWVzIiwidmlld19vcmRlciI6MTAwNjAsImhpZGRlbl9mcm9tX3VpIjp0cnVlLCJuYW1lIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX3NpbmdsZXBpYyIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4xLjUwIiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsIndpZHRoIjoiIiwiaGVpZ2h0IjoiIiwibW9kZSI6IiIsImRpc3BsYXlfd2F0ZXJtYXJrIjowLCJkaXNwbGF5X3JlZmxlY3Rpb24iOjAsImZsb2F0IjoiIiwibGluayI6IiIsImxpbmtfdGFyZ2V0IjoiX2JsYW5rIiwicXVhbGl0eSI6MTAwLCJjcm9wIjowLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifSwiX19kZWZhdWx0c19zZXQiOnRydWV9', 'NextGEN Basic SinglePic', '', 'draft', 'closed', 'closed', '', '', '', '', '2016-10-11 17:11:40', '0000-00-00 00:00:00', 'eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgU2luZ2xlUGljIiwiZW50aXR5X3R5cGVzIjpbImltYWdlIl0sInByZXZpZXdfaW1hZ2VfcmVscGF0aCI6IlwvbmV4dGdlbi1nYWxsZXJ5XC9wcm9kdWN0c1wvcGhvdG9jcmF0aV9uZXh0Z2VuXC9tb2R1bGVzXC9uZXh0Z2VuX2Jhc2ljX3NpbmdsZXBpY1wvc3RhdGljXC9wcmV2aWV3LmdpZiIsImRlZmF1bHRfc291cmNlIjoiZ2FsbGVyaWVzIiwidmlld19vcmRlciI6MTAwNjAsImhpZGRlbl9mcm9tX3VpIjp0cnVlLCJuYW1lIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX3NpbmdsZXBpYyIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4xLjUwIiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsIndpZHRoIjoiIiwiaGVpZ2h0IjoiIiwibW9kZSI6IiIsImRpc3BsYXlfd2F0ZXJtYXJrIjowLCJkaXNwbGF5X3JlZmxlY3Rpb24iOjAsImZsb2F0IjoiIiwibGluayI6IiIsImxpbmtfdGFyZ2V0IjoiX2JsYW5rIiwicXVhbGl0eSI6MTAwLCJjcm9wIjowLCJ0ZW1wbGF0ZSI6IiIsIm5nZ190cmlnZ2Vyc19kaXNwbGF5IjoibmV2ZXIifSwiX19kZWZhdWx0c19zZXQiOnRydWV9', 0, 'http://www.gzpblog.com/?post_type=display_type&p=334', 0, 'display_type', '', 0),
(335, 1, '2016-10-11 17:11:40', '0000-00-00 00:00:00', 'eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgVGFnQ2xvdWQiLCJlbnRpdHlfdHlwZXMiOlsiaW1hZ2UiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfdGFnY2xvdWRcL3N0YXRpY1wvcHJldmlldy5naWYiLCJkZWZhdWx0X3NvdXJjZSI6InRhZ3MiLCJ2aWV3X29yZGVyIjoxMDEwMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190YWdjbG91ZCIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4xLjUwIiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImRpc3BsYXlfdHlwZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwibnVtYmVyIjo0NSwibmdnX3RyaWdnZXJzX2Rpc3BsYXkiOiJuZXZlciJ9LCJoaWRkZW5fZnJvbV91aSI6ZmFsc2UsIl9fZGVmYXVsdHNfc2V0Ijp0cnVlfQ==', 'NextGEN Basic TagCloud', '', 'draft', 'closed', 'closed', '', '', '', '', '2016-10-11 17:11:40', '0000-00-00 00:00:00', 'eyJ0aXRsZSI6Ik5leHRHRU4gQmFzaWMgVGFnQ2xvdWQiLCJlbnRpdHlfdHlwZXMiOlsiaW1hZ2UiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfdGFnY2xvdWRcL3N0YXRpY1wvcHJldmlldy5naWYiLCJkZWZhdWx0X3NvdXJjZSI6InRhZ3MiLCJ2aWV3X29yZGVyIjoxMDEwMCwibmFtZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190YWdjbG91ZCIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4xLjUwIiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImRpc3BsYXlfdHlwZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwibnVtYmVyIjo0NSwibmdnX3RyaWdnZXJzX2Rpc3BsYXkiOiJuZXZlciJ9LCJoaWRkZW5fZnJvbV91aSI6ZmFsc2UsIl9fZGVmYXVsdHNfc2V0Ijp0cnVlfQ==', 0, 'http://www.gzpblog.com/?post_type=display_type&p=335', 0, 'display_type', '', 0),
(336, 1, '2016-10-11 17:11:40', '0000-00-00 00:00:00', 'eyJ0aXRsZSI6Ik5leHRHRU4gXHU3ZDI3XHU1MWQxXHU4OWM2XHU1NmZlXHU3NmY4XHU1MThjIFx1NTdmYVx1Nzg0MFx1NzI0OCIsImVudGl0eV90eXBlcyI6WyJhbGJ1bSIsImdhbGxlcnkiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfYWxidW1cL3N0YXRpY1wvY29tcGFjdF9wcmV2aWV3LmpwZyIsImRlZmF1bHRfc291cmNlIjoiYWxidW1zIiwidmlld19vcmRlciI6MTAyMDAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfY29tcGFjdF9hbGJ1bSIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4xLjUwIiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImdhbGxlcmllc19wZXJfcGFnZSI6MCwiZW5hYmxlX2JyZWFkY3J1bWJzIjoxLCJkaXNhYmxlX3BhZ2luYXRpb24iOjAsImVuYWJsZV9kZXNjcmlwdGlvbnMiOjAsInRlbXBsYXRlIjoiIiwib3Blbl9nYWxsZXJ5X2luX2xpZ2h0Ym94IjowLCJnYWxsZXJ5X2Rpc3BsYXlfdHlwZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwiZ2FsbGVyeV9kaXNwbGF5X3RlbXBsYXRlIjoiIiwibmdnX3RyaWdnZXJzX2Rpc3BsYXkiOiJuZXZlciJ9LCJoaWRkZW5fZnJvbV91aSI6ZmFsc2UsIl9fZGVmYXVsdHNfc2V0Ijp0cnVlfQ==', 'NextGEN 紧凑视图相册 基础版', '', 'draft', 'closed', 'closed', '', '', '', '', '2016-10-11 17:11:40', '0000-00-00 00:00:00', 'eyJ0aXRsZSI6Ik5leHRHRU4gXHU3ZDI3XHU1MWQxXHU4OWM2XHU1NmZlXHU3NmY4XHU1MThjIFx1NTdmYVx1Nzg0MFx1NzI0OCIsImVudGl0eV90eXBlcyI6WyJhbGJ1bSIsImdhbGxlcnkiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfYWxidW1cL3N0YXRpY1wvY29tcGFjdF9wcmV2aWV3LmpwZyIsImRlZmF1bHRfc291cmNlIjoiYWxidW1zIiwidmlld19vcmRlciI6MTAyMDAsIm5hbWUiOiJwaG90b2NyYXRpLW5leHRnZW5fYmFzaWNfY29tcGFjdF9hbGJ1bSIsImluc3RhbGxlZF9hdF92ZXJzaW9uIjoiMi4xLjUwIiwiaWRfZmllbGQiOiJJRCIsInNldHRpbmdzIjp7InVzZV9saWdodGJveF9lZmZlY3QiOnRydWUsImdhbGxlcmllc19wZXJfcGFnZSI6MCwiZW5hYmxlX2JyZWFkY3J1bWJzIjoxLCJkaXNhYmxlX3BhZ2luYXRpb24iOjAsImVuYWJsZV9kZXNjcmlwdGlvbnMiOjAsInRlbXBsYXRlIjoiIiwib3Blbl9nYWxsZXJ5X2luX2xpZ2h0Ym94IjowLCJnYWxsZXJ5X2Rpc3BsYXlfdHlwZSI6InBob3RvY3JhdGktbmV4dGdlbl9iYXNpY190aHVtYm5haWxzIiwiZ2FsbGVyeV9kaXNwbGF5X3RlbXBsYXRlIjoiIiwibmdnX3RyaWdnZXJzX2Rpc3BsYXkiOiJuZXZlciJ9LCJoaWRkZW5fZnJvbV91aSI6ZmFsc2UsIl9fZGVmYXVsdHNfc2V0Ijp0cnVlfQ==', 0, 'http://www.gzpblog.com/?post_type=display_type&p=336', 0, 'display_type', '', 0),
(337, 1, '2016-10-11 17:11:40', '0000-00-00 00:00:00', 'eyJ0aXRsZSI6Ik5leHRHRU4gXHU2MjY5XHU1YzU1XHU4OWM2XHU1NmZlXHU3NmY4XHU1MThjIFx1NTdmYVx1Nzg0MFx1NzI0OCIsImVudGl0eV90eXBlcyI6WyJhbGJ1bSIsImdhbGxlcnkiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfYWxidW1cL3N0YXRpY1wvZXh0ZW5kZWRfcHJldmlldy5qcGciLCJkZWZhdWx0X3NvdXJjZSI6ImFsYnVtcyIsInZpZXdfb3JkZXIiOjEwMjEwLCJuYW1lIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX2V4dGVuZGVkX2FsYnVtIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjEuNTAiLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwiZ2FsbGVyaWVzX3Blcl9wYWdlIjowLCJlbmFibGVfYnJlYWRjcnVtYnMiOjEsImRpc2FibGVfcGFnaW5hdGlvbiI6MCwiZW5hYmxlX2Rlc2NyaXB0aW9ucyI6MCwidGVtcGxhdGUiOiIiLCJvcGVuX2dhbGxlcnlfaW5fbGlnaHRib3giOjAsIm92ZXJyaWRlX3RodW1ibmFpbF9zZXR0aW5ncyI6MCwidGh1bWJuYWlsX3dpZHRoIjoyNDAsInRodW1ibmFpbF9oZWlnaHQiOjE2MCwidGh1bWJuYWlsX3F1YWxpdHkiOjEwMCwidGh1bWJuYWlsX2Nyb3AiOnRydWUsInRodW1ibmFpbF93YXRlcm1hcmsiOjAsImdhbGxlcnlfZGlzcGxheV90eXBlIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX3RodW1ibmFpbHMiLCJnYWxsZXJ5X2Rpc3BsYXlfdGVtcGxhdGUiOiIiLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn0sImhpZGRlbl9mcm9tX3VpIjpmYWxzZSwiX19kZWZhdWx0c19zZXQiOnRydWV9', 'NextGEN 扩展视图相册 基础版', '', 'draft', 'closed', 'closed', '', '', '', '', '2016-10-11 17:11:40', '0000-00-00 00:00:00', 'eyJ0aXRsZSI6Ik5leHRHRU4gXHU2MjY5XHU1YzU1XHU4OWM2XHU1NmZlXHU3NmY4XHU1MThjIFx1NTdmYVx1Nzg0MFx1NzI0OCIsImVudGl0eV90eXBlcyI6WyJhbGJ1bSIsImdhbGxlcnkiXSwicHJldmlld19pbWFnZV9yZWxwYXRoIjoiXC9uZXh0Z2VuLWdhbGxlcnlcL3Byb2R1Y3RzXC9waG90b2NyYXRpX25leHRnZW5cL21vZHVsZXNcL25leHRnZW5fYmFzaWNfYWxidW1cL3N0YXRpY1wvZXh0ZW5kZWRfcHJldmlldy5qcGciLCJkZWZhdWx0X3NvdXJjZSI6ImFsYnVtcyIsInZpZXdfb3JkZXIiOjEwMjEwLCJuYW1lIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX2V4dGVuZGVkX2FsYnVtIiwiaW5zdGFsbGVkX2F0X3ZlcnNpb24iOiIyLjEuNTAiLCJpZF9maWVsZCI6IklEIiwic2V0dGluZ3MiOnsidXNlX2xpZ2h0Ym94X2VmZmVjdCI6dHJ1ZSwiZ2FsbGVyaWVzX3Blcl9wYWdlIjowLCJlbmFibGVfYnJlYWRjcnVtYnMiOjEsImRpc2FibGVfcGFnaW5hdGlvbiI6MCwiZW5hYmxlX2Rlc2NyaXB0aW9ucyI6MCwidGVtcGxhdGUiOiIiLCJvcGVuX2dhbGxlcnlfaW5fbGlnaHRib3giOjAsIm92ZXJyaWRlX3RodW1ibmFpbF9zZXR0aW5ncyI6MCwidGh1bWJuYWlsX3dpZHRoIjoyNDAsInRodW1ibmFpbF9oZWlnaHQiOjE2MCwidGh1bWJuYWlsX3F1YWxpdHkiOjEwMCwidGh1bWJuYWlsX2Nyb3AiOnRydWUsInRodW1ibmFpbF93YXRlcm1hcmsiOjAsImdhbGxlcnlfZGlzcGxheV90eXBlIjoicGhvdG9jcmF0aS1uZXh0Z2VuX2Jhc2ljX3RodW1ibmFpbHMiLCJnYWxsZXJ5X2Rpc3BsYXlfdGVtcGxhdGUiOiIiLCJuZ2dfdHJpZ2dlcnNfZGlzcGxheSI6Im5ldmVyIn0sImhpZGRlbl9mcm9tX3VpIjpmYWxzZSwiX19kZWZhdWx0c19zZXQiOnRydWV9', 0, 'http://www.gzpblog.com/?post_type=display_type&p=337', 0, 'display_type', '', 0),
(347, 1, '2016-10-12 21:20:55', '2016-10-12 13:20:55', '碰到一个问题，直接在控制器中定义_construct()时，会报错。\r\n\r\n原因：必须调用父类Controller中的__construct()，所以要在定义的控制器中使用__construct就必须用parent::__construct();调用父类Controller中的__construct\r\n\r\n解决：可以用_initialize（thinkphp封装好的）直接定义一个构造函数省去频繁地调用parent::__construct();\r\n\r\n比如：\r\n\r\n[php]\r\n\r\nclass IndexController extends Controller\r\n{\r\npublic function _initialize()\r\n{\r\n//检查是否登录\r\ncheck_login();\r\n}\r\npublic function index()\r\n{\r\n$this-&gt;display(&quot;index&quot;);\r\n}\r\n}\r\n\r\n[/php]\r\n\r\n&nbsp;\r\n\r\n调用parent::__construct()的话：\r\n\r\n[php]\r\nclass IndexController extends Controller\r\n{\r\npublic function __construct()\r\n{\r\nparent::__construct();\r\n\r\n//检查是否登录\r\ncheck_login();\r\n}\r\n\r\npublic function index()\r\n{\r\n$this-&gt;display(&quot;index&quot;);\r\n}\r\n}\r\n\r\n[/php]\r\n', 'ThinkPHP直接在控制器中定义_construct()报错', '', 'publish', 'open', 'open', '', 'thinkphp%e7%9b%b4%e6%8e%a5%e5%9c%a8%e6%8e%a7%e5%88%b6%e5%99%a8%e4%b8%ad%e5%ae%9a%e4%b9%89_construct%e6%8a%a5%e9%94%99', '', '', '2016-10-12 21:25:54', '2016-10-12 13:25:54', '', 0, 'http://www.gzpblog.com/?p=347', 0, 'post', '', 0),
(350, 1, '2016-10-12 21:28:43', '2016-10-12 13:28:43', ' ', '', '', 'publish', 'closed', 'closed', '', '350', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 4, 'http://www.gzpblog.com/?p=350', 19, 'nav_menu_item', '', 0),
(351, 1, '2016-10-12 21:28:43', '2016-10-12 13:28:43', ' ', '', '', 'publish', 'closed', 'closed', '', '351', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 66, 'http://www.gzpblog.com/?p=351', 20, 'nav_menu_item', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(352, 1, '2016-10-12 23:42:31', '2016-10-12 15:42:31', '因为之前没有编程基础，最近才知道排序算法这个概念，原来平时在操作数组的时候是用到“算法”这玩意的。\r\n\r\n从网上找了下资料，都一个来源；用<span class=\"crayon-sy\">$</span><span class=\"crayon-v\">arr</span><span class=\"crayon-o\">=</span><span class=\"crayon-t\">array</span><span class=\"crayon-sy\">(</span><span class=\"crayon-cn\">1</span><span class=\"crayon-sy\">,</span><span class=\"crayon-cn\">43</span><span class=\"crayon-sy\">,</span><span class=\"crayon-cn\">54</span><span class=\"crayon-sy\">,</span><span class=\"crayon-cn\">62</span><span class=\"crayon-sy\">,</span><span class=\"crayon-cn\">21</span><span class=\"crayon-sy\">,</span><span class=\"crayon-cn\">66</span><span class=\"crayon-sy\">,</span><span class=\"crayon-cn\">32</span><span class=\"crayon-sy\">,</span><span class=\"crayon-cn\">78</span><span class=\"crayon-sy\">,</span><span class=\"crayon-cn\">36</span><span class=\"crayon-sy\">,</span><span class=\"crayon-cn\">76</span><span class=\"crayon-sy\">,</span><span class=\"crayon-cn\">39</span><span class=\"crayon-sy\">)</span><span class=\"crayon-sy\">;</span><span class=\"crayon-h\">  做例子排序。</span>\r\n<h2>1. 冒泡排序</h2>\r\n<strong>原理：</strong>在要排序的一组数中，对当前还未排好的序列，从前往后对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即，每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。\r\n<div id=\"crayon-57fd8e9910989465619608-1\" class=\"crayon-line\"><strong>代码实现：</strong></div>\r\n<div class=\"crayon-line\">\r\n\r\n[php]\r\nfunction bubbleSort($arr)\r\n{ \r\n $len=count($arr);\r\n //该层循环控制 需要冒泡的轮数\r\n for($i=1;$i&amp;amp;amp;lt;$len;$i++)\r\n { //该层循环用来控制每轮 冒出一个数 需要比较的次数\r\n  for($k=0;$k&amp;amp;amp;lt;$len-$i;$k++) { if($arr[$k]&amp;amp;amp;gt;$arr[$k+1])\r\n      {\r\n        $tmp=$arr[$k+1];\r\n        $arr[$k+1]=$arr[$k];\r\n        $arr[$k]=$tmp;\r\n      }\r\n  }\r\n }\r\n return $arr;\r\n}\r\n[/php]\r\n\r\n</div>\r\n<div class=\"crayon-line\"></div>\r\n<div class=\"crayon-line\"><strong>理解：</strong></div>\r\n<div class=\"crayon-line\">假设有10个数：</div>\r\n<div class=\"crayon-line\">没排完        排完</div>\r\n<div class=\"crayon-line\">*********    *         （没排完的数中冒出一个最大的）</div>\r\n<div class=\"crayon-line\">********      **       （没排完的数中冒出一个最大的放到排完的中，成为第二大的）</div>\r\n<div class=\"crayon-line\">... ...</div>\r\n<div class=\"crayon-line\">... ...</div>\r\n<div class=\"crayon-line\">*                    *********   （直到没排完的只剩一个最小的，排序完成；过程中没排完的实际上是混序的，两两冒泡不会有排序效果，只是筛选出哪个大哪个小）</div>\r\n<div class=\"crayon-line\"></div>\r\n<div class=\"crayon-line\"></div>\r\n<div class=\"crayon-line\"></div>\r\n<h2 class=\"crayon-line\">2. 选择排序</h2>\r\n<strong>原理：</strong>在要排序的一组数中，选出最小的一个数与第一个位置的数交换。然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。\r\n\r\n<strong>代码实现：</strong>\r\n<div id=\"crayon-57fd8e9910995306915600-1\" class=\"crayon-line\">\r\n\r\n[php]\r\nfunction selectSort($arr) {\r\n //双重循环完成，外层控制轮数，内层控制比较次数\r\n $len=count($arr);\r\n for($i=0; $i&amp;lt;$len-1; $i++) {\r\n   //先假设最小的值的位置\r\n   $p = $i;\r\n   for($j=$i+1; $j&amp;lt;$len; $j++) { //$arr[$p] 是当前已知的最小值 if($arr[$p] &amp;gt; $arr[$j]) {\r\n      //比较，发现更小的,记录下最小值的位置；并且在下次比较时采用已知的最小值进行比较。\r\n      $p = $j;\r\n     }\r\n   }\r\n   //已经确定了当前的最小值的位置，保存到$p中。如果发现最小值的位置与当前假设的位置$i不同，则位置互换即可。\r\n   if($p != $i) {\r\n     $tmp = $arr[$p];\r\n     $arr[$p] = $arr[$i];\r\n     $arr[$i] = $tmp;\r\n   }\r\n  }\r\n //返回最终结果\r\n return $arr;\r\n}\r\n[/php]\r\n\r\n</div>\r\n<div class=\"crayon-line crayon-striped-line\">\r\n\r\n<strong>理解：</strong>\r\n<div class=\"crayon-line\">假设有10个数：</div>\r\n<div class=\"crayon-line\">排完                   没排完</div>\r\n<div class=\"crayon-line\">*                         *********            （所有中抽出一个最小的，放到第一个）</div>\r\n<div class=\"crayon-line\">**                       ********              （没排完的抽出一个最小的，放到第二个）</div>\r\n<div class=\"crayon-line\">... ...</div>\r\n<div class=\"crayon-line\">... ...</div>\r\n<div class=\"crayon-line\"> *********         *                      （直到抽完所有的数，排序完成）</div>\r\n</div>\r\n<div class=\"crayon-line\"></div>\r\n<div class=\"crayon-line\"></div>\r\n<h2 class=\"crayon-line crayon-striped-line\">3. 插入排序</h2>\r\n<strong>原理：</strong>在要排序的一组数中，假设前面的数已经是排好顺序的，现在要把第n个数插到前面的有序数中，使得这n个数也是排好顺序的。如此反复循环，直到全部排好顺序。\r\n\r\n<strong>代码实现：</strong>\r\n\r\n[php]\r\nfunction insertSort($arr) {\r\n $len=count($arr); \r\n for($i=1, $i&lt;$len; $i++) {\r\n   $tmp = $arr[$i];\r\n   //内层循环控制，比较并插入\r\n   for($j=$i-1;$j&gt;=0;$j--) {\r\n     if($tmp &lt; $arr[$j]) {\r\n         //发现插入的元素要小，交换位置，将后边的元素与前面的元素互换\r\n         $arr[$j+1] = $arr[$j];\r\n         $arr[$j] = $tmp;\r\n     } else {\r\n       //如果碰到不需要移动的元素，由于是已经排序好是数组，则前面的就不需要再次比较了。\r\n       break;\r\n     }\r\n   }\r\n }\r\n return $arr;\r\n}&lt;/pre&gt;\r\n&lt;pre&gt;&lt;span style=&quot;font-family: Georgia, \'Times New Roman\', \'Bitstream Charter\', Times, serif; line-height: 1.5;&quot;&gt; &lt;/span&gt;[/php]\r\n\r\n<div class=\"crayon-line crayon-striped-line\"><strong>理解：</strong></div>\r\n<div class=\"crayon-line crayon-striped-line\">\r\n<div class=\"crayon-line\">假设有10个数：</div>\r\n<div class=\"crayon-line\">排完                   没排完</div>\r\n<div class=\"crayon-line\">*                         *********            （拿出没排完的第一个数，到排完的中进行排序）</div>\r\n<div class=\"crayon-line\">**                       ********              （拿出没排完的第一个数，到排完的中进行排序）</div>\r\n<div class=\"crayon-line\">... ...</div>\r\n<div class=\"crayon-line\">... ...</div>\r\n<div class=\"crayon-line\"> *********         *                      （拿出没排完的最后一个数，到排完的中进行排序；期间是两两比较方式）</div>\r\n</div>\r\n<div class=\"crayon-line\"></div>\r\n<div class=\"crayon-line\"></div>\r\n<div class=\"crayon-line\"></div>\r\n<h2 class=\"crayon-line\">4. 快速排序</h2>\r\n<strong>原理：</strong>选择一个基准元素，通常选择第一个元素或者最后一个元素。通过一趟扫描，将待排序列分成两部分，一部分比基准元素小，一部分大于等于基准元素。此时基准元素在其排好序后的正确位置，然后再用同样的方法递归地排序划分的两部分。\r\n\r\n<strong>代码实现：</strong>\r\n\r\n[php]\r\nfunction quickSort($arr) {\r\n  //先判断是否需要继续进行\r\n  $length = count($arr);\r\n  if($length &lt;= 1) {\r\n  return $arr;\r\n  }\r\n\r\n  //选择第一个元素作为基准\r\n  $base_num = $arr[0];\r\n  //遍历除了标尺外的所有元素，按照大小关系放入两个数组内\r\n  //初始化两个数组\r\n  $left_array = array(); //小于基准的\r\n  $right_array = array(); //大于基准的\r\n  for($i=1; $i&lt;$length; $i++) {\r\n    if($base_num &gt; $arr[$i]) {\r\n        //放入左边数组\r\n        $left_array[] = $arr[$i];\r\n    } else {\r\n        //放入右边\r\n        $right_array[] = $arr[$i];\r\n    }\r\n  }\r\n\r\n  //再分别对左边和右边的数组进行相同的排序处理方式递归调用这个函数\r\n  $left_array = quick_sort($left_array);\r\n  $right_array = quick_sort($right_array);\r\n  //合并\r\n  return array_merge($left_array, array($base_num), $right_array);\r\n}\r\n[/php]\r\n\r\n<div class=\"crayon-line\"><strong>理解：</strong></div>\r\n<div class=\"crayon-line\">\r\n<div class=\"crayon-line\">假设有10个数：</div>\r\n<div class=\"crayon-line\">小于拿出                                                    拿出                                 大于拿出</div>\r\n<div class=\"crayon-line\">     ***                                                             *                                      ******</div>\r\n<div class=\"crayon-line\">\r\n<div class=\"crayon-line\">小于拿出   再拿出    大于拿出             之前拿出               小于拿出   再拿出    大于拿出</div>\r\n<div class=\"crayon-line\">        *              *                 *                             *                       **                   *                ***</div>\r\n<div class=\"crayon-line\">... ...</div>\r\n<div class=\"crayon-line\">... ...</div>\r\n<div class=\"crayon-line\">**********</div>\r\n<div class=\"crayon-line\">如此循环直到最后全部拆开，再合起来，排序完成。</div>\r\n</div>\r\n<div class=\"crayon-line\"></div>\r\n</div>\r\n<div class=\"crayon-line\"></div>\r\n<div class=\"crayon-line\"></div>\r\n<div class=\"crayon-line\"></div>\r\n<h2 class=\"crayon-line\">5. 总结</h2>\r\n冒泡排序： 逐渐筛选出最大值\r\n\r\n选择排序：逐渐筛选出最小值\r\n\r\n插入排序：按顺序一个一个取出进行排序\r\n\r\n快速排序：逐渐递归拆分进行排序，直至全部拆分排序完成\r\n\r\n&nbsp;', '四种基本排序算法以及PHP实现', '', 'publish', 'open', 'open', '', '%e5%9b%9b%e7%a7%8d%e5%9f%ba%e6%9c%ac%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95%e4%bb%a5%e5%8f%8aphp%e5%ae%9e%e7%8e%b0', '', '', '2016-10-12 23:54:07', '2016-10-12 15:54:07', '', 0, 'http://www.gzpblog.com/?p=352', 0, 'post', '', 0),
(358, 1, '2016-10-13 00:00:17', '2016-10-12 16:00:17', '学了一下算法排序，豁然开朗，神清气爽，终于发现了有编程底子的人，应该具备了什么思想。差距在哪里。\r\n\r\n“算法”这玩意真是，太神奇了，之前一直没研究过。\r\n\r\n这个就是逻辑啊，具有高效处理逻辑的代码必须研究“算法”啊。之前的开发过程中确实没有深究太多，都是抓来一个函数直接就用。\r\n\r\n我觉得这个东西，是我以后没事需要研究一下的东西，帮助是极大的。', '算法排序真是神奇的东西', '', 'publish', 'open', 'open', '', '%e7%ae%97%e6%b3%95%e6%8e%92%e5%ba%8f%e7%9c%9f%e6%98%af%e7%a5%9e%e5%a5%87%e7%9a%84%e4%b8%9c%e8%a5%bf', '', '', '2016-10-13 00:00:17', '2016-10-12 16:00:17', '', 0, 'http://www.gzpblog.com/?p=358', 0, 'post', '', 0),
(360, 1, '2016-10-13 12:01:48', '2016-10-13 04:01:48', ' ', '', '', 'publish', 'closed', 'closed', '', '360', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 4, 'http://www.gzpblog.com/?p=360', 29, 'nav_menu_item', '', 0),
(361, 1, '2016-10-13 12:01:47', '2016-10-13 04:01:47', ' ', '', '', 'publish', 'closed', 'closed', '', '361', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 4, 'http://www.gzpblog.com/?p=361', 23, 'nav_menu_item', '', 0),
(362, 1, '2016-10-13 12:01:47', '2016-10-13 04:01:47', ' ', '', '', 'publish', 'closed', 'closed', '', '362', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 70, 'http://www.gzpblog.com/?p=362', 25, 'nav_menu_item', '', 0),
(363, 1, '2016-10-13 12:01:48', '2016-10-13 04:01:48', ' ', '', '', 'publish', 'closed', 'closed', '', '363', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 4, 'http://www.gzpblog.com/?p=363', 38, 'nav_menu_item', '', 0),
(509, 1, '2016-11-19 16:30:49', '2016-11-19 08:30:49', '<h3><b>Md5()加密算法</b></h3>\r\n<div>方式: 单向加密</div>\r\n<div>语法: <strong>md5(string $str [, bool $raw_output = false])</strong></div>\r\n<div>$str:原始字符串</div>\r\n<div>$raw_output:如果可选的raw_output被设置为true, 那么md5报文摘要将以16字节长度的原始二进制格式返回. 返回以32位字符十六进制数字形式返回散列值</div>\r\n<div>md5二次加密:md5(md5($string, true))</div>\r\n<div></div>\r\n<h3><b>Crypt()加密算法</b></h3>\r\n<div>方式: 单向加密</div>\r\n<div>语法: <strong>string crypt(string $str[, string $salt])</strong>, 返回一个基于标准UNIX DES算法或系统上其它可用的替代算法的三列字符串</div>\r\n<div>$str: 需要加密的明文</div>\r\n<div>$salt: 加密时的干扰串,是编码更安全</div>\r\n<div>注意: 如果加密时没有加上这个$salt参数, 将随机生成一个干扰串, 否则刷新加密秘文不变</div>\r\n<div>算法常量:</div>\r\n<div>[CRYPT_SALT_LENGTH]</div>\r\n<div style=\"padding-left: 30px;\">默认的加密长度。使用标准的 DES 加密，长度为 2</div>\r\n<div>[CRYPT_STD_DES]</div>\r\n<div style=\"padding-left: 30px;\">基于标准 DES 算法的散列使用 \"./0-9A-Za-z\" 字符中的两个字符作为盐值。在盐值中使用非法的字符将导致 crypt() 失败。</div>\r\n<div>[CRYPT_EXT_DES]</div>\r\n<div style=\"padding-left: 30px;\">扩展的基于 DES 算法的散列。其盐值为 9 个字符的字符串，由 1 个下划线后面跟着 4 字节循环次数和 4 字节盐值组成。它们被编码成可打印字符，每个字符 6 位，有效位最少的优先。0 到 63 被编码为 \"./0-9A-Za-z\"。在盐值中使用非法的字符将导致 crypt() 失败。</div>\r\n<div>[CRYPT_MD5]</div>\r\n<div style=\"padding-left: 30px;\">MD5 散列使用一个以 $1$ 开始的 12 字符的字符串盐值。</div>\r\n<div>[CRYPT_BLOWFISH]</div>\r\n<div style=\"padding-left: 30px;\">Blowfish 算法使用如下盐值：“$2a$”，一个两位 cost 参数，“$” 以及 64 位由 “./0-9A-Za-z” 中的字符组合而成的字符串。在盐值中使用此范围之外的字符将导致 crypt() 返回一个空字符串。两位 cost 参数是循环次数以 2 为底的对数，它的范围是 04-31，超出这个范围将导致 crypt() 失败。</div>\r\n<div>CRYPT_SHA256</div>\r\n<div style=\"padding-left: 30px;\">SHA-256 算法使用一个以 $5$ 开头的 16 字符字符串盐值进行散列。如果盐值字符串以 “rounds=&lt;N&gt;$” 开头，N 的数字值将被用来指定散列循环的执行次数，这点很像 Blowfish 算法的 cost 参数。默认的循环次数是 5000，最小是 1000，最大是 999,999,999。超出这个范围的 N 将会被转换为最接近的值。</div>\r\n<div>CRYPT_SHA512</div>\r\n<div style=\"padding-left: 30px;\">SHA-512 算法使用一个以 $6$ 开头的 16 字符字符串盐值进行散列。如果盐值字符串以 “rounds=&lt;N&gt;$” 开头，N 的数字值将被用来指定散列循环的执行次数，这点很像 Blowfish 算法的 cost 参数。默认的循环次数是 5000，最小是 1000，最大是 999,999,999。超出这个范围的 N 将会被转换为最接近的值。</div>\r\n<div style=\"padding-left: 30px;\"></div>\r\n<div>例:</div>\r\n<div>\r\n\r\n[php]\r\nif(CRYPT_MD5){\r\n    echo &quot;MD5加密:&quot;.crypt(\'something\',\'$1$somethin$\');\r\n}\r\n[/php]\r\n\r\n</div>\r\n<div></div>\r\n<h3><b>Sha1()加密算法</b></h3>\r\n<div>方式: 单向加密</div>\r\n<div>语法: <strong>string sha1(string $str [, bool $raw_output=false])</strong> 计算字符串的sha1散列值</div>\r\n<div>$str: 加密的字符串</div>\r\n<div>$raw_output: 如果可选的raw_output参数被设置为TRUE, 那么sha1摘要将以20字符长度的原始格式返回, 否则返回值是一个40字符串长度的十六进制数字.</div>\r\n<div></div>\r\n<div></div>\r\n<h3><b>URL编码加密技术</b></h3>\r\n<div>编码URL字符串: <strong>urlencode(string $str)</strong></div>\r\n<div>解码已编码的URL字符串: <strong>urldeocde(string $str)</strong></div>\r\n<div>编码规范: 此字符串中除了-_.之外的所有非字母数字字符都将被替换成百分号(%)后跟两位十六进制数, 空格则编码为加号(+)</div>\r\n<div></div>\r\n<div>按照RFC1738对URL进行编码: <strong>rawurlencode(string $str)</strong>: 返回从字符串,把空格编码为%20</div>\r\n<div>对已编码的字符串进行解码: <strong>rawurldecode(string $str)</strong>: 返回字符串, 此字符串中百分号%后跟两位十六进制的序列豆将被替换成原义字符</div>\r\n<div>urlencode和rawurlencode的区别只在于空格.</div>\r\n<div></div>\r\n<h3><b>Base64编码加密技术</b></h3>\r\n<div>使用base64对data进行编码: <strong>base64_encode(string $data)</strong></div>\r\n<div>对使用MIME base64编码的数据进行解码: <strong>base64_decode(string $data[, $strict=false])</strong>; $strict:如果输入的数据超出了base64的字母表,则返回false.</div>\r\n<div></div>\r\n<div>base64编码的图片还可以直接放在&lt;img&gt;标签中显示:</div>\r\n<div>&lt;img src=\"data:image/jpeg;base64,编码字符串\" alt=\"\"/&gt;</div>\r\n<div>&lt;img src=\"data:;base64,编码字符串\" alt=\"\"/&gt;</div>\r\n<div></div>\r\n<h3><b>信息加密技术:</b></h3>\r\n<div><strong>1 单项散列加密:</strong></div>\r\n<div>     指通过不同输入的长度的信息进行散列计算, 得到固定长度的输出, 这个散列计算过程是单向的, 既不能对固定长度的输出进行计算从而活儿输出信息.</div>\r\n<div><strong>2 对称散列加密</strong></div>\r\n<div>     指加密和解密的密匙是同一个密匙或者可以互相推算.</div>\r\n<div><strong>3 非对称散列加密</strong></div>\r\n<div>     非对称加密和解密的密匙不是同一个密匙, 其中一个对外公开, 被称作公钥, 另一个只有所有者知道.</div>', 'PHP加密技术', '', 'publish', 'open', 'open', '', 'php%e5%8a%a0%e5%af%86%e6%8a%80%e6%9c%af', '', '', '2016-11-19 16:41:30', '2016-11-19 08:41:30', '', 0, 'http://www.gzpblog.com/?p=509', 0, 'post', '', 0),
(510, 1, '2016-11-19 16:26:48', '2016-11-19 08:26:48', '', 'php_encode', '', 'inherit', 'open', 'closed', '', 'php_encode', '', '', '2016-11-19 16:26:48', '2016-11-19 08:26:48', '', 509, 'http://www.gzpblog.com/wp-content/uploads/2016/11/php_encode.jpg', 0, 'attachment', 'image/jpeg', 0),
(380, 1, '2016-10-16 14:29:20', '2016-10-16 06:29:20', '', 'me', '', 'inherit', 'open', 'closed', '', 'me', '', '', '2016-10-16 14:29:20', '2016-10-16 06:29:20', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/me.jpg', 0, 'attachment', 'image/jpeg', 0),
(384, 1, '2016-10-17 15:39:30', '2016-10-17 07:39:30', '', 'centos6.6setup5', '', 'inherit', 'open', 'closed', '', 'centos6-6setup5', '', '', '2016-10-17 15:39:30', '2016-10-17 07:39:30', '', 383, 'http://www.gzpblog.com/wp-content/uploads/2016/10/centos6.6setup5.png', 0, 'attachment', 'image/png', 0),
(385, 1, '2016-10-17 15:39:32', '2016-10-17 07:39:32', '', 'centos6.6setup6', '', 'inherit', 'open', 'closed', '', 'centos6-6setup6', '', '', '2016-10-17 15:39:32', '2016-10-17 07:39:32', '', 383, 'http://www.gzpblog.com/wp-content/uploads/2016/10/centos6.6setup6.png', 0, 'attachment', 'image/png', 0),
(386, 1, '2016-10-17 15:39:35', '2016-10-17 07:39:35', '', 'centos6.6setup7', '', 'inherit', 'open', 'closed', '', 'centos6-6setup7', '', '', '2016-10-17 15:39:35', '2016-10-17 07:39:35', '', 383, 'http://www.gzpblog.com/wp-content/uploads/2016/10/centos6.6setup7.png', 0, 'attachment', 'image/png', 0),
(387, 1, '2016-10-17 15:39:39', '2016-10-17 07:39:39', '', 'centos6.6setup8', '', 'inherit', 'open', 'closed', '', 'centos6-6setup8', '', '', '2016-10-17 15:39:39', '2016-10-17 07:39:39', '', 383, 'http://www.gzpblog.com/wp-content/uploads/2016/10/centos6.6setup8.png', 0, 'attachment', 'image/png', 0),
(388, 1, '2016-10-17 15:39:45', '2016-10-17 07:39:45', '', 'centos6.6setup9', '', 'inherit', 'open', 'closed', '', 'centos6-6setup9', '', '', '2016-10-17 15:39:45', '2016-10-17 07:39:45', '', 383, 'http://www.gzpblog.com/wp-content/uploads/2016/10/centos6.6setup9.png', 0, 'attachment', 'image/png', 0),
(389, 1, '2016-10-17 15:39:48', '2016-10-17 07:39:48', '', 'centos6.6setup1', '', 'inherit', 'open', 'closed', '', 'centos6-6setup1', '', '', '2016-10-17 15:39:48', '2016-10-17 07:39:48', '', 383, 'http://www.gzpblog.com/wp-content/uploads/2016/10/centos6.6setup1.png', 0, 'attachment', 'image/png', 0),
(390, 1, '2016-10-17 15:39:51', '2016-10-17 07:39:51', '', 'centos6.6setup2', '', 'inherit', 'open', 'closed', '', 'centos6-6setup2', '', '', '2016-10-17 15:39:51', '2016-10-17 07:39:51', '', 383, 'http://www.gzpblog.com/wp-content/uploads/2016/10/centos6.6setup2.png', 0, 'attachment', 'image/png', 0),
(391, 1, '2016-10-17 15:39:55', '2016-10-17 07:39:55', '', 'centos6.6setup3', '', 'inherit', 'open', 'closed', '', 'centos6-6setup3', '', '', '2016-10-17 15:39:55', '2016-10-17 07:39:55', '', 383, 'http://www.gzpblog.com/wp-content/uploads/2016/10/centos6.6setup3.png', 0, 'attachment', 'image/png', 0),
(392, 1, '2016-10-17 15:39:59', '2016-10-17 07:39:59', '', 'centos6.6setup4', '', 'inherit', 'open', 'closed', '', 'centos6-6setup4', '', '', '2016-10-17 15:39:59', '2016-10-17 07:39:59', '', 383, 'http://www.gzpblog.com/wp-content/uploads/2016/10/centos6.6setup4.png', 0, 'attachment', 'image/png', 0),
(394, 1, '2016-10-17 15:53:34', '2016-10-17 07:53:34', ' ', '', '', 'publish', 'closed', 'closed', '', '394', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 69, 'http://www.gzpblog.com/?p=394', 39, 'nav_menu_item', '', 0),
(395, 1, '2016-10-18 01:08:17', '2016-10-17 17:08:17', '', 'uic-logo', '', 'inherit', 'open', 'closed', '', 'uic-logo', '', '', '2016-10-18 01:16:04', '2016-10-17 17:16:04', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/uic-logo.jpg', 0, 'attachment', 'image/jpeg', 0),
(396, 1, '2016-10-18 01:08:22', '2016-10-17 17:08:22', 'uic校名石', 'uic-campus', 'uic校名石', 'inherit', 'open', 'closed', '', 'uic-campus', '', '', '2016-10-18 18:19:56', '2016-10-18 10:19:56', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/uic-campus.jpg', 0, 'attachment', 'image/jpeg', 0),
(397, 1, '2016-10-18 01:08:25', '2016-10-17 17:08:25', '毕业留念', 'uic-graduated', '毕业留念', 'inherit', 'open', 'closed', '', 'uic-graduated', '', '', '2016-10-18 18:12:12', '2016-10-18 10:12:12', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/uic-graduated.jpg', 0, 'attachment', 'image/jpeg', 0),
(855, 1, '2017-03-30 22:29:34', '2017-03-30 14:29:34', '最近接触阿里云有点多，不管是个人使用，还是公司使用，使用的频率还是很高的。为了方便下次要用时直接套进去，整了一个资源包：阿里云oss-php-sdk，plupload的web直传，JqueryUI样式等的合集，扔进了Thinkphp5里。\r\n\r\ngithub地址：<a href=\"https://github.com/ZpGuo/aliyun-oss-for-thinkphp5\" target=\"_blank\"> ZpGuo/aliyun-oss-for-thinkphp5</a>\r\n<h3>与阿里云官方SDK的区别：</h3>\r\n<ul>\r\n 	<li>样式升级；阿里云Oss-Web直传最佳实践（可回调）升级版，载入Plupload提供的JqueryUI样式。</li>\r\n 	<li>结合引入oss-php-sdk，可以直接拓展使用oss-php-sdk功能。</li>\r\n 	<li>修改config.php中的配置就可以使用。</li>\r\n</ul>\r\n<h3>版本说明：</h3>\r\n<ul>\r\n 	<li>JQuery 版本1.12.4</li>\r\n 	<li>JQuery UI版本1.12.1，主题Cupertino</li>\r\n 	<li>Thinkphp 版本5.0.2</li>\r\n 	<li>Plupload.js 版本2.1.X</li>\r\n 	<li>阿里云Oss官方SDK 版本2.2.2</li>\r\n</ul>\r\n<h3>预览：</h3>\r\nweb值传的界面：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/aliyun-tp5-look-like.png\"><img class=\"size-full wp-image-851 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/aliyun-tp5-look-like.png\" alt=\"\" width=\"693\" height=\"316\" /></a>\r\n<h3>其它说明：</h3>\r\n<ul>\r\n 	<li>保留了引入拓展的后续升级的可能</li>\r\n 	<li>可以更换JqueryUI的样式主题，前往官网Jquery UI定制下载：<a href=\"http://jqueryui.com/download/\" target=\"_blank\">Jquery UI </a></li>\r\n 	<li>目前就是一个打包，功能不多，之后看看公司项目需求，完善一下功能，或者把Controller功能补完</li>\r\n 	<li>跨域时记得在阿里云OSS跨域设置中设置Cors规则</li>\r\n</ul>\r\n<h3>更多文档：</h3>\r\n<ol>\r\n 	<li>Plupload官网：<a href=\"http://www.plupload.com/\" target=\"_blank\">Plupload: Multi-runtime File-Uploader</a></li>\r\n 	<li>阿里云Oss：<a href=\"https://help.aliyun.com/document_detail/32099.html?spm=5176.product31815.6.744.SAFZWk\" target=\"_blank\">PHP-SDK</a></li>\r\n 	<li>阿里云Oss最佳实践Web端直传：<a href=\"https://help.aliyun.com/document_detail/31927.html?spm=5176.doc32099.6.625.la8OMv\" target=\"_blank\">服务端签名直传并设置上传回调</a></li>\r\n</ol>\r\n&nbsp;', '阿里云Oss+Thinkphp5，Web一站式可拓展包', '', 'inherit', 'closed', 'closed', '', '850-revision-v1', '', '', '2017-03-30 22:29:34', '2017-03-30 14:29:34', '', 850, 'https://www.gzpblog.com/20170330/855.html', 0, 'revision', '', 0),
(856, 1, '2017-03-30 22:35:29', '2017-03-30 14:35:29', '最近接触阿里云的对象存储OSS有点多，不管是个人使用，还是公司使用，使用的频率还是很高的。为了方便下次要用时直接套进去，整了一个资源包：阿里云oss-php-sdk，plupload的web直传，JqueryUI样式等的合集，扔进了Thinkphp5里。\r\n\r\ngithub地址：<a href=\"https://github.com/ZpGuo/aliyun-oss-for-thinkphp5\" target=\"_blank\"> ZpGuo/aliyun-oss-for-thinkphp5</a>\r\n<h3>与阿里云官方SDK的区别：</h3>\r\n<ul>\r\n 	<li>样式升级；阿里云Oss-Web直传最佳实践（可回调）升级版，载入Plupload提供的JqueryUI样式。</li>\r\n 	<li>结合引入oss-php-sdk，可以直接拓展使用oss-php-sdk功能。</li>\r\n 	<li>修改config.php中的配置就可以使用。</li>\r\n</ul>\r\n<h3>版本说明：</h3>\r\n<ul>\r\n 	<li>JQuery 版本1.12.4</li>\r\n 	<li>JQuery UI版本1.12.1，主题Cupertino</li>\r\n 	<li>Thinkphp 版本5.0.2</li>\r\n 	<li>Plupload.js 版本2.1.X</li>\r\n 	<li>阿里云Oss官方SDK 版本2.2.2</li>\r\n</ul>\r\n<h3>预览：</h3>\r\nweb值传的界面：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/aliyun-tp5-look-like.png\"><img class=\"size-full wp-image-851 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/aliyun-tp5-look-like.png\" alt=\"\" width=\"693\" height=\"316\" /></a>\r\n<h3>其它说明：</h3>\r\n<ul>\r\n 	<li>保留了引入拓展的后续升级的可能</li>\r\n 	<li>可以更换JqueryUI的样式主题，前往官网Jquery UI定制下载：<a href=\"http://jqueryui.com/download/\" target=\"_blank\">Jquery UI </a></li>\r\n 	<li>目前就是一个打包，功能不多，之后看看公司项目需求，完善一下功能，或者把Controller功能补完</li>\r\n 	<li>跨域时记得在阿里云OSS跨域设置中设置Cors规则</li>\r\n</ul>\r\n<h3>更多文档：</h3>\r\n<ol>\r\n 	<li>Plupload官网：<a href=\"http://www.plupload.com/\" target=\"_blank\">Plupload: Multi-runtime File-Uploader</a></li>\r\n 	<li>阿里云Oss：<a href=\"https://help.aliyun.com/document_detail/32099.html?spm=5176.product31815.6.744.SAFZWk\" target=\"_blank\">PHP-SDK</a></li>\r\n 	<li>阿里云Oss最佳实践Web端直传：<a href=\"https://help.aliyun.com/document_detail/31927.html?spm=5176.doc32099.6.625.la8OMv\" target=\"_blank\">服务端签名直传并设置上传回调</a></li>\r\n</ol>\r\n&nbsp;', '阿里云Oss+Thinkphp5，Web一站式可拓展包', '', 'inherit', 'closed', 'closed', '', '850-revision-v1', '', '', '2017-03-30 22:35:29', '2017-03-30 14:35:29', '', 850, 'https://www.gzpblog.com/20170330/856.html', 0, 'revision', '', 0),
(859, 1, '2017-04-06 11:51:30', '2017-04-06 03:51:30', '', 'oss_400', '', 'inherit', 'open', 'closed', '', 'oss_400', '', '', '2017-04-06 11:51:30', '2017-04-06 03:51:30', '', 858, 'https://www.gzpblog.com/wp-content/uploads/2017/04/oss_400.png', 0, 'attachment', 'image/png', 0),
(401, 1, '2016-10-18 01:59:20', '2016-10-17 17:59:20', '', 'terena-logo', '', 'inherit', 'open', 'closed', '', 'terena-logo', '', '', '2016-10-18 01:59:20', '2016-10-17 17:59:20', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/terena-logo.jpg', 0, 'attachment', 'image/jpeg', 0),
(402, 1, '2016-10-18 02:16:38', '2016-10-17 18:16:38', '', 'cego168-logo', '', 'inherit', 'open', 'closed', '', 'cego168-logo', '', '', '2016-10-18 02:16:38', '2016-10-17 18:16:38', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/cego168-logo.jpg', 0, 'attachment', 'image/jpeg', 0),
(403, 1, '2016-10-18 02:16:43', '2016-10-17 18:16:43', '', 'yanwu-logo', '', 'inherit', 'open', 'closed', '', 'yanwu-logo', '', '', '2016-10-18 02:16:43', '2016-10-17 18:16:43', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/yanwu-logo.png', 0, 'attachment', 'image/png', 0),
(404, 1, '2016-10-18 16:26:27', '2016-10-18 08:26:27', '环娱易购微信1', 'cego168-wechat1', '环娱易购微信1', 'inherit', 'open', 'closed', '', 'cego168-wechat1', '', '', '2016-10-18 19:45:33', '2016-10-18 11:45:33', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/cego168-wechat1.png', 0, 'attachment', 'image/png', 0),
(405, 1, '2016-10-18 16:26:31', '2016-10-18 08:26:31', '环娱易购微信2', 'cego168-wechat2', '环娱易购微信2', 'inherit', 'open', 'closed', '', 'cego168-wechat2', '', '', '2016-10-18 19:45:33', '2016-10-18 11:45:33', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/cego168-wechat2.png', 0, 'attachment', 'image/png', 0),
(406, 1, '2016-10-18 16:26:35', '2016-10-18 08:26:35', '环娱易购移动版用户登录', 'cego168-userlogin', '环娱易购移动版用户登录', 'inherit', 'open', 'closed', '', 'cego168-userlogin', '', '', '2016-10-18 19:47:20', '2016-10-18 11:47:20', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/cego168-userlogin.png', 0, 'attachment', 'image/png', 0),
(407, 1, '2016-10-18 16:26:48', '2016-10-18 08:26:48', '环娱易购移动版商品详情', 'cego168-gooddetail', '环娱易购移动版商品详情', 'inherit', 'open', 'closed', '', 'cego168-gooddetail', '', '', '2016-10-18 19:47:26', '2016-10-18 11:47:26', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/cego168-gooddetail.png', 0, 'attachment', 'image/png', 0),
(408, 1, '2016-10-18 16:26:52', '2016-10-18 08:26:52', '环娱易购移动版商品详情', 'cego168-mobileUserCenter', '环娱易购移动版商品详情', 'inherit', 'open', 'closed', '', 'cego168-mobileusercenter', '', '', '2016-10-18 19:47:30', '2016-10-18 11:47:30', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/cego168-mobileUserCenter.png', 0, 'attachment', 'image/png', 0),
(409, 1, '2016-10-18 16:26:55', '2016-10-18 08:26:55', '环娱易购移动版购物车', 'cego168-mobileCart', '环娱易购移动版购物车', 'inherit', 'open', 'closed', '', 'cego168-mobilecart', '', '', '2016-10-18 19:47:40', '2016-10-18 11:47:40', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/cego168-mobileCart.png', 0, 'attachment', 'image/png', 0),
(410, 1, '2016-10-18 16:26:59', '2016-10-18 08:26:59', '环娱易购PC端首页', 'cego168-PCindex', '环娱易购PC端首页', 'inherit', 'open', 'closed', '', 'cego168-pcindex', '', '', '2016-10-18 19:47:45', '2016-10-18 11:47:45', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/cego168-PCindex.png', 0, 'attachment', 'image/png', 0),
(411, 1, '2016-10-18 16:27:04', '2016-10-18 08:27:04', '环娱易PC端用户中心', 'cego168-PCusercenter', '环娱易PC端用户中心', 'inherit', 'open', 'closed', '', 'cego168-pcusercenter', '', '', '2016-10-18 19:47:50', '2016-10-18 11:47:50', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/cego168-PCusercenter.png', 0, 'attachment', 'image/png', 0),
(412, 1, '2016-10-18 16:27:09', '2016-10-18 08:27:09', '环娱易购工作内容简单描述', 'cego168-PCmywork', '环娱易购工作内容简单描述', 'inherit', 'open', 'closed', '', 'cego168-pcmywork', '', '', '2016-10-18 19:47:54', '2016-10-18 11:47:54', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/cego168-PCmywork.png', 0, 'attachment', 'image/png', 0),
(413, 1, '2016-10-18 16:27:41', '2016-10-18 08:27:41', '环娱易购移动版商品列表', 'cego168-goodsshow', '环娱易购移动版商品列表', 'inherit', 'open', 'closed', '', 'cego168-goodsshow', '', '', '2016-10-18 19:47:59', '2016-10-18 11:47:59', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/cego168-goodsshow.png', 0, 'attachment', 'image/png', 0),
(414, 1, '2016-10-18 16:27:54', '2016-10-18 08:27:54', '环娱易购移动版首页', 'cego168-mobileindex', '环娱易购移动版首页', 'inherit', 'open', 'closed', '', 'cego168-mobileindex', '', '', '2016-10-18 19:48:03', '2016-10-18 11:48:03', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/cego168-mobileindex.png', 0, 'attachment', 'image/png', 0),
(415, 1, '2016-10-18 16:28:03', '2016-10-18 08:28:03', '九里台APP', 'jlt-demo', '九里台APP', 'inherit', 'open', 'closed', '', 'jlt-demo', '', '', '2016-10-18 21:05:55', '2016-10-18 13:05:55', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/jlt-demo.png', 0, 'attachment', 'image/png', 0),
(416, 1, '2016-10-18 16:28:09', '2016-10-18 08:28:09', '九里台后台管理登录', 'jly-login', '九里台后台管理登录', 'inherit', 'open', 'closed', '', 'jly-login', '', '', '2016-10-18 21:05:55', '2016-10-18 13:05:55', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/jly-login.png', 0, 'attachment', 'image/png', 0),
(417, 1, '2016-10-18 16:28:13', '2016-10-18 08:28:13', '九里台后台管理登录首页（demo版本，也不不涉信息，单纯首页截图留恋）', 'jlt-adminindex', '九里台后台管理登录首页（demo版本，也不不涉信息，单纯首页截图留恋）', 'inherit', 'open', 'closed', '', 'jlt-adminindex', '', '', '2016-10-18 21:05:55', '2016-10-18 13:05:55', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/jlt-adminindex.png', 0, 'attachment', 'image/png', 0),
(455, 1, '2016-10-18 22:27:54', '2016-10-18 14:27:54', '', 'jlt-card', '九里台卡包', 'inherit', 'open', 'closed', '', 'jlt-card', '', '', '2016-10-18 22:31:46', '2016-10-18 14:31:46', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/jlt-card.png', 0, 'attachment', 'image/png', 0),
(469, 1, '2016-10-18 22:53:41', '2016-10-18 14:53:41', '', 'jlt-share', '九里台分享', 'inherit', 'open', 'closed', '', 'jlt-share', '', '', '2016-10-18 22:54:34', '2016-10-18 14:54:34', '', 0, 'http://www.gzpblog.com/wp-content/uploads/2016/10/jlt-share.png', 0, 'attachment', 'image/png', 0),
(482, 1, '2016-11-03 00:19:48', '2016-11-02 16:19:48', '我的天呐！这道题的出镜率竟然这么高！然而这种简单的基础题面前我竟然是一脸懵比。越是简单的，越是容易忘记。\r\n\r\n而且他们都很喜欢“5种”，“5条”。行，把这个怼了！\r\n\r\n&nbsp;\r\n\r\n第一种:\r\n\r\n[php]\r\nfunction get_extension($file) \r\n{ \r\n    substr(strrchr($file, \'.\'), 1); \r\n} \r\n[/php]\r\n\r\n第二种:\r\n\r\n[php]\r\n\r\nfunction get_extension($file)\r\n{\r\n    return substr($file, strrpos($file, \'.\')+1);\r\n}\r\n\r\n[/php]\r\n\r\n第三种:\r\n\r\n[php]\r\nfunction get_extension($file) \r\n{ \r\n    return end(explode(\'.\', $file)); \r\n} \r\n[/php]\r\n\r\n第四种:\r\n\r\n[php]\r\nfunction get_extension($file) \r\n{ \r\n    $info = pathinfo($file); \r\n    return $info[\'extension\']; \r\n} \r\n[/php]\r\n\r\n第五种:\r\n\r\n[php]\r\nfunction get_extension($file) \r\n{ \r\n    return pathinfo($file, PATHINFO_EXTENSION); \r\n} \r\n[/php]\r\n', 'PHP中获取文件扩展名的五种方法?', '', 'publish', 'open', 'open', '', 'php%e4%b8%ad%e8%8e%b7%e5%8f%96%e6%96%87%e4%bb%b6%e6%89%a9%e5%b1%95%e5%90%8d%e7%9a%84%e4%ba%94%e7%a7%8d%e6%96%b9%e6%b3%95', '', '', '2016-11-03 00:19:48', '2016-11-02 16:19:48', '', 0, 'http://www.gzpblog.com/?p=482', 0, 'post', '', 0),
(485, 1, '2016-11-05 18:15:05', '2016-11-05 10:15:05', '折腾了一周，工作还没成。可能十月份十一月份这段时间真的不好找工作，之前跳槽用了两天就搞定了（当然没有太过于讲究）。\r\n\r\n跑了一周的深圳，还去了一趟广州，心有点累。首先，第一个面试就被打击了，有点影响我后面面试时的心情，毕竟第一次面试受到这么大打击。嗯，一到那，满身大汗，做个题，因为是boos直聘上约的，是一个php高级工程师的职位，题目好难，对于我来说，好难，有好多数据结构算法，系统运维之类的题目。可惜我没有学过这些，也是从那时候意识到该系统性的把欠的债补回来了。那时候不知道是不是太累了还没吃饭的原因，DISTINCT拼错了，计算字符串的函数搞错了，反正发挥很糟糕。\r\n\r\n发挥得很糟糕我承认，我现在的水平也确实承担不起这个岗位，也是打开了新世界的大门，原来还有这么多东西也要学，原来自己已经太过于依赖搜索引擎了。但是，这也不至于你直接否定我的大学。你厉害，我承认交大我考不上，但是我高三也不是在抠脚。重点是，你在没有了解的情况下，凭什么直接否定我的大学生活。“我就没见过国内有大学是还能忙。”说真的，你没见过，就不一定就没有。我们没有毛概没有思修，没有计算机水平考试，CET爱考不考，我们到大四还要期末考，各种presentation，各种deadline，各种paper等着你。我刚入学时，完全听不懂老师在讲什么，我英语差，我在这种全英教育的英文环境里，我很吃力，以我大学前两年的成绩，我是要被退学的，是的GPA太低会被退学。但是我毕业了，我没有很闲！我大学想读计算机专业的，父母不给，我也没想到毕业后父母就不反对了。\r\n\r\n是落下了很多，也确实是要更加努力补一补了。\r\n\r\n现在去面试，发现一些问题，比较有前景的创业公司对技术要求比较高；大公司可能简历这一块就过不去了；小公司可能不急着找人的也开不起这个工资。我只是想在深圳南山区扎下根来，然后一步一步跟着计划走，现在发现，这个季节，好难。\r\n\r\n再说说面试经常问到或者题目经常出现的：\r\n<ul>\r\n 	<li> url跨域问题</li>\r\n 	<li> php获取拓展名</li>\r\n 	<li> &amp;符</li>\r\n 	<li> 简单排序算法</li>\r\n 	<li> 字符串长度操作</li>\r\n 	<li> 打印时间操作</li>\r\n 	<li> php缓存相关</li>\r\n</ul>\r\n总结下来，现在当务之急，先去把php手册过一遍，然后解决一下缓存操作。', '面试一波下来，总结一下', '', 'publish', 'open', 'open', '', '%e9%9d%a2%e8%af%95%e4%b8%80%e6%b3%a2%e4%b8%8b%e6%9d%a5%ef%bc%8c%e6%80%bb%e7%bb%93%e4%b8%80%e4%b8%8b', '', '', '2016-11-05 18:26:29', '2016-11-05 10:26:29', '', 0, 'http://www.gzpblog.com/?p=485', 0, 'post', '', 0),
(497, 1, '2016-11-14 21:04:42', '2016-11-14 13:04:42', '玩过Linux的人都会知道，Linux中的命令的确是非常多，但是玩过Linux的人也从来不会因为Linux的命令如此之多而烦恼，因为我们只需要掌握我们最常用的命令就可以了。当然你也可以在使用时去找一下man，他会帮你解决不少的问题。然而每个人玩Linux的目的都不同，所以他们常用的命令也就差异非常大，而我主要是用Linux进行C/C++和shell程序编写的，所以常用到的命令可以就会跟一个管理Linux系统的人有所不同。因为不想在使用是总是东查西找，所以在此总结一下，方便一下以后的查看。不多说，下面就说说我最常用的Linux命令。\r\n<h3><strong>1、cd命令</strong></h3>\r\n<div>这是一个非常基本，也是大家经常需要使用的命令，它用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径。如：</div>\r\n<div>\r\n\r\n[code]\r\ncd /root/Docements # 切换到目录/root/Docements \r\ncd ./path          # 切换到当前目录下的path目录中，“.”表示当前目录 \r\ncd ../path         # 切换到上层目录中的path目录中，“..”表示上一层目录 \r\n[/code]\r\n\r\n<h3>2、ls命令</h3>\r\n这是一个非常有用的查看文件与目录的命令，list之意，它的参数非常多，下面就列出一些我常用的参数吧，如下：\r\n\r\n[code]\r\n-l ：列出长数据串，包含文件的属性与权限数据等 \r\n-a ：列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用） \r\n-d ：仅列出目录本身，而不是列出目录的文件数据 \r\n-h ：将文件容量以较易读的方式（GB，kB等）列出来 \r\n-R ：连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来 \r\n[/code]\r\n\r\n</div>\r\n<div>\r\n\r\n注：这些参数也可以组合使用，下面举两个例子：\r\n\r\n[code]\r\nls -l  #以长数据串的形式列出当前目录下的数据文件和目录 \r\nls -lR #以长数据串的形式列出当前目录下的所有文件 \r\n[/code]\r\n\r\n</div>\r\n<div></div>\r\n<h3>3、grep命令</h3>\r\n该命令常用于分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等，它的简单语法为\r\n\r\n[code]\r\ngrep [-acinv] [--color=auto] \'查找字符串\' filename \r\n[/code]\r\n\r\n<div>\r\n\r\n它的常用参数如下：\r\n\r\n[code]\r\n-a ：将binary文件以text文件的方式查找数据 \r\n-c ：计算找到‘查找字符串’的次数 \r\n-i ：忽略大小写的区别，即把大小写视为相同 \r\n-v ：反向选择，即显示出没有‘查找字符串’内容的那一行 \r\n# 例如： \r\n# 取出文件/etc/man.config中包含MANPATH的行，并把找到的关键字加上颜色 \r\ngrep --color=auto \'MANPATH\' /etc/man.config \r\n# 把ls -l的输出中包含字母file（不区分大小写）的内容输出 \r\nls -l | grep -i file \r\n[/code]\r\n\r\n</div>\r\n<div></div>\r\n<h3>4、find命令</h3>\r\n<div>\r\n\r\nfind是一个基于查找的功能非常强大的命令，相对而言，它的使用也相对较为复杂，参数也比较多，所以在这里将给把它们分类列出，它的基本语法如下：\r\n\r\n[code]\r\nfind [PATH] [option] [action] \r\n\r\n# 与时间有关的参数： \r\n-mtime n : n为数字，意思为在n天之前的“一天内”被更改过的文件； \r\n-mtime +n : 列出在n天之前（不含n天本身）被更改过的文件名； \r\n-mtime -n : 列出在n天之内（含n天本身）被更改过的文件名； \r\n-newer file : 列出比file还要新的文件名 \r\n# 例如： \r\nfind /root -mtime 0 # 在当前目录下查找今天之内有改动的文件 \r\n \r\n# 与用户或用户组名有关的参数： \r\n-user name : 列出文件所有者为name的文件 \r\n-group name : 列出文件所属用户组为name的文件 \r\n-uid n : 列出文件所有者为用户ID为n的文件 \r\n-gid n : 列出文件所属用户组为用户组ID为n的文件 \r\n# 例如： \r\nfind /home/ljianhui -user ljianhui # 在目录/home/ljianhui中找出所有者为ljianhui的文件 \r\n \r\n# 与文件权限及名称有关的参数： \r\n-name filename ：找出文件名为filename的文件 \r\n-size [+-]SIZE ：找出比SIZE还要大（+）或小（-）的文件 \r\n-tpye TYPE ：查找文件的类型为TYPE的文件，TYPE的值主要有：一般文件（f)、设备文件（b、c）、 \r\n 目录（d）、连接文件（l）、socket（s）、FIFO管道文件（p）； \r\n-perm mode ：查找文件权限刚好等于mode的文件，mode用数字表示，如0755； \r\n-perm -mode ：查找文件权限必须要全部包括mode权限的文件，mode用数字表示 \r\n-perm +mode ：查找文件权限包含任一mode的权限的文件，mode用数字表示 \r\n# 例如： \r\nfind / -name passwd # 查找文件名为passwd的文件 \r\nfind . -perm 0755 # 查找当前目录中文件权限的0755的文件 \r\nfind . -size +12k # 查找当前目录中大于12KB的文件，注意c表示byte \r\n[/code]\r\n\r\n</div>\r\n<h3>5、cp命令</h3>\r\n<div>\r\n\r\n该命令用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下，它的常用参数如下：\r\n\r\n[code]\r\n-a ：将文件的特性一起复制 \r\n-p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份 \r\n-i ：若目标文件已经存在时，在覆盖时会先询问操作的进行 \r\n-r ：递归持续复制，用于目录的复制行为 \r\n-u ：目标文件与源文件有差异时才会复制 \r\n[/code]\r\n\r\n</div>\r\n<div>例如 ：</div>\r\n<div>\r\n\r\n[code]\r\ncp -a file1 file2 #连同文件的所有特性把文件file1复制成文件file2 \r\ncp file1 file2 file3 dir #把文件file1、file2、file3复制到目录dir中 \r\n[/code]\r\n\r\n</div>\r\n<div></div>\r\n<h3>6、mv命令</h3>\r\n该命令用于移动文件、目录或更名，move之意，它的常用参数如下：\r\n\r\n[code] \r\n-f ：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖 \r\n-i ：若目标文件已经存在，就会询问是否覆盖 \r\n-u ：若目标文件已经存在，且比目标文件新，才会更新 \r\n[/code]\r\n\r\n<div>\r\n\r\n注：该命令可以把一个文件或多个文件一次移动一个文件夹中，但是最后一个目标文件一定要是“目录”。\r\n\r\n例如：\r\n\r\n[code]\r\nmv file1 file2 file3 dir # 把文件file1、file2、file3移动到目录dir中 \r\nmv file1 file2 # 把文件file1重命名为file2 \r\n[/code]\r\n\r\n</div>\r\n<h3>7、rm命令</h3>\r\n<div>\r\n\r\n该命令用于删除文件或目录，remove之间，它的常用参数如下：\r\n\r\n[code]\r\n-f ：就是force的意思，忽略不存在的文件，不会出现警告消息\r\n-i ：互动模式，在删除前会询问用户是否操作\r\n-r ：递归删除，最常用于目录删除，它是一个非常危险的参数\r\n[code]\r\n\r\n例如：\r\n[code]\r\nrm -i file # 删除文件file，在删除之前会询问是否进行该操作\r\nrm -fr dir # 强制删除目录dir中的所有文件\r\n[/code]\r\n\r\n</div>\r\n<h3><strong>8、ps命令</strong></h3>\r\n<div>\r\n\r\n该命令用于将某个时间点的进程运行情况选取下来并输出，process之意，它的常用参数如下：\r\n\r\n[code]\r\n-A ：所有的进程均显示出来\r\n-a ：不与terminal有关的所有进程\r\n-u ：有效用户的相关进程\r\n-x ：一般与a参数一起使用，可列出较完整的信息\r\n-l ：较长，较详细地将PID的信息列出\r\n[/code]\r\n\r\n其实我们只要记住ps一般使用的命令参数搭配即可，它们并不多，如下：\r\n\r\n[code]\r\nps aux # 查看系统所有的进程数据\r\nps ax # 查看不与terminal有关的所有进程\r\nps -lA # 查看系统所有的进程数据\r\nps axjf # 查看连同一部分进程树状态\r\n[/code]\r\n\r\n</div>\r\n<div></div>\r\n<div><strong>9、kill命令</strong></div>\r\n<div>\r\n\r\n该命令用于向某个工作（%jobnumber）或者是某个PID（数字）传送一个信号，它通常与ps和jobs命令一起使用，它的基本语法如下：\r\n\r\n[code]\r\nkill -signal PID\r\nsignal的常用参数如下：\r\n[/code]\r\n\r\n注：最前面的数字为信号的代号，使用时可以用代号代替相应的信号。\r\n\r\n[code]\r\n1：SIGHUP，启动被终止的进程\r\n2：SIGINT，相当于输入ctrl+c，中断一个程序的进行\r\n9：SIGKILL，强制中断一个进程的进行\r\n15：SIGTERM，以正常的结束进程方式来终止进程\r\n17：SIGSTOP，相当于输入ctrl+z，暂停一个进程的进行\r\n[/code]\r\n\r\n</div>\r\n<div>\r\n\r\n例如：\r\n\r\n[code]\r\n# 以正常的结束进程方式来终于第一个后台工作，可用jobs命令查看后台中的第一个工作进程\r\nkill -SIGTERM %1\r\n# 重新改动进程ID为PID的进程，PID可用ps命令通过管道命令加上grep命令进行筛选获得\r\nkill -SIGHUP PID\r\n[/code]\r\n\r\n</div>\r\n<div></div>\r\n<h3>10、killall命令</h3>\r\n<div>该命令用于向一个命令启动的进程发送一个信号，它的一般语法如下：</div>\r\n<div>\r\n\r\n[code]\r\nkillall [-iIe] [command name]\r\n[/code]\r\n\r\n</div>\r\n<div>\r\n\r\n它的参数如下：\r\n\r\n[code]\r\n-i ：交互式的意思，若需要删除时，会询问用户\r\n-e ：表示后面接的command name要一致，但command name不能超过15个字符\r\n-I ：命令名称忽略大小写\r\n# 例如：\r\nkillall -SIGHUP syslogd # 重新启动syslogd\r\n[/code]\r\n\r\n</div>\r\n<div></div>\r\n<h3>11、file命令</h3>\r\n<div>\r\n\r\n该命令用于判断接在file命令后的文件的基本数据，因为在Linux下文件的类型并不是以后缀为分的，所以这个命令对我们来说就很有用了，它的用法非常简单，基本语法如下：\r\n\r\n[code]\r\nfile filename\r\n#例如：\r\nfile ./test\r\n[/code]\r\n\r\n</div>\r\n<div></div>\r\n<h3>12、tar命令</h3>\r\n<div>\r\n\r\n该命令用于对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压。它的常用参数如下：\r\n\r\n[code]\r\n-c ：新建打包文件\r\n-t ：查看打包文件的内容含有哪些文件名\r\n-x ：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中\r\n-j ：通过bzip2的支持进行压缩/解压缩\r\n-z ：通过gzip的支持进行压缩/解压缩\r\n-v ：在压缩/解压缩过程中，将正在处理的文件名显示出来\r\n-f filename ：filename为要处理的文件\r\n-C dir ：指定压缩/解压缩的目录dir\r\n[/code]\r\n\r\n</div>\r\n<div>上面的解说可以已经让你晕过去了，但是通常我们只需要记住下面三条命令即可：</div>\r\n<div>压缩：tar -jcv -f filename.tar.bz2 要被处理的文件或目录名称\r\n查询：tar -jtv -f filename.tar.bz2\r\n解压：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录</div>\r\n<div>\r\n\r\n注：文件名并不定要以后缀tar.bz2结尾，这里主要是为了说明使用的压缩程序为bzip2\r\n<h3>13、cat命令</h3>\r\n该命令用于查看文本文件的内容，后接要查看的文件名，通常可用管道与more和less一起使用，从而可以一页页地查看数据。例如：\r\n\r\n[code]\r\ncat text | less # 查看text文件中的内容\r\n# 注：这条命令也可以使用less text来代替\r\n[/code]\r\n\r\n</div>\r\n<h3>14、chgrp命令</h3>\r\n<div>\r\n\r\n该命令用于改变文件所属用户组，它的使用非常简单，它的基本用法如下：\r\n\r\n[code]\r\nchgrp [-R] dirname/filename\r\n-R ：进行递归的持续对所有文件和子目录更改\r\n# 例如：\r\nchgrp users -R ./dir # 递归地把dir目录下中的所有文件和子目录下所有文件的用户组修改为users\r\n[/code]\r\n\r\n</div>\r\n<div></div>\r\n<h3>15、chown命令</h3>\r\n<div>该命令用于改变文件的所有者，与chgrp命令的使用方法相同，只是修改的文件属性不同，不再详述。16、chmod命令\r\n该命令用于改变文件的权限，一般的用法如下：\r\n\r\n[code]\r\nchmod [-R] xyz 文件或目录\r\n-R：进行递归的持续更改，即连同子目录下的所有文件都会更改\r\n[/code]\r\n\r\n同时，chmod还可以使用u（user）、g（group）、o（other）、a（all）和+（加入）、-（删除）、=（设置）跟rwx搭配来对文件的权限进行更改。\r\n\r\n[code]\r\n# 例如：\r\nchmod 0755 file # 把file的文件权限改变为-rxwr-xr-x\r\nchmod g+w file # 向file的文件权限中加入用户组可写权限\r\n[/code]\r\n\r\n</div>\r\n<div></div>\r\n<h3>18、vim命令</h3>\r\n<div>该命令主要用于文本编辑，它接一个或多个文件名作为参数，如果文件存在就打开，如果文件不存在就以该文件名创建一个文件。vim是一个非常好用的文本编辑器，它里面有很多非常好用的命令，在这里不再多说。你可以从这里下载vim常用操作的详细说明。19、gcc命令\r\n对于一个用Linux开发C程序的人来说，这个命令就非常重要了，它用于把C语言的源程序文件，编译成可执行程序，由于g++的很多参数跟它非常相似，所以这里只介绍gcc的参数，它的常用参数如下：\r\n\r\n[code]\r\n-o ：output之意，用于指定生成一个可执行文件的文件名\r\n-c ：用于把源文件生成目标文件（.o)，并阻止编译器创建一个完整的程序\r\n-I ：增加编译时搜索头文件的路径\r\n-L ：增加编译时搜索静态连接库的路径\r\n-S ：把源文件生成汇编代码文件\r\n-lm：表示标准库的目录中名为libm.a的函数库\r\n-lpthread ：连接NPTL实现的线程库\r\n-std= ：用于指定把使用的C语言的版本\r\n\r\n# 例如：\r\n# 把源文件test.c按照c99标准编译成可执行程序test\r\ngcc -o test test.c -lm -std=c99\r\n#把源文件test.c转换为相应的汇编程序源文件test.s\r\ngcc -S test.c\r\n[/code]\r\n\r\n</div>\r\n<h3>20、time命令</h3>\r\n<div>\r\n\r\n该命令用于测算一个命令（即程序）的执行时间。它的使用非常简单，就像平时输入命令一样，不过在命令的前面加入一个time即可，例如：\r\n\r\n[code]\r\ntime ./process\r\ntime ps aux\r\n[/code]\r\n\r\n在程序或命令运行结束后，在最后输出了三个时间，它们分别是：\r\nuser：用户CPU时间，命令执行完成花费的用户CPU时间，即命令在用户态中执行时间总和；\r\nsystem：系统CPU时间，命令执行完成花费的系统CPU时间，即命令在核心态中执行时间总和；\r\nreal：实际时间，从command命令行开始执行到运行终止的消逝时间；\r\n\r\n注：用户CPU时间和系统CPU时间之和为CPU时间，即命令占用CPU执行的时间总和。实际时间要大于CPU时间，因为Linux是多任务操作系统，往往在执行一条命令时，系统还要处理其它任务。另一个需要注意的问题是即使每次执行相同命令，但所花费的时间也是不一样，其花费时间是与系统运行相关的。\r\n\r\n</div>\r\n<div></div>\r\n<div>转载自: <a href=\"http://blog.csdn.net/ljianhui/article/details/11100625/\" target=\"_blank\">http://blog.csdn.net/ljianhui/article/details/11100625/</a></div>', '初窥Linux之最常用的20条命令', '', 'publish', 'open', 'open', '', '%e5%88%9d%e7%aa%a5linux%e4%b9%8b%e6%9c%80%e5%b8%b8%e7%94%a8%e7%9a%8420%e6%9d%a1%e5%91%bd%e4%bb%a4', '', '', '2016-11-14 21:16:20', '2016-11-14 13:16:20', '', 0, 'http://www.gzpblog.com/?p=497', 0, 'post', '', 0),
(681, 1, '2017-02-20 02:25:17', '2017-02-19 18:25:17', '这是一个基于Bootstrap开发的自适应Wordpress主题，是我自己用的，所以是根据我自己的需求与想法做的。考虑到主题的效率，流畅性，没有用太多JS，能用css就用css解决（包括顶部的三级导航菜单），所以并没有太多的酷炫效果，某些设计也比较古老（自用的嘛）。而且，作为一个后端程序猿，前端目前真心不熟啊！！！不过，还是分享出来。\r\n\r\n先上一张效果图：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000933.png\"><img class=\"size-large wp-image-639 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000933-1024x805.png\" alt=\"\" width=\"1024\" height=\"805\" /></a>\r\n\r\n移动端中的展现：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000812.png\"><img class=\"size-full wp-image-641 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000812.png\" alt=\"\" width=\"390\" height=\"733\" /></a>\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000756.png\"><img class=\"size-full wp-image-640 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000756.png\" alt=\"\" width=\"396\" height=\"737\" /></a>\r\n\r\n可能在pad中的展示会比较差，但是问题不大。\r\n<h3>V1.0.0版本说明：</h3>\r\n<h4>主题特色</h4>\r\n<ul>\r\n 	<li>采用bootstrap构建</li>\r\n 	<li>支持自适应，适配移动端设备</li>\r\n 	<li>目前提供五个已有样式的侧边栏小工具：热门文章，最新文章，标签云，最新评论，归档</li>\r\n 	<li>模板页面提供archives归档页，treeTime时间轴页面，myJob时间轴页面</li>\r\n 	<li>底部footer提供普通和微信二维码两种方案</li>\r\n 	<li>去除了加载Google Fonts，emoji表情等以优化速度</li>\r\n 	<li>优化了Wordpress默认输出的 head 加载</li>\r\n 	<li>暂时不支持后台更新</li>\r\n</ul>\r\n<h4>主题说明</h4>\r\n<ul>\r\n 	<li>依赖插件：WP-PostViews（文章浏览量统计插件）</li>\r\n 	<li>小图标：采用Font Awesome v4.7.0，具体图标对应class请前往官网查看。</li>\r\n 	<li>发送邮件：评论回复邮件提醒功能采用了PHPMailer，发送邮件的设置可在主题设置中进行设置。</li>\r\n</ul>\r\n<h4>部分功能使用说明</h4>\r\n<ol>\r\n 	<li>开始使用主题后请先在主题设置页面设置网站信息，非常重要，description和keywords一经设置最好少修改；并选择一款footer样式</li>\r\n 	<li>右侧边栏的头像请直接替换public/images/jumbotron_self.png图片，并保持原来名字（未来开放设置中心修改）</li>\r\n 	<li>微信公众号二维码图片同上（未来开放设置中心修改）</li>\r\n 	<li>archives归档页使用：直接新建一个独立页面，模板选择Archive归档页面即可。</li>\r\n 	<li>treeTime时间轴页使用：新建一个选择treeTime的归档页面，开放评论，但是内容需要在treeTime.php中自行修改，这可能需要你有一些html，css的基础。</li>\r\n 	<li>myJob时间轴页使用：新建一个选择myJob的归档页面，内容需要自行到myJob.php中修改，这可能需要你有一些html，css的基础。</li>\r\n</ol>\r\n<h4>待完善</h4>\r\n<ul>\r\n 	<li>微信公众号模式底部左侧空旷</li>\r\n 	<li>侧边栏个人板块整合进主题设置</li>\r\n 	<li>顶部导航一级栏目过多时样式会出现混乱，且目前只支持3级导航</li>\r\n 	<li>Gravatar头像的优化</li>\r\n 	<li>楼中楼评论时的用户体验</li>\r\n</ul>\r\n<h3>下载地址</h3>\r\n目前第一个版本基本上就是这样了，放一下地址：\r\n<ol>\r\n 	<li>百度网盘地址：<a href=\"http://pan.baidu.com/s/1qYVS328\" target=\"_blank\">Jumping -v1.0.0</a> ，下载密码：hiqp</li>\r\n 	<li>Github地址：<a href=\"https://github.com/ZpGuo/Jumping/tree/master\" target=\"_blank\">Jumping主题master</a>，点击Clone or download，下载Zip，到wordpress后台安装就行。</li>\r\n</ol>\r\n其实能完善的地方还有很多，以后有时间再弄吧，上班也忙。同时，欢迎在github上提issue或者直接fork。', '基于Bootstrap开发的自适应Wordpress主题（自用）', '', 'inherit', 'closed', 'closed', '', '638-revision-v1', '', '', '2017-02-20 02:25:17', '2017-02-19 18:25:17', '', 638, 'http://www.gzpblog.com/20170220/681.html', 0, 'revision', '', 0),
(682, 1, '2017-02-20 02:30:52', '2017-02-19 18:30:52', '锅子博客的进化史。', '博客历程', '', 'inherit', 'closed', 'closed', '', '666-revision-v1', '', '', '2017-02-20 02:30:52', '2017-02-19 18:30:52', '', 666, 'http://www.gzpblog.com/20170220/682.html', 0, 'revision', '', 0),
(685, 1, '2017-02-21 02:10:39', '2017-02-20 18:10:39', '最近自从开始使用Git，感觉写代码的效率变高了，玩wordpress主题的时候拿来试了一下，感觉挺爽的，比SVN好。配合Github，私人的项目用码云，coding，效率杠杠。于是今天寻思着玩个Git的GUI工具，因为最近接触Github比较多，所以准备玩Github Desktop，github的桌面版。然后，这玩意的安装简直刷新了我的三观！\r\n\r\n我就打开官网，进入下载页面，点击下载Windows版本，然后，进度条没反应，再点一次，进度条还是没反应！我的天，果断开个迅雷试试，可以，下载下来了：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/github1.png\"><img class=\"size-full wp-image-687 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/github1.png\" alt=\"\" width=\"83\" height=\"89\" /></a>\r\n\r\n可以！非常不错，可爱的章鱼猫变成了紫色，很好很nice。然后我一看，雾草几百K是什么鬼！双击：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/github2.png\"><img class=\"size-full wp-image-688 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/github2.png\" alt=\"\" width=\"376\" height=\"142\" /></a>\r\n\r\n我的天！竟然是在线安装，还是这么古老的界面。没事，在线就在线。然后，我等啊等，很久之后，突然：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/gitgub3.png\"><img class=\"size-full wp-image-689 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/gitgub3.png\" alt=\"\" width=\"361\" height=\"153\" /></a>\r\n\r\n我的天呐？我再来一次，我再来一次，我放弃。翻墙试试吧：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/github4.png\"><img class=\"size-full wp-image-690 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/github4.png\" alt=\"\" width=\"516\" height=\"292\" /></a>\r\n\r\nnice！非常兴奋！可劲激动！可以了，然后挂着下载了，看其它的去，然后，突然：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/gitgub3.png\"><img class=\"size-full wp-image-689 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/gitgub3.png\" alt=\"\" width=\"361\" height=\"153\" /></a>\r\n\r\nwtf？真的是一脸无（meng）奈（bi）啊！再来一次，再来一次。。。\r\n\r\n终于好了：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/gitgub5.png\"><img class=\"size-full wp-image-691 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/gitgub5.png\" alt=\"\" width=\"509\" height=\"292\" /></a>\r\n\r\n然后！直接就！直接就（话说安装包呢，我咋找不到啊！）：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/github6.png\"><img class=\"size-full wp-image-692 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/github6.png\" alt=\"\" width=\"80\" height=\"201\" /></a>\r\n\r\n不多说，开始使用吧。先看一下git shell是什么样的吧：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/github7.png\"><img class=\"wp-image-693 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/github7.png\" alt=\"\" width=\"645\" height=\"543\" /></a>\r\n\r\n似乎，有点怪怪的，丑丑的。不过还好可以在设置里设置shell运行方式，设置成git bash用shell，然后用Git bash玩，比较习惯一点。\r\n\r\n看一下客户端的界面，感觉还是挺不错的啊，图解一下：<a href=\"http://files.gzpblog.com/wp/2017/02/github8.png\"><img class=\"size-large wp-image-686 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/github8-1024x563.png\" alt=\"\" width=\"1024\" height=\"563\" /></a>\r\n\r\n基本上，应该有的功能都有了，版本控制非常直观明确。如果是经常混迹于github的话这款工具确实还是非常 不错的，毕竟github自己的软件，但是把这玩意直接当做Git的GUI工具也是未尝不可，就是国内下载安装有点那个啥。用Github desktop浏览diff配合git bash命令工作还是不错，一般的操作还是敲命令好。\r\n\r\n<strong>好吧，其实我就是想吐槽一下github destop灭绝人性的安装流程！</strong>\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Github Desktop初体验', '', 'publish', 'open', 'open', '', 'github-desktop%e5%88%9d%e4%bd%93%e9%aa%8c', '', '', '2017-02-21 02:10:39', '2017-02-20 18:10:39', '', 0, 'http://www.gzpblog.com/?p=685', 0, 'post', '', 10),
(686, 1, '2017-02-21 01:46:08', '2017-02-20 17:46:08', '', 'github8', '', 'inherit', 'open', 'closed', '', 'github8', '', '', '2017-02-21 01:46:08', '2017-02-20 17:46:08', '', 685, 'http://www.gzpblog.com/wp-content/uploads/2017/02/github8.png', 0, 'attachment', 'image/png', 0),
(687, 1, '2017-02-21 01:46:12', '2017-02-20 17:46:12', '', 'github1', '', 'inherit', 'open', 'closed', '', 'github1', '', '', '2017-02-21 01:46:12', '2017-02-20 17:46:12', '', 685, 'http://www.gzpblog.com/wp-content/uploads/2017/02/github1.png', 0, 'attachment', 'image/png', 0),
(688, 1, '2017-02-21 01:46:13', '2017-02-20 17:46:13', '', 'github2', '', 'inherit', 'open', 'closed', '', 'github2', '', '', '2017-02-21 01:46:13', '2017-02-20 17:46:13', '', 685, 'http://www.gzpblog.com/wp-content/uploads/2017/02/github2.png', 0, 'attachment', 'image/png', 0),
(689, 1, '2017-02-21 01:46:14', '2017-02-20 17:46:14', '', 'gitgub3', '', 'inherit', 'open', 'closed', '', 'gitgub3', '', '', '2017-02-21 01:46:14', '2017-02-20 17:46:14', '', 685, 'http://www.gzpblog.com/wp-content/uploads/2017/02/gitgub3.png', 0, 'attachment', 'image/png', 0),
(690, 1, '2017-02-21 01:46:16', '2017-02-20 17:46:16', '', 'github4', '', 'inherit', 'open', 'closed', '', 'github4', '', '', '2017-02-21 01:46:16', '2017-02-20 17:46:16', '', 685, 'http://www.gzpblog.com/wp-content/uploads/2017/02/github4.png', 0, 'attachment', 'image/png', 0),
(691, 1, '2017-02-21 01:46:18', '2017-02-20 17:46:18', '', 'gitgub5', '', 'inherit', 'open', 'closed', '', 'gitgub5', '', '', '2017-02-21 01:46:18', '2017-02-20 17:46:18', '', 685, 'http://www.gzpblog.com/wp-content/uploads/2017/02/gitgub5.png', 0, 'attachment', 'image/png', 0),
(692, 1, '2017-02-21 01:46:20', '2017-02-20 17:46:20', '', 'github6', '', 'inherit', 'open', 'closed', '', 'github6', '', '', '2017-02-21 01:46:20', '2017-02-20 17:46:20', '', 685, 'http://www.gzpblog.com/wp-content/uploads/2017/02/github6.png', 0, 'attachment', 'image/png', 0),
(693, 1, '2017-02-21 01:46:21', '2017-02-20 17:46:21', '', 'github7', '', 'inherit', 'open', 'closed', '', 'github7', '', '', '2017-02-21 01:46:21', '2017-02-20 17:46:21', '', 685, 'http://www.gzpblog.com/wp-content/uploads/2017/02/github7.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(694, 1, '2017-02-21 02:05:21', '2017-02-20 18:05:21', '最近自从开始使用Git，感觉写代码的概率变高了，开发主题的时候拿来试了一下，感觉挺爽的，比SVN好。配合Github，私人的项目用码云，coding，相率杠杠。于是今天寻思着玩个Git的GUI工具，因为最近接触Github比较多，所以准备玩Github Desktop，github的桌面版。然后，这玩意的安装简直刷新了我的三观！\r\n\r\n我就打开官网，进入下载页面，点击下载Windows版本，然后，进度条没反应，再点一次，进度条还是没反应！我的天，果断开个迅雷试试，可以，下载下来了，而且很快。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/github1.png\"><img class=\"alignnone size-full wp-image-687\" src=\"http://files.gzpblog.com/wp/2017/02/github1.png\" alt=\"\" width=\"83\" height=\"89\" /></a>\r\n\r\n可以！非常不错，可爱的章鱼猫变成了紫色，很好很nice。然后我一看，雾草几百K是什么鬼！双击：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/github2.png\"><img class=\"alignnone size-full wp-image-688\" src=\"http://files.gzpblog.com/wp/2017/02/github2.png\" alt=\"\" width=\"376\" height=\"142\" /></a>\r\n\r\n我的天！竟然是在线安装，还是这么古老的界面。没事，在线就在线。然后，我等啊等，很久之后，突然：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/gitgub3.png\"><img class=\"alignnone size-full wp-image-689\" src=\"http://files.gzpblog.com/wp/2017/02/gitgub3.png\" alt=\"\" width=\"361\" height=\"153\" /></a>\r\n\r\n我的天呐？我再来一次，我再来一次，我放弃。翻墙试试吧：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/github4.png\"><img class=\"alignnone size-full wp-image-690\" src=\"http://files.gzpblog.com/wp/2017/02/github4.png\" alt=\"\" width=\"516\" height=\"292\" /></a>\r\n\r\nnice！兴奋！激动！可以了，然后挂着下载了，看其它的去，然后，突然：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/gitgub3.png\"><img class=\"alignnone size-full wp-image-689\" src=\"http://files.gzpblog.com/wp/2017/02/gitgub3.png\" alt=\"\" width=\"361\" height=\"153\" /></a>\r\n\r\nwtf？真的是一脸无（meng）奈（bi）啊！再来一次，再来一次。。。\r\n\r\n终于好了：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/gitgub5.png\"><img class=\"alignnone size-full wp-image-691\" src=\"http://files.gzpblog.com/wp/2017/02/gitgub5.png\" alt=\"\" width=\"509\" height=\"292\" /></a>\r\n\r\n然后！直接就！直接就：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/github6.png\"><img class=\"alignnone size-full wp-image-692\" src=\"http://files.gzpblog.com/wp/2017/02/github6.png\" alt=\"\" width=\"80\" height=\"201\" /></a>\r\n\r\n不多说，开始使用吧。先看一下git shell是什么样的吧：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/github7.png\"><img class=\"wp-image-693 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/github7.png\" alt=\"\" width=\"645\" height=\"543\" /></a>\r\n\r\n似乎，有点怪怪的。不过还好可以在设置里设置shell运行方式，设置成git bash用shell。然后看一下客户端的界面，感觉还是挺不错的啊，图解一下：<a href=\"http://files.gzpblog.com/wp/2017/02/github8.png\"><img class=\"alignnone size-large wp-image-686\" src=\"http://files.gzpblog.com/wp/2017/02/github8-1024x563.png\" alt=\"\" width=\"1024\" height=\"563\" /></a>\r\n\r\n基本上，应该有的功能都有了，版本控制非常直观明确。如果是经常混迹于github的话这款工具确实还是非常 不错的，就是国内下载安装有点那个啥。用Github desktop浏览diff配合git bash命令工作还是不错，一般的操作还是敲命令好。\r\n\r\n好吧，其实我就是吐槽一下github destop灭绝人性的安装流程！\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Github Desktop初体验', '', 'inherit', 'closed', 'closed', '', '685-revision-v1', '', '', '2017-02-21 02:05:21', '2017-02-20 18:05:21', '', 685, 'http://www.gzpblog.com/20170221/694.html', 0, 'revision', '', 0),
(695, 1, '2017-02-21 02:10:39', '2017-02-20 18:10:39', '最近自从开始使用Git，感觉写代码的效率变高了，玩wordpress主题的时候拿来试了一下，感觉挺爽的，比SVN好。配合Github，私人的项目用码云，coding，效率杠杠。于是今天寻思着玩个Git的GUI工具，因为最近接触Github比较多，所以准备玩Github Desktop，github的桌面版。然后，这玩意的安装简直刷新了我的三观！\r\n\r\n我就打开官网，进入下载页面，点击下载Windows版本，然后，进度条没反应，再点一次，进度条还是没反应！我的天，果断开个迅雷试试，可以，下载下来了：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/github1.png\"><img class=\"size-full wp-image-687 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/github1.png\" alt=\"\" width=\"83\" height=\"89\" /></a>\r\n\r\n可以！非常不错，可爱的章鱼猫变成了紫色，很好很nice。然后我一看，雾草几百K是什么鬼！双击：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/github2.png\"><img class=\"size-full wp-image-688 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/github2.png\" alt=\"\" width=\"376\" height=\"142\" /></a>\r\n\r\n我的天！竟然是在线安装，还是这么古老的界面。没事，在线就在线。然后，我等啊等，很久之后，突然：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/gitgub3.png\"><img class=\"size-full wp-image-689 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/gitgub3.png\" alt=\"\" width=\"361\" height=\"153\" /></a>\r\n\r\n我的天呐？我再来一次，我再来一次，我放弃。翻墙试试吧：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/github4.png\"><img class=\"size-full wp-image-690 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/github4.png\" alt=\"\" width=\"516\" height=\"292\" /></a>\r\n\r\nnice！非常兴奋！可劲激动！可以了，然后挂着下载了，看其它的去，然后，突然：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/gitgub3.png\"><img class=\"size-full wp-image-689 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/gitgub3.png\" alt=\"\" width=\"361\" height=\"153\" /></a>\r\n\r\nwtf？真的是一脸无（meng）奈（bi）啊！再来一次，再来一次。。。\r\n\r\n终于好了：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/gitgub5.png\"><img class=\"size-full wp-image-691 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/gitgub5.png\" alt=\"\" width=\"509\" height=\"292\" /></a>\r\n\r\n然后！直接就！直接就（话说安装包呢，我咋找不到啊！）：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/github6.png\"><img class=\"size-full wp-image-692 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/github6.png\" alt=\"\" width=\"80\" height=\"201\" /></a>\r\n\r\n不多说，开始使用吧。先看一下git shell是什么样的吧：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/github7.png\"><img class=\"wp-image-693 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/github7.png\" alt=\"\" width=\"645\" height=\"543\" /></a>\r\n\r\n似乎，有点怪怪的，丑丑的。不过还好可以在设置里设置shell运行方式，设置成git bash用shell，然后用Git bash玩，比较习惯一点。\r\n\r\n看一下客户端的界面，感觉还是挺不错的啊，图解一下：<a href=\"http://files.gzpblog.com/wp/2017/02/github8.png\"><img class=\"size-large wp-image-686 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/github8-1024x563.png\" alt=\"\" width=\"1024\" height=\"563\" /></a>\r\n\r\n基本上，应该有的功能都有了，版本控制非常直观明确。如果是经常混迹于github的话这款工具确实还是非常 不错的，毕竟github自己的软件，但是把这玩意直接当做Git的GUI工具也是未尝不可，就是国内下载安装有点那个啥。用Github desktop浏览diff配合git bash命令工作还是不错，一般的操作还是敲命令好。\r\n\r\n<strong>好吧，其实我就是想吐槽一下github destop灭绝人性的安装流程！</strong>\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Github Desktop初体验', '', 'inherit', 'closed', 'closed', '', '685-revision-v1', '', '', '2017-02-21 02:10:39', '2017-02-20 18:10:39', '', 685, 'http://www.gzpblog.com/20170221/695.html', 0, 'revision', '', 0),
(503, 1, '2016-11-15 02:56:16', '2016-11-14 18:56:16', '这是通读《高性能MySQL》（第三版）的第一篇笔记，这本书真的是一本不可多得的好书，光是第一章就解决了一些我一直以来的疑惑，估计学完会有和不小的收获。第一章是MySQL的架构与历史，本章收获：<strong>认识MySQL的架构；认识“锁”；系统认识事务的原理；认识MySQL的存储引擎；如何选择合适的存储引擎等</strong>。其中，InnoDB存储引擎和MyISAM引擎的区别以及如何选择是我之前一直还未了解但是必须了解的问题，通过这章内容也有了一定的认识。（笔记只记下来觉得非常有用的一些知识点作为回顾整理再者方便以后查阅，详情还是看原书。）\r\n<h2>1.1 MySQL逻辑架构</h2>\r\nMySQL的服务器逻辑架构图：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2016/11/mysql-jiagou.jpg\"><img class=\"alignnone size-medium wp-image-505\" src=\"http://files.gzpblog.com/wp/2016/11/mysql-jiagou-208x300.jpg\" alt=\"mysql-jiagou\" width=\"208\" height=\"300\" /></a>\r\n\r\n&nbsp;\r\n<h2>1.2 并发控制</h2>\r\n<h3>读写锁</h3>\r\n在处理并发读或者是写时，可以通过实现一个由两种类型的锁组成的锁系统来解决问题。这两个类型的锁通常被称为<strong>共享锁（shared lock）</strong>和<strong>排他锁（exclusive lock）</strong>，也叫<strong>读锁（read lock）</strong>和<strong>写锁（write lock）</strong>。\r\n\r\n读锁是共享的，或者说是相互不阻塞的。多个用户在同一时刻可以同时读取同一个资源，而互不干扰。\r\n\r\n写锁则是排他的，也就是说一个写锁会阻塞其它的写锁和读锁，这是出于安全策略的考虑，只有这样，才能确保在给定的时间里，只有一个用户能执行写入，并防止其他用户读取正在写入的同一资源。\r\n\r\n&nbsp;\r\n<h3>锁策略</h3>\r\n锁策略：在锁的开销和数据的安全性之间寻求平衡，这种平衡当然也会影响到性能。\r\n\r\n两种最重要的锁策略：\r\n\r\n<strong>表锁（table lock）</strong>\r\n<p style=\"padding-left: 30px;\">表锁是MySQL中最基本的锁策略，并且是开销最小的策略。表锁锁定整张表。</p>\r\n<strong>行级锁（row lock）</strong>\r\n<p style=\"padding-left: 30px;\">行级锁可以最大程度地支持并发处理（同时也带来了最大的锁开销）。InnoDB和XtraDB（用来代替InnoDB的InnoDB增强版），以及一些其他的存储引擎中实现了行级锁。行级锁只在存储引擎层实现。</p>\r\n&nbsp;\r\n<h2>1.3 事务</h2>\r\n事务就是一组原子性的SQL查询，或者说一个独立的工作单元。如果数据库引擎能够成功地对数据库应用该组查询的全部语句，那么就执行该组查询。如果其中有任何一条语句因为崩溃或者其他原因无法执行，那么所有的语句都不会执行。事务内的语句，要么全部执行成功，要么全部执行失败。\r\n\r\n事务SQL例子：\r\n\r\n[code]\r\n\r\nSTART TRANSACTION;\r\n\r\nSELECT balance FROM checking WHERE customer_id=10233276;\r\n\r\nUPDATE checking SET balance = balance - 200.00 WHERE customer_id = 10233276;\r\n\r\nUPDATE saving SET balance = balance + 200.00 WHERE customer_id = 10233276;\r\n\r\nCOMMIT;\r\n\r\n[/code]\r\n\r\n一个运行良好的事务处理系统，必须具备ACID特征。\r\n\r\n&nbsp;\r\n<h3>ACID</h3>\r\nACID表示<strong>原子性（atomicity）、一致性（consistency）、隔离性（isolation）和持久性（durability）</strong>。\r\n\r\n原子性\r\n<p style=\"padding-left: 30px;\">整个事务中的所有操作要么全部提交成功，要么全部失败回滚。对于一个事务来说，不可能只执行其中一部分操作，这就是事务的原子性。</p>\r\n一致性\r\n<p style=\"padding-left: 30px;\">数据库总是从一个一致性的状态转换到另一个一致性的状态。一致性确保了事务执行到一半时系统崩溃，但是事务最终没有提交，所以数据中所做的修改也不会保存的数据库中。</p>\r\n隔离性\r\n<p style=\"padding-left: 30px;\">通常来说（隔离级别），一个事务所做的修改在最终提交之前，对其他事务是不可见的。</p>\r\n持久性\r\n<p style=\"padding-left: 30px;\">一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失。</p>\r\n一个实现了ACID的数据库，相比没有实现ACID的数据库，通常会需要更强的CPU处理能力、更大的内存和更多的磁盘空间。用户可以根据业务是否需要事务处理，来选择合适的存储引擎。<strong>对于一些不需要事务的查询类应用，选择一个非事务型的存储引擎，可以获得更高的性能。</strong>即使存储引擎不支持事务，也可以通过LOCK TABLES语句为应用提供一定程度的保护，这些选择用户都可以自主决定。\r\n\r\n&nbsp;\r\n<h3>隔离级别</h3>\r\n<a href=\"http://files.gzpblog.com/wp/2016/11/mysql-geli.jpg\"><img class=\"alignnone size-large wp-image-504\" src=\"http://files.gzpblog.com/wp/2016/11/mysql-geli-1024x214.jpg\" alt=\"mysql-geli\" width=\"1024\" height=\"214\" /></a>\r\n\r\n&nbsp;\r\n\r\n四种隔离级别：\r\n\r\nREAD UNCOMMITTED（未提交读）\r\n<p style=\"padding-left: 30px;\">事务中的修改，即使没有提交，对其他事务也都是可见的。事务可以读取未提交的数据，这也被称为脏读（Dirty Read）。</p>\r\nREAD COMMITTED（提交读）\r\n<p style=\"padding-left: 30px;\">一个事务开始时，只能”看见“已经提交的事务所做的修改。换句话说，一个 事务从开始直到提交前，所做的任何修改对其他事务都是不可见的。这个级别有时候也叫做不可重读读。</p>\r\nREPEATABLE READ（可重复读）\r\n<p style=\"padding-left: 30px;\">解决了脏读的问题。保证了在同一个事务中多次读取同样记录的结果是一致的。但是理论上，可重复读隔离级别还是无法解决另外一个幻读的问题。幻读，指的是当某个事务在读取某个范围内的记录时，另外一个事务又插入了新的记录，当之前的事务再次读取该范围的记录时，会产生幻行。InnoDB和XtraDB存储引擎通过多版本并发控制（MVCC）解决了幻读的问题。</p>\r\nSERIALIZALE（可串行化）\r\n<p style=\"padding-left: 30px;\">最高隔离级别。会在读取的每一行数据都加上锁，所以可能导致大量的超时和锁争用的问题。只有在非常需要确保数据的一致性而且可以接受没有并发控制的情况下，才考虑采用该级别。</p>\r\n&nbsp;\r\n<h3>死锁</h3>\r\n死锁是指两个或者多个事务在同一个资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环的现象。当多个事务视图以不同的的顺序锁定资源时，就可能会产生死锁。\r\n\r\n两个对方都等待对方释放锁，同时又持有对方需要的锁，则陷入死循环。除非有外部因素介入才可能解除死锁。\r\n\r\n为了解决这种问题，数据库系统实现了各种死锁检测和死锁超时机制。InnoDB目前处理死锁的方法是，将持有的最少行级排他锁的事务进行回滚（这是比较简单的死锁回滚方法）。\r\n\r\n死锁的产生有双重原因：有些是因为真正的数据冲突，这种情况通常很难避免，但有些则完全是由于存储引擎的实现方式导致的。\r\n\r\n&nbsp;\r\n<h3>MySQL中的事务</h3>\r\nMySQL的两种事务型存储引擎：InnoDB和NDB Cluster。\r\n<h4>自动提交（AUTOCOMMIT）</h4>\r\nMySQL默认采用自动提交模式。如果不是显式地开始一个事务，每一个查询都被当作一个事务执行提交操作。在当前链接中可以设置AUTOCOMMIT变量来启用或者禁用自动提交模式：\r\n\r\n[code]\r\n\r\nmysql&gt;SHOW VARIABLES LIKE \'AUTOCOMMIT\';\r\n\r\nmysql&gt;SET AUTOCOMMIT = 1;\r\n\r\n[/code]\r\n\r\n1或者ON表示启用，0或者OFF表示禁用。当AUTOCOMMIT=0时，所有的查询都是在一个事务中，直到显式地执行COMMMIT或者ROLLBACK回滚，该事务结束，同时又开始了另一个新事务。\r\n\r\n修改AUTOCOMMIT对非事务型的表，比如MyISAM或者内存表，不会有任何影响。对这类表来说，没有COMMMIT或者ROLLBACK的概念，也就是说可以相当于一直处于AUTOCOMMIT启用的模式。\r\n\r\n&nbsp;\r\n\r\nMySQL可以通过执行SET TRANSACTION ISOLATION LEVEL命令来设置隔离级别。新的隔离级别会在下一个事务开始的时候生效。可以在配置文件中设置整个数据库的隔离级别，也可以只改变当前会话的隔离级别：\r\n\r\n[code]\r\n\r\nmysql&gt;SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;\r\n\r\n[/code]\r\n\r\n&nbsp;\r\n<h4>在事务中混合使用存储引擎</h4>\r\nMySQL服务层不管理事务，事务是由下层的存储引擎实现的。\r\n\r\n如果事务中混合使用了事务型和非事务型的表，在正常提交的情况下不会有什么问题。\r\n\r\n但是如果事务需要回滚，非事务型的表上的表更就无法撤销。\r\n\r\n为每张表选择合适的存储引擎非常重要。\r\n\r\n&nbsp;\r\n<h4>隐式和显式锁定</h4>\r\n隐式锁定：存储引擎自动进行的锁定\r\n\r\n显式锁定：通过LOCK TABLES等语句进行锁定\r\n\r\n建议：除了事务中禁用了AUTOCOMMIT，可以使用LOCK TABLES之外，其他任何时候都不要显式地执行LOCK TABLES，不管使用的是什么存储引擎。\r\n\r\n&nbsp;\r\n<h2>1.4 多版本并发控制（MVCC）</h2>\r\nMVCC的实现，是通过保存数据在某个时间点的快照来实现的。\r\n\r\nInnoDB的MVCC，是通过在每行记录的后面保存两个隐藏的列来实现的。这两个列，一个保存了行的创建时间，一个保存行的过期时间（或删除时间）。当然存储的并不是实际的时间值，而是系统版本号。保存这两个额外的系统版本号，使大多数读操作都可以不用加锁。\r\n\r\nMVCC只在REPEATABLE READ和READ COMMITTED两个隔离级别下工作。\r\n\r\n&nbsp;\r\n<h2>1.5 MySQL的存储引擎</h2>\r\n显式表的相关信息：SHOW TABLE STATUS命令\r\n\r\n[code]\r\n\r\nmysql&gt; SHOW TABLE STATUS LIKE \'user\'\\G\r\n\r\n[/code]\r\n\r\n<h3></h3>\r\n<h3>InnoDB存储引擎</h3>\r\nInnoDB采用MVCC来支持高并发，并且实现了四个标准的隔离级别。其默认级别是REPEATABLE READ（可重复读），并且通过间隙锁（next-key locking）策略防止幻读的出现。间隙锁使得InnoDB不仅仅锁定查询设计的行，还会对索引中的间隙进行锁定，以防止幻影行的插入。\r\n\r\nInnoDB的表是基于聚簇索引建立的。InnoDB的索引结构和MySQL其他存储引擎有很大的不同，聚簇索引对主键查询有很高的性能。\r\n\r\n作为事务型的存储引擎，InnoDB通过一些机制和工具支持真正的热备份。\r\n\r\nMySQL的其他存储引擎不支持热备份，要获取一致性视图需要停止对所有表的写入，而在读写混合场景中，停止写入可能也意味着停止读取。\r\n\r\n&nbsp;\r\n<h3>MyISAM存储引擎</h3>\r\nMyISAM提供了大量的特性，包括全文索引、压缩、空间函数（GIS）等，但MyISAM不支持事务和行级锁，而且有一个毫无疑问的缺陷就是崩溃后无法安全恢复。\r\n\r\n对于只读的数据，或者表比较小、可以忍受修复操作，则依然可以继续使用MyISAM（但请不要默认使用MyISAM，而是应当默认使用InnoDB）。\r\n<h4>MyISAM特性</h4>\r\n加锁与并发：对整张表加锁，而不是针对行。在表有读取查询时，也可以往表中插入新的记录（并发插入）。\r\n\r\n修复（和事务恢复以及崩溃恢复不是一个概念）：手工或者自动执行检查和修复操作。通过CHECK TABLE mytable检查表的错误，如果有错误可以通过执行REPAIR TABLE mytable进行修复。\r\n\r\n索引特性：即使是BLOB和TEXT等长字段，也可以基于其前500个字符创建索引。MyISAM也支持全文索引。\r\n\r\n延迟更新索引键（Delayed Key Write）：创建表的时候如果指定了DELAY_KEY_WRITE选项，在每次修改执行完成时，不会立刻将修改的索引数据写入磁盘，而是会写到内存中的键缓冲区，只有在清理键缓冲区或者关闭表的时候才会将对应的索引块写入到磁盘。\r\n<h4>MyISAM压缩表</h4>\r\n可以使用myisampack对MyISAM表进行压缩。压缩表可以极大地减少磁盘空间占用，也可以减少磁盘I/O，从而提升查询性能。\r\n<h4>MyISAM性能</h4>\r\nMyISAM最典型的问题还是表锁的问题，如果你发现所有的查询都查询都长期处于“Locked”状态，那么毫无疑问表锁就是罪魁祸首。\r\n<h3></h3>\r\n<h3>MySQL内建的其他存储引擎</h3>\r\nArchive引擎：不是一个事务型引擎，而是一个针对告诉插入和压缩做了优化的简单引擎。\r\n\r\nBlackhole引擎\r\n\r\nCSV引擎：可以将Excel等电子表格软件中的数据存储为CSV文件，然后复制到MySQL数据目录下，就能在MySQL中打开使用。\r\n\r\nMemory引擎：所有数据保存在内存中，不需要进行磁盘I/O。Memory是表级锁，所以并发写入性能较低。\r\n\r\nMerge引擎\r\n\r\nNDB集群引擎：MySQL服务器、NDB集群存储引擎，以及分布式的、share-nothing的、容灾的、高可用的NDB数据库的组合，被称为MySQL集群（MySQL Cluster）。\r\n\r\n&nbsp;\r\n<h3>第三方存储引擎</h3>\r\nPercona的<strong>XtraDB存储引擎</strong>是基于InnoDB引擎的一个改进版本。\r\n<h3></h3>\r\n<h3><span style=\"text-decoration: underline;\"><span style=\"color: #000000; text-decoration: underline;\">选择合适的引擎</span></span></h3>\r\n除非需要用到某些InnoDB不具备的特性，并且没有其他的办法可以替代，否则都应该<strong>优先选择InnoDB引擎</strong>。\r\n\r\n例如：如果要用到全文索引，建议优先考虑<strong>InnoDB+Sphinx</strong>的组合，而不是使用支持全文索引的MyISAM。\r\n\r\n除非万不得已，否则<strong>建议不要混合使用多种存储引擎</strong>，否则可能带来一列复杂的问题，以及一些潜在的bug和边界问题。至少，混合存储对一致性备份和服务器参数配置都带来了一些困难。\r\n\r\n选择引擎时需要考虑的因素：事务、备份、奔溃恢复、特有的特性\r\n\r\n<strong>不要轻易相信“MyISAM比InnoDB快”之类的经验之谈，这个结论往往不是绝对的。</strong>\r\n\r\n如果涉及订单处理，那么支持事务就是必要选项。\r\n\r\n&nbsp;\r\n<h3>转换表的引擎</h3>\r\n<strong>1. ALTER TABLE</strong>\r\n\r\n[code]\r\n\r\nmysql&gt; ALTER TABLE mytable ENGINE = InnoDB;\r\n\r\n[/code]\r\n\r\n缺点：需要执行很长时间；复制期间消耗系统所有的I/O能力；原表上会加上读锁。\r\n\r\n&nbsp;\r\n\r\n<strong>2. 导入与导出</strong>\r\n\r\n使用mysqldump工具将数据导出到文件，然后修改文件中CREATE TABLE语句的存储引擎选项，注意同时修改表名。\r\n\r\n&nbsp;\r\n\r\n<strong>3. 创建与查询（CREATE 和 SELECT）</strong>\r\n\r\n综合了前两种方法的高效和安全。创建一个新的存储引擎的表，然后利用INSERT···SELECT语法来导数据：\r\n\r\n[code]\r\n\r\nmysql&gt;CREATE TABLE innno_table LIKE myisam_table;\r\n\r\nmysql&gt;ALTER TABLE innodb_table ENGINE=InnoDB;\r\n\r\nmysql&gt;INSERT INTO innodb_table SELECT * FROM myisam_table;\r\n\r\n[/code]\r\n\r\n数据量很大时，可以用事务分批处理：\r\n\r\n[code]\r\n\r\nmysql&gt; START TRANSACTION;\r\n\r\nmysql&gt; INSERT INTO innodb_table SELECT * FROM myisam_table\r\n\r\n-&gt; WHERE id BETWEEN x AND y;\r\n\r\nmysql&gt; COMMIT;\r\n\r\n[/code]\r\n\r\n如果有必要，可以在执行的过程中对原表加锁，以确保新表和原表的数据一致。', '高性能MySQL——MySQL架构', '', 'publish', 'open', 'open', '', '%e9%ab%98%e6%80%a7%e8%83%bdmysql-mysql%e6%9e%b6%e6%9e%84', '', '', '2016-11-15 03:02:56', '2016-11-14 19:02:56', '', 0, 'http://www.gzpblog.com/?p=503', 0, 'post', '', 1),
(504, 1, '2016-11-15 02:54:31', '2016-11-14 18:54:31', '', 'mysql-geli', '', 'inherit', 'open', 'closed', '', 'mysql-geli', '', '', '2016-11-15 02:54:31', '2016-11-14 18:54:31', '', 503, 'http://www.gzpblog.com/wp-content/uploads/2016/11/mysql-geli.jpg', 0, 'attachment', 'image/jpeg', 0),
(505, 1, '2016-11-15 02:54:36', '2016-11-14 18:54:36', '', 'mysql-jiagou', '', 'inherit', 'open', 'closed', '', 'mysql-jiagou', '', '', '2016-11-15 02:54:36', '2016-11-14 18:54:36', '', 503, 'http://www.gzpblog.com/wp-content/uploads/2016/11/mysql-jiagou.jpg', 0, 'attachment', 'image/jpeg', 0),
(506, 1, '2016-11-15 02:54:45', '2016-11-14 18:54:45', '', 'HighPerformance MySQL', '', 'inherit', 'open', 'closed', '', 'highperformance-mysql', '', '', '2016-11-15 02:54:45', '2016-11-14 18:54:45', '', 503, 'http://www.gzpblog.com/wp-content/uploads/2016/11/HighPerformance-MySQL.jpg', 0, 'attachment', 'image/jpeg', 0),
(839, 1, '2017-03-22 22:14:23', '2017-03-22 14:14:23', '今天收到了一封邮件，感到有点惊讶，内容是这样的：\r\n<blockquote>\r\n<h3>你好！</h3>\r\n因公司业务调整，非常遗憾的向大家宣布多说项目即将关闭。\r\n\r\n我们将于2017年6月1日正式关停服务，在此之前您可以通过后台的数据导出功能导出自己站点的评论数据。\r\n\r\n对此给您造成的不便，我们深表歉意，感谢您的一路相伴。</blockquote>\r\n多说要关闭了！这确实是有点惊讶啊，多说在社会化评论做得是不错的了。看了一下多说的官网：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/duoshuo.png\"><img class=\"size-full wp-image-840 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/duoshuo.png\" alt=\"\" width=\"855\" height=\"268\" /></a>\r\n\r\n我去看了一下Jiathis的有言和搜狐的畅言，目前似乎没有要关闭的迹象。\r\n\r\n不过转念一想，这么多年来多说做的事情比较专注，只专注于社会化评论。而我们看一下有言，Jiathis、有言、有荐是Jiathis公司的三大板块，有荐这一块就类似于百度推广了，这里是可以做一些文章的；而畅言就不用说了，搜狐公司旗下的。返回来看多说，多说的压力就很大了，而且，其实会用到社会话评论的用户真的不多，还是免费使用。\r\n\r\n有人建议既然选择放弃了这个项目，不如把这个项目开源出去。其实这一点，我个人是觉得还是不开源的好，毕竟现在还有活着的社会化评论。\r\n\r\n其实就是感慨一下，当初我刚接触独立博客的时候，就了解了社会化评论这种东西，但是那时候我就有一些顾虑，比如采用第三方插件如果有一天第三方不提供服务了，那过往数据要处理就很麻烦，再一个引入第三方还要考虑第三方的稳定性，接入的效率，调用的速度等等。所以最终还是采取古老的email方式。\r\n\r\n很多程序猿都有一个创业的心，但是创业真心是不容易的，首先资金就是一个问题。如何保持公司稳定的资金链，没有利润来源肯定是不行的，多说这么久以来也是不容易，可见寻找赢利点是一件必须要做的事情，否则不管什么公司都活不下去，多元化发展确实是一条路，但是具体怎么做，好不好做，只有真正去做了才会有所体会。', '多说即将关闭，企业资金链该如何维持？', '', 'publish', 'open', 'closed', '', '%e4%bb%8e%e5%a4%9a%e8%af%b4%e5%85%b3%e9%97%ad%e8%81%94%e6%83%b3%e5%88%b0%e5%88%9b%e4%b8%9a%e8%b5%84%e9%87%91%e9%93%be', '', '', '2017-03-22 22:16:12', '2017-03-22 14:16:12', '', 0, 'https://www.gzpblog.com/?p=839', 0, 'post', '', 1),
(851, 1, '2017-03-30 22:04:24', '2017-03-30 14:04:24', '', 'aliyun-tp5-look-like', '', 'inherit', 'open', 'closed', '', 'aliyun-tp5-look-like', '', '', '2017-03-30 22:04:24', '2017-03-30 14:04:24', '', 850, 'https://www.gzpblog.com/wp-content/uploads/2017/03/aliyun-tp5-look-like.png', 0, 'attachment', 'image/png', 0),
(852, 1, '2017-03-30 22:17:20', '2017-03-30 14:17:20', '', 'aliyun-tp5-look-like-s', '', 'inherit', 'open', 'closed', '', 'aliyun-tp5-look-like-s', '', '', '2017-03-30 22:17:20', '2017-03-30 14:17:20', '', 850, 'https://www.gzpblog.com/wp-content/uploads/2017/03/aliyun-tp5-look-like-s.png', 0, 'attachment', 'image/png', 0),
(853, 1, '2017-03-30 22:25:45', '2017-03-30 14:25:45', '最近接触阿里云有点多，不管是个人使用，还是公司使用，使用的频率还是很高的。为了方便下次要用时直接套进去，整了一个资源包：阿里云oss-php-sdk，plupload的web直传，JqueryUI样式等的合集，扔进了Thinkphp5里。\r\n\r\ngithub地址：<a href=\"https://github.com/ZpGuo/aliyun-oss-for-thinkphp5\" target=\"_blank\"> ZpGuo/aliyun-oss-for-thinkphp5</a>\r\n<h3>与阿里云官方SDK的区别：</h3>\r\n<ul>\r\n 	<li>样式升级；阿里云Oss-Web直传最佳实践（可回调）升级版，载入Plupload提供的JqueryUI样式。</li>\r\n 	<li>结合引入oss-php-sdk，可以直接拓展使用oss-php-sdk功能。</li>\r\n 	<li>修改config.php中的配置就可以使用。</li>\r\n</ul>\r\n<h3>版本说明：</h3>\r\n<ul>\r\n 	<li>JQuery 版本1.12.4</li>\r\n 	<li>JQuery UI版本1.12.1，主题Cupertino</li>\r\n 	<li>Thinkphp 版本5.0.2</li>\r\n 	<li>Plupload.js 版本2.1.X</li>\r\n 	<li>阿里云Oss官方SDK 版本2.2.2</li>\r\n</ul>\r\n<h3>预览：</h3>\r\nweb值传的界面：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/aliyun-tp5-look-like.png\"><img class=\"size-full wp-image-851 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/aliyun-tp5-look-like.png\" alt=\"\" width=\"693\" height=\"316\" /></a>\r\n\r\n<strong>其它说明：</strong>\r\n<ul>\r\n 	<li>保留了引入拓展的后续升级的可能</li>\r\n 	<li>可以更换JqueryUI的样式主题，前往官网Jquery UI定制下载：<a href=\"http://jqueryui.com/download/\" target=\"_blank\">Jquery UI </a></li>\r\n 	<li>目前就是一个打包，功能不多，之后看看公司项目需求，完善一下功能，或者把Controller功能补完</li>\r\n</ul>\r\n<h3>更多文档：</h3>\r\n<ol>\r\n 	<li>Plupload官网：<a href=\"http://www.plupload.com/\" target=\"_blank\">Plupload: Multi-runtime File-Uploader</a></li>\r\n 	<li>阿里云Oss：<a href=\"https://help.aliyun.com/document_detail/32099.html?spm=5176.product31815.6.744.SAFZWk\" target=\"_blank\">PHP-SDK</a></li>\r\n 	<li>阿里云Oss最佳实践Web端直传：<a href=\"https://help.aliyun.com/document_detail/31927.html?spm=5176.doc32099.6.625.la8OMv\" target=\"_blank\">服务端签名直传并设置上传回调</a></li>\r\n</ol>\r\n&nbsp;', '阿里云Oss+Thinkphp5，Web一站式可拓展包', '', 'inherit', 'closed', 'closed', '', '850-revision-v1', '', '', '2017-03-30 22:25:45', '2017-03-30 14:25:45', '', 850, 'https://www.gzpblog.com/20170330/853.html', 0, 'revision', '', 0),
(854, 1, '2017-03-30 22:28:25', '2017-03-30 14:28:25', '最近接触阿里云有点多，不管是个人使用，还是公司使用，使用的频率还是很高的。为了方便下次要用时直接套进去，整了一个资源包：阿里云oss-php-sdk，plupload的web直传，JqueryUI样式等的合集，扔进了Thinkphp5里。\n\ngithub地址：<a href=\"https://github.com/ZpGuo/aliyun-oss-for-thinkphp5\" target=\"_blank\"> ZpGuo/aliyun-oss-for-thinkphp5</a>\n<h3>与阿里云官方SDK的区别：</h3>\n<ul>\n 	<li>样式升级；阿里云Oss-Web直传最佳实践（可回调）升级版，载入Plupload提供的JqueryUI样式。</li>\n 	<li>结合引入oss-php-sdk，可以直接拓展使用oss-php-sdk功能。</li>\n 	<li>修改config.php中的配置就可以使用。</li>\n</ul>\n<h3>版本说明：</h3>\n<ul>\n 	<li>JQuery 版本1.12.4</li>\n 	<li>JQuery UI版本1.12.1，主题Cupertino</li>\n 	<li>Thinkphp 版本5.0.2</li>\n 	<li>Plupload.js 版本2.1.X</li>\n 	<li>阿里云Oss官方SDK 版本2.2.2</li>\n</ul>\n<h3>预览：</h3>\nweb值传的界面：\n\n<a href=\"https://files.gzpblog.com/wp/2017/03/aliyun-tp5-look-like.png\"><img class=\"size-full wp-image-851 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/aliyun-tp5-look-like.png\" alt=\"\" width=\"693\" height=\"316\" /></a>\n\n<strong>其它说明：</strong>\n<ul>\n 	<li>保留了引入拓展的后续升级的可能</li>\n 	<li>可以更换JqueryUI的样式主题，前往官网Jquery UI定制下载：<a href=\"http://jqueryui.com/download/\" target=\"_blank\">Jquery UI </a></li>\n 	<li>目前就是一个打包，功能不多，之后看看公司项目需求，完善一下功能，或者把Controller功能补完</li>\n 	<li>跨域时记得在阿里云</li>\n</ul>\n<h3>更多文档：</h3>\n<ol>\n 	<li>Plupload官网：<a href=\"http://www.plupload.com/\" target=\"_blank\">Plupload: Multi-runtime File-Uploader</a></li>\n 	<li>阿里云Oss：<a href=\"https://help.aliyun.com/document_detail/32099.html?spm=5176.product31815.6.744.SAFZWk\" target=\"_blank\">PHP-SDK</a></li>\n 	<li>阿里云Oss最佳实践Web端直传：<a href=\"https://help.aliyun.com/document_detail/31927.html?spm=5176.doc32099.6.625.la8OMv\" target=\"_blank\">服务端签名直传并设置上传回调</a></li>\n</ol>\n&nbsp;', '阿里云Oss+Thinkphp5，Web一站式可拓展包', '', 'inherit', 'closed', 'closed', '', '850-autosave-v1', '', '', '2017-03-30 22:28:25', '2017-03-30 14:28:25', '', 850, 'https://www.gzpblog.com/20170330/854.html', 0, 'revision', '', 0),
(678, 1, '2017-02-20 02:14:22', '2017-02-19 18:14:22', '', '我的职业历程', '', 'publish', 'closed', 'closed', '', 'my-job-timelne', '', '', '2017-02-20 02:15:43', '2017-02-19 18:15:43', '', 0, 'http://www.gzpblog.com/?page_id=678', 0, 'page', '', 0),
(680, 1, '2017-02-20 02:23:47', '2017-02-19 18:23:47', '这是一个基于Bootstrap开发的自适应Wordpress主题，是我自己用的，所以是根据我自己的需求与想法做的。考虑到主题的效率，流畅性，没有用太多JS，能用css就用css解决（包括顶部的三级导航菜单），所以并没有太多的酷炫效果，某些设计也比较古老（自用的嘛）。而且，作为一个后端程序猿，前端目前真心不熟啊！！！不过，还是分享出来。\n\n先上一张效果图：\n\n<a href=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000933.png\"><img class=\"size-large wp-image-639 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000933-1024x805.png\" alt=\"\" width=\"1024\" height=\"805\" /></a>\n\n移动端中的展现：\n\n<a href=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000812.png\"><img class=\"size-full wp-image-641 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000812.png\" alt=\"\" width=\"390\" height=\"733\" /></a>\n\n<a href=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000756.png\"><img class=\"size-full wp-image-640 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000756.png\" alt=\"\" width=\"396\" height=\"737\" /></a>\n\n可能在pad中的展示会比较差，但是问题不大。\n<h3>V1.0.0版本说明：</h3>\n<h4>主题特色</h4>\n<ul>\n 	<li>采用bootstrap构建</li>\n 	<li>支持自适应，适配移动端设备</li>\n 	<li>目前提供五个已有样式的侧边栏小工具：热门文章，最新文章，标签云，最新评论，归档</li>\n 	<li>模板页面提供archives归档页，treeTime时间轴页面，myJob时间轴页面</li>\n 	<li>底部footer提供普通和微信二维码两种方案</li>\n 	<li>去除了加载Google Fonts，emoji表情等以优化速度</li>\n 	<li>优化了Wordpress默认输出的 head 加载</li>\n 	<li>暂时不支持后台更新</li>\n</ul>\n<h4>主题说明</h4>\n<ul>\n 	<li>依赖插件：WP-PostViews（文章浏览量统计插件）</li>\n 	<li>小图标：采用Font Awesome v4.7.0，具体图标对应class请前往官网查看。</li>\n 	<li>发送邮件：评论回复邮件提醒功能采用了PHPMailer，发送邮件的设置可在主题设置中进行设置。</li>\n</ul>\n<h4>部分功能使用说明</h4>\n<ol>\n 	<li>开始使用主题后请先在主题设置页面设置网站信息，非常重要，description和keywords一经设置最好少修改；并选择一款footer样式</li>\n 	<li>右侧边栏的头像请直接替换public/images/jumbotron_self.png图片，并保持原来名字（未来开放设置中心修改）</li>\n 	<li>微信公众号二维码图片同上（未来开放设置中心修改）</li>\n 	<li>archives归档页使用：直接新建一个独立页面，模板选择Archive归档页面即可。</li>\n</ol>\n<h4>待完善</h4>\n<ul>\n 	<li>微信公众号模式底部左侧空旷</li>\n 	<li>侧边栏个人板块整合进主题设置</li>\n 	<li>顶部导航一级栏目过多时样式会出现混乱，且目前只支持3级导航</li>\n 	<li>Gravatar头像的优化</li>\n 	<li>楼中楼评论时的用户体验</li>\n</ul>\n<h3>下载地址</h3>\n目前第一个版本，还在持续完善和debug中，\n<ol>\n 	<li>百度网盘地址：<a href=\"http://pan.baidu.com/s/1qYVS328\" target=\"_blank\">Jumping -v1.0.0</a> ，下载密码：hiqp</li>\n 	<li>Github地址：<a href=\"https://github.com/ZpGuo/Jumping/tree/master\" target=\"_blank\">Jumping主题master</a>，点击Clone or download，下载Zip，到wordpress后台安装就行。</li>\n</ol>\n同时，欢迎在github上提issue或者直接fork。', '基于Bootstrap开发的自适应Wordpress主题（自用）', '', 'inherit', 'closed', 'closed', '', '638-autosave-v1', '', '', '2017-02-20 02:23:47', '2017-02-19 18:23:47', '', 638, 'http://www.gzpblog.com/20170220/680.html', 0, 'revision', '', 0),
(679, 1, '2017-02-20 02:14:22', '2017-02-19 18:14:22', '', '我的职业历程', '', 'inherit', 'closed', 'closed', '', '678-revision-v1', '', '', '2017-02-20 02:14:22', '2017-02-19 18:14:22', '', 678, 'http://www.gzpblog.com/20170220/679.html', 0, 'revision', '', 0),
(656, 1, '2017-02-15 20:41:20', '2017-02-15 12:41:20', '每天晚上单曲循环听不厌，太好听！\r\n\r\n怼个链接：<a href=\"http://music.163.com/#/song?id=439915614&amp;autoplay=true&amp;market=baiduhd\" target=\"_blank\">刚好遇见你</a>\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/ghyjn.png\"><img class=\"alignnone size-full wp-image-657\" src=\"http://files.gzpblog.com/wp/2017/02/ghyjn.png\" alt=\"\" width=\"862\" height=\"492\" /></a>', '最近已经被这首歌洗脑了', '', 'publish', 'open', 'open', '', '%e6%9c%80%e8%bf%91%e5%b7%b2%e7%bb%8f%e8%a2%ab%e8%bf%99%e9%a6%96%e6%ad%8c%e6%b4%97%e8%84%91%e4%ba%86', '', '', '2017-02-15 20:41:47', '2017-02-15 12:41:47', '', 0, 'http://www.gzpblog.com/?p=656', 0, 'post', '', 22),
(657, 1, '2017-02-15 20:40:15', '2017-02-15 12:40:15', '', 'ghyjn', '', 'inherit', 'open', 'closed', '', 'ghyjn', '', '', '2017-02-15 20:40:15', '2017-02-15 12:40:15', '', 656, 'http://www.gzpblog.com/wp-content/uploads/2017/02/ghyjn.png', 0, 'attachment', 'image/png', 0),
(658, 1, '2017-02-15 20:41:20', '2017-02-15 12:41:20', '每天晚上单曲循环听不厌，太好听！\r\n\r\n怼个链接：<a href=\"http://music.163.com/#/song?id=439915614&amp;autoplay=true&amp;market=baiduhd\" target=\"_blank\">刚好遇见你</a>\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/ghyjn.png\"><img class=\"alignnone size-full wp-image-657\" src=\"http://files.gzpblog.com/wp/2017/02/ghyjn.png\" alt=\"\" width=\"862\" height=\"492\" /></a>', '最近已经被这首歌洗脑了', '', 'inherit', 'closed', 'closed', '', '656-revision-v1', '', '', '2017-02-15 20:41:20', '2017-02-15 12:41:20', '', 656, 'http://www.gzpblog.com/20170215/658.html', 0, 'revision', '', 0),
(659, 1, '2017-02-15 20:44:10', '2017-02-15 12:44:10', ' ', '', '', 'publish', 'closed', 'closed', '', '659', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 7, 'http://www.gzpblog.com/?p=659', 9, 'nav_menu_item', '', 0),
(662, 1, '2017-02-17 23:44:08', '2017-02-17 15:44:08', '现在很多框架，拓展都使用了composer模式进行安装。之前装Laravel时觉得麻烦，没去研究，现在TP5也使用composer了，就学学。\r\n\r\n首先，先安装composer，因为是本地用的，是windows系统，有无脑安装版本，先用这个版本，其实其他方法包括Linux系统，也不复杂，没问题。\r\n\r\nwindows安装包下载：<a href=\"https://getcomposer.org/Composer-Setup.exe\" target=\"_blank\">Composer-Setup.exe</a>\r\n\r\n然后就是next，next就好，选择代理的那里不选即可。\r\n\r\n安装完之后就可以用了，我们发现thinkphp根目录 （下载的压缩包）下已经有一个composer.json了。这时候，如果我们需要安装验证码拓展（tp5需要下载拓展包），可以先用命令行进入项目目录：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2016/12/Install-composer1.png\"><img class=\"alignnone size-full wp-image-550\" src=\"http://files.gzpblog.com/wp/2016/12/Install-composer1.png\" alt=\"\" width=\"476\" height=\"53\" /></a>\r\n\r\n执行：\r\n\r\ncomposer require topthink/think-captcha\r\n\r\n如果发现没反应，不要急！因为镜像原因，比较慢，等等就好，完事之后就是这样：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2016/12/Install-composer2.png\"><img class=\"alignnone size-full wp-image-548\" src=\"http://files.gzpblog.com/wp/2016/12/Install-composer2.png\" alt=\"\" width=\"455\" height=\"266\" /></a>\r\n\r\n这个时候发现：\r\n\r\n根目录的composer.json多出来一行，同时自动生成了composer.lock进行版本控制\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2016/12/Install-composer3.png\"><img class=\"alignnone wp-image-549 size-full\" src=\"http://files.gzpblog.com/wp/2016/12/Install-composer3.png\" width=\"506\" height=\"658\" /></a>\r\n\r\n&nbsp;\r\n\r\n总之，进入项目目录后，如果是局部安装的composer，用php composer.phar命令，全局安装的用composer。\r\n\r\n使用install进行安装，先定义好composer.json的依赖，执行：php composer.phar install\r\n\r\n或者：composer install\r\n\r\ncomposer会自动去找到composer.json的定义安装。\r\n\r\n&nbsp;\r\n\r\n使用require进行添加依赖（就像上面安装think-captcha库那样）：php composer.phar require\r\n\r\n或者：composer require\r\n\r\n&nbsp;\r\n\r\n更新：php composer.phar update\r\n\r\n或者：composer update\r\n\r\n&nbsp;\r\n\r\n所有的拓展包都安装在了vendor目录下，导入autoload.php就可以自动载入。 而在TP5中，自动导入了vendor拓展包并且定义了think下的命名空间。 例如think-captcha拓展包，我们只需要：\r\n\r\n[code]\r\nuse think\\captcha\\Captcha;\r\n[/code]\r\n\r\n然后new Captcha()调用这个类就行。', '如何使用Composer', '', 'inherit', 'closed', 'closed', '', '546-revision-v1', '', '', '2017-02-17 23:44:08', '2017-02-17 15:44:08', '', 546, 'http://www.gzpblog.com/20170217/662.html', 0, 'revision', '', 0),
(671, 1, '2017-02-18 17:19:22', '2017-02-18 09:19:22', '我本是一枚扫大街的（环境科学专业），却走上了IT男的不归路。\r\n\r\n为什么？\r\n\r\n因为，\r\n\r\n做些自己喜欢做的事\r\n\r\n做些自己不会后悔的事\r\n\r\n做些让自己充实起来的事\r\n\r\n2015.7.1 大学毕业\r\n\r\n2015.9.1 只身前往上海，开始转行历程，先开始学习PHP\r\n\r\n2016.2.16 开始了我的第一份工作，做电商B2B平台的开发。并（尴尬地）学会了各种修理网络，修理电脑的技巧。\r\n\r\n2016.5.24 第一次跳槽，有点快。做APP服务端接口，后台管理系统，微信公众号及其接口。\r\n\r\n2016.11.27 由于某些原因，离开上海，回到广东，于是开始在深圳工作。目前进行一项云平台开发。\r\n\r\n&nbsp;\r\n\r\n我现在主学PHP，也写写前端，最近对Python和Go特别感兴趣并接触中。\r\n\r\n我虽然接触编程的时间不长，但是我正在好好学，目前为止我很充实，对技术有很高的热情。\r\n\r\n因为起步比较晚，知道自己落下了很多，也比较想快速提升自己，导致有点急功近利，又或者说，有点急躁。还是要提醒自己，不要急，慢慢来，一步一步走！\r\n\r\n&nbsp;\r\n\r\n来来来，搞起！\r\n\r\n扫大街的终于想起了那一夜键盘滋啦滋啦声的恐惧......\r\n\r\n&nbsp;\r\n\r\n我的博客历程：<a href=\"http://www.gzpblog.com/blog-time\" target=\"_blank\">博客历程</a>\r\n\r\n如果你的博客也时常更新一些有价值的内容，希望能相互沟通，并且有兴趣交换友链，可以给我留言哦。', '关于我', '', 'inherit', 'closed', 'closed', '', '5-revision-v1', '', '', '2017-02-18 17:19:22', '2017-02-18 09:19:22', '', 5, 'http://www.gzpblog.com/20170218/671.html', 0, 'revision', '', 0),
(666, 1, '2017-02-18 01:46:21', '2017-02-17 17:46:21', '锅子博客的进化史。', '博客历程', '', 'publish', 'open', 'closed', '', 'blog-time', '', '', '2017-02-20 02:30:52', '2017-02-19 18:30:52', '', 0, 'http://www.gzpblog.com/?page_id=666', 0, 'page', '', 0),
(667, 1, '2017-02-18 01:46:21', '2017-02-17 17:46:21', '1', '博客历程', '', 'inherit', 'closed', 'closed', '', '666-revision-v1', '', '', '2017-02-18 01:46:21', '2017-02-17 17:46:21', '', 666, 'http://www.gzpblog.com/20170218/667.html', 0, 'revision', '', 0),
(668, 1, '2017-06-11 17:14:36', '2017-06-11 09:14:36', '我本是一枚扫大街的（环境科学专业），却走上了IT男的不归路。\n\n为什么？我仅仅是想做一些自己想做的事情，自己控制自己的人生，我从来没有这么充实过。\n\n但是起步有点晚，也知道自己落下了很多，也比较想快速提升自己，导致有点急功近利，又或者说，有点急躁。我不断地提醒自己，不要急，慢慢来，一步一步走！\n\n2015.7.1 毕业；2015.9.1 前往上海，开始转行历程，开始学习PHP；2016.2.16 开始了我的第一份工作，做电商B2B平台的开发；并（尴尬地）学会了各种修理网络，修理电脑的技巧。2016.5.24 第一次跳槽，有点快，做APP服务端接口，后台管理系统，微信公众号及其接口。2016.11.27 由于某些原因，离开上海，回到广东，于是开始在深圳工作。\n\n我现在主学PHP，不过我希望接下来一段时间内我的学习路线是这样的：\n<ul>\n 	<li>PHP的道路不要停，巩固基础，而且接下来要学Swoole。</li>\n 	<li>学习Golang，不能只会一门语言，Go看起来非常对我的胃口，适当学习起来。</li>\n 	<li>写写前端，不用太深入，自己写东西时能够实现自己的需求就行。</li>\n 	<li>补补计算机基础，数据结构算法，网络通信什么的。</li>\n</ul>\n不止是这些，还有很多其它额外的东西要学，比如最近开始了解Docker；还有一些其它与业务联系生态，Redis啊MongoDB啊等等；还有最近出现不久的PHP-X似乎也很有意思。\n\n虽然起步慢了很多，但是我正在好好学，目前为止我很充实，对技术有很高的热情。感觉自己成长也比较快，不过有也个硬伤，似乎成长为了依赖搜索引擎的业务型选手，比如有一个函数可以实现这个功能，但是想不起来具体叫什么或者具体的参数，但是搜一下，可以很快地反应过来，对对对就是这个，然后拿来用。其实也就是基础不够扎实，包括很多计算器基础的知识，确实落下了很多。\n\n来来来，搞起！\n\n扫大街的终于想起了那一夜键盘滋啦滋啦声的恐惧......\n\n&nbsp;\n\n我的博客历程：<a href=\"http://www.gzpblog.com/blog-time\" target=\"_blank\" rel=\"noopener noreferrer\">博客历程</a>\n\n如果你的博客也时常更新一些有价值的内容，希望能相互沟通，并且有兴趣交换友链，可以给我留言，<a href=\"https://www.gzpblog.com/friendlink\" target=\"_blank\" rel=\"noopener noreferrer\">友链</a>。', '关于我', '', 'inherit', 'closed', 'closed', '', '5-autosave-v1', '', '', '2017-06-11 17:14:36', '2017-06-11 09:14:36', '', 5, 'http://www.gzpblog.com/20170218/668.html', 0, 'revision', '', 0),
(669, 1, '2017-02-18 01:57:21', '2017-02-17 17:57:21', '&nbsp;\r\n\r\n我本是一枚扫大街的（环境科学专业），却走上了IT男的不归路。\r\n为什么？\r\n\r\n因为，\r\n\r\n做些自己喜欢做的事\r\n\r\n做些自己不会后悔的事\r\n\r\n做些让自己充实起来的事\r\n\r\n2015.7.1 大学毕业\r\n\r\n2015.9.1 只身前往上海，开始转行历程，先开始学习PHP\r\n\r\n2016.2.16 开始了我的第一份工作，做电商B2B平台的开发。并（尴尬地）学会了各种修理网络，修理电脑的技巧。\r\n\r\n2016.5.24 第一次跳槽，有点快。做APP服务端接口，后台管理系统，微信公众号及其接口。\r\n\r\n2016.11.27 由于某些原因，离开上海，回到广东，于是开始在深圳工作。目前进行一项云平台开发。\r\n\r\n&nbsp;\r\n\r\n我现在主学PHP，也写写前端，最近对Python和Go特别感兴趣并接触中。\r\n\r\n我虽然接触编程的时间不长，但是我正在好好学，目前为止我很充实，对技术有很高的热情。\r\n\r\n因为起步比较晚，知道自己落下了很多，也比较想快速提升自己，导致有点急功近利，又或者说，有点急躁。还是要提醒自己，不要急，慢慢来，一步一步走！\r\n\r\n&nbsp;\r\n\r\n来来来，搞起！\r\n\r\n扫大街的终于想起了那一夜键盘滋啦滋啦声的恐惧......\r\n\r\n&nbsp;\r\n\r\n我的博客历程：<a href=\"http://www.gzpblog.com/blog-time\" target=\"_blank\">博客历程</a>\r\n\r\n如果有兴趣交换友链，可以给我留言哦。', '关于我', '', 'inherit', 'closed', 'closed', '', '5-revision-v1', '', '', '2017-02-18 01:57:21', '2017-02-17 17:57:21', '', 5, 'http://www.gzpblog.com/20170218/669.html', 0, 'revision', '', 0),
(670, 1, '2017-02-18 02:01:57', '2017-02-17 18:01:57', '我本是一枚扫大街的（环境科学专业），却走上了IT男的不归路。\r\n\r\n为什么？\r\n\r\n因为，\r\n\r\n做些自己喜欢做的事\r\n\r\n做些自己不会后悔的事\r\n\r\n做些让自己充实起来的事\r\n\r\n2015.7.1 大学毕业\r\n\r\n2015.9.1 只身前往上海，开始转行历程，先开始学习PHP\r\n\r\n2016.2.16 开始了我的第一份工作，做电商B2B平台的开发。并（尴尬地）学会了各种修理网络，修理电脑的技巧。\r\n\r\n2016.5.24 第一次跳槽，有点快。做APP服务端接口，后台管理系统，微信公众号及其接口。\r\n\r\n2016.11.27 由于某些原因，离开上海，回到广东，于是开始在深圳工作。目前进行一项云平台开发。\r\n\r\n&nbsp;\r\n\r\n我现在主学PHP，也写写前端，最近对Python和Go特别感兴趣并接触中。\r\n\r\n我虽然接触编程的时间不长，但是我正在好好学，目前为止我很充实，对技术有很高的热情。\r\n\r\n因为起步比较晚，知道自己落下了很多，也比较想快速提升自己，导致有点急功近利，又或者说，有点急躁。还是要提醒自己，不要急，慢慢来，一步一步走！\r\n\r\n&nbsp;\r\n\r\n来来来，搞起！\r\n\r\n扫大街的终于想起了那一夜键盘滋啦滋啦声的恐惧......\r\n\r\n&nbsp;\r\n\r\n我的博客历程：<a href=\"http://www.gzpblog.com/blog-time\" target=\"_blank\">博客历程</a>\r\n\r\n如果有兴趣交换友链，可以给我留言哦。', '关于我', '', 'inherit', 'closed', 'closed', '', '5-revision-v1', '', '', '2017-02-18 02:01:57', '2017-02-17 18:01:57', '', 5, 'http://www.gzpblog.com/20170218/670.html', 0, 'revision', '', 0),
(821, 1, '2017-03-18 02:00:41', '2017-03-17 18:00:41', '此时我的心里简直千万只草泥马在奔腾啊。\r\n\r\n今天八点半加完班，然后吃晚饭去剪头发。楼下就有一家美容美发，兴高采烈地进去了。洗头时，问我，要98的首席，150的啥啥，还是250的总监剪头发。我一听，卧槽这么贵，我剪头发最贵也就剪40多！然后一想，可能这家比较高端，“不用那么贵的！”“可以啊！那就98的吧？”\r\n\r\n坐下来剪了。那小伙子就问我想怎么怎么剪，然后还说想不想有点改变啊，换个造型怎么样怎么样的。还拿了照片给我看，我头一热，就说好了。然后那货就稍微两边一弄，“看这型就出来了吧！”搞得似乎很专业！“你看这地方，做个定型吧。这样塌着不好看。”我看着，似乎好像有道理，是不好看，因为之前也烫过头发，感觉应该不会贵到哪去，而且他说“不是烫，就是做个定型！”我估摸着定个型会有多贵，就准了。刚说完旁边另一个小哥那个液体就往我头上滴了。\r\n\r\n然后剪头发那货拿着本本来了。上面380,680,980,1280！说：“看一下我们的价格哦，38，68，98，128，我觉得我们不用做那么好，68的就好了，之前烫过头发吗？”“烫过”“那就98的吧，滋润修复一点，原价980，现在打折只要98”。\r\n\r\n我心里虎躯一震，这折这么夸张？“平时没有的哦，我们现在十周年庆，才有这么便宜。”“这效果能有多久啊。”“这个，一年是有的！”\r\n\r\n真（ciao）的（ni）吗（m）！你当我傻的啊，能有一年！不过我一想，以前烫头发说半年效果最后两个月效果就没了，我就算了不跟他说了，感觉美发店都是这个德性吧！我就让他做了。“会员打一折，我去给你申请一下会员。”然后拿着一张纸过来了，“来签个字吧，一折98，办了会员以后剪头发都是20块了，这次消费就是118，没错的这里签个字。”\r\n\r\n那货去前台的瞬间，我就想。雾草？会员卡？我有不好的预感！雾草，是不是分分钟几千啊！果然，我看到了4位数4位数的本本拿过来了，最夸张那个100000的终极会员卡。“要这么贵？”“因为我们不仅是美发，还有美容护肤等等，你要是平时只剪头发的话，只要2000的就可以了。”“2000花不完啊！”“我们是全国连锁的，我们总部在北京，你看我就是北京调过来的，你应该听得出来吧。我这人很直接，不会骗你。你在其它地方都能用，也可以给朋友用啊！这个没规定的。”我听着确实一口北方口音，就问：“深圳还有其它店啊？”“深圳五十多家呢，我们连锁的。”虽然感觉2000有点夸张，但是这种钱相当于充进去的还能用的，这次还打折，也未尝不可。\r\n\r\n<strong>然后我就跟脑袋被驴了一样的，办了一张会员卡！</strong>\r\n\r\n办完会员卡，一个妹子服务员就给端上来水果和一碗汤，这服务，可以啊。\r\n\r\n那货对着一旁的小哥说，“等一下好了去冲一下，送的1100多的保养给弄上！”哎哟喂，还送这玩意？就在我躺下来给他冲水的时候，我一贯警觉的神经突然抽了一下！我突然！意识到了！什么！洗完头，剪头发那货还不见了，就刚才给我打药水那货帮我稍微修了两下头发就完事了！\r\n\r\n然后我查了一下“范斯哲”这个牌子，查出来是意大利知名的奢侈品牌范思哲，我再搜一下“范思哲美容美发”！竟（wo）然（cao）深圳只有三四家店！北京没有店！卧槽那位北京调过来的经理你去哪了？难怪我冲完头发回来人就不见了！我看了一下我刷卡的交易商户，竟然是深圳市宝安区利成超市，一个美容美发的，竟然刷到超市去了！我再查了一下网上其它评价，也有人吐槽被骗，捆绑消费，强制消费，这个公司三个品牌，全部超级低分，全部都是被骗的议论。\r\n\r\n然后我就知道我被骗了。想不到！聪明一世，糊涂一时啊！我平时那么注意的一个人，竟然也被坑了！我当时是脑子进啥了啊还是加班加傻了啊。\r\n\r\n<strong>回家洗了个头，望着塌下来的头发，心在滴血。</strong>', '无良商家啊！把我给骗了。', '', 'private', 'open', 'closed', '', '%e6%97%a0%e8%89%af%e5%95%86%e5%ae%b6%e5%95%8a%ef%bc%81%e6%8a%8a%e6%88%91%e7%bb%99%e9%aa%97%e4%ba%86%e3%80%82', '', '', '2017-04-10 15:25:02', '2017-04-10 07:25:02', '', 0, 'https://www.gzpblog.com/?p=821', 0, 'post', '', 4),
(638, 1, '2017-02-14 02:43:13', '2017-02-13 18:43:13', '这是一个基于Bootstrap开发的自适应Wordpress主题，是我自己用的，所以是根据我自己的需求与想法做的。考虑到主题的效率，流畅性，没有用太多JS，能用css就用css解决（包括顶部的三级导航菜单），所以并没有太多的酷炫效果，某些设计也比较古老（自用的嘛）。而且，作为一个后端程序猿，前端目前真心不熟啊！！！不过，还是分享出来。\r\n\r\n先上一张效果图：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000933.png\"><img class=\"size-large wp-image-639 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000933-1024x805.png\" alt=\"\" width=\"1024\" height=\"805\" /></a>\r\n\r\n移动端中的展现：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000812.png\"><img class=\"size-full wp-image-641 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000812.png\" alt=\"\" width=\"390\" height=\"733\" /></a>\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000756.png\"><img class=\"size-full wp-image-640 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000756.png\" alt=\"\" width=\"396\" height=\"737\" /></a>\r\n\r\n可能在pad中的展示会比较差，但是问题不大。\r\n<h3>V1.0.0版本说明：</h3>\r\n<h4>主题特色</h4>\r\n<ul>\r\n 	<li>采用bootstrap构建</li>\r\n 	<li>支持自适应，适配移动端设备</li>\r\n 	<li>目前提供五个已有样式的侧边栏小工具：热门文章，最新文章，标签云，最新评论，归档</li>\r\n 	<li>模板页面提供archives归档页，treeTime时间轴页面，myJob时间轴页面</li>\r\n 	<li>底部footer提供普通和微信二维码两种方案</li>\r\n 	<li>去除了加载Google Fonts，emoji表情等以优化速度</li>\r\n 	<li>优化了Wordpress默认输出的 head 加载</li>\r\n 	<li>暂时不支持后台更新</li>\r\n</ul>\r\n<h4>主题说明</h4>\r\n<ul>\r\n 	<li>依赖插件：WP-PostViews（文章浏览量统计插件）</li>\r\n 	<li>小图标：采用Font Awesome v4.7.0，具体图标对应class请前往官网查看。</li>\r\n 	<li>发送邮件：评论回复邮件提醒功能采用了PHPMailer，发送邮件的设置可在主题设置中进行设置。</li>\r\n</ul>\r\n<h4>部分功能使用说明</h4>\r\n<ol>\r\n 	<li>开始使用主题后请先在主题设置页面设置网站信息，非常重要，description和keywords一经设置最好少修改；并选择一款footer样式</li>\r\n 	<li>右侧边栏的头像请直接替换public/images/jumbotron_self.png图片，并保持原来名字（未来开放设置中心修改）</li>\r\n 	<li>微信公众号二维码图片同上（未来开放设置中心修改）</li>\r\n 	<li>archives归档页使用：直接新建一个独立页面，模板选择Archive归档页面即可。</li>\r\n 	<li>treeTime时间轴页使用：新建一个选择treeTime的归档页面，开放评论，但是内容需要在treeTime.php中自行修改，这可能需要你有一些html，css的基础。</li>\r\n 	<li>myJob时间轴页使用：新建一个选择myJob的归档页面，内容需要自行到myJob.php中修改，这可能需要你有一些html，css的基础。</li>\r\n</ol>\r\n<h4>待完善</h4>\r\n<ul>\r\n 	<li>微信公众号模式底部左侧空旷</li>\r\n 	<li>侧边栏个人板块整合进主题设置</li>\r\n 	<li>顶部导航一级栏目过多时样式会出现混乱，且目前只支持3级导航</li>\r\n 	<li>Gravatar头像的优化</li>\r\n 	<li>楼中楼评论时的用户体验</li>\r\n</ul>\r\n<h3>下载地址</h3>\r\n目前第一个版本基本上就是这样了，放一下地址：\r\n<ol>\r\n 	<li>百度网盘地址：<a href=\"http://pan.baidu.com/s/1qYVS328\" target=\"_blank\">Jumping -v1.0.0</a> ，下载密码：hiqp</li>\r\n 	<li>Github地址：<a href=\"https://github.com/ZpGuo/Jumping/tree/master\" target=\"_blank\">Jumping主题master</a>，点击Clone or download，下载Zip，到wordpress后台安装就行。</li>\r\n</ol>\r\n其实能完善的地方还有很多，以后有时间再弄吧，上班也忙。同时，欢迎在github上提issue或者直接fork。', '基于Bootstrap开发的自适应Wordpress主题（自用）', '', 'publish', 'open', 'open', '', '%e5%9f%ba%e4%ba%8ebootstrap%e5%bc%80%e5%8f%91%e7%9a%84%e8%87%aa%e9%80%82%e5%ba%94wordpress%e4%b8%bb%e9%a2%98%ef%bc%88%e8%87%aa%e7%94%a8%ef%bc%89', '', '', '2017-02-20 02:25:17', '2017-02-19 18:25:17', '', 0, 'http://www.gzpblog.com/?p=638', 0, 'post', '', 7),
(639, 1, '2017-02-14 02:22:49', '2017-02-13 18:22:49', '', 'QQ截图20170213000933', '', 'inherit', 'open', 'closed', '', 'qq%e6%88%aa%e5%9b%be20170213000933', '', '', '2017-02-14 02:22:49', '2017-02-13 18:22:49', '', 638, 'http://www.gzpblog.com/wp-content/uploads/2017/02/QQ截图20170213000933.png', 0, 'attachment', 'image/png', 0),
(640, 1, '2017-02-14 02:22:54', '2017-02-13 18:22:54', '', 'QQ截图20170213000756', '', 'inherit', 'open', 'closed', '', 'qq%e6%88%aa%e5%9b%be20170213000756', '', '', '2017-02-14 02:22:54', '2017-02-13 18:22:54', '', 638, 'http://www.gzpblog.com/wp-content/uploads/2017/02/QQ截图20170213000756.png', 0, 'attachment', 'image/png', 0),
(641, 1, '2017-02-14 02:22:56', '2017-02-13 18:22:56', '', 'QQ截图20170213000812', '', 'inherit', 'open', 'closed', '', 'qq%e6%88%aa%e5%9b%be20170213000812', '', '', '2017-02-14 02:22:56', '2017-02-13 18:22:56', '', 638, 'http://www.gzpblog.com/wp-content/uploads/2017/02/QQ截图20170213000812.png', 0, 'attachment', 'image/png', 0),
(642, 1, '2017-02-14 02:43:13', '2017-02-13 18:43:13', '这是一个基于Bootstrap开发的自适应Wordpress主题，是我自己用的，所以是根据我自己的需求与想法做的。考虑到主题的效率，流畅性，没有用太多JS，能用css就用css解决（包括顶部的三级导航菜单），所以并没有太多的酷炫效果，某些设计也比较古老（自用的嘛）。而且，作为一个后端程序猿，前端目前真心不熟啊！！！不过，还是分享出来。\r\n\r\n先上一张效果图：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000933.png\"><img class=\"size-large wp-image-639 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000933-1024x805.png\" alt=\"\" width=\"1024\" height=\"805\" /></a>\r\n\r\n移动端中的展现：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000812.png\"><img class=\"size-full wp-image-641 alignleft\" src=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000812.png\" alt=\"\" width=\"390\" height=\"733\" /></a><a href=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000756.png\"><img class=\"size-full wp-image-640 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000756.png\" alt=\"\" width=\"396\" height=\"737\" /></a>\r\n\r\n可能在pad中的展示会比较差，但是问题不大。\r\n<h3>V1.0.0版本说明：</h3>\r\n<h4>主题特色</h4>\r\n<ul>\r\n 	<li>采用bootstrap构建</li>\r\n 	<li>支持自适应，适配移动端设备</li>\r\n 	<li>目前提供五个已有样式的侧边栏小工具：热门文章，最新文章，标签云，最新评论，归档</li>\r\n 	<li>模板页面提供一个archives归档页</li>\r\n 	<li>底部footer提供普通和微信二维码两种方案</li>\r\n 	<li>去除了加载Google Fonts，emoji表情等以优化速度</li>\r\n 	<li>优化了Wordpress默认输出的 head 加载</li>\r\n 	<li>暂时不支持后台更新</li>\r\n</ul>\r\n<h4>主题说明</h4>\r\n<ul>\r\n 	<li>依赖插件：WP-PostViews（文章浏览量统计插件）</li>\r\n 	<li>小图标：采用Font Awesome v4.7.0，具体图标对应class请前往官网查看。</li>\r\n</ul>\r\n<h4>部分功能使用说明</h4>\r\n<ol>\r\n 	<li>开始使用主题后请先在主题设置页面设置网站信息，非常重要，description和keywords一经设置最好少修改；并选择一款footer样式</li>\r\n 	<li>右侧边栏的头像请直接替换public/images/jumbotron_self.png图片，并保持原来名字（未来开放设置中心修改）</li>\r\n 	<li>微信公众号二维码图片同上（未来开放设置中心修改）</li>\r\n 	<li>archives归档页使用：直接新建一个独立页面，模板选择Archive归档页面即可。</li>\r\n</ol>\r\n<h4>待完善</h4>\r\n<ul>\r\n 	<li>微信公众号模式底部左侧空旷</li>\r\n 	<li>侧边栏个人板块整合进主题设置</li>\r\n 	<li>顶部导航一级栏目过多时样式会出现混乱，且目前只支持3级导航</li>\r\n 	<li>Gravatar头像的优化</li>\r\n 	<li>楼中楼评论时的用户体验</li>\r\n</ul>\r\n<h3>下载地址</h3>\r\n目前第一个版本，还在持续完善和debug中，就只放一个Github地址：<a href=\"https://github.com/ZpGuo/Jumping/tree/master\" target=\"_blank\">Jumping主题master</a>\r\n\r\n点击Clone or download，下载Zip，到wordpress后台安装就行。\r\n\r\n欢迎在github上提issue或者直接fork。', '基于Bootstrap开发的自适应Wordpress主题（自用）', '', 'inherit', 'closed', 'closed', '', '638-revision-v1', '', '', '2017-02-14 02:43:13', '2017-02-13 18:43:13', '', 638, 'http://www.gzpblog.com/20170214/642.html', 0, 'revision', '', 0),
(643, 1, '2017-02-14 02:58:56', '2017-02-13 18:58:56', '这是一个基于Bootstrap开发的自适应Wordpress主题，是我自己用的，所以是根据我自己的需求与想法做的。考虑到主题的效率，流畅性，没有用太多JS，能用css就用css解决（包括顶部的三级导航菜单），所以并没有太多的酷炫效果，某些设计也比较古老（自用的嘛）。而且，作为一个后端程序猿，前端目前真心不熟啊！！！不过，还是分享出来。\r\n\r\n先上一张效果图：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000933.png\"><img class=\"size-large wp-image-639 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000933-1024x805.png\" alt=\"\" width=\"1024\" height=\"805\" /></a>\r\n\r\n移动端中的展现：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000812.png\"><img class=\"size-full wp-image-641 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000812.png\" alt=\"\" width=\"390\" height=\"733\" /></a>\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000756.png\"><img class=\"size-full wp-image-640 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/QQ截图20170213000756.png\" alt=\"\" width=\"396\" height=\"737\" /></a>\r\n\r\n可能在pad中的展示会比较差，但是问题不大。\r\n<h3>V1.0.0版本说明：</h3>\r\n<h4>主题特色</h4>\r\n<ul>\r\n 	<li>采用bootstrap构建</li>\r\n 	<li>支持自适应，适配移动端设备</li>\r\n 	<li>目前提供五个已有样式的侧边栏小工具：热门文章，最新文章，标签云，最新评论，归档</li>\r\n 	<li>模板页面提供一个archives归档页</li>\r\n 	<li>底部footer提供普通和微信二维码两种方案</li>\r\n 	<li>去除了加载Google Fonts，emoji表情等以优化速度</li>\r\n 	<li>优化了Wordpress默认输出的 head 加载</li>\r\n 	<li>暂时不支持后台更新</li>\r\n</ul>\r\n<h4>主题说明</h4>\r\n<ul>\r\n 	<li>依赖插件：WP-PostViews（文章浏览量统计插件）</li>\r\n 	<li>小图标：采用Font Awesome v4.7.0，具体图标对应class请前往官网查看。</li>\r\n</ul>\r\n<h4>部分功能使用说明</h4>\r\n<ol>\r\n 	<li>开始使用主题后请先在主题设置页面设置网站信息，非常重要，description和keywords一经设置最好少修改；并选择一款footer样式</li>\r\n 	<li>右侧边栏的头像请直接替换public/images/jumbotron_self.png图片，并保持原来名字（未来开放设置中心修改）</li>\r\n 	<li>微信公众号二维码图片同上（未来开放设置中心修改）</li>\r\n 	<li>archives归档页使用：直接新建一个独立页面，模板选择Archive归档页面即可。</li>\r\n</ol>\r\n<h4>待完善</h4>\r\n<ul>\r\n 	<li>微信公众号模式底部左侧空旷</li>\r\n 	<li>侧边栏个人板块整合进主题设置</li>\r\n 	<li>顶部导航一级栏目过多时样式会出现混乱，且目前只支持3级导航</li>\r\n 	<li>Gravatar头像的优化</li>\r\n 	<li>楼中楼评论时的用户体验</li>\r\n</ul>\r\n<h3>下载地址</h3>\r\n目前第一个版本，还在持续完善和debug中，就只放一个Github地址：<a href=\"https://github.com/ZpGuo/Jumping/tree/master\" target=\"_blank\">Jumping主题master</a>\r\n\r\n点击Clone or download，下载Zip，到wordpress后台安装就行。\r\n\r\n欢迎在github上提issue或者直接fork。', '基于Bootstrap开发的自适应Wordpress主题（自用）', '', 'inherit', 'closed', 'closed', '', '638-revision-v1', '', '', '2017-02-14 02:58:56', '2017-02-13 18:58:56', '', 638, 'http://www.gzpblog.com/20170214/643.html', 0, 'revision', '', 0),
(647, 1, '2017-02-15 11:25:39', '2017-02-15 03:25:39', '<h3>什么是单页面应用？</h3>\r\n单页面应用（Single Page Application，SPA），就是只有一张Web页面的应用。单页应用程序 (SPA) 是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。\r\n\r\n对于我来说，这个概念对于我来说还算是比较新的，之前还没接触过，是在学习vue的时候接触的。我看了一下，这个东西的应用还是很广泛的。\r\n\r\n比如，拿微博做个例子：\r\n\r\n我们到首页是这样的：<a href=\"http://files.gzpblog.com/wp/2017/02/spa1.png\"><img class=\"size-full wp-image-648 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/spa1.png\" alt=\"\" width=\"748\" height=\"225\" /></a>\r\n\r\n通过点击“明星”，有一个加载的提示：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/spa2.png\"><img class=\"size-full wp-image-649 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/spa2.png\" alt=\"\" width=\"765\" height=\"187\" /></a>\r\n\r\n然后在局部显示出新的内容：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/spa3.png\"><img class=\"size-full wp-image-650 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/spa3.png\" alt=\"\" width=\"747\" height=\"228\" /></a>\r\n\r\n而变动的只是这个div的内容，没有url上的跳转：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/spa4.png\"><img class=\"size-full wp-image-651 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/spa4.png\" alt=\"\" width=\"231\" height=\"150\" /></a>\r\n\r\n这就是一个单页面的模式，用户体验效果非常好。\r\n<h3>单页面应用的优点</h3>\r\n<ol>\r\n 	<li>最大的好处是用户体验，对于内容的改动不需要加载整个页面。</li>\r\n 	<li>数据层和UI的分离，可以重新编写一个原生的移动设备应用程序而不用大动干戈（同一套后端程序代码，不用修改就可以用于Web界面、手机、平板等多种客户端；）。</li>\r\n 	<li> 高效。它对服务器压力很小，消耗更少的带宽，能够与面向服务的架构更好地结合。</li>\r\n</ol>\r\n<h3>单页面应用的缺点</h3>\r\n<ol>\r\n 	<li> 不利于SEO</li>\r\n 	<li> 初次加载耗时增多</li>\r\n 	<li>导航不可用；前进、后退、地址栏等，需要程序进行管理；</li>\r\n 	<li>书签，需要程序来提供支持；</li>\r\n</ol>\r\n<h3>应用场景</h3>\r\n那么单页应用的应用如何呢？看了一些资料，总觉出来单页面应用有两个硬伤：\r\n<ul>\r\n 	<li>首屏加载（大量js导致首屏加载慢）</li>\r\n 	<li> seo不友好</li>\r\n</ul>\r\n如何应用SPA或者是否应用SPA，大概需要考虑以下这几点：\r\n<h4>1. 交互体验</h4>\r\n不同的应用面对不同人群，会有不同的交互体验需求。\r\n<h4>2. 工程代价</h4>\r\n大型网站转spa会有很大的代价。\r\n<h4>3. 容错问题</h4>\r\nSPA所有脚本都加进来，如果出现一个JS错误，那很可能整个网站就挂掉了，风险很大。\r\n<h4>4. 是否必要</h4>\r\n简单呈现内容的网站，没有必要用spa。增加了开发和调试的复杂性，但是除了效果更酷炫点，没有多少实用价值。\r\n<h4>5. 是否需要兼容低版本的ie浏览器</h4>\r\n这个真的是......\r\n<h3>想法</h3>\r\n综合了解了这种SPA单页应用和传统的多页面应用，在以后的开发中，我可能会采取单页和多页相结合的方式，该跳转的地方还是跳转，结合单页模式的用户体验优点，将用户体验发挥到极致，因为我觉得用户体验是最重要的东西之一。', '理解单页面应用（SPA）', '', 'publish', 'open', 'open', '', '%e7%90%86%e8%a7%a3%e5%8d%95%e9%a1%b5%e9%9d%a2%e5%ba%94%e7%94%a8%ef%bc%88spa%ef%bc%89', '', '', '2017-02-15 11:33:08', '2017-02-15 03:33:08', '', 0, 'http://www.gzpblog.com/?p=647', 0, 'post', '', 2),
(648, 1, '2017-02-15 11:17:18', '2017-02-15 03:17:18', '', 'spa1', '', 'inherit', 'open', 'closed', '', 'spa1', '', '', '2017-02-15 11:17:18', '2017-02-15 03:17:18', '', 647, 'http://www.gzpblog.com/wp-content/uploads/2017/02/spa1.png', 0, 'attachment', 'image/png', 0),
(649, 1, '2017-02-15 11:17:20', '2017-02-15 03:17:20', '', 'spa2', '', 'inherit', 'open', 'closed', '', 'spa2', '', '', '2017-02-15 11:17:20', '2017-02-15 03:17:20', '', 647, 'http://www.gzpblog.com/wp-content/uploads/2017/02/spa2.png', 0, 'attachment', 'image/png', 0),
(650, 1, '2017-02-15 11:17:23', '2017-02-15 03:17:23', '', 'spa3', '', 'inherit', 'open', 'closed', '', 'spa3', '', '', '2017-02-15 11:17:23', '2017-02-15 03:17:23', '', 647, 'http://www.gzpblog.com/wp-content/uploads/2017/02/spa3.png', 0, 'attachment', 'image/png', 0),
(651, 1, '2017-02-15 11:17:25', '2017-02-15 03:17:25', '', 'spa4', '', 'inherit', 'open', 'closed', '', 'spa4', '', '', '2017-02-15 11:17:25', '2017-02-15 03:17:25', '', 647, 'http://www.gzpblog.com/wp-content/uploads/2017/02/spa4.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(652, 1, '2017-02-15 11:25:39', '2017-02-15 03:25:39', '<h3>什么是单页面应用？</h3>\r\n单页面应用（Single Page Application，SPA），就是只有一张Web页面的应用。单页应用程序 (SPA) 是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。\r\n\r\n对于我来说，这个概念对于我来说还算是比较新的，之前还没接触过，是在学习vue的时候接触的。我看了一下，这个东西的应用还是很广泛的。\r\n\r\n比如，拿微博做个例子：\r\n\r\n我们到首页是这样的：<a href=\"http://files.gzpblog.com/wp/2017/02/spa1.png\"><img class=\"size-full wp-image-648 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/spa1.png\" alt=\"\" width=\"748\" height=\"225\" /></a>\r\n\r\n通过点击“明星”，有一个加载的提示：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/spa2.png\"><img class=\"size-full wp-image-649 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/spa2.png\" alt=\"\" width=\"765\" height=\"187\" /></a>\r\n\r\n然后在局部显示出新的内容：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/spa3.png\"><img class=\"size-full wp-image-650 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/spa3.png\" alt=\"\" width=\"747\" height=\"228\" /></a>\r\n\r\n而变动的只是这个div的内容，没有url上的跳转：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/spa4.png\"><img class=\"size-full wp-image-651 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/spa4.png\" alt=\"\" width=\"231\" height=\"150\" /></a>\r\n\r\n这就是一个单页面的模式，用户体验效果非常好。\r\n<h3>单页面应用的优点</h3>\r\n<ol>\r\n 	<li>最大的好处是用户体验，对于内容的改动不需要加载整个页面。</li>\r\n 	<li>数据层和UI的分离，可以重新编写一个原生的移动设备应用程序而不用大动干戈（同一套后端程序代码，不用修改就可以用于Web界面、手机、平板等多种客户端；）。</li>\r\n 	<li> 高效。它对服务器压力很小，消耗更少的带宽，能够与面向服务的架构更好地结合。</li>\r\n</ol>\r\n<h3>单页面应用的缺点</h3>\r\n<ol>\r\n 	<li> 不利于SEO</li>\r\n 	<li> 初次加载耗时增多</li>\r\n 	<li>导航不可用；前进、后退、地址栏等，需要程序进行管理；</li>\r\n 	<li>书签，需要程序来提供支持；</li>\r\n</ol>\r\n<h3>应用场景</h3>\r\n那么单页应用的应用如何呢？看了一些资料，总觉出来单页面应用有两个硬伤：\r\n<ul>\r\n 	<li>首屏加载（大量js导致首屏加载慢）</li>\r\n 	<li> seo不友好</li>\r\n</ul>\r\n如何应用SPA或者是否应用SPA，大概需要考虑以下这几点：\r\n<h4>1. 交互体验</h4>\r\n不用的应用面对不同人群，会有不同的交互体验需求。\r\n<h4>2. 工程代价</h4>\r\n大型网站转spa会有很大的代价；\r\n<h4>3. 容错问题</h4>\r\nSPA所有脚本都加进来，如果出现一个JS错误，那很可能整个网站就挂掉了，风险很大。\r\n<h4>4. 是否必要</h4>\r\n简单呈现内容的网站，没有必要用spa。增加了开发和调试的复杂性，但是除了效果更酷炫点，没有多少实用价值。\r\n<h4>5. 是否需要兼容低版本的ie浏览器</h4>\r\n这个真的是。。。\r\n<h3>想法</h3>\r\n综合了解了这种SPA单页应用和传统的多页面应用，在以后的开发中，我可能会采取单页和多页相结合的方式，该跳转的地方还是跳转，结合单页模式的用户体验优点，将用户体验发挥到极致，因为我觉得用户体验是最重要的东西之一。', '理解单页面应用（SPA）', '', 'inherit', 'closed', 'closed', '', '647-revision-v1', '', '', '2017-02-15 11:25:39', '2017-02-15 03:25:39', '', 647, 'http://www.gzpblog.com/20170215/652.html', 0, 'revision', '', 0),
(653, 1, '2017-02-15 11:31:54', '2017-02-15 03:31:54', ' ', '', '', 'publish', 'closed', 'closed', '', '653', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 4, 'http://www.gzpblog.com/?p=653', 36, 'nav_menu_item', '', 0),
(654, 1, '2017-02-15 11:31:54', '2017-02-15 03:31:54', ' ', '', '', 'publish', 'closed', 'closed', '', '654', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 4, 'http://www.gzpblog.com/?p=654', 37, 'nav_menu_item', '', 0),
(655, 1, '2017-02-15 11:33:08', '2017-02-15 03:33:08', '<h3>什么是单页面应用？</h3>\r\n单页面应用（Single Page Application，SPA），就是只有一张Web页面的应用。单页应用程序 (SPA) 是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。\r\n\r\n对于我来说，这个概念对于我来说还算是比较新的，之前还没接触过，是在学习vue的时候接触的。我看了一下，这个东西的应用还是很广泛的。\r\n\r\n比如，拿微博做个例子：\r\n\r\n我们到首页是这样的：<a href=\"http://files.gzpblog.com/wp/2017/02/spa1.png\"><img class=\"size-full wp-image-648 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/spa1.png\" alt=\"\" width=\"748\" height=\"225\" /></a>\r\n\r\n通过点击“明星”，有一个加载的提示：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/spa2.png\"><img class=\"size-full wp-image-649 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/spa2.png\" alt=\"\" width=\"765\" height=\"187\" /></a>\r\n\r\n然后在局部显示出新的内容：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/spa3.png\"><img class=\"size-full wp-image-650 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/spa3.png\" alt=\"\" width=\"747\" height=\"228\" /></a>\r\n\r\n而变动的只是这个div的内容，没有url上的跳转：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/spa4.png\"><img class=\"size-full wp-image-651 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/spa4.png\" alt=\"\" width=\"231\" height=\"150\" /></a>\r\n\r\n这就是一个单页面的模式，用户体验效果非常好。\r\n<h3>单页面应用的优点</h3>\r\n<ol>\r\n 	<li>最大的好处是用户体验，对于内容的改动不需要加载整个页面。</li>\r\n 	<li>数据层和UI的分离，可以重新编写一个原生的移动设备应用程序而不用大动干戈（同一套后端程序代码，不用修改就可以用于Web界面、手机、平板等多种客户端；）。</li>\r\n 	<li> 高效。它对服务器压力很小，消耗更少的带宽，能够与面向服务的架构更好地结合。</li>\r\n</ol>\r\n<h3>单页面应用的缺点</h3>\r\n<ol>\r\n 	<li> 不利于SEO</li>\r\n 	<li> 初次加载耗时增多</li>\r\n 	<li>导航不可用；前进、后退、地址栏等，需要程序进行管理；</li>\r\n 	<li>书签，需要程序来提供支持；</li>\r\n</ol>\r\n<h3>应用场景</h3>\r\n那么单页应用的应用如何呢？看了一些资料，总觉出来单页面应用有两个硬伤：\r\n<ul>\r\n 	<li>首屏加载（大量js导致首屏加载慢）</li>\r\n 	<li> seo不友好</li>\r\n</ul>\r\n如何应用SPA或者是否应用SPA，大概需要考虑以下这几点：\r\n<h4>1. 交互体验</h4>\r\n不同的应用面对不同人群，会有不同的交互体验需求。\r\n<h4>2. 工程代价</h4>\r\n大型网站转spa会有很大的代价。\r\n<h4>3. 容错问题</h4>\r\nSPA所有脚本都加进来，如果出现一个JS错误，那很可能整个网站就挂掉了，风险很大。\r\n<h4>4. 是否必要</h4>\r\n简单呈现内容的网站，没有必要用spa。增加了开发和调试的复杂性，但是除了效果更酷炫点，没有多少实用价值。\r\n<h4>5. 是否需要兼容低版本的ie浏览器</h4>\r\n这个真的是......\r\n<h3>想法</h3>\r\n综合了解了这种SPA单页应用和传统的多页面应用，在以后的开发中，我可能会采取单页和多页相结合的方式，该跳转的地方还是跳转，结合单页模式的用户体验优点，将用户体验发挥到极致，因为我觉得用户体验是最重要的东西之一。', '理解单页面应用（SPA）', '', 'inherit', 'closed', 'closed', '', '647-revision-v1', '', '', '2017-02-15 11:33:08', '2017-02-15 03:33:08', '', 647, 'http://www.gzpblog.com/20170215/655.html', 0, 'revision', '', 0),
(519, 1, '2016-11-28 21:53:57', '2016-11-28 13:53:57', ' ', '', '', 'publish', 'closed', 'closed', '', '519', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 70, 'http://www.gzpblog.com/?p=519', 24, 'nav_menu_item', '', 0),
(520, 1, '2016-11-28 21:53:57', '2016-11-28 13:53:57', ' ', '', '', 'publish', 'closed', 'closed', '', '520', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 18, 'http://www.gzpblog.com/?p=520', 28, 'nav_menu_item', '', 0),
(521, 1, '2016-11-28 21:56:28', '2016-11-28 13:56:28', '<h2>Memcache和Redis区别</h2>\r\n1. Memcache和Redis都是用来管理数据的\r\n2. 他们数据都是存放在内存里的\r\n3. Redis可以定期将数据备份到磁盘(永久化)\r\n4. Memcache只是简单的key/value缓存\r\n5. Redis不仅仅支持简单的k/v类型的存储,同时还提供;list, set, hash等数据结构的存储\r\n<h2>\r\nRedis数据操作</h2>\r\n1. 开启Redis客户端\r\n2. 设置缓存值 - set key value\r\n3. 获取缓存数据 - get key\r\n4. 设置过期时间 - setex key time value\r\n5. 删除缓存 - del key\r\n<h2>\r\nPHP中的Redis数据操作</h2>\r\n1. 安装phpredis拓展\r\n2. php链接redis服务- connect(127.0.0.1, 6379)\r\n3. set 设置缓存\r\n4. get 获取缓存\r\n<h2>\r\nPHP中Memcache数据操作</h2>\r\n1. 安装memcache拓展\r\n2. 链接服务 - connect(\'memcache_host\', 11211)\r\n3. set 设置缓存\r\n4. get 获取缓存', 'Memcache和Redis的区别以及PHP中操作', '', 'publish', 'open', 'open', '', 'memcache%e5%92%8credis%e7%9a%84%e5%8c%ba%e5%88%ab%e4%bb%a5%e5%8f%8aphp%e4%b8%ad%e6%93%8d%e4%bd%9c', '', '', '2016-11-28 21:56:28', '2016-11-28 13:56:28', '', 0, 'http://www.gzpblog.com/?p=521', 0, 'post', '', 0),
(524, 1, '2016-12-08 13:18:25', '2016-12-08 05:18:25', '<blockquote><strong>PhalApi：一个PHP轻量级开源接口框架</strong>\r\n\r\n<strong>官网：<a href=\"http://www.phalapi.net/\" target=\"_blank\">PhalApi（π框架）</a></strong></blockquote>\r\n<h2>一 结构</h2>\r\n<div>1 项目直接放在根目录下，如一开始的Demo文件夹；</div>\r\n<div>2 入口文件目录在根目录Public下：</div>\r\n<div style=\"padding-left: 30px;\">如：</div>\r\n<div style=\"padding-left: 30px;\">Public/index.php为默认入口文件, 访问可能的路径为：http://localhost/PhalApi/Public/?参数</div>\r\n<div style=\"padding-left: 30px;\">Public/demo/index.php为demo入口文件，访问可能的路径为：http://localhost/PhalApi/Public/demo/?参数</div>\r\n<div>3 所有入口文件都需要引入init.php初始化文件，改动Public下层级，需要改index.php下的引入init.php路径</div>\r\n<div style=\"padding-left: 30px;\"> 如:</div>\r\n<div style=\"padding-left: 30px;\">require_once dirname(__FILE__) . \'/init.php\';</div>\r\n<div style=\"padding-left: 30px;\">require_once dirname(__FILE__) . \'/../../init.php\';</div>\r\n<div>4 访问接口时, 对应的项目定义与index.php中的</div>\r\n<div>\r\n\r\n[php]\r\nDI()-&gt;loader-&gt;addDirs(\'Demo\');\r\n[/php]\r\n\r\n</div>\r\n<div>\r\n<div>可能的定义：</div>\r\n<div>\r\n\r\n[php]\r\n//装载你的接口\r\nDI()-&gt;loader-&gt;addDirs(\'Demo\');\r\n[/php]\r\n\r\n</div>\r\n<div>或者：</div>\r\n<div>\r\n\r\n[php]\r\n//装载你的接口\r\nDI()-&gt;loader-&gt;addDirs(\'Demo/v1\');\r\n//对应到根目录下ApiTest下的v1文件夹\r\n[/php]\r\n\r\n</div>\r\n<div>\r\n<div>5 入口文件可根据项目需求自由定义</div>\r\n<div>6 官方参考文档：<a href=\"http://www.phalapi.net/wikis/%5B1.29%5D-%E5%BC%80%E6%94%BE%E4%B8%8E%E5%B0%81%E9%97%AD%EF%BC%9A%E5%A4%9A%E5%85%A5%E5%8F%A3%E5%92%8C%E7%BB%9F%E4%B8%80%E5%88%9D%E5%A7%8B%E5%8C%96.html\" target=\"_blank\">PhalApi官方文档入口文件部分</a></div>\r\n<h2></h2>\r\n<h2>二 应用</h2>\r\n<div>1 框架根目录下，假设新增项目ApiTest <a href=\"http://files.gzpblog.com/wp/2016/12/Image.png\"><img class=\"alignnone size-full wp-image-525\" src=\"http://files.gzpblog.com/wp/2016/12/Image.png\" alt=\"Image\" width=\"207\" height=\"389\" /></a> ； ApiTest下增加v1版本号， v1下为项目文件</div>\r\n<div>\r\n<div>2 则对应创建入口文件，在Public下增加ApiTest/v1，新建index.php文件(复制Public下的index.php过来)</div>\r\n<div>修改：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\n/**\r\n * ApiTest 统一入口\r\n */\r\n\r\n//引入初始化文件，注意路径\r\nrequire_once dirname(__FILE__) . \'/../../init.php\';\r\n\r\n//装载你的接口 ; 使该路径指向该项目,注意层级\r\n//DI()-&gt;loader-&gt;addDirs(\'ApiTest\');\r\nDI()-&gt;loader-&gt;addDirs(\'ApiTest/v1\');\r\n\r\n/** ---------------- 响应接口请求 ---------------- **/\r\n\r\n$api = new PhalApi();\r\n$rs = $api-&gt;response();\r\n$rs-&gt;output();\r\n[/php]\r\n\r\n</div>\r\n<div></div>\r\n</div>\r\n</div>\r\n<div>\r\n<div>3 基本上就可以这样自由配置</div>\r\n<div>4 如果在Public下的index.php直接这么配置；</div>\r\n<div>\r\n\r\n[php]\r\nrequire_once dirname(__FILE__) . \'/init.php\';\r\n//装载你的接口\r\n//DI()-&gt;loader-&gt;addDirs(\'Demo\');\r\nDI()-&gt;loader-&gt;addDirs(\'ApiTest/v1\');\r\n[/php]\r\n\r\n</div>\r\n<div>同样也可以通过http://域名/PhalApi/Public/?参数 访问到ApiTest下的v1版本下的接口</div>\r\n</div>\r\n</div>', 'PhalApi多入口统一初始化', '', 'publish', 'open', 'open', '', 'phalapi%e5%a4%9a%e5%85%a5%e5%8f%a3%e7%bb%9f%e4%b8%80%e5%88%9d%e5%a7%8b%e5%8c%96', '', '', '2016-12-08 13:32:07', '2016-12-08 05:32:07', '', 0, 'http://www.gzpblog.com/?p=524', 0, 'post', '', 0),
(525, 1, '2016-12-08 13:16:00', '2016-12-08 05:16:00', '', 'Image', '', 'inherit', 'open', 'closed', '', 'image', '', '', '2016-12-08 13:16:00', '2016-12-08 05:16:00', '', 524, 'http://www.gzpblog.com/wp-content/uploads/2016/12/Image.png', 0, 'attachment', 'image/png', 0),
(634, 1, '2017-02-13 10:20:26', '2017-02-13 02:20:26', '最近做一个自己的主题，开始接触wordpress的二次开发。在导航菜单这一块，遇到一点小问题。其实网上的资料挺多，有一些也挺久远的，不过也都能用，毕竟wordpress没什么大改。但是这些资料实际上讲得不清楚，一开始误导了我。\r\n\r\n其实在主题中做导航菜单，我们只需要用到两个函数<strong>register_nav_menus()</strong>和<strong>wp_nav_menu()</strong> 。\r\n\r\n接下来看看怎么搞：\r\n<h3>register_nav_menus()</h3>\r\n在主题的functions.php中注册菜单导航：\r\n\r\n[php]\r\n\r\nregister_nav_menus( array(\r\n\'header_menu\' =&gt; \'顶部导航菜单\',\r\n) );\r\n\r\n[/php]\r\n\r\nheader_menu其实只是一个标志的key，对应的值为显示给用户的描述。那么，重点在于，这个注册导航菜单，并不是注册了一个导航菜单，而是打通了wordpress系统中的导航菜单与我们自制主题的导航菜单显示位置，提供给用户一个选择，实际上是这样的，在后台外观设置的菜单中，我们的菜单下面的菜单设置这里，多了一个可选项：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu1.png\"><img class=\"size-full wp-image-629 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu1.png\" alt=\"\" width=\"529\" height=\"147\" /></a>\r\n\r\n这个看起来不明确，我们可以看这个，在“自定义”这里：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu2.png\"><img class=\"size-full wp-image-630 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu2.png\" alt=\"\" width=\"302\" height=\"376\" /></a>\r\n这里是已经将菜单1设置为顶部导航菜单，因为我们已经给这个选项打了勾。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu3.png\"><img class=\"size-full wp-image-631 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu3.png\" alt=\"\" width=\"276\" height=\"209\" /></a>\r\n\r\n点击菜单1，最下面，有一个“显示位置”，那这下子我们可以很明确的知道register_nav_menus的作用了。然后我们发现，按理来说菜单1已可以显示到“顶部导航菜单”这个对应的位置中，但是在我们的新的主题中，我们还没有定义“顶部导航菜单”是在哪里的。这个时候就用到wp_nav_menu()。\r\n<h3>wp_nav_menu()</h3>\r\n我们只需要在我们要输出菜单的位置直接引用这个函数就可以，同时这个函数提供了很多的参数可以选择：\r\nwp_nav_menu( $args );\r\n其中$args的默认值为：\r\n\r\n[php]\r\n$args = array(\r\n\'theme_location\' =&gt; \'\',\r\n\'menu\' =&gt; \'\',\r\n\'container\' =&gt; \'div\',\r\n\'container_class\' =&gt; \'\',\r\n\'container_id\' =&gt; \'\',\r\n\'menu_class\' =&gt; \'menu\',\r\n\'menu_id\' =&gt; \'\',\r\n\'echo\' =&gt; true,\r\n\'fallback_cb\' =&gt; \'wp_page_menu\',\r\n\'before\' =&gt; \'\',\r\n\'after\' =&gt; \'\',\r\n\'link_before\' =&gt; \'\',\r\n\'link_after\' =&gt; \'\',\r\n\'items_wrap\' =&gt; \'\r\n&lt;ul id=&quot;%1$s&quot; class=&quot;%2$s&quot;&gt;%3$s&lt;/ul&gt;\r\n\r\n\',\r\n\'depth\' =&gt; 0,\r\n\'walker\' =&gt; \'\'\r\n);\r\n\r\n[/php]\r\n\r\n再用我们上面用的例子，这里我们要使用theme_location这个参数，将其值设定为header_menu；那么现在header_menu对应的也就是“顶部导航菜单”就会输出在我们wp_nav_menu( )函数输出的位置。\r\n\r\n[php]\r\n\r\n$args = array(\r\n\'theme_location\' =&gt; \'header_menu\',\r\n);\r\n\r\n[/php]\r\n\r\nwp_nav_menu($args);\r\n当然我们也可以用menu指定显示某个菜单：\r\n\r\n[php]\r\n$args = array(\r\n\'menu\' =&gt; \'菜单1\',\r\n);\r\nwp_nav_menu($args);\r\n\r\n[/php]\r\n\r\n不过这种做法不灵活，还是推荐使用theme_location参数配置。\r\n\r\n每个参数的具体描述如下：\r\n$theme_locaton：(字符串)(可选)\r\n默认值: None\r\n用于在调用导航菜单时指定注册过的某一个导航菜单名，如果没有指定，则显示第一个。\r\n\r\n$menu：(字符串)(可选)\r\n默认值: None\r\n使用导航菜单的名称调用菜单，可以是 id, slug, name (按顺序匹配的) 。\r\n\r\n$container：(字符串)(可选)\r\n默认值: div\r\nul 父节点（这里指导航菜单的容器）的标签类型，只支持div 和 nav 标签, 如果是其它值, ul 父节点的标签将不会被显示。也可以用false（container =&gt; false）去掉ul父节点标签。\r\n\r\n$container_class：(字符串)(可选)\r\n默认值: menu-{menu slug}-container\r\nul 父节点的 class 属性值。\r\n\r\n$container_id：(字符串)(可选)\r\n默认值: None\r\nul 父节点的 id 属性值。\r\n\r\n$menu_class：(字符串)(可选)\r\n默认值: menu\r\nul 节点的 class 属性值。\r\n\r\n$menu_id：(字符串)(可选)\r\n默认值: menu slug, 自增长的\r\nul 节点的 id 属性值。\r\n\r\n$echo：(布尔型)(可选)\r\n默认值: true (直接显示)\r\n确定直接显示导航菜单还是返回 HTML 片段，如果想将导航的代码作为赋值使用，可设置为false。\r\n\r\n$fallback_cb：(字符串)(可选)\r\n默认值: wp_page_menu (显示页面列表作为菜单)\r\n用于没有在后台设置导航时调的回调函数。\r\n\r\n$before：(字符串)(可选)\r\n默认值: None\r\n显示在每个菜单链接前的文本。\r\n\r\n$after：(字符串)(可选)\r\n默认值: None\r\n显示在每个菜单链接后的文本。\r\n\r\n$link_before：(字符串)(可选)\r\n默认值: None\r\n显示在每个菜单链接文本前的文本。\r\n\r\n$link_after：(字符串)(可选)\r\n默认值: None\r\n显示在每个菜单链接文本后的文本。\r\n\r\n$items_wrap：(字符串)(可选)\r\n默认值: None\r\n使用字符串替换修改ul的class。\r\n\r\n$depth：(整型)(可选)\r\n默认值: 0\r\n显示菜单的深度, 当数值为 0 时显示所有深度的菜单。\r\n\r\n$walker：(对象型)(可选)\r\n默认值: new Walker_Nav_Menu\r\n\r\n基本上这两个函数就是这样配合使用，需要注意的就是，不是注册菜单，而是注册了“菜单插槽的引用接口”，差不多这个意思。\r\n<h3>定制自己的导航样式</h3>\r\n通过定义container_id，container_class等参数，可以获取我们想要的html结构，根据这个结构，写css样式美化菜单。', 'wordpress导航菜单开发', '', 'inherit', 'closed', 'closed', '', '628-revision-v1', '', '', '2017-02-13 10:20:26', '2017-02-13 02:20:26', '', 628, 'http://www.gzpblog.com/20170213/634.html', 0, 'revision', '', 0),
(633, 1, '2017-02-13 10:18:48', '2017-02-13 02:18:48', '最近做一个自己的主题，开始接触wordpress的二次开发。在导航菜单这一块，遇到一点小问题。其实网上的资料挺多，有一些也挺久远的，不过也都能用，毕竟wordpress没什么大改。但是这些资料实际上讲得不清楚，一开始误导了我。\r\n\r\n其实在主题中做导航菜单，我们只需要用到两个函数<strong>register_nav_menus()</strong>和<strong>wp_nav_menu()</strong> 。\r\n\r\n接下来看看怎么搞：\r\n<h3>register_nav_menus()</h3>\r\n在主题的functions.php中注册菜单导航：\r\n\r\n[php]\r\n\r\nregister_nav_menus( array(\r\n\'header_menu\' =&gt; \'顶部导航菜单\',\r\n) );\r\n\r\n[/php]\r\n\r\nheader_menu其实只是一个标志的key，对应的值为显示给用户的描述。那么，重点在于，这个注册导航菜单，并不是注册了一个导航菜单，而是打通了wordpress系统中的导航菜单与我们自制主题的导航菜单显示位置，提供给用户一个选择，实际上是这样的，在后台外观设置的菜单中，我们的菜单下面的菜单设置这里，多了一个可选项：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu1.png\"><img class=\"size-full wp-image-629 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu1.png\" alt=\"\" width=\"529\" height=\"147\" /></a>\r\n\r\n这个看起来不明确，我们可以看这个，在“自定义”这里：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu2.png\"><img class=\"size-full wp-image-630 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu2.png\" alt=\"\" width=\"302\" height=\"376\" /></a>\r\n这里是已经将菜单1设置为顶部导航菜单，因为我们已经给这个选项打了勾。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu3.png\"><img class=\"size-full wp-image-631 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu3.png\" alt=\"\" width=\"276\" height=\"209\" /></a>\r\n\r\n点击菜单1，最下面，有一个“显示位置”，那这下子我们可以很明确的知道register_nav_menus的作用了。然后我们发现，按理来说菜单1已可以显示到“顶部导航菜单”这个对应的位置中，但是在我们的新的主题中，我们还没有定义“顶部导航菜单”是在哪里的。这个时候就用到wp_nav_menu()。\r\n\r\nwp_nav_menu()\r\n\r\n我们只需要在我们要输出菜单的位置直接引用这个函数就可以，同时这个函数提供了很多的参数可以选择：\r\nwp_nav_menu( $args );\r\n其中$args的默认值为：\r\n\r\n[php]\r\n$args = array(\r\n\'theme_location\' =&gt; \'\',\r\n\'menu\' =&gt; \'\',\r\n\'container\' =&gt; \'div\',\r\n\'container_class\' =&gt; \'\',\r\n\'container_id\' =&gt; \'\',\r\n\'menu_class\' =&gt; \'menu\',\r\n\'menu_id\' =&gt; \'\',\r\n\'echo\' =&gt; true,\r\n\'fallback_cb\' =&gt; \'wp_page_menu\',\r\n\'before\' =&gt; \'\',\r\n\'after\' =&gt; \'\',\r\n\'link_before\' =&gt; \'\',\r\n\'link_after\' =&gt; \'\',\r\n\'items_wrap\' =&gt; \'\r\n&lt;ul id=&quot;%1$s&quot; class=&quot;%2$s&quot;&gt;%3$s&lt;/ul&gt;\r\n\r\n\',\r\n\'depth\' =&gt; 0,\r\n\'walker\' =&gt; \'\'\r\n);\r\n\r\n[/php]\r\n\r\n再用我们上面用的例子，这里我们要使用theme_location这个参数，将其值设定为header_menu；那么现在header_menu对应的也就是“顶部导航菜单”就会输出在我们wp_nav_menu( )函数输出的位置。\r\n\r\n[php]\r\n\r\n$args = array(\r\n\'theme_location\' =&gt; \'header_menu\',\r\n);\r\n\r\n[/php]\r\n\r\nwp_nav_menu($args);\r\n当然我们也可以用menu指定显示某个菜单：\r\n\r\n\r\n[php]\r\n$args = array(\r\n\'menu\' =&gt; \'菜单1\',\r\n);\r\nwp_nav_menu($args);\r\n\r\n[/php]\r\n\r\n\r\n不过这种做法不灵活，还是推荐使用theme_location参数配置。\r\n\r\n每个参数的具体描述如下：\r\n$theme_locaton：(字符串)(可选)\r\n默认值: None\r\n用于在调用导航菜单时指定注册过的某一个导航菜单名，如果没有指定，则显示第一个。\r\n\r\n$menu：(字符串)(可选)\r\n默认值: None\r\n使用导航菜单的名称调用菜单，可以是 id, slug, name (按顺序匹配的) 。\r\n\r\n$container：(字符串)(可选)\r\n默认值: div\r\nul 父节点（这里指导航菜单的容器）的标签类型，只支持div 和 nav 标签, 如果是其它值, ul 父节点的标签将不会被显示。也可以用false（container =&gt; false）去掉ul父节点标签。\r\n\r\n$container_class：(字符串)(可选)\r\n默认值: menu-{menu slug}-container\r\nul 父节点的 class 属性值。\r\n\r\n$container_id：(字符串)(可选)\r\n默认值: None\r\nul 父节点的 id 属性值。\r\n\r\n$menu_class：(字符串)(可选)\r\n默认值: menu\r\nul 节点的 class 属性值。\r\n\r\n$menu_id：(字符串)(可选)\r\n默认值: menu slug, 自增长的\r\nul 节点的 id 属性值。\r\n\r\n$echo：(布尔型)(可选)\r\n默认值: true (直接显示)\r\n确定直接显示导航菜单还是返回 HTML 片段，如果想将导航的代码作为赋值使用，可设置为false。\r\n\r\n$fallback_cb：(字符串)(可选)\r\n默认值: wp_page_menu (显示页面列表作为菜单)\r\n用于没有在后台设置导航时调的回调函数。\r\n\r\n$before：(字符串)(可选)\r\n默认值: None\r\n显示在每个菜单链接前的文本。\r\n\r\n$after：(字符串)(可选)\r\n默认值: None\r\n显示在每个菜单链接后的文本。\r\n\r\n$link_before：(字符串)(可选)\r\n默认值: None\r\n显示在每个菜单链接文本前的文本。\r\n\r\n$link_after：(字符串)(可选)\r\n默认值: None\r\n显示在每个菜单链接文本后的文本。\r\n\r\n$items_wrap：(字符串)(可选)\r\n默认值: None\r\n使用字符串替换修改ul的class。\r\n\r\n$depth：(整型)(可选)\r\n默认值: 0\r\n显示菜单的深度, 当数值为 0 时显示所有深度的菜单。\r\n\r\n$walker：(对象型)(可选)\r\n默认值: new Walker_Nav_Menu\r\n\r\n基本上这两个函数就是这样配合使用，需要注意的就是，不是注册菜单，而是注册了“菜单插槽的引用接口”，差不多这个意思。\r\n<h3>定制自己的导航样式</h3>\r\n通过定义container_id，container_class等参数，可以获取我们想要的html结构，根据这个结构，写css样式美化菜单。', 'wordpress导航菜单开发', '', 'inherit', 'closed', 'closed', '', '628-revision-v1', '', '', '2017-02-13 10:18:48', '2017-02-13 02:18:48', '', 628, 'http://www.gzpblog.com/20170213/633.html', 0, 'revision', '', 0),
(530, 1, '2016-12-08 13:31:53', '2016-12-08 05:31:53', 'PHP轻量级开源接口框架', '', '', 'publish', 'closed', 'closed', '', '530', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 66, 'http://www.gzpblog.com/?p=530', 21, 'nav_menu_item', '', 0),
(580, 1, '2017-01-11 10:02:24', '2017-01-11 02:02:24', ' ', '', '', 'publish', 'closed', 'closed', '', '580', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 10, 'http://www.gzpblog.com/?p=580', 18, 'nav_menu_item', '', 0),
(961, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '961', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 66, 'https://www.gzpblog.com/?p=961', 6, 'nav_menu_item', '', 0),
(533, 1, '2016-12-08 15:42:21', '2016-12-08 07:42:21', '渐进式javascript框架', '', '', 'publish', 'closed', 'closed', '', '533', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 66, 'http://www.gzpblog.com/?p=533', 22, 'nav_menu_item', '', 0),
(534, 1, '2016-12-12 14:44:05', '2016-12-12 06:44:05', '最近捣鼓一个小问题，搞一个按钮，点击复制url到黏贴板，但是不是当前页面url，而是对应一个元素的url，且一个页面会有多个url。一开始找到一个方法，但是竟然只兼容IE浏览器，神奇了，竟然有只兼容IE的东西。后来发现一个zeroclipboard.js这个插件，但是怎么也搞不出那个效果，有点麻烦。\r\n\r\n&nbsp;\r\n\r\n最后翻到了一个js封装好的方法，有效！\r\n\r\n想要实现的一个效果是，下面html代码：\r\n\r\n[php]\r\n\r\n&lt;tr&gt;\r\n &lt;td&gt;\r\n  &lt;a id=&quot;copy_{$key}&quot; onclick=&quot;getUrl(\'{$key}\')&quot;&gt;复制文件链接&lt;/a&gt;\r\n  &lt;input id=&quot;file_{$key}&quot; value=&quot;{$file.file_url}&quot; style=&quot;margin-left: -9999px&quot;/&gt;\r\n &lt;/td&gt;\r\n&lt;/tr&gt; \r\n[/php]\r\n\r\n点击复制文件链接这个按钮，复制input框里的value值，是传进去的一个url；首先点击a标签会触发getUrl这个函数；传进去id用于找到对应的input然后取值（因为遍历了多个td，有许多个input框一一对应去取）。\r\n\r\n下面js代码：\r\n\r\n\r\n[javascript]\r\n&lt;pre&gt;&lt;script type=&quot;application/javascript&quot;&gt;\r\n\r\n    function getUrl(id) {\r\n        if (copyToClipboard(document.getElementById(&quot;file_&quot;+id))){\r\n            alert(&quot;成功复制到黏贴板！&quot;);\r\n        }else{\r\n            alert(&quot;复制到黏贴板失败！&quot;);\r\n        }\r\n    }\r\n\r\n    function copyToClipboard(elem) {\r\n        // create hidden text element, if it doesn\'t already exist\r\n        var targetId = &quot;_hiddenCopyText_&quot;;\r\n        var isInput = elem.tagName === &quot;INPUT&quot; || elem.tagName === &quot;TEXTAREA&quot;;\r\n        var origSelectionStart, origSelectionEnd;\r\n        if (isInput) {\r\n            // can just use the original source element for the selection and copy\r\n            target = elem;\r\n            origSelectionStart = elem.selectionStart;\r\n            origSelectionEnd = elem.selectionEnd;\r\n        } else {\r\n            // must use a temporary form element for the selection and copy\r\n            target = document.getElementById(targetId);\r\n            if (!target) {\r\n                var target = document.createElement(&quot;textarea&quot;);\r\n                target.style.position = &quot;absolute&quot;;\r\n                target.style.left = &quot;-9999px&quot;;\r\n                target.style.top = &quot;0&quot;;\r\n                target.id = targetId;\r\n                document.body.appendChild(target);\r\n            }\r\n            target.textContent = elem.textContent;\r\n        }\r\n        // select the content\r\n        var currentFocus = document.activeElement;\r\n        target.focus();\r\n        target.setSelectionRange(0, target.value.length);\r\n\r\n        // copy the selection\r\n        var succeed;\r\n        try {\r\n            succeed = document.execCommand(&quot;copy&quot;);\r\n        } catch(e) {\r\n            succeed = false;\r\n        }\r\n        // restore original focus\r\n        if (currentFocus &amp;&amp; typeof currentFocus.focus === &quot;function&quot;) {\r\n            currentFocus.focus();\r\n        }\r\n\r\n        if (isInput) {\r\n            // restore prior selection\r\n            elem.setSelectionRange(origSelectionStart, origSelectionEnd);\r\n        } else {\r\n            // clear temporary content\r\n            target.textContent = &quot;&quot;;\r\n        }\r\n        return succeed;\r\n    }\r\n&lt;/script&gt;&lt;/pre&gt;\r\n[/javascript]\r\n\r\n\r\ngetUrl中调用了封装好的copyToClipboard方法实现了功能。有一点的是html中input的样式用style=\"margin-left: -9999px\"进行隐藏，因为不知道为什么用type=\"hiden\"或者display=\"none\"去隐藏都只会获取源代码而不是动态的url遍历出来的值。', 'JS指定对应id内容复制到粘贴板（Ctrl+C效果）', '', 'publish', 'open', 'open', '', 'js%e6%8c%87%e5%ae%9a%e5%af%b9%e5%ba%94id%e5%86%85%e5%ae%b9%e5%a4%8d%e5%88%b6%e5%88%b0%e7%b2%98%e8%b4%b4%e6%9d%bf%ef%bc%88ctrlc%e6%95%88%e6%9e%9c%ef%bc%89', '', '', '2016-12-12 14:44:05', '2016-12-12 06:44:05', '', 0, 'http://www.gzpblog.com/?p=534', 0, 'post', '', 0),
(632, 1, '2017-02-13 10:14:24', '2017-02-13 02:14:24', '最近做一个自己的主题，开始接触wordpress的二次开发。在导航菜单这一块，遇到一点小问题。其实网上的资料挺多，有一些也挺久远的，不过也都能用，毕竟wordpress没什么大改。但是这些资料实际上讲得不清楚，一开始误导了我。\r\n\r\n其实在主题中做导航菜单，我们只需要用到两个函数<strong>register_nav_menus()</strong>和<strong>wp_nav_menu()</strong> 。\r\n\r\n接下来看看怎么搞：\r\n<h3>register_nav_menus()</h3>\r\n在主题的functions.php中注册菜单导航：\r\n\r\nregister_nav_menus( array(\r\n\'header_menu\' =&gt; \'顶部导航菜单\',\r\n) );\r\n\r\nheader_menu其实只是一个标志的key，对应的值为显示给用户的描述。那么，重点在于，这个注册导航菜单，并不是注册了一个导航菜单，而是打通了wordpress系统中的导航菜单与我们自制主题的导航菜单显示位置，提供给用户一个选择，实际上是这样的，在后台外观设置的菜单中，我们的菜单下面的菜单设置这里，多了一个可选项：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu1.png\"><img class=\"size-full wp-image-629 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu1.png\" alt=\"\" width=\"529\" height=\"147\" /></a>\r\n\r\n这个看起来不明确，我们可以看这个，在“自定义”这里：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu2.png\"><img class=\"size-full wp-image-630 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu2.png\" alt=\"\" width=\"302\" height=\"376\" /></a>\r\n这里是已经将菜单1设置为顶部导航菜单，因为我们已经给这个选项打了勾。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu3.png\"><img class=\"size-full wp-image-631 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu3.png\" alt=\"\" width=\"276\" height=\"209\" /></a>\r\n\r\n点击菜单1，最下面，有一个“显示位置”，那这下子我们可以很明确的知道register_nav_menus的作用了。然后我们发现，按理来说菜单1已可以显示到“顶部导航菜单”这个对应的位置中，但是在我们的新的主题中，我们还没有定义“顶部导航菜单”是在哪里的。这个时候就用到wp_nav_menu()。\r\n\r\n<strong>wp_nav_menu()</strong>\r\n\r\n我们只需要在我们要输出菜单的位置直接引用这个函数就可以，同时这个函数提供了很多的参数可以选择：\r\nwp_nav_menu( $args );\r\n其中$args的默认值为：\r\n$args = array(\r\n\'theme_location\' =&gt; \'\',\r\n\'menu\' =&gt; \'\',\r\n\'container\' =&gt; \'div\',\r\n\'container_class\' =&gt; \'\',\r\n\'container_id\' =&gt; \'\',\r\n\'menu_class\' =&gt; \'menu\',\r\n\'menu_id\' =&gt; \'\',\r\n\'echo\' =&gt; true,\r\n\'fallback_cb\' =&gt; \'wp_page_menu\',\r\n\'before\' =&gt; \'\',\r\n\'after\' =&gt; \'\',\r\n\'link_before\' =&gt; \'\',\r\n\'link_after\' =&gt; \'\',\r\n\'items_wrap\' =&gt; \'&lt;ul id=\"%1$s\" class=\"%2$s\"&gt;%3$s&lt;/ul&gt;\',\r\n\'depth\' =&gt; 0,\r\n\'walker\' =&gt; \'\'\r\n);\r\n\r\n再用我们上面用的例子，这里我们要使用theme_location这个参数，将其值设定为header_menu；那么现在header_menu对应的也就是“顶部导航菜单”就会输出在我们wp_nav_menu( )函数输出的位置。\r\n$args = array(\r\n\'theme_location\' =&gt; \'header_menu\',\r\n);\r\nwp_nav_menu($args);\r\n当然我们也可以用menu指定显示某个菜单：\r\n$args = array(\r\n\'menu\' =&gt; \'菜单1\',\r\n);\r\nwp_nav_menu($args);\r\n不过这种做法不灵活，还是推荐使用theme_location参数配置。\r\n\r\n每个参数的具体描述如下：\r\n$theme_locaton：(字符串)(可选)\r\n默认值: None\r\n用于在调用导航菜单时指定注册过的某一个导航菜单名，如果没有指定，则显示第一个。\r\n\r\n$menu：(字符串)(可选)\r\n默认值: None\r\n使用导航菜单的名称调用菜单，可以是 id, slug, name (按顺序匹配的) 。\r\n\r\n$container：(字符串)(可选)\r\n默认值: div\r\nul 父节点（这里指导航菜单的容器）的标签类型，只支持div 和 nav 标签, 如果是其它值, ul 父节点的标签将不会被显示。也可以用false（container =&gt; false）去掉ul父节点标签。\r\n\r\n$container_class：(字符串)(可选)\r\n默认值: menu-{menu slug}-container\r\nul 父节点的 class 属性值。\r\n\r\n$container_id：(字符串)(可选)\r\n默认值: None\r\nul 父节点的 id 属性值。\r\n\r\n$menu_class：(字符串)(可选)\r\n默认值: menu\r\nul 节点的 class 属性值。\r\n\r\n$menu_id：(字符串)(可选)\r\n默认值: menu slug, 自增长的\r\nul 节点的 id 属性值。\r\n\r\n$echo：(布尔型)(可选)\r\n默认值: true (直接显示)\r\n确定直接显示导航菜单还是返回 HTML 片段，如果想将导航的代码作为赋值使用，可设置为false。\r\n\r\n$fallback_cb：(字符串)(可选)\r\n默认值: wp_page_menu (显示页面列表作为菜单)\r\n用于没有在后台设置导航时调的回调函数。\r\n\r\n$before：(字符串)(可选)\r\n默认值: None\r\n显示在每个菜单链接前的文本。\r\n\r\n$after：(字符串)(可选)\r\n默认值: None\r\n显示在每个菜单链接后的文本。\r\n\r\n$link_before：(字符串)(可选)\r\n默认值: None\r\n显示在每个菜单链接文本前的文本。\r\n\r\n$link_after：(字符串)(可选)\r\n默认值: None\r\n显示在每个菜单链接文本后的文本。\r\n\r\n$items_wrap：(字符串)(可选)\r\n默认值: None\r\n使用字符串替换修改ul的class。\r\n\r\n$depth：(整型)(可选)\r\n默认值: 0\r\n显示菜单的深度, 当数值为 0 时显示所有深度的菜单。\r\n\r\n$walker：(对象型)(可选)\r\n默认值: new Walker_Nav_Menu\r\n\r\n基本上这两个函数就是这样配合使用，需要注意的就是，不是注册菜单，而是注册了“菜单插槽的引用接口”，差不多这个意思。\r\n\r\n定制自己的导航样式\r\n通过定义container_id，container_class等参数，可以获取我们想要的html结构，根据这个结构，写css样式美化菜单。', '', '', 'inherit', 'closed', 'closed', '', '628-revision-v1', '', '', '2017-02-13 10:14:24', '2017-02-13 02:14:24', '', 628, 'http://www.gzpblog.com/20170213/632.html', 0, 'revision', '', 0),
(629, 1, '2017-02-13 10:09:01', '2017-02-13 02:09:01', '', 'wp_nav_menu()1', '', 'inherit', 'open', 'closed', '', 'wp_nav_menu1', '', '', '2017-02-13 10:09:01', '2017-02-13 02:09:01', '', 628, 'http://www.gzpblog.com/wp-content/uploads/2017/02/wp_nav_menu1.png', 0, 'attachment', 'image/png', 0),
(630, 1, '2017-02-13 10:09:04', '2017-02-13 02:09:04', '', 'wp_nav_menu()2', '', 'inherit', 'open', 'closed', '', 'wp_nav_menu2', '', '', '2017-02-13 10:09:04', '2017-02-13 02:09:04', '', 628, 'http://www.gzpblog.com/wp-content/uploads/2017/02/wp_nav_menu2.png', 0, 'attachment', 'image/png', 0),
(631, 1, '2017-02-13 10:09:06', '2017-02-13 02:09:06', '', 'wp_nav_menu()3', '', 'inherit', 'open', 'closed', '', 'wp_nav_menu3', '', '', '2017-02-13 10:09:06', '2017-02-13 02:09:06', '', 628, 'http://www.gzpblog.com/wp-content/uploads/2017/02/wp_nav_menu3.png', 0, 'attachment', 'image/png', 0),
(628, 1, '2017-02-13 10:18:48', '2017-02-13 02:18:48', '最近做一个自己的主题，开始接触wordpress的二次开发。在导航菜单这一块，遇到一点小问题。其实网上的资料挺多，有一些也挺久远的，不过也都能用，毕竟wordpress没什么大改。但是这些资料实际上讲得不清楚，一开始误导了我。\r\n\r\n其实在主题中做导航菜单，我们只需要用到两个函数<strong>register_nav_menus()</strong>和<strong>wp_nav_menu()</strong> 。\r\n\r\n接下来看看怎么搞：\r\n<h3>register_nav_menus()</h3>\r\n在主题的functions.php中注册菜单导航：\r\n\r\n[php]\r\n\r\nregister_nav_menus( array(\r\n\'header_menu\' =&gt; \'顶部导航菜单\',\r\n) );\r\n\r\n[/php]\r\n\r\nheader_menu其实只是一个标志的key，对应的值为显示给用户的描述。那么，重点在于，这个注册导航菜单，并不是注册了一个导航菜单，而是打通了wordpress系统中的导航菜单与我们自制主题的导航菜单显示位置，提供给用户一个选择，实际上是这样的，在后台外观设置的菜单中，我们的菜单下面的菜单设置这里，多了一个可选项：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu1.png\"><img class=\"size-full wp-image-629 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu1.png\" alt=\"\" width=\"529\" height=\"147\" /></a>\r\n\r\n这个看起来不明确，我们可以看这个，在“自定义”这里：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu2.png\"><img class=\"size-full wp-image-630 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu2.png\" alt=\"\" width=\"302\" height=\"376\" /></a>\r\n这里是已经将菜单1设置为顶部导航菜单，因为我们已经给这个选项打了勾。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu3.png\"><img class=\"size-full wp-image-631 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/02/wp_nav_menu3.png\" alt=\"\" width=\"276\" height=\"209\" /></a>\r\n\r\n点击菜单1，最下面，有一个“显示位置”，那这下子我们可以很明确的知道register_nav_menus的作用了。然后我们发现，按理来说菜单1已可以显示到“顶部导航菜单”这个对应的位置中，但是在我们的新的主题中，我们还没有定义“顶部导航菜单”是在哪里的。这个时候就用到wp_nav_menu()。\r\n<h3>wp_nav_menu()</h3>\r\n我们只需要在我们要输出菜单的位置直接引用这个函数就可以，同时这个函数提供了很多的参数可以选择：\r\nwp_nav_menu( $args );\r\n其中$args的默认值为：\r\n\r\n[php]\r\n$args = array(\r\n\'theme_location\' =&gt; \'\',\r\n\'menu\' =&gt; \'\',\r\n\'container\' =&gt; \'div\',\r\n\'container_class\' =&gt; \'\',\r\n\'container_id\' =&gt; \'\',\r\n\'menu_class\' =&gt; \'menu\',\r\n\'menu_id\' =&gt; \'\',\r\n\'echo\' =&gt; true,\r\n\'fallback_cb\' =&gt; \'wp_page_menu\',\r\n\'before\' =&gt; \'\',\r\n\'after\' =&gt; \'\',\r\n\'link_before\' =&gt; \'\',\r\n\'link_after\' =&gt; \'\',\r\n\'items_wrap\' =&gt; \'\r\n&lt;ul id=&quot;%1$s&quot; class=&quot;%2$s&quot;&gt;%3$s&lt;/ul&gt;\r\n\r\n\',\r\n\'depth\' =&gt; 0,\r\n\'walker\' =&gt; \'\'\r\n);\r\n\r\n[/php]\r\n\r\n再用我们上面用的例子，这里我们要使用theme_location这个参数，将其值设定为header_menu；那么现在header_menu对应的也就是“顶部导航菜单”就会输出在我们wp_nav_menu( )函数输出的位置。\r\n\r\n[php]\r\n\r\n$args = array(\r\n\'theme_location\' =&gt; \'header_menu\',\r\n);\r\n\r\n[/php]\r\n\r\nwp_nav_menu($args);\r\n当然我们也可以用menu指定显示某个菜单：\r\n\r\n[php]\r\n$args = array(\r\n\'menu\' =&gt; \'菜单1\',\r\n);\r\nwp_nav_menu($args);\r\n\r\n[/php]\r\n\r\n不过这种做法不灵活，还是推荐使用theme_location参数配置。\r\n\r\n每个参数的具体描述如下：\r\n$theme_locaton：(字符串)(可选)\r\n默认值: None\r\n用于在调用导航菜单时指定注册过的某一个导航菜单名，如果没有指定，则显示第一个。\r\n\r\n$menu：(字符串)(可选)\r\n默认值: None\r\n使用导航菜单的名称调用菜单，可以是 id, slug, name (按顺序匹配的) 。\r\n\r\n$container：(字符串)(可选)\r\n默认值: div\r\nul 父节点（这里指导航菜单的容器）的标签类型，只支持div 和 nav 标签, 如果是其它值, ul 父节点的标签将不会被显示。也可以用false（container =&gt; false）去掉ul父节点标签。\r\n\r\n$container_class：(字符串)(可选)\r\n默认值: menu-{menu slug}-container\r\nul 父节点的 class 属性值。\r\n\r\n$container_id：(字符串)(可选)\r\n默认值: None\r\nul 父节点的 id 属性值。\r\n\r\n$menu_class：(字符串)(可选)\r\n默认值: menu\r\nul 节点的 class 属性值。\r\n\r\n$menu_id：(字符串)(可选)\r\n默认值: menu slug, 自增长的\r\nul 节点的 id 属性值。\r\n\r\n$echo：(布尔型)(可选)\r\n默认值: true (直接显示)\r\n确定直接显示导航菜单还是返回 HTML 片段，如果想将导航的代码作为赋值使用，可设置为false。\r\n\r\n$fallback_cb：(字符串)(可选)\r\n默认值: wp_page_menu (显示页面列表作为菜单)\r\n用于没有在后台设置导航时调的回调函数。\r\n\r\n$before：(字符串)(可选)\r\n默认值: None\r\n显示在每个菜单链接前的文本。\r\n\r\n$after：(字符串)(可选)\r\n默认值: None\r\n显示在每个菜单链接后的文本。\r\n\r\n$link_before：(字符串)(可选)\r\n默认值: None\r\n显示在每个菜单链接文本前的文本。\r\n\r\n$link_after：(字符串)(可选)\r\n默认值: None\r\n显示在每个菜单链接文本后的文本。\r\n\r\n$items_wrap：(字符串)(可选)\r\n默认值: None\r\n使用字符串替换修改ul的class。\r\n\r\n$depth：(整型)(可选)\r\n默认值: 0\r\n显示菜单的深度, 当数值为 0 时显示所有深度的菜单。\r\n\r\n$walker：(对象型)(可选)\r\n默认值: new Walker_Nav_Menu\r\n\r\n基本上这两个函数就是这样配合使用，需要注意的就是，不是注册菜单，而是注册了“菜单插槽的引用接口”，差不多这个意思。\r\n<h3>定制自己的导航样式</h3>\r\n通过定义container_id，container_class等参数，可以获取我们想要的html结构，根据这个结构，写css样式美化菜单。', 'wordpress导航菜单开发', '', 'publish', 'open', 'open', '', 'wordpress%e5%af%bc%e8%88%aa%e8%8f%9c%e5%8d%95%e5%bc%80%e5%8f%91', '', '', '2017-02-13 10:20:26', '2017-02-13 02:20:26', '', 0, 'http://www.gzpblog.com/?p=628', 0, 'post', '', 1),
(538, 1, '2016-12-15 14:08:07', '2016-12-15 06:08:07', '因为还没开动，也没那么快就开动，考虑到技术更新，觉得用点新东西。\r\n\r\n现在准备后台方案：\r\n<ol>\r\n 	<li>PHP7 + Laravel + MySQL8.0（看情况5.7）</li>\r\n 	<li>PHP7 + swoole_extension + swoole_framework + MySQL8.0（看情况5.7）</li>\r\n 	<li>PHP7 + swoole_extension + Yaf + MySQL8.0（看情况5.7）</li>\r\n 	<li>PHP7 + swoole_extension + Phalcon + MySQL8.0（看情况5.7）</li>\r\n</ol>\r\n想用swoole主要是考虑到后期可能拓展的项目可能；而且考虑到要做就做得好一点，性能要求高一点。而Laravel则是考虑到开发方便一点。\r\n\r\n&nbsp;\r\n\r\n前端的话准备用bootstrap + Vue.js。', '准备自己做个东西', '', 'publish', 'open', 'open', '', '%e5%87%86%e5%a4%87%e8%87%aa%e5%b7%b1%e5%81%9a%e4%b8%aa%e4%b8%9c%e8%a5%bf', '', '', '2016-12-15 14:08:07', '2016-12-15 06:08:07', '', 0, 'http://www.gzpblog.com/?p=538', 0, 'post', '', 0),
(540, 1, '2016-12-15 14:27:57', '2016-12-15 06:27:57', ' ', '', '', 'publish', 'closed', 'closed', '', '540', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 69, 'http://www.gzpblog.com/?p=540', 40, 'nav_menu_item', '', 0),
(541, 1, '2016-12-15 14:27:57', '2016-12-15 06:27:57', ' ', '', '', 'publish', 'closed', 'closed', '', '541', '', '', '2017-06-01 01:36:43', '2017-05-31 17:36:43', '', 69, 'http://www.gzpblog.com/?p=541', 41, 'nav_menu_item', '', 0),
(542, 1, '2016-12-15 14:40:05', '2016-12-15 06:40:05', '最近搞TP5，配置Nginx服务器。玩惯了Apache，发现nginx确实很不一样。尝试了N种方法都无法配置成功。\r\n\r\n因为用windows本地开发调试的，根目录下又有多个目录，一直不知道在怎么弄。最后终于找到解决方法。\r\n\r\n[code]\r\nlocation ~ \\.php {    #去掉$\r\n     root          H:/PHPServer/WWW;\r\n     fastcgi_pass   127.0.0.1:9000;\r\n     fastcgi_index  index.php;\r\n     fastcgi_split_path_info ^(.+\\.php)(.*)$;     #增加这一句\r\n     fastcgi_param PATH_INFO $fastcgi_path_info;    #增加这一句\r\n     fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\r\n     include        fastcgi_params;\r\n}\r\n[/code]\r\n\r\n用这个就可以让TP的pathinfo模式跑起来，试了一下不冲突。\r\n\r\n再去掉index.php：\r\n\r\n[code]\r\nlocation /sgy/ {\r\n    if (!-e $request_filename){\r\n    rewrite ^/sgy/public/(.*)$ /sgy/public/index.php?s=$1 last;\r\n    }\r\n}\r\n[/code]\r\n\r\n\r\n<hr />\r\n\r\n2016.12.17后续:\r\n发现了一直以来一个错误，导致一直出现的不理解的问题，现在解决了；在不解析到/public/目录的情况下，经常出现文件找不到的情况。之前的配置方法一直是像上面那样：\r\n\r\n[code]\r\nlocation / {\r\n    root   D:/wnmp/www;\r\n    index  index.html index.htm index.php;\r\n}\r\nlocation /sgy/ { \r\n    if (!-e $request_filename){ \r\n    rewrite ^/sgy/public/(.*)$ /sgy/public/index.php?s=$1 last; \r\n    } \r\n} \r\n[/code]\r\n\r\n但是这样的话，下面这个并没有指定root！改为：\r\n\r\n[code]\r\n location / {\r\n     root D:/wnmp/www;\r\n     index index.html index.htm index.php;\r\n     if (!-e $request_filename){\r\n     rewrite ^/sgcloud/(.*)$ /sgcloud/index.php?s=$1 last;\r\n     rewrite ^/sgy/public/(.*)$ /sgy/public/index.php?s=$1 last;\r\n     }\r\n }\r\n[/code]\r\n\r\n然后问题就解决了，perfect！</pre>', '支持Pathinfo模式的Nginx配置', '', 'publish', 'open', 'open', '', '%e6%94%af%e6%8c%81pathinfo%e6%a8%a1%e5%bc%8f%e7%9a%84nginx%e9%85%8d%e7%bd%ae', '', '', '2016-12-17 11:11:30', '2016-12-17 03:11:30', '', 0, 'http://www.gzpblog.com/?p=542', 0, 'post', '', 0),
(660, 1, '2017-02-17 23:35:23', '2017-02-17 15:35:23', '现在很多框架，拓展都使用了composer模式进行安装。之前装Laravel时觉得麻烦，没去研究，现在TP5也使用composer了，就学学。\n\n首先，先安装composer，因为是本地用的，是windows系统，有无脑安装版本，先用这个版本，其实其他方法包括Linux系统，也不复杂，没问题。\n\nwindows安装包下载：<a href=\"https://getcomposer.org/Composer-Setup.exe\" target=\"_blank\">Composer-Setup.exe</a>\n\n然后就是next，next就好，选择代理的那里不选即可。\n\n安装完之后就可以用了，我们发现thinkphp根目录 （下载的压缩包）下已经有一个composer.json了。这时候，如果我们需要安装验证码拓展（tp5需要下载拓展包），可以先用命令行进入项目目录：\n\n<a href=\"http://files.gzpblog.com/wp/2016/12/Install-composer1.png\"><img class=\"alignnone size-full wp-image-550\" src=\"http://files.gzpblog.com/wp/2016/12/Install-composer1.png\" alt=\"\" width=\"476\" height=\"53\" /></a>\n\n执行：\n\ncomposer require topthink/think-captcha\n\n如果发现没反应，不要急！因为镜像原因，比较慢，等等就好，完事之后就是这样：\n\n<a href=\"http://files.gzpblog.com/wp/2016/12/Install-composer2.png\"><img class=\"alignnone size-full wp-image-548\" src=\"http://files.gzpblog.com/wp/2016/12/Install-composer2.png\" alt=\"\" width=\"455\" height=\"266\" /></a>\n\n这个时候发现：\n\n根目录的composer.json多出来一行，同时自动生成了composer.lock进行版本控制\n\n<a href=\"http://files.gzpblog.com/wp/2016/12/Install-composer3.png\"><img class=\"alignnone wp-image-549 size-full\" src=\"http://files.gzpblog.com/wp/2016/12/Install-composer3.png\" width=\"506\" height=\"658\" /></a>\n\n&nbsp;\n\n总之，进入项目目录后，<code class=\"hljs perl\">如果是局部安装的composer，用php composer.phar命令，全局安装的用composer。</code>\n\n使用install进行安装，先定义好composer.json的依赖，执行：<code class=\"hljs nginx\"><span class=\"hljs-title\">php</span> composer.phar install</code>\n\n或者：composer install\n\n&nbsp;\n\ncomposer会自动去找到composer.json的定义安装。\n\n使用require进行添加依赖（就像上面安装think-captcha库那样）：<code class=\"hljs perl\">php composer.phar <span class=\"hljs-keyword\">require </span></code>\n\n或者：composer require\n\n更新：<code class=\"hljs perl\">php composer.phar </code>update\n\n或者：composer update\n\n所有的拓展包都安装在了vendor目录下，导入autoload.php就可以自动载入。 而在TP5中，自动导入了vendor拓展包并且定义了think下的命名空间。 例如think-captcha拓展包，我们只需要：\n\n[code]\nuse think\\captcha\\Captcha;\n[/code]\n\n然后new Captcha()调用这个类就行。', '如何使用Composer', '', 'inherit', 'closed', 'closed', '', '546-autosave-v1', '', '', '2017-02-17 23:35:23', '2017-02-17 15:35:23', '', 546, 'http://www.gzpblog.com/20170217/660.html', 0, 'revision', '', 0),
(546, 1, '2016-12-16 13:49:43', '2016-12-16 05:49:43', '现在很多框架，拓展都使用了composer模式进行安装。之前装Laravel时觉得麻烦，没去研究，现在TP5也使用composer了，就学学。\r\n\r\n首先，先安装composer，因为是本地用的，是windows系统，有无脑安装版本，先用这个版本，其实其他方法包括Linux系统，也不复杂，没问题。\r\n\r\nwindows安装包下载：<a href=\"https://getcomposer.org/Composer-Setup.exe\" target=\"_blank\">Composer-Setup.exe</a>\r\n\r\n然后就是next，next就好，选择代理的那里不选即可。\r\n\r\n安装完之后就可以用了，我们发现thinkphp根目录 （下载的压缩包）下已经有一个composer.json了。这时候，如果我们需要安装验证码拓展（tp5需要下载拓展包），可以先用命令行进入项目目录：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2016/12/Install-composer1.png\"><img class=\"alignnone size-full wp-image-550\" src=\"http://files.gzpblog.com/wp/2016/12/Install-composer1.png\" alt=\"\" width=\"476\" height=\"53\" /></a>\r\n\r\n执行：\r\n\r\ncomposer require topthink/think-captcha\r\n\r\n如果发现没反应，不要急！因为镜像原因，比较慢，等等就好，完事之后就是这样：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2016/12/Install-composer2.png\"><img class=\"alignnone size-full wp-image-548\" src=\"http://files.gzpblog.com/wp/2016/12/Install-composer2.png\" alt=\"\" width=\"455\" height=\"266\" /></a>\r\n\r\n这个时候发现：\r\n\r\n根目录的composer.json多出来一行，同时自动生成了composer.lock进行版本控制\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2016/12/Install-composer3.png\"><img class=\"alignnone wp-image-549 size-full\" src=\"http://files.gzpblog.com/wp/2016/12/Install-composer3.png\" width=\"506\" height=\"658\" /></a>\r\n\r\n&nbsp;\r\n\r\n总之，进入项目目录后，如果是局部安装的composer，用php composer.phar命令，全局安装的用composer。\r\n\r\n使用install进行安装，先定义好composer.json的依赖，执行：php composer.phar install\r\n\r\n或者：composer install\r\n\r\ncomposer会自动去找到composer.json的定义安装。\r\n\r\n&nbsp;\r\n\r\n使用require进行添加依赖（就像上面安装think-captcha库那样）：php composer.phar require\r\n\r\n或者：composer require\r\n\r\n&nbsp;\r\n\r\n更新：php composer.phar update\r\n\r\n或者：composer update\r\n\r\n&nbsp;\r\n\r\n所有的拓展包都安装在了vendor目录下，导入autoload.php就可以自动载入。 而在TP5中，自动导入了vendor拓展包并且定义了think下的命名空间。 例如think-captcha拓展包，我们只需要：\r\n\r\n[code]\r\nuse think\\captcha\\Captcha;\r\n[/code]\r\n\r\n然后new Captcha()调用这个类就行。', '如何使用Composer', '', 'publish', 'open', 'open', '', '%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8composer', '', '', '2017-02-17 23:44:08', '2017-02-17 15:44:08', '', 0, 'http://www.gzpblog.com/?p=546', 0, 'post', '', 0),
(661, 1, '2017-02-17 23:42:55', '2017-02-17 15:42:55', '现在很多框架，拓展都使用了composer模式进行安装。之前装Laravel时觉得麻烦，没去研究，现在TP5也使用composer了，就学学。\r\n\r\n首先，先安装composer，因为是本地用的，是windows系统，有无脑安装版本，先用这个版本，其实其他方法包括Linux系统，也不复杂，没问题。\r\n\r\nwindows安装包下载：<a href=\"https://getcomposer.org/Composer-Setup.exe\" target=\"_blank\">Composer-Setup.exe</a>\r\n\r\n然后就是next，next就好，选择代理的那里不选即可。\r\n\r\n安装完之后就可以用了，我们发现thinkphp根目录 （下载的压缩包）下已经有一个composer.json了。这时候，如果我们需要安装验证码拓展（tp5需要下载拓展包），可以先用命令行进入项目目录：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2016/12/Install-composer1.png\"><img class=\"alignnone size-full wp-image-550\" src=\"http://files.gzpblog.com/wp/2016/12/Install-composer1.png\" alt=\"\" width=\"476\" height=\"53\" /></a>\r\n\r\n执行：\r\n\r\ncomposer require topthink/think-captcha\r\n\r\n如果发现没反应，不要急！因为镜像原因，比较慢，等等就好，完事之后就是这样：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2016/12/Install-composer2.png\"><img class=\"alignnone size-full wp-image-548\" src=\"http://files.gzpblog.com/wp/2016/12/Install-composer2.png\" alt=\"\" width=\"455\" height=\"266\" /></a>\r\n\r\n这个时候发现：\r\n\r\n根目录的composer.json多出来一行，同时自动生成了composer.lock进行版本控制\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2016/12/Install-composer3.png\"><img class=\"alignnone wp-image-549 size-full\" src=\"http://files.gzpblog.com/wp/2016/12/Install-composer3.png\" width=\"506\" height=\"658\" /></a>\r\n\r\n&nbsp;\r\n\r\n总之，进入项目目录后，如果是局部安装的composer，用php composer.phar命令，全局安装的用composer。\r\n\r\n使用install进行安装，先定义好composer.json的依赖，执行：php composer.phar install\r\n\r\n或者：composer install\r\n\r\n&nbsp;\r\n\r\ncomposer会自动去找到composer.json的定义安装。\r\n\r\n使用require进行添加依赖（就像上面安装think-captcha库那样）：php composer.phar require\r\n\r\n或者：composer require\r\n\r\n更新：php composer.phar update\r\n\r\n或者：composer update\r\n\r\n所有的拓展包都安装在了vendor目录下，导入autoload.php就可以自动载入。 而在TP5中，自动导入了vendor拓展包并且定义了think下的命名空间。 例如think-captcha拓展包，我们只需要：\r\n\r\n[code]\r\nuse think\\captcha\\Captcha;\r\n[/code]\r\n\r\n然后new Captcha()调用这个类就行。', '如何使用Composer', '', 'inherit', 'closed', 'closed', '', '546-revision-v1', '', '', '2017-02-17 23:42:55', '2017-02-17 15:42:55', '', 546, 'http://www.gzpblog.com/20170217/661.html', 0, 'revision', '', 0),
(547, 1, '2016-12-16 13:14:03', '2016-12-16 05:14:03', 'composer', 'composer-logo', 'composer', 'inherit', 'open', 'closed', '', 'composer-logo', '', '', '2016-12-16 13:14:38', '2016-12-16 05:14:38', '', 546, 'http://www.gzpblog.com/wp-content/uploads/2016/12/composer-logo.png', 0, 'attachment', 'image/png', 0),
(548, 1, '2016-12-16 13:14:11', '2016-12-16 05:14:11', '', 'Install-composer2', '', 'inherit', 'open', 'closed', '', 'install-composer2', '', '', '2016-12-16 13:14:11', '2016-12-16 05:14:11', '', 546, 'http://www.gzpblog.com/wp-content/uploads/2016/12/Install-composer2.png', 0, 'attachment', 'image/png', 0),
(549, 1, '2016-12-16 13:14:13', '2016-12-16 05:14:13', '', 'Install-composer3', '', 'inherit', 'open', 'closed', '', 'install-composer3', '', '', '2016-12-16 13:14:13', '2016-12-16 05:14:13', '', 546, 'http://www.gzpblog.com/wp-content/uploads/2016/12/Install-composer3.png', 0, 'attachment', 'image/png', 0),
(550, 1, '2016-12-16 13:14:16', '2016-12-16 05:14:16', '', 'Install-composer1', '', 'inherit', 'open', 'closed', '', 'install-composer1', '', '', '2016-12-16 13:14:16', '2016-12-16 05:14:16', '', 546, 'http://www.gzpblog.com/wp-content/uploads/2016/12/Install-composer1.png', 0, 'attachment', 'image/png', 0),
(623, 1, '2017-02-09 09:57:02', '2017-02-09 01:57:02', 'php-cgi在linux中有fpm管理，Apache不是采用cgi这种模式，于是乎就出现了，在windows下，采用nginx时，开启的php-cgi监听非常不稳定，经常奔溃关闭。现在解决了这个问题。注意是win32位系统下解决的，虽然服务器上64位系统也跑起来了，但是环境装的都是32位的。\r\n<div>采用了这个叫xxfpm的FastCGI进程管理器：<a href=\"http://xiaoxia.org/2011/02/01/xxfpm-wrote-a-fastcgi-process-manager/\" target=\"_blank\">xxfpm</a></div>\r\n<div></div>\r\n<div>下载后运行xxfpm.exe，如果出现报错缺少pthreadgc2.dll，需要下载pthreads-win32：<a href=\"http://sourceware.org/pthreads-win32/\" target=\"_blank\">http://sourceware.org/pthreads-win32/</a></div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/02/xxfpm1.png\"><img class=\"alignnone size-full wp-image-620\" src=\"http://files.gzpblog.com/wp/2017/02/xxfpm1.png\" alt=\"\" width=\"479\" height=\"162\" /></a></div>\r\n<div>将这个文件复制到C:/Windows/System32下（如果系统是64位的请将32位的dll文件复制到C:\\Windows\\SysWOW64目录）；</div>\r\n<div></div>\r\n<div>然后打开\"开始-运行-输入regsvr32 pthreadgc2.dll\"，回车，如果报错，用下面的方法。\r\n\r\n新建一个文件“注册.bat“，内容：\r\n@echo 开始注册\r\ncopy pthreadgc2.dll %windir%\\system32\\\r\nregsvr32 %windir%\\system32\\pthreadgc2.dll /s\r\n@echo pthreadgc2.dll注册成功\r\n@pause\r\n双击注册.bat，就会自动完成pthreadgc2.dll注册（如果64位的系统安装32位的dll文件，请将system32替换为SysWOW64）。完了就可以将这个文件删了。</div>\r\n<div></div>\r\n<div>接下里将下载下来的xxfpm目录copy到nginx下：</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/02/xxfpm2.png\"><img class=\"alignnone  wp-image-621\" src=\"http://files.gzpblog.com/wp/2017/02/xxfpm2.png\" alt=\"\" width=\"500\" height=\"443\" /></a></div>\r\n<div></div>\r\n<div>为了方便修改一下当初安装nginx时的RunHiddenConsole启动关闭文件（如果你是这样安装的话）：</div>\r\n<div>修改start_nginx.bat为：</div>\r\n<div style=\"padding-left: 30px;\">\r\n@echo off\r\nREM Windows 下无效\r\nREM set PHP_FCGI_CHILDREN=5\r\nREM 每个进程处理的最大请求数，或设置为 Windows 环境变量\r\nset PHP_FCGI_MAX_REQUESTS=1000\r\necho Starting PHP FastCGI...\r\nRunHiddenConsole D:/wnmp/nginx-1.10.2/xxfpm/bin/xxfpm.exe \"D:/wnmp/php-5.6/php-cgi.exe -c D:/wnmp/php-5.6/php.ini\" -n 5 -i 127.0.0.1 -p 9000\r\necho Starting nginx...\r\nRunHiddenConsole D:/wnmp/nginx-1.10.2/nginx.exe -p D:/wnmp/nginx-1.10.2\r\nexit</div>\r\n<div style=\"padding-left: 30px;\"></div>\r\n<div>修改stop_nginx.bat为：</div>\r\n<div></div>\r\n<div style=\"padding-left: 30px;\">@echo off\r\necho Stopping nginx...\r\ntaskkill /F /IM nginx.exe &gt; nul\r\necho Stopping PHP FastCGI...\r\ntaskkill /F /IM xxfpm.exe &gt; nul\r\nexit</div>\r\n<div style=\"padding-left: 30px;\"></div>\r\n<div>\r\n<div>现在在开启nginx时，我们就同时开启了5个php-cgi进程，因为我们传了参数 -n 为5。</div>\r\n</div>\r\n<div>\r\n<div><img src=\"C:\\Users\\Administrator\\AppData\\Local\\YNote\\data\\a3355222@163.com\\2cd255e6116f4d2c83634fbb23a9013c\\clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"7D0786B77DA24779B4141BECA0EFA600\" /><a href=\"http://files.gzpblog.com/wp/2017/02/xxfpm3.png\"><img class=\"alignnone size-full wp-image-622\" src=\"http://files.gzpblog.com/wp/2017/02/xxfpm3.png\" alt=\"\" width=\"95\" height=\"93\" /></a></div>\r\n<div>如果我们手动断掉一个，会发现又多出来一个，还是5个。xxfpm将会管理php-cgi，将其维持在5个php-cgi进程，防止cgi进程崩溃关闭。还有一点注意，监听端口注意与nginx的配置文件对齐。</div>\r\n<div></div>\r\n</div>', '解决windows下php-cgi进程经常自动关闭', '', 'inherit', 'closed', 'closed', '', '619-revision-v1', '', '', '2017-02-09 09:57:02', '2017-02-09 01:57:02', '', 619, 'http://www.gzpblog.com/20170209/623.html', 0, 'revision', '', 0),
(621, 1, '2017-02-09 09:50:40', '2017-02-09 01:50:40', '', 'xxfpm2', '', 'inherit', 'open', 'closed', '', 'xxfpm2', '', '', '2017-02-09 09:50:40', '2017-02-09 01:50:40', '', 619, 'http://www.gzpblog.com/wp-content/uploads/2017/02/xxfpm2.png', 0, 'attachment', 'image/png', 0),
(622, 1, '2017-02-09 09:50:43', '2017-02-09 01:50:43', '', 'xxfpm3', '', 'inherit', 'open', 'closed', '', 'xxfpm3', '', '', '2017-02-09 09:50:43', '2017-02-09 01:50:43', '', 619, 'http://www.gzpblog.com/wp-content/uploads/2017/02/xxfpm3.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(619, 1, '2017-02-09 09:57:02', '2017-02-09 01:57:02', 'php-cgi在linux中有fpm管理，Apache不是采用cgi这种模式，于是乎就出现了，在windows下，采用nginx时，开启的php-cgi监听非常不稳定，经常奔溃关闭。现在解决了这个问题。注意是win32位系统下解决的，虽然服务器上64位系统也跑起来了，但是环境装的都是32位的。\r\n<div>采用了这个叫xxfpm的FastCGI进程管理器：<a href=\"http://xiaoxia.org/2011/02/01/xxfpm-wrote-a-fastcgi-process-manager/\" target=\"_blank\">xxfpm</a></div>\r\n<div></div>\r\n<div>下载后运行xxfpm.exe，如果出现报错缺少pthreadgc2.dll，需要下载pthreads-win32：<a href=\"http://sourceware.org/pthreads-win32/\" target=\"_blank\">http://sourceware.org/pthreads-win32/</a></div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/02/xxfpm1.png\"><img class=\"alignnone size-full wp-image-620\" src=\"http://files.gzpblog.com/wp/2017/02/xxfpm1.png\" alt=\"\" width=\"479\" height=\"162\" /></a></div>\r\n<div>将这个文件复制到C:/Windows/System32下（如果系统是64位的请将32位的dll文件复制到C:\\Windows\\SysWOW64目录）；</div>\r\n<div></div>\r\n<div>然后打开\"开始-运行-输入regsvr32 pthreadgc2.dll\"，回车，如果报错，用下面的方法。\r\n\r\n新建一个文件“注册.bat“，内容：\r\n@echo 开始注册\r\ncopy pthreadgc2.dll %windir%\\system32\\\r\nregsvr32 %windir%\\system32\\pthreadgc2.dll /s\r\n@echo pthreadgc2.dll注册成功\r\n@pause\r\n双击注册.bat，就会自动完成pthreadgc2.dll注册（如果64位的系统安装32位的dll文件，请将system32替换为SysWOW64）。完了就可以将这个文件删了。</div>\r\n<div></div>\r\n<div>接下里将下载下来的xxfpm目录copy到nginx下：</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/02/xxfpm2.png\"><img class=\"alignnone  wp-image-621\" src=\"http://files.gzpblog.com/wp/2017/02/xxfpm2.png\" alt=\"\" width=\"500\" height=\"443\" /></a></div>\r\n<div></div>\r\n<div>为了方便修改一下当初安装nginx时的RunHiddenConsole启动关闭文件（如果你是这样安装的话）：</div>\r\n<div>修改start_nginx.bat为：</div>\r\n<div style=\"padding-left: 30px;\">\r\n@echo off\r\nREM Windows 下无效\r\nREM set PHP_FCGI_CHILDREN=5\r\nREM 每个进程处理的最大请求数，或设置为 Windows 环境变量\r\nset PHP_FCGI_MAX_REQUESTS=1000\r\necho Starting PHP FastCGI...\r\nRunHiddenConsole D:/wnmp/nginx-1.10.2/xxfpm/bin/xxfpm.exe \"D:/wnmp/php-5.6/php-cgi.exe -c D:/wnmp/php-5.6/php.ini\" -n 5 -i 127.0.0.1 -p 9000\r\necho Starting nginx...\r\nRunHiddenConsole D:/wnmp/nginx-1.10.2/nginx.exe -p D:/wnmp/nginx-1.10.2\r\nexit</div>\r\n<div style=\"padding-left: 30px;\"></div>\r\n<div>修改stop_nginx.bat为：</div>\r\n<div></div>\r\n<div style=\"padding-left: 30px;\">@echo off\r\necho Stopping nginx...\r\ntaskkill /F /IM nginx.exe &gt; nul\r\necho Stopping PHP FastCGI...\r\ntaskkill /F /IM xxfpm.exe &gt; nul\r\nexit</div>\r\n<div style=\"padding-left: 30px;\"></div>\r\n<div>\r\n<div>现在在开启nginx时，我们就同时开启了5个php-cgi进程，因为我们传了参数 -n 为5。</div>\r\n</div>\r\n<div>\r\n<div><img src=\"C:\\Users\\Administrator\\AppData\\Local\\YNote\\data\\a3355222@163.com\\2cd255e6116f4d2c83634fbb23a9013c\\clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"7D0786B77DA24779B4141BECA0EFA600\" /><a href=\"http://files.gzpblog.com/wp/2017/02/xxfpm3.png\"><img class=\"alignnone size-full wp-image-622\" src=\"http://files.gzpblog.com/wp/2017/02/xxfpm3.png\" alt=\"\" width=\"95\" height=\"93\" /></a></div>\r\n<div>如果我们手动断掉一个，会发现又多出来一个，还是5个。xxfpm将会管理php-cgi，将其维持在5个php-cgi进程，防止cgi进程崩溃关闭。还有一点注意，监听端口注意与nginx的配置文件对齐。</div>\r\n<div></div>\r\n</div>', '解决windows下php-cgi进程经常自动关闭', '', 'publish', 'open', 'open', '', '%e8%a7%a3%e5%86%b3windows%e4%b8%8bphp-cgi%e8%bf%9b%e7%a8%8b%e7%bb%8f%e5%b8%b8%e8%87%aa%e5%8a%a8%e5%85%b3%e9%97%ad', '', '', '2017-02-09 09:57:02', '2017-02-09 01:57:02', '', 0, 'http://www.gzpblog.com/?p=619', 0, 'post', '', 2),
(620, 1, '2017-02-09 09:50:38', '2017-02-09 01:50:38', '', 'xxfpm1', '', 'inherit', 'open', 'closed', '', 'xxfpm1', '', '', '2017-02-09 09:50:38', '2017-02-09 01:50:38', '', 619, 'http://www.gzpblog.com/wp-content/uploads/2017/02/xxfpm1.png', 0, 'attachment', 'image/png', 0),
(610, 1, '2017-02-08 15:50:08', '2017-02-08 07:50:08', '<h4>Git文件三种状态：</h4>\r\n<div><strong>已提交（committed）</strong>表示数据已经安全的保存在本地数据库中。</div>\r\n<div><strong>已修改（modified）</strong>表示修改了文件，但还没保存到数据库中。</div>\r\n<div><strong>已暂存（staged）</strong>表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</div>\r\n<h3></h3>\r\n<h4>Git 项目的三个工作区域：</h4>\r\n<div><strong>Git 仓库目录：</strong>是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。 （\'Git目录\' 一般就是指项目根目录下的\'.git\'目录）</div>\r\n<div><strong>工作目录：</strong>是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</div>\r\n<div><strong>暂存区域：</strong>是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’\'，不过一般说法还是叫暂存区域。</div>\r\n<div></div>\r\n<div><img src=\"C:\\Users\\Administrator\\AppData\\Local\\YNote\\data\\a3355222@163.com\\23b80706c28042e88c694e8f1ec2323d\\clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"A0926A81E4CB4BE1A1B0C79D50D08AA8\" /><a href=\"http://files.gzpblog.com/wp/2017/02/git-1.png\"><img class=\"alignnone  wp-image-605\" src=\"http://files.gzpblog.com/wp/2017/02/git-1.png\" alt=\"\" width=\"694\" height=\"457\" /></a></div>\r\n<div>根据上面的图片，下面给出了每个部分的简要说明：</div>\r\n<ul>\r\n 	<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>\r\n 	<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>\r\n 	<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>\r\n 	<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>\r\n 	<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>\r\n 	<li>Stash：是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li>\r\n</ul>\r\n<div></div>\r\n<h4>基本的 Git 工作流程如下：</h4>\r\n<ol>\r\n 	<li>在工作目录中修改文件。</li>\r\n 	<li>暂存文件，将文件的快照放入暂存区域。</li>\r\n 	<li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li>\r\n</ol>\r\n<div></div>\r\n<h4><strong>使用 Git 时文件的生命周期：</strong></h4>\r\n<div><img src=\"C:\\Users\\Administrator\\AppData\\Local\\YNote\\data\\a3355222@163.com\\e197689931b84339a3df4b616ede0059\\clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"99FFBB709FAD4467875BCEF536AC00B3\" /><a href=\"http://files.gzpblog.com/wp/2017/02/git-2.png\"><img class=\"alignnone wp-image-606 \" src=\"http://files.gzpblog.com/wp/2017/02/git-2-1024x423.png\" width=\"618\" height=\"255\" /></a></div>\r\n<div></div>\r\n<div></div>\r\n<div></div>', 'Git——基本概念', '', 'inherit', 'closed', 'closed', '', '604-revision-v1', '', '', '2017-02-08 15:50:08', '2017-02-08 07:50:08', '', 604, 'http://www.gzpblog.com/20170208/610.html', 0, 'revision', '', 0),
(558, 1, '2016-12-28 23:37:11', '2016-12-28 15:37:11', '以前一直没翻墙，嫌麻烦。\r\n\r\n然后现在，我终于发现，百度真的龊爆了。', '尝试用了一下google', '', 'publish', 'open', 'open', '', '%e5%b0%9d%e8%af%95%e7%94%a8%e4%ba%86%e4%b8%80%e4%b8%8bgoogle', '', '', '2016-12-28 23:37:11', '2016-12-28 15:37:11', '', 0, 'http://www.gzpblog.com/?p=558', 0, 'post', '', 0),
(582, 1, '2017-01-11 16:30:35', '2017-01-11 08:30:35', '<h2>一. 防止SQL注入</h2>\r\n<h3>1 危害：</h3>\r\n1） 攻击者可以利用它读取、修改或者删除数据库内的数据，获取数据库中的用户名和密码等敏感信息\r\n2）甚至可以 获得数据库管理员的权限。\r\n3）如果能够再利用SQLServer扩展存储过程和自定义扩展存储过程来执行一些系统命令，攻击者还可以获得该系统的控制权。\r\n4）SQL Injection 也很难防范。网站管理员无法通过安装系统补丁或者进行简单的安全配置进行自我保护，一般的防火墙也无法拦截SQL Injection 攻击。\r\n<h3>2 原理：</h3>\r\n结构化查询语言(SQL)是一种用来和数据库交互的文本语言。SQL Injection 就是利用某些数据库的外部接口把用户数据插入到实际的数据库操作语言(SQL)当中，从而达到入侵数据库乃至操作系统的目的。它的产生主要是由于程序对用户输入 的数据没有进行严格的过滤，导致非法数据库查询语句的执行。\r\n<h3>3 注入方式举例：</h3>\r\n如下面的用户登陆验证程序：\r\n$sql = \"SELECT * FROM user WHERE username=\'$username\' AND password=\'$password\'\";\r\n$result = mysql_db_query($dbname, $sql);\r\n1） or注入\r\n如果我们提交如下url：\r\nhttp://127.0.0.1/injection/user.php?username=angel\' or \'1=1\r\n这个sql就变成：\r\nSELECT * FROM user WHERE username=\'angel\' or \'1=1\' AND password=\'$password\r\npassword部分就被这个or给怼没了，那么就可以不输入密码成功登陆系统\r\n2）注释注入\r\n同样我们也可以利用sql的注释语句实现sql注入，如下面的例子：\r\nhttp://127.0.0.1/injection/user.php?username=angel\'/*\r\nhttp://127.0.0.1/injection/user.php?username=angel\'%23\r\n根据mysql的特性，mysql支持/*和#两种注释格式，所以我们提交的时候是把后面的代码注释掉，值得注意的是由于编码问题，在地址栏里提交#会变成空的，所以我们在地址栏提交的时候，应该提交%23，才会变成#，就成功注释了。\r\n3）SQL注入语句大全\r\nhttp://blog.csdn.net/zzq19860626/article/details/10220427\r\n<h3>4 需要注意以下几个要点：</h3>\r\n1）永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和 双\"-\"进行转换等。\r\n2）永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。\r\n3）永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。\r\n4）不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。\r\n5）应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装\r\n<h3>5 PHP中我们如何解决</h3>\r\n1） PHP手册介绍的预防措施（PHP手册的SQL注入部分：http://php.net/manual/zh/security.database.sql-injection.php）：\r\n● 永远不要使用超级用户或所有者帐号去连接数据库。要用权限被严格限制的帐号。\r\n● 检查输入的数据是否具有所期望的数据格式。PHP 有很多可以用于检查输入的函数，从简单的变量函数和字符类型函数（比如 is_numeric()，ctype_digit()）到复杂的 Perl 兼容正则表达式函数都可以完成这个工作。\r\n● 如果程序等待输入一个数字，可以考虑使用 is_numeric() 来检查，或者直接使用 settype() 来转换它的类型，也可以用 sprintf() 把它格式化为数字。\r\n● 使用数据库特定的敏感字符转义函数（比如 mysql_escape_string() 和 sql_escape_string()）把用户提交上来的非数字数据进行转义。如果数据库没有专门的敏感字符转义功能的话 addslashes() 和 str_replace() 可以代替完成这个工作。\r\n● 要不择手段避免显示出任何有关数据库的信心，尤其是数据库结构。参见错误报告和错误处理函数。\r\n● 也可以选择使用数据库的存储过程和预定义指针等特性来抽象数库访问，使用户不能直接访问数据表和视图。但这个办法又有别的影响。\r\n● 在允许的情况下，使用代码或数据库系统保存查询日志也是一个好办法。显然，日志并不能防止任何攻击，但利用它可以跟踪到哪个程序曾经被尝试攻击过。日志本身没用，要查阅其中包含的信息才行。毕竟，更多的信息总比没有要好。\r\n\r\n2）使用PDO防止SQL注入\r\nPDO防注入原理分析以及使用PDO的注意事项：https://my.oschina.net/zxu/blog/148432\r\n<h2>二. 验证码</h2>\r\n对于识别验证码的程序来说，最难的部分是验证字符的切割和特征码的建立，而国内很多程序员只做验证码时，总是喜欢在验证码加很多干扰素，干扰线，影响效果不说，还达不到很好的效果；所以，要想使自己验证码难于本识别，只做下面两点就够了\r\n● 字符粘连，最好所有的字符都有粘连的部分；\r\n● 不要使用规格字符，验证码的各个部分使用不同比例的缩放或者旋转。\r\n只要做到这两点，或者这两点的变形，识别程序就很难识别。\r\n<h2>三. 刷新提交</h2>\r\n<h3>场景：</h3>\r\n● 点击提交按钮两次。\r\n● 点击刷新按钮。\r\n● 使用浏览器后退按钮重复之前的操作，导致重复提交表单。\r\n● 使用浏览器历史记录重复提交表单。\r\n● 浏览器重复的HTTP请求。\r\n用户提交表单时可能因为网速的原因，或者网页被恶意刷新，致使同一条记录重复插入到数据库中，这是一个比较棘手的问题。我们可以从客户端和服务器端一起着手，设法避免同一表单的重复提交。\r\n<h3>有效策略：</h3>\r\n● js禁掉提交按钮。\r\n表单提交后使用Javascript使提交按钮disable。这种方法防止心急的用户多次点击按钮。但有个问题，如果客户端把Javascript给禁止掉，这种方法就无效了。\r\n● 使用Post/Redirect/Get模式。\r\n在提交后执行页面重定向，这就是所谓的Post-Redirect-Get (PRG)模式。简言之，当用户提交了表单后，你去执行一个客户端的重定向，转到提交成功信息页面。这能避免用户按F5导致的重复提交，而其也不会出现浏览器表单重复提交的警告，也能消除按浏览器前进和后退按导致的同样问题。\r\n● 在session中存放一个特殊标志。\r\n当表单页面被请求时，生成一个特殊的字符标志串，存在session中，同时放在表单的隐藏域里。接受处理表单数据时，检查标识字串是否存在，并立即从session中删除它，然后正常处理数据。\r\n如果发现表单提交里没有有效的标志串，这说明表单已经被提交过了，忽略这次提交。\r\n● 使用header函数转向\r\n当用户提交表单，服务器端处理后立即转向其他的页面，代码如下所示。\r\n\r\n[php]\r\nif (isset($_POST[\'action\']) &amp;&amp; $_POST[\'action\'] == \'submitted\') {\r\n     //处理数据，如插入数据后，立即转向到其他页面\r\n     header(\'location:submits_success.php\');\r\n}\r\n\r\n[/php]\r\n\r\n这样，即使用户使用刷新键，也不会导致表单的重复提交，因为已经转向新的页面，而这个页面脚本已经不理会任何提交的数据了。\r\n● 在数据库里添加约束。\r\n在数据库里添加唯一约束或创建唯一索引，防止出现重复数据。这是最有效的防止重复提交数据的方法。\r\n● 使用Cookie处理\r\n使用Cookie记录表单提交的状态，根据其状态可以检查是否已经提交表单。如果客户端禁止了Cookie，该方法将不起任何作用，这点请注意。\r\n\r\n&nbsp;\r\n<h2>四. DOS攻击</h2>\r\n防止 DDoS 攻击的方式：\r\n● 减少公开暴露\r\n● 利用扩展和冗余\r\n● 充足的网络带宽保证\r\n● 分布式服务拒绝 DDoS 攻击\r\n● 实时监控系统性能\r\n● 这里提供一个简单的参考方法，修改php.ini文件\r\n1) \"disable_functions\"改成gzinflate，默认是放空\r\n2) ”allow_url_fopen“设为Off\r\n3) php_sockets.dll 把这个模块打开\r\n重启使配置生效，一般可以抵御掉DDOS攻击。\r\n● 51CTOblog的DDOS攻击与防御专题：<a href=\"http://blog.51cto.com/zt/282\" target=\"_blank\">http://blog.51cto.com/zt/282</a>\r\n\r\n&nbsp;\r\n<h2>五. 跨域攻击</h2>\r\n以下内容来自：<a href=\"https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/\" target=\"_blank\">https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/</a>\r\n<h3>XSS</h3>\r\nXSS全称“跨站脚本”，是注入攻击的一种。其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。\r\n防止 XSS 的根本之道还是过滤用户输入。用户输入总是不可信任的，这点对于 Web 开发者应该是常识。\r\n如果我们不需要用户输入 HTML 而只想让他们输入纯文本，那么把所有用户输入进行 HTML 转义输出是个不错的做法。似乎很多 Web 开发框架、模版引擎的开发者也发现了这一点，Django 内置模版和 Jinja2 模版总是默认转义输出变量的。如果没有使用它们，我们自己也可以这么做。PHP 可以用 htmlspecialchars 函数，Python 可以导入 cgi 模块用其中的 cgi.escape 函数。如果使用了某款模版引擎，那么其必自带了方便快捷的转义方式。\r\n对于复杂的情况，简单的方法就是白名单重新整理。\r\n“白名单”消毒 HTML 标签和属性（Sanitize HTML）的开源解决方案：\r\nJavaScript: <a href=\"https://github.com/punkave/sanitize-html\" target=\"_blank\">sanitize-html</a>\r\nPHP: <a href=\"http://htmlpurifier.org/\" target=\"_blank\">htmlpurifier </a>\r\n<h3>CSRF</h3>\r\nCSRF 和 XSS 根本是两个不同维度上的分类。XSS 是实现 CSRF 的诸多途径中的一条，但绝对不是唯一的一条。一般习惯上把通过 XSS 来实现的 CSRF 称为 XSRF。CSRF 的全称是“跨站请求伪造”。CSRF 的全称是“跨站请求伪造”，而 XSS 的全称是“跨站脚本”。看起来有点相似，它们都是属于跨站攻击——不攻击服务器端而攻击正常访问网站的用户。CSRF 顾名思义，是伪造请求，冒充用户在站内的正常操作。我们知道，绝大多数网站是通过 cookie 等方式辨识用户身份（包括使用服务器端 Session 的网站，因为 Session ID 也是大多保存在 cookie 里面的），再予以授权的。所以要伪造用户的正常操作，最好的方法是通过 XSS 或链接欺骗等途径，让用户在本机（即拥有身份 cookie 的浏览器端）发起用户所不知道的请求。\r\nCSRF 并不一定要有站内的输入，因为它并不属于注入攻击，而是请求伪造。被伪造的请求可以是任何来源，而非一定是站内。所以我们唯有一条路可行，就是过滤请求的处理者。\r\n首先可以提高的一个门槛，就是改良站内 API 的设计。对于发布帖子这一类创建资源的操作，应该只接受 POST 请求，而 GET 请求应该只浏览而不改变服务器端资源。\r\n接下来我们就可以用比较简单也比较有效的方法来防御 CSRF，这个方法就是“请求令牌”。实现方法非常简单，首先服务器端要以某种策略生成随机字符串，作为令牌（token），保存在 Session 里。然后在发出请求的页面，把该令牌以隐藏域一类的形式，与其他信息一并发出。在接收请求的页面，把接收到的信息中的令牌与 Session 中的令牌比较，只有一致的时候才处理请求，否则返回 HTTP 403 拒绝请求或者要求用户重新登录验证身份。\r\n\r\n如下也列出一些据说能有效防范 CSRF，其实效果甚微的方式甚至无效的做法：\r\n通过 referer 判定来源页面：referer 是在 HTTP Request Head 里面的，也就是由请求的发送者决定的。如果我喜欢，可以给 referer 任何值。当然这个做法并不是毫无作用，起码可以防小白。但我觉得性价比不如令牌。\r\n过滤所有用户发布的链接：这个是最无效的做法，因为首先攻击者不一定要从站内发起请求（上面提到过了），而且就算从站内发起请求，途径也远远不止链接一条。比如 &lt;img src=\"./create_post.php\" /&gt; 就是个不错的选择，还不需要用户去点击，只要用户的浏览器会自动加载图片，就会自动发起请求。\r\n在请求发起页面用 alert 弹窗提醒用户：这个方法看上去能干扰站外通过 iframe 发起的 CSRF，但攻击者也可以考虑用 window.alert = function(){}; 把 alert 弄哑，或者干脆脱离 iframe，使用 Flash 来达到目的。', 'PHP开发之网站安全', '', 'publish', 'open', 'open', '', 'php%e5%bc%80%e5%8f%91%e4%b9%8b%e7%bd%91%e7%ab%99%e5%ae%89%e5%85%a8', '', '', '2017-01-11 17:03:32', '2017-01-11 09:03:32', '', 0, 'http://www.gzpblog.com/?p=582', 0, 'post', '', 1),
(561, 1, '2016-12-30 11:08:34', '2016-12-30 03:08:34', '现在一个项目，需要频繁调用API从数据层获取数据，数据层业务层分离。封装了一个基于此的cURL封装类：\r\n\r\n[php]\r\n&lt;pre&gt;&lt;?php\r\n/**\r\n * cURL封装类\r\n *\r\n * @author guo\r\n * @date 2016-12-17\r\n */\r\nnamespace app\\home\\Request;\r\nclass cURL {\r\n    private static $url = \'\';         // 访问的url\r\n    private static $oriUrl = \'\';      // Referer url,告诉服务器来源页面\r\n    private static $data = array();   // 可能发出的请求参数 get和post都有数组传参方式\r\n    private static $method;           // 访问方式，默认是GET请求\r\n    private static $cookie = \'\';      // 是否传递cookie; 默认为空, 需要时传入cookie参数\r\n    private static $returnCookie = 0; // 是否返回cookie; 默认0不返回\r\n\r\n    /*\r\n     * 发送请求入口\r\n     * **/\r\n    public static function send($url, $data = array(), $method = \'get\', $cookie = \'\', $returnCookie = 0)\r\n    {\r\n        //判断传入的url\r\n        if (!$url){\r\n            return self::output(\'100\', \'url不能为空!\', \'\');\r\n        }\r\n        self::$url = $url;\r\n        self::$data = $data;\r\n        self::$method = $method;\r\n        self::$oriUrl = request()-&gt;url(true);//助手函数request获取当前url\r\n        self::$cookie = $cookie;\r\n        self::$returnCookie = $returnCookie;\r\n        // 请求方式判断\r\n        if ( !in_array(self::$method, array(\'get\', \'post\') )) {\r\n            return self::output(\'101\', \'非法请求方式!\', \'\');\r\n        }\r\n\r\n        return self::doRequest(self::$method);\r\n    }\r\n\r\n    /**\r\n     * 基础发起curl请求函数\r\n     * @param string $method 请求方式, get或者post\r\n     */\r\n    private static function doRequest($method)\r\n    {\r\n        $curl = curl_init(); //初始化curl\r\n        /* get方式 */\r\n        if ($method != 1) {\r\n            self::$data = empty(self::$data) ? \'\' : self::dealGetData(self::$data);//处理get数据\r\n            self::$url  = self::$url.self::$data;\r\n        }\r\n        curl_setopt($curl, CURLOPT_URL, self::$url); //抓取指定网页\r\n        curl_setopt($curl, CURLOPT_USERAGENT, \'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\');\r\n        curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);\r\n        curl_setopt($curl, CURLOPT_AUTOREFERER, 1);\r\n        curl_setopt($curl, CURLOPT_REFERER, self::$oriUrl); //来源,获取的当前站点url\r\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);//要求结果为字符串且输出到屏幕上\r\n        /* post方式数据传递 */\r\n        if ($method == 1)\r\n        {\r\n            curl_setopt($curl, CURLOPT_POST, 1);\r\n            curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query(self::$data));\r\n        }\r\n\r\n        /* 如果提交了cookie参数, 传递cookie参数 */\r\n        if(self::$cookie) {\r\n            curl_setopt($curl, CURLOPT_COOKIE, self::$cookie);\r\n        }\r\n\r\n        curl_setopt($curl, CURLOPT_HEADER, self::$returnCookie); //是否返回cookie\r\n        curl_setopt($curl, CURLOPT_TIMEOUT, 30); //超时设置\r\n\r\n        /* 执行并获取数据 */\r\n        $result = curl_exec($curl);\r\n\r\n        /* 出错时的操作 */\r\n        $error_num = curl_error($curl); // 获取错误码,正常时为0\r\n        //出错时\r\n        if ($error_num &gt;0){\r\n            $error = include \'cURLError.php\'; //载入错误信息\r\n            $error_msg = $error[$error_num]; //获取对应错误信息\r\n            return self::output($error_num, $error_msg, \'\');\r\n        } else {\r\n            $error_num = \'0\';\r\n            $error_msg = &quot;请求正常！&quot;;\r\n            curl_close($curl); //关闭\r\n\r\n            /* 如果返回cookie */\r\n            if(self::$returnCookie){\r\n                list($header, $body) = explode(&quot;\\r\\n\\r\\n&quot;, $result, 2);\r\n                preg_match_all(&quot;/Set\\-Cookie:([^;]*);/&quot;, $header, $matches);\r\n                $info[\'cookie\']  = substr($matches[1][0], 1);\r\n                $info[\'content\'] = $body;\r\n                return self::output($error_num, $error_msg, $info);\r\n            } else {\r\n                return self::output($error_num, $error_msg, $result);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * 处理get数据\r\n     * @param array $data 传入的需要处理的数据\r\n     * @return string 包含参数与值的字符串\r\n     * **/\r\n    public static function dealGetData($data)\r\n    {\r\n        $output = \'?\';\r\n        foreach ($data as $k =&gt; $v){\r\n            $output .= $k.\'=\'.$v.\'&amp;\';\r\n        }\r\n        $output = substr($output, 0 , -1);\r\n        return $output;\r\n    }\r\n\r\n    /*\r\n     * 返回数据\r\n     * @param int $code 状态码,为0时是ok的没有出错正常请求\r\n     * @param string $info  返回的错误信息\r\n     * @param array $result 返回的数据\r\n     * @return array\r\n     * **/\r\n    public static function output($code, $info, $result)\r\n    {\r\n        return array(\r\n            \'code\'   =&gt; $code,\r\n            \'info\'   =&gt; $info,\r\n            \'result\' =&gt; $result\r\n        );\r\n    }\r\n}&lt;/pre&gt;\r\n[/php]\r\n', '基于TP5的cURL封装类', '', 'publish', 'open', 'open', '', '%e5%9f%ba%e4%ba%8etp5%e7%9a%84curl%e5%b0%81%e8%a3%85%e7%b1%bb', '', '', '2016-12-30 11:11:19', '2016-12-30 03:11:19', '', 0, 'http://www.gzpblog.com/?p=561', 0, 'post', '', 0),
(618, 1, '2017-02-08 16:12:06', '2017-02-08 08:12:06', '把Git的基础只是全部过了一遍，是看的<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\">Git的官方Documentation</a>，现在基本上能用Git工作了。不过看到阮一峰老师总结的命令非常不错，基本上把这些操作熟悉就够了，以下内容转自：<a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?20170208142509\" target=\"_blank\">常用 Git 命令清单 - 阮一峰的网络日志</a>\r\n\r\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/git-work.png\"><img class=\"alignnone wp-image-616\" src=\"http://files.gzpblog.com/wp/2017/02/git-work-1024x297.png\" alt=\"\" width=\"787\" height=\"228\" /></a>\r\n\r\n几个专用名词的译名如下：\r\n<ul>\r\n 	<li>Workspace：工作区</li>\r\n 	<li>Index / Stage：暂存区</li>\r\n 	<li>Repository：仓库区（或本地仓库）</li>\r\n 	<li>Remote：远程仓库</li>\r\n</ul>\r\n<h2>一、新建代码库</h2>\r\n# 在当前目录新建一个Git代码库\r\n$ git init\r\n# 新建一个目录，将其初始化为Git代码库\r\n$ git init [project-name]\r\n# 下载一个项目和它的整个代码历史\r\n$ git clone [url]\r\n<h2>二、配置</h2>\r\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\r\n# 显示当前的Git配置\r\n$ git config --list\r\n# 编辑Git配置文件\r\n$ git config -e [--global]\r\n# 设置提交代码时的用户信息\r\n$ git config [--global] user.name \"[name]\"\r\n$ git config [--global] user.email \"[email address]\"\r\n<h2>三、增加/删除文件</h2>\r\n# 添加指定文件到暂存区\r\n$ git add [file1] [file2] ...\r\n# 添加指定目录到暂存区，包括子目录\r\n$ git add [dir]\r\n# 添加当前目录的所有文件到暂存区\r\n$ git add .\r\n# 添加每个变化前，都会要求确认\r\n# 对于同一个文件的多处变化，可以实现分次提交\r\n$ git add -p\r\n# 删除工作区文件，并且将这次删除放入暂存区\r\n$ git rm [file1] [file2] ...\r\n# 停止追踪指定文件，但该文件会保留在工作区\r\n$ git rm --cached [file]\r\n# 改名文件，并且将这个改名放入暂存区\r\n$ git mv [file-original] [file-renamed]\r\n<h2>四、代码提交</h2>\r\n# 提交暂存区到仓库区\r\n$ git commit -m [message]\r\n# 提交暂存区的指定文件到仓库区\r\n$ git commit [file1] [file2] ... -m [message]\r\n# 提交工作区自上次commit之后的变化，直接到仓库区\r\n$ git commit -a\r\n# 提交时显示所有diff信息\r\n$ git commit -v\r\n# 使用一次新的commit，替代上一次提交\r\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\r\n$ git commit --amend -m [message]\r\n# 重做上一次commit，并包括指定文件的新变化\r\n$ git commit --amend [file1] [file2] ...\r\n<h2>五、分支</h2>\r\n# 列出所有本地分支\r\n$ git branch\r\n# 列出所有远程分支\r\n$ git branch -r\r\n# 列出所有本地分支和远程分支\r\n$ git branch -a\r\n# 新建一个分支，但依然停留在当前分支\r\n$ git branch [branch-name]\r\n# 新建一个分支，并切换到该分支\r\n$ git checkout -b [branch]\r\n# 新建一个分支，指向指定commit\r\n$ git branch [branch] [commit]\r\n# 新建一个分支，与指定的远程分支建立追踪关系\r\n$ git branch --track [branch] [remote-branch]\r\n# 切换到指定分支，并更新工作区\r\n$ git checkout [branch-name]\r\n# 切换到上一个分支\r\n$ git checkout -\r\n# 建立追踪关系，在现有分支与指定的远程分支之间\r\n$ git branch --set-upstream [branch] [remote-branch]\r\n# 合并指定分支到当前分支\r\n$ git merge [branch]\r\n# 选择一个commit，合并进当前分支\r\n$ git cherry-pick [commit]\r\n# 删除分支\r\n$ git branch -d [branch-name]\r\n# 删除远程分支\r\n$ git push origin --delete [branch-name]\r\n$ git branch -dr [remote/branch]\r\n<h2>六、标签</h2>\r\n# 列出所有tag\r\n$ git tag\r\n# 新建一个tag在当前commit\r\n$ git tag [tag]\r\n# 新建一个tag在指定commit\r\n$ git tag [tag] [commit]\r\n# 删除本地tag\r\n$ git tag -d [tag]\r\n# 删除远程tag\r\n$ git push origin :refs/tags/[tagName]\r\n# 查看tag信息\r\n$ git show [tag]\r\n# 提交指定tag\r\n$ git push [remote] [tag]\r\n# 提交所有tag\r\n$ git push [remote] --tags\r\n# 新建一个分支，指向某个tag\r\n$ git checkout -b [branch] [tag]\r\n<h2>七、查看信息</h2>\r\n# 显示有变更的文件\r\n$ git status\r\n# 显示当前分支的版本历史\r\n$ git log\r\n# 显示commit历史，以及每次commit发生变更的文件\r\n$ git log --stat\r\n# 搜索提交历史，根据关键词\r\n$ git log -S [keyword]\r\n# 显示某个commit之后的所有变动，每个commit占据一行\r\n$ git log [tag] HEAD --pretty=format:%s\r\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\r\n$ git log [tag] HEAD --grep feature\r\n# 显示某个文件的版本历史，包括文件改名\r\n$ git log --follow [file]\r\n$ git whatchanged [file]\r\n# 显示指定文件相关的每一次diff\r\n$ git log -p [file]\r\n# 显示过去5次提交\r\n$ git log -5 --pretty --oneline\r\n# 显示所有提交过的用户，按提交次数排序\r\n$ git shortlog -sn\r\n# 显示指定文件是什么人在什么时间修改过\r\n$ git blame [file]\r\n# 显示暂存区和工作区的差异\r\n$ git diff\r\n# 显示暂存区和上一个commit的差异\r\n$ git diff --cached [file]\r\n# 显示工作区与当前分支最新commit之间的差异\r\n$ git diff HEAD\r\n# 显示两次提交之间的差异\r\n$ git diff [first-branch]...[second-branch]\r\n# 显示今天你写了多少行代码\r\n$ git diff --shortstat \"@{0 day ago}\"\r\n# 显示某次提交的元数据和内容变化\r\n$ git show [commit]\r\n# 显示某次提交发生变化的文件\r\n$ git show --name-only [commit]\r\n# 显示某次提交时，某个文件的内容\r\n$ git show [commit]:[filename]\r\n# 显示当前分支的最近几次提交\r\n$ git reflog\r\n<h2>八、远程同步</h2>\r\n# 下载远程仓库的所有变动\r\n$ git fetch [remote]\r\n# 显示所有远程仓库\r\n$ git remote -v\r\n# 显示某个远程仓库的信息\r\n$ git remote show [remote]\r\n# 增加一个新的远程仓库，并命名\r\n$ git remote add [shortname] [url]\r\n# 取回远程仓库的变化，并与本地分支合并\r\n$ git pull [remote] [branch]\r\n# 上传本地指定分支到远程仓库\r\n$ git push [remote] [branch]\r\n# 强行推送当前分支到远程仓库，即使有冲突\r\n$ git push [remote] --force\r\n# 推送所有分支到远程仓库\r\n$ git push [remote] --all\r\n<h2>九、撤销</h2>\r\n# 恢复暂存区的指定文件到工作区\r\n$ git checkout [file]\r\n# 恢复某个commit的指定文件到暂存区和工作区\r\n$ git checkout [commit] [file]\r\n# 恢复暂存区的所有文件到工作区\r\n$ git checkout .\r\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\r\n$ git reset [file]\r\n# 重置暂存区与工作区，与上一次commit保持一致\r\n$ git reset --hard\r\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\r\n$ git reset [commit]\r\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\r\n$ git reset --hard [commit]\r\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\r\n$ git reset --keep [commit]\r\n# 新建一个commit，用来撤销指定commit\r\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\r\n$ git revert [commit]\r\n# 暂时将未提交的变化移除，稍后再移入\r\n$ git stash\r\n$ git stash pop\r\n<h2>十、其他</h2>\r\n# 生成一个可供发布的压缩包\r\n$ git archive', '常用 Git 命令清单', '', 'inherit', 'closed', 'closed', '', '615-revision-v1', '', '', '2017-02-08 16:12:06', '2017-02-08 08:12:06', '', 615, 'http://www.gzpblog.com/20170208/618.html', 0, 'revision', '', 0),
(563, 1, '2016-12-30 14:55:02', '2016-12-30 06:55:02', '高高兴兴封装了个cURL类，准备开始搞起，在本地调用本地写好的接口，然而发现请求没有效，一直在转圈圈，没有效果，然后报错30秒超时错误。提示是在这里出错了：\r\n\r\n[php]\r\n$result = curl_exec($curl);\r\n[/php]\r\n\r\n那么意思就是请求是正常的，只不过另一端没反应。找到了问题的根源在于，windows下的Nginx并发配置是没有效果的。\r\n\r\n之前搭建环境时写的start_nginx.bat文件如下：\r\n\r\n[code]\r\n@echo off\r\nREM Windows 下无效\r\nREM set PHP_FCGI_CHILDREN=5\r\n\r\nREM 每个进程处理的最大请求数，或设置为 Windows 环境变量\r\nset PHP_FCGI_MAX_REQUESTS=1000\r\n\r\necho Starting PHP FastCGI...\r\nRunHiddenConsole D:/wnmp/php-5.6/php-cgi.exe -b 127.0.0.1:9000 -c D:/wnmp/php-5.6/php.ini\r\n\r\necho Starting nginx...\r\nRunHiddenConsole D:/wnmp/nginx-1.10.2/nginx.exe -p D:/wnmp/nginx-1.10.2\r\n\r\nexit\r\n[/code]\r\n\r\n其中的，PHP_FCGI_CHILDREN=5，PHP_FCGI_MAX_REQUESTS=1000是没有效果的。\r\n\r\n<strong>解决方法：</strong>\r\n<pre>再去监听一个端口:\r\n\r\n</pre>\r\n\r\n[code]\r\necho Starting PHP FastCGI...\r\nRunHiddenConsole D:/wnmp/php-5.6/php-cgi.exe -b 127.0.0.1:9000 -c D:/wnmp/php-5.6/php.ini\r\nRunHiddenConsole D:/wnmp/php-5.6/php-cgi.exe -b 127.0.0.1:9001 -c D:/wnmp/php-5.6/php.ini\r\n[/code]\r\n\r\n这样就在启动时，再运行一个cgi去监听9001端口；\r\n\r\n重启nginx后cmd下执行netstat -a看一下：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2016/12/fastcgi1.png\"><img class=\"alignnone size-full wp-image-564\" src=\"http://files.gzpblog.com/wp/2016/12/fastcgi1.png\" alt=\"\" width=\"650\" height=\"364\" /></a>\r\n\r\n进程里已经监听了9000和9001。php-cgi搞定后需要解决nginx配置，假设nginx.conf配置是这样：\r\n\r\n[code]\r\n\r\nlocation ~ \\.php {\r\nroot D:/wnmp/www;\r\nfastcgi_pass 127.0.0.1:9000;\r\nfastcgi_index index.php;\r\nfastcgi_split_path_info ^(.+\\.php)(.*)$;\r\nfastcgi_param PATH_INFO $fastcgi_path_info;\r\nfastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\r\ninclude fastcgi_params;\r\n}\r\n\r\n[/code]\r\n\r\n现在在 http{ 下增加：\r\n\r\n[code]\r\n\r\nupstream fastcgi_backend {\r\nserver 127.0.0.1:9000;\r\nserver 127.0.0.1:9001;\r\n}\r\n\r\n[/code]\r\n\r\n然后将server下的以上配置改为：\r\n\r\n[code]\r\n\r\nlocation ~ \\.php {\r\nroot D:/wnmp/www;\r\nfastcgi_pass fastcgi_backend;\r\nfastcgi_index index.php;\r\nfastcgi_split_path_info ^(.+\\.php)(.*)$;\r\nfastcgi_param PATH_INFO $fastcgi_path_info;\r\nfastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\r\ninclude fastcgi_params;\r\n}\r\n\r\n[/code]\r\n\r\n配置完重启，发现本地localhost接口已经可以调用：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2016/12/fastcgi2.png\"><img class=\"alignnone size-large wp-image-565\" src=\"http://files.gzpblog.com/wp/2016/12/fastcgi2-1024x38.png\" alt=\"\" width=\"1024\" height=\"38\" /></a>\r\n\r\nwindows的nignx+php-cgi并发问题已经解决，线上linux环境时不用这么蛋疼的，问题在于windows下没有fpm，nginx自己无法解决并发问题，需要手动去开启cgi进程。', 'windows下解决Nginx+php-cgi线程并发问题', '', 'publish', 'open', 'open', '', 'windows%e4%b8%8b%e8%a7%a3%e5%86%b3nginxphp-cgi%e7%ba%bf%e7%a8%8b%e5%b9%b6%e5%8f%91%e9%97%ae%e9%a2%98', '', '', '2016-12-30 14:55:02', '2016-12-30 06:55:02', '', 0, 'http://www.gzpblog.com/?p=563', 0, 'post', '', 0),
(564, 1, '2016-12-30 14:33:08', '2016-12-30 06:33:08', '', 'fastcgi1', '', 'inherit', 'open', 'closed', '', 'fastcgi1', '', '', '2016-12-30 14:33:08', '2016-12-30 06:33:08', '', 563, 'http://www.gzpblog.com/wp-content/uploads/2016/12/fastcgi1.png', 0, 'attachment', 'image/png', 0),
(565, 1, '2016-12-30 14:33:14', '2016-12-30 06:33:14', '', 'fastcgi2', '', 'inherit', 'open', 'closed', '', 'fastcgi2', '', '', '2016-12-30 14:33:14', '2016-12-30 06:33:14', '', 563, 'http://www.gzpblog.com/wp-content/uploads/2016/12/fastcgi2.png', 0, 'attachment', 'image/png', 0),
(617, 1, '2017-02-08 16:11:02', '2017-02-08 08:11:02', '把Git的基础只是全部过了一遍，是看的Git的官方Documentation，现在基本上能用Git工作了。不过看到阮一峰老师总结的命令非常不错，基本上把这些操作熟悉就够了，以下内容转自：<a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?20170208142509\" target=\"_blank\">常用 Git 命令清单 - 阮一峰的网络日志</a>\r\n\r\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/git-work.png\"><img class=\"alignnone  wp-image-616\" src=\"http://files.gzpblog.com/wp/2017/02/git-work-1024x297.png\" alt=\"\" width=\"787\" height=\"228\" /></a>\r\n\r\n几个专用名词的译名如下：\r\n<ul>\r\n 	<li>Workspace：工作区</li>\r\n 	<li>Index / Stage：暂存区</li>\r\n 	<li>Repository：仓库区（或本地仓库）</li>\r\n 	<li>Remote：远程仓库</li>\r\n</ul>\r\n<h2>一、新建代码库</h2>\r\n# 在当前目录新建一个Git代码库\r\n$ git init\r\n# 新建一个目录，将其初始化为Git代码库\r\n$ git init [project-name]\r\n# 下载一个项目和它的整个代码历史\r\n$ git clone [url]\r\n<h2>二、配置</h2>\r\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\r\n# 显示当前的Git配置\r\n$ git config --list\r\n# 编辑Git配置文件\r\n$ git config -e [--global]\r\n# 设置提交代码时的用户信息\r\n$ git config [--global] user.name \"[name]\"\r\n$ git config [--global] user.email \"[email address]\"\r\n<h2>三、增加/删除文件</h2>\r\n# 添加指定文件到暂存区\r\n$ git add [file1] [file2] ...\r\n# 添加指定目录到暂存区，包括子目录\r\n$ git add [dir]\r\n# 添加当前目录的所有文件到暂存区\r\n$ git add .\r\n# 添加每个变化前，都会要求确认\r\n# 对于同一个文件的多处变化，可以实现分次提交\r\n$ git add -p\r\n# 删除工作区文件，并且将这次删除放入暂存区\r\n$ git rm [file1] [file2] ...\r\n# 停止追踪指定文件，但该文件会保留在工作区\r\n$ git rm --cached [file]\r\n# 改名文件，并且将这个改名放入暂存区\r\n$ git mv [file-original] [file-renamed]\r\n<h2>四、代码提交</h2>\r\n# 提交暂存区到仓库区\r\n$ git commit -m [message]\r\n# 提交暂存区的指定文件到仓库区\r\n$ git commit [file1] [file2] ... -m [message]\r\n# 提交工作区自上次commit之后的变化，直接到仓库区\r\n$ git commit -a\r\n# 提交时显示所有diff信息\r\n$ git commit -v\r\n# 使用一次新的commit，替代上一次提交\r\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\r\n$ git commit --amend -m [message]\r\n# 重做上一次commit，并包括指定文件的新变化\r\n$ git commit --amend [file1] [file2] ...\r\n<h2>五、分支</h2>\r\n# 列出所有本地分支\r\n$ git branch\r\n# 列出所有远程分支\r\n$ git branch -r\r\n# 列出所有本地分支和远程分支\r\n$ git branch -a\r\n# 新建一个分支，但依然停留在当前分支\r\n$ git branch [branch-name]\r\n# 新建一个分支，并切换到该分支\r\n$ git checkout -b [branch]\r\n# 新建一个分支，指向指定commit\r\n$ git branch [branch] [commit]\r\n# 新建一个分支，与指定的远程分支建立追踪关系\r\n$ git branch --track [branch] [remote-branch]\r\n# 切换到指定分支，并更新工作区\r\n$ git checkout [branch-name]\r\n# 切换到上一个分支\r\n$ git checkout -\r\n# 建立追踪关系，在现有分支与指定的远程分支之间\r\n$ git branch --set-upstream [branch] [remote-branch]\r\n# 合并指定分支到当前分支\r\n$ git merge [branch]\r\n# 选择一个commit，合并进当前分支\r\n$ git cherry-pick [commit]\r\n# 删除分支\r\n$ git branch -d [branch-name]\r\n# 删除远程分支\r\n$ git push origin --delete [branch-name]\r\n$ git branch -dr [remote/branch]\r\n<h2>六、标签</h2>\r\n# 列出所有tag\r\n$ git tag\r\n# 新建一个tag在当前commit\r\n$ git tag [tag]\r\n# 新建一个tag在指定commit\r\n$ git tag [tag] [commit]\r\n# 删除本地tag\r\n$ git tag -d [tag]\r\n# 删除远程tag\r\n$ git push origin :refs/tags/[tagName]\r\n# 查看tag信息\r\n$ git show [tag]\r\n# 提交指定tag\r\n$ git push [remote] [tag]\r\n# 提交所有tag\r\n$ git push [remote] --tags\r\n# 新建一个分支，指向某个tag\r\n$ git checkout -b [branch] [tag]\r\n<h2>七、查看信息</h2>\r\n# 显示有变更的文件\r\n$ git status\r\n# 显示当前分支的版本历史\r\n$ git log\r\n# 显示commit历史，以及每次commit发生变更的文件\r\n$ git log --stat\r\n# 搜索提交历史，根据关键词\r\n$ git log -S [keyword]\r\n# 显示某个commit之后的所有变动，每个commit占据一行\r\n$ git log [tag] HEAD --pretty=format:%s\r\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\r\n$ git log [tag] HEAD --grep feature\r\n# 显示某个文件的版本历史，包括文件改名\r\n$ git log --follow [file]\r\n$ git whatchanged [file]\r\n# 显示指定文件相关的每一次diff\r\n$ git log -p [file]\r\n# 显示过去5次提交\r\n$ git log -5 --pretty --oneline\r\n# 显示所有提交过的用户，按提交次数排序\r\n$ git shortlog -sn\r\n# 显示指定文件是什么人在什么时间修改过\r\n$ git blame [file]\r\n# 显示暂存区和工作区的差异\r\n$ git diff\r\n# 显示暂存区和上一个commit的差异\r\n$ git diff --cached [file]\r\n# 显示工作区与当前分支最新commit之间的差异\r\n$ git diff HEAD\r\n# 显示两次提交之间的差异\r\n$ git diff [first-branch]...[second-branch]\r\n# 显示今天你写了多少行代码\r\n$ git diff --shortstat \"@{0 day ago}\"\r\n# 显示某次提交的元数据和内容变化\r\n$ git show [commit]\r\n# 显示某次提交发生变化的文件\r\n$ git show --name-only [commit]\r\n# 显示某次提交时，某个文件的内容\r\n$ git show [commit]:[filename]\r\n# 显示当前分支的最近几次提交\r\n$ git reflog\r\n<h2>八、远程同步</h2>\r\n# 下载远程仓库的所有变动\r\n$ git fetch [remote]\r\n# 显示所有远程仓库\r\n$ git remote -v\r\n# 显示某个远程仓库的信息\r\n$ git remote show [remote]\r\n# 增加一个新的远程仓库，并命名\r\n$ git remote add [shortname] [url]\r\n# 取回远程仓库的变化，并与本地分支合并\r\n$ git pull [remote] [branch]\r\n# 上传本地指定分支到远程仓库\r\n$ git push [remote] [branch]\r\n# 强行推送当前分支到远程仓库，即使有冲突\r\n$ git push [remote] --force\r\n# 推送所有分支到远程仓库\r\n$ git push [remote] --all\r\n<h2>九、撤销</h2>\r\n# 恢复暂存区的指定文件到工作区\r\n$ git checkout [file]\r\n# 恢复某个commit的指定文件到暂存区和工作区\r\n$ git checkout [commit] [file]\r\n# 恢复暂存区的所有文件到工作区\r\n$ git checkout .\r\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\r\n$ git reset [file]\r\n# 重置暂存区与工作区，与上一次commit保持一致\r\n$ git reset --hard\r\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\r\n$ git reset [commit]\r\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\r\n$ git reset --hard [commit]\r\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\r\n$ git reset --keep [commit]\r\n# 新建一个commit，用来撤销指定commit\r\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\r\n$ git revert [commit]\r\n# 暂时将未提交的变化移除，稍后再移入\r\n$ git stash\r\n$ git stash pop\r\n<h2>十、其他</h2>\r\n# 生成一个可供发布的压缩包\r\n$ git archive', '常用 Git 命令清单', '', 'inherit', 'closed', 'closed', '', '615-revision-v1', '', '', '2017-02-08 16:11:02', '2017-02-08 08:11:02', '', 615, 'http://www.gzpblog.com/20170208/617.html', 0, 'revision', '', 0),
(569, 1, '2017-01-01 09:44:16', '2017-01-01 01:44:16', '2016年，可以说是最折腾的一年。2016的最后一天，是在广州的医院里陪老妈度过的。\r\n\r\n&nbsp;\r\n\r\n先回顾一下学习工作方面吧，实际上一月份才开始找工作，过年前几天拼了命找呀，就想着年后上班，主要是想在上海稳下来。然后第一份工作，B2B电商平台，卖食品的，实际上我在看到这套程序代码的时候，我是有点接受不来，因为连我这种刚出来混的都觉得这代码有点low。当然，每一份工作都会有所收获，在这里我学到了:熟悉了Ecshop电商系统，基本上能做ecshop的二次开发;用这个项目练了练手，熟悉了一下学了不久的php，熟悉了一些开发过程中中可能会用到的工具，理念，调试方法等等;自己了解了微信公众平台的开发。\r\n\r\n&nbsp;\r\n\r\n第一份工作时间不长，三个月没转正，我就走了，原因是ecshop的二次开发，对于我这种初学者来说，每天重复着在ecshop里添加一些简单的功能，填别人挖的坑，对于我来说提高不大。刚出来混，还是学习深入一点的东西比较好。接下来，一个金融公司，这时候开始独立做app后台了。说实话一开始有点慌，后来过几天之后，就得心应手了，因为比较自由，连框架的选用都是我自己决定，只要我实现了功能就行。在这里，我学会了:熟练了ThinkPHP框架;熟练了命名空间面向对象等一些新的特性;理解了App后台和接口的一些概念，并且能够独立完成这些内容;学会设计一个简单的数据库等。\r\n\r\n&nbsp;\r\n\r\n第二份工作也干得不长，这个项目做完之后，没上线，反而是被停掉了。本来打算至少待一年的，没办法，后来就准备回深圳了。第三份工作，也就是现在，才一个多月，现在准备开始一个云平台的项目。来到这边，我觉得将会有很大的提高，因为其它人也很年轻，也在学习，我有更多的时间去学习和接触新的东西。就这一个多月的时间里，我已经逐渐地在了解学习Redis，composer，git，Nginx等内容了。而且在未来我也要自己抽一些时间去做一些东西了。\r\n\r\n&nbsp;\r\n\r\n总体上，2016年，从上海到深圳，在工作上我觉得是很充实的，学到的东西还是挺多的，而且碰到的同事也都非常不错。就是年尾老妈突然生病这个有点蛋疼，也幸好是回来广东回来得早。\r\n\r\n&nbsp;\r\n\r\n对于2017，技术上，我希望自己能够掌握laravel，swoole，vue.js，不说熟练至少熟悉Linux，看完mysql那本书(真正掌握mysql)，完成一个属于自己的项目，如果有时间学习一下数据结构和算法。生活上，老妈身体健康调整好心态，女朋友顺利来广东，一家人开开心心。当然，要开始想办法赚钱了，现在压力有点大。', '2016回顾总结', '', 'publish', 'open', 'open', '', '2016%e5%9b%9e%e9%a1%be%e6%80%bb%e7%bb%93', '', '', '2017-01-11 17:00:52', '2017-01-11 09:00:52', '', 0, 'http://www.gzpblog.com/?p=569', 0, 'post', '', 1),
(570, 1, '2017-01-01 09:42:23', '2017-01-01 01:42:23', '', 'IMG_0201', '', 'inherit', 'open', 'closed', '', 'img_0201', '', '', '2017-01-01 09:42:23', '2017-01-01 01:42:23', '', 569, 'http://www.gzpblog.com/wp-content/uploads/2017/01/IMG_0201.jpg', 0, 'attachment', 'image/jpeg', 0),
(571, 1, '2017-01-01 09:44:03', '2017-01-01 01:44:03', '', 'IMG_0282', '', 'inherit', 'open', 'closed', '', 'img_0282', '', '', '2017-01-01 09:44:03', '2017-01-01 01:44:03', '', 569, 'http://www.gzpblog.com/wp-content/uploads/2017/01/IMG_0282.jpg', 0, 'attachment', 'image/jpeg', 0),
(614, 1, '2017-02-08 15:57:27', '2017-02-08 07:57:27', '', 'git-logo', '', 'inherit', 'open', 'closed', '', 'git-logo', '', '', '2017-02-08 15:57:27', '2017-02-08 07:57:27', '', 604, 'http://www.gzpblog.com/wp-content/uploads/2017/02/git-logo.png', 0, 'attachment', 'image/png', 0),
(615, 1, '2017-02-08 16:11:36', '2017-02-08 08:11:36', '把Git的基础知识全部过了一遍，是看的<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener noreferrer\">Git的官方Documentation</a>，现在基本上能用Git工作了。不过看到阮一峰老师总结的命令非常不错，基本上把这些操作熟悉就够了，以下内容转自：<a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?20170208142509\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单 - 阮一峰的网络日志</a>；稍作增加与修改。\r\n\r\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/git-work.png\"><img class=\"alignnone wp-image-616\" src=\"http://files.gzpblog.com/wp/2017/02/git-work-1024x297.png\" alt=\"\" width=\"787\" height=\"228\" /></a>\r\n\r\n几个专用名词的译名如下：\r\n<ul>\r\n 	<li>Workspace：工作区</li>\r\n 	<li>Index / Stage：暂存区</li>\r\n 	<li>Repository：仓库区（或本地仓库）</li>\r\n 	<li>Remote：远程仓库</li>\r\n</ul>\r\n<h2>一、新建代码库</h2>\r\n# 在当前目录新建一个Git代码库\r\n$ git init\r\n\r\n# 新建一个目录，将其初始化为Git代码库\r\n$ git init [project-name]\r\n\r\n# 下载一个项目和它的整个代码历史\r\n$ git clone [url]\r\n<h2>二、配置</h2>\r\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\r\n# 显示当前的Git配置\r\n$ git config --list\r\n\r\n# 编辑Git配置文件\r\n$ git config -e [--global]\r\n\r\n# 设置提交代码时的用户信息\r\n$ git config [--global] user.name \"[name]\"\r\n$ git config [--global] user.email \"[email address]\"\r\n<h2>三、增加/删除文件</h2>\r\n# 添加指定文件到暂存区\r\n$ git add [file1] [file2] ...\r\n\r\n# 添加指定目录到暂存区，包括子目录\r\n$ git add [dir]\r\n\r\n# 添加当前目录的所有文件到暂存区\r\n$ git add .\r\n\r\n# 添加每个变化前，都会要求确认\r\n# 对于同一个文件的多处变化，可以实现分次提交\r\n$ git add -p\r\n\r\n# 删除工作区文件，并且将这次删除放入暂存区\r\n$ git rm [file1] [file2] ...\r\n\r\n# 停止追踪指定文件，但该文件会保留在工作区\r\n$ git rm --cached [file]\r\n\r\n# 改名文件，并且将这个改名放入暂存区\r\n$ git mv [file-original] [file-renamed]\r\n<h2>四、代码提交</h2>\r\n# 提交暂存区到仓库区\r\n$ git commit -m [message]\r\n\r\n# 提交暂存区的指定文件到仓库区\r\n$ git commit [file1] [file2] ... -m [message]\r\n\r\n# 提交工作区自上次commit之后的变化，直接到仓库区\r\n$ git commit -a\r\n\r\n# 提交时显示所有diff信息\r\n$ git commit -v\r\n\r\n# 使用一次新的commit，替代上一次提交\r\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\r\n$ git commit --amend -m [message]\r\n\r\n# 重做上一次commit，并包括指定文件的新变化\r\n$ git commit --amend [file1] [file2] ...\r\n<h2>五、分支</h2>\r\n# 列出所有本地分支\r\n$ git branch\r\n\r\n# 列出所有远程分支\r\n$ git branch -r\r\n\r\n# 列出所有本地分支和远程分支\r\n$ git branch -a\r\n\r\n# 新建一个分支，但依然停留在当前分支\r\n$ git branch [branch-name]\r\n\r\n# 新建一个分支，并切换到该分支\r\n$ git checkout -b [branch]\r\n\r\n# 新建一个分支，指向指定commit\r\n$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系\r\n$ git branch --track [branch] [remote-branch]\r\n\r\n# 切换到指定分支，并更新工作区\r\n$ git checkout [branch-name]\r\n\r\n# 切换到上一个分支\r\n$ git checkout -\r\n\r\n# 建立追踪关系，在现有分支与指定的远程分支之间\r\n$ git branch --set-upstream [branch] [remote-branch]\r\n\r\n# 推送新分支到远程，并在远程建立分支和追踪关系\r\n$ git push --set-upstream [branch-name]\r\n\r\n# 合并指定分支到当前分支\r\n$ git merge [branch]\r\n\r\n# 选择一个commit，合并进当前分支\r\n$ git cherry-pick [commit]\r\n\r\n# 删除分支\r\n$ git branch -d [branch-name]\r\n\r\n# 删除远程分支\r\n$ git push origin --delete [branch-name]\r\n$ git branch -dr [remote/branch]\r\n<h2>六、标签</h2>\r\n# 列出所有tag\r\n$ git tag\r\n\r\n# 新建一个tag在当前commit\r\n$ git tag [tag]\r\n\r\n# 新建一个tag在指定commit\r\n$ git tag [tag] [commit]\r\n\r\n# 删除本地tag\r\n$ git tag -d [tag]\r\n\r\n# 删除远程tag\r\n$ git push origin :refs/tags/[tagName]\r\n\r\n# 查看tag信息\r\n$ git show [tag]\r\n\r\n# 提交指定tag\r\n$ git push [remote] [tag]\r\n\r\n# 提交所有tag\r\n$ git push [remote] --tags\r\n\r\n# 新建一个分支，指向某个tag\r\n$ git checkout -b [branch] [tag]\r\n<h2>七、查看信息</h2>\r\n# 显示有变更的文件\r\n$ git status\r\n\r\n# 显示当前分支的版本历史\r\n$ git log\r\n\r\n# 显示commit历史，以及每次commit发生变更的文件\r\n$ git log --stat\r\n\r\n# 搜索提交历史，根据关键词\r\n$ git log -S [keyword]\r\n\r\n# 显示某个commit之后的所有变动，每个commit占据一行\r\n$ git log [tag] HEAD --pretty=format:%s\r\n\r\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\r\n$ git log [tag] HEAD --grep feature\r\n\r\n# 显示某个文件的版本历史，包括文件改名\r\n$ git log --follow [file]\r\n$ git whatchanged [file]\r\n\r\n# 显示指定文件相关的每一次diff\r\n$ git log -p [file]\r\n\r\n# 显示过去5次提交\r\n$ git log -5 --pretty --oneline\r\n\r\n# 显示所有提交过的用户，按提交次数排序\r\n$ git shortlog -sn\r\n\r\n# 显示指定文件是什么人在什么时间修改过\r\n$ git blame [file]\r\n\r\n# 显示暂存区和工作区的差异\r\n$ git diff\r\n\r\n# 显示暂存区和上一个commit的差异\r\n$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异\r\n$ git diff HEAD\r\n\r\n# 显示两次提交之间的差异\r\n$ git diff [first-branch]...[second-branch]\r\n\r\n# 显示今天你写了多少行代码\r\n$ git diff --shortstat \"@{0 day ago}\"\r\n\r\n# 显示某次提交的元数据和内容变化\r\n$ git show [commit]\r\n\r\n# 显示某次提交发生变化的文件\r\n$ git show --name-only [commit]\r\n\r\n# 显示某次提交时，某个文件的内容\r\n$ git show [commit]:[filename]\r\n\r\n# 显示当前分支的最近几次提交\r\n$ git reflog\r\n<h2>八、远程同步</h2>\r\n# 下载远程仓库的所有变动\r\n$ git fetch [remote]\r\n\r\n# 显示所有远程仓库\r\n$ git remote -v\r\n\r\n# 显示某个远程仓库的信息\r\n$ git remote show [remote]\r\n\r\n# 增加一个新的远程仓库，并命名\r\n$ git remote add [shortname] [url]\r\n\r\n# 取回远程仓库的变化，并与本地分支合并\r\n$ git pull [remote] [branch]\r\n\r\n# 上传本地指定分支到远程仓库\r\n$ git push [remote] [branch]\r\n\r\n# 强行推送当前分支到远程仓库，即使有冲突\r\n$ git push [remote] --force\r\n\r\n# 推送所有分支到远程仓库\r\n$ git push [remote] --all\r\n<h2>九、撤销</h2>\r\n# 恢复暂存区的指定文件到工作区\r\n$ git checkout [file]\r\n\r\n# 恢复某个commit的指定文件到暂存区和工作区\r\n$ git checkout [commit] [file]\r\n\r\n# 恢复暂存区的所有文件到工作区\r\n$ git checkout .\r\n\r\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\r\n$ git reset [file]\r\n\r\n# 重置暂存区与工作区，与上一次commit保持一致\r\n$ git reset --hard\r\n\r\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\r\n$ git reset [commit]\r\n\r\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\r\n$ git reset --hard [commit]\r\n\r\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\r\n$ git reset --keep [commit]\r\n\r\n# 新建一个commit，用来撤销指定commit\r\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\r\n$ git revert [commit]\r\n\r\n# 暂时将未提交的变化移除，稍后再移入\r\n$ git stash\r\n$ git stash pop\r\n<h2>十、其他</h2>\r\n# 生成一个可供发布的压缩包\r\n$ git archive\r\n\r\n#配置git对文件名大小写敏感\r\n$ git config core.ignorecase false', '常用 Git 命令清单', '', 'publish', 'open', 'open', '', '%e5%b8%b8%e7%94%a8-git-%e5%91%bd%e4%bb%a4%e6%b8%85%e5%8d%95', '', '', '2017-06-05 18:06:40', '2017-06-05 10:06:40', '', 0, 'http://www.gzpblog.com/?p=615', 0, 'post', '', 0),
(616, 1, '2017-02-08 16:04:37', '2017-02-08 08:04:37', '', 'git-work', '', 'inherit', 'open', 'closed', '', 'git-work', '', '', '2017-02-08 16:04:37', '2017-02-08 08:04:37', '', 615, 'http://www.gzpblog.com/wp-content/uploads/2017/02/git-work.png', 0, 'attachment', 'image/png', 0),
(576, 1, '2017-01-05 11:21:21', '2017-01-05 03:21:21', '关于将数据序列化存储这块，一直有一个疑问，就是serialize和json应该用哪一个更好。\r\n\r\n参考了很多文章和讨论：\r\n\r\n1 <a href=\"http://stackoverflow.com/questions/2574728/serialize-or-json-in-php\" target=\"_blank\">Serialize or json in PHP?</a>\r\n\r\n2 <a href=\"http://stackoverflow.com/questions/1306740/json-vs-serialized-array-in-database\" target=\"_blank\">JSON vs. Serialized Array in database</a>\r\n\r\n3 <a href=\"http://www.helloweba.com/view-blog-319.html\" target=\"_blank\">PHP的serialize序列化数据与JSON格式化数据</a>\r\n\r\n4 <a href=\"http://blog.csdn.net/hguisu/article/details/7651730\" target=\"_blank\">php的serialize序列化和json性能测试</a>\r\n\r\n&nbsp;\r\n\r\n总结一下，\r\n\r\n1 serialize解码比json快\r\n\r\n2 数据量越大， json效率越高\r\n\r\n3 serialize是php里才有的，而json便于与其它语言交互\r\n\r\n4 serialize可以保留php的object，而json会改变\r\n\r\n5 json只支持utf8编码\r\n\r\n6 serialize占用空间会大一些\r\n\r\n&nbsp;\r\n\r\n<strong>什么时候用什么？</strong>\r\n\r\n如果需要存储对象数据，用serialize，否则可以直接使用json，非绝对。', 'serialize序列化和json的比较', '', 'publish', 'open', 'open', '', 'serialize%e5%ba%8f%e5%88%97%e5%8c%96%e5%92%8cjson%e7%9a%84%e6%af%94%e8%be%83', '', '', '2017-01-05 11:21:21', '2017-01-05 03:21:21', '', 0, 'http://www.gzpblog.com/?p=576', 0, 'post', '', 0),
(604, 1, '2017-02-08 15:57:36', '2017-02-08 07:57:36', '<h4>Git文件三种状态：</h4>\r\n<div><strong>已提交（committed）</strong>表示数据已经安全的保存在本地数据库中。</div>\r\n<div><strong>已修改（modified）</strong>表示修改了文件，但还没保存到数据库中。</div>\r\n<div><strong>已暂存（staged）</strong>表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</div>\r\n<div></div>\r\n<div></div>\r\n<h4>Git 项目的三个工作区域：</h4>\r\n<div><strong>Git 仓库目录：</strong>是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。 （\'Git目录\' 一般就是指项目根目录下的\'.git\'目录）</div>\r\n<div><strong>工作目录：</strong>是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</div>\r\n<div><strong>暂存区域：</strong>是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’\'，不过一般说法还是叫暂存区域。</div>\r\n<div></div>\r\n<div><img src=\"C:\\Users\\Administrator\\AppData\\Local\\YNote\\data\\a3355222@163.com\\23b80706c28042e88c694e8f1ec2323d\\clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"A0926A81E4CB4BE1A1B0C79D50D08AA8\" /><a href=\"http://files.gzpblog.com/wp/2017/02/git-1.png\"><img class=\"alignnone  wp-image-605\" src=\"http://files.gzpblog.com/wp/2017/02/git-1.png\" alt=\"\" width=\"694\" height=\"457\" /></a></div>\r\n<div>根据上面的图片，下面给出了每个部分的简要说明：</div>\r\n<ul>\r\n 	<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>\r\n 	<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>\r\n 	<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>\r\n 	<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>\r\n 	<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>\r\n 	<li>Stash：是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li>\r\n</ul>\r\n<h4>基本的 Git 工作流程如下：</h4>\r\n<ol>\r\n 	<li>在工作目录中修改文件。</li>\r\n 	<li>暂存文件，将文件的快照放入暂存区域。</li>\r\n 	<li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li>\r\n</ol>\r\n<h4><strong>使用 Git 时文件的生命周期：</strong></h4>\r\n<div><img src=\"C:\\Users\\Administrator\\AppData\\Local\\YNote\\data\\a3355222@163.com\\e197689931b84339a3df4b616ede0059\\clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"99FFBB709FAD4467875BCEF536AC00B3\" /><a href=\"http://files.gzpblog.com/wp/2017/02/git-2.png\"><img class=\"alignnone wp-image-606 \" src=\"http://files.gzpblog.com/wp/2017/02/git-2-1024x423.png\" width=\"618\" height=\"255\" /></a></div>\r\n<div></div>\r\n<div></div>\r\n<div></div>', 'Git——基本概念', '', 'publish', 'open', 'open', '', 'git-%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5', '', '', '2017-02-08 15:57:36', '2017-02-08 07:57:36', '', 0, 'http://www.gzpblog.com/?p=604', 0, 'post', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(765, 1, '2017-03-04 20:15:40', '2017-03-04 12:15:40', '<blockquote><strong>写在前面</strong>\r\n\r\n对于新手的一点建议：\r\n<ul>\r\n 	<li> 最好熟悉一下linux 的基本命令，vim的常用命令</li>\r\n 	<li>千万不要无脑复制，先看一下命令，特别是路径要注意</li>\r\n 	<li>学会排查错误</li>\r\n</ul>\r\n本篇安装的软件版本为：\r\n<ul>\r\n 	<li>Linux：Centos6.8</li>\r\n 	<li>Nginx：1.10.3</li>\r\n 	<li>MySQL：5.7.17</li>\r\n 	<li>PHP：7.0.16</li>\r\n</ul>\r\n</blockquote>\r\n最近研究了Linux系统下的PHP环境搭建，个人感觉最好最好不要用yum默认的程序包安装，因为版本都比较低，下载最新的稳定版自行安装比较好。现在网上教程很多，之所以还记这篇，原因有一点，当你重复网上的教程自行安装时，90%还是会出现各种各样的问题，因为你可能linux的系统版本不同，你想装的软件版本不同，安装的方法不同，你下错了安装包的版本，还有其它乱七八糟的。举个例，比如你看着5.6的mysql安装教程，装5.7的，你感觉没问题，但是事实就是，5.7的不一样了！而且网上还没有新的这方面内容，不好找，这就需要你去摸索了，亲身经历啊。这里面，Niginx感觉最好配，MySQL最坑。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP1.png\"><img class=\"size-full wp-image-732 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP1.png\" alt=\"\" width=\"513\" height=\"218\" /></a>\r\n<h2>一 准备工作</h2>\r\n<h3>1. 关闭SELINUX</h3>\r\n修改配置文件，重启服务后永久生效。\r\n# sed -i \'s/SELINUX=.*/SELINUX=disabled/g\' /etc/selinux/config\r\n命令行设置立即生效。\r\n# setenforce 0\r\n<h3>2. 如果是阿里云ECS用户，安全组设置中开启80端口方便调试。</h3>\r\n&nbsp;\r\n<h2>二 安装Nginx</h2>\r\n<h3>1. 下载源码包</h3>\r\n上Nginx官网，复制最新稳定版的下载地址过来，然后用wget下载（接下来需要下载安装包的都可以用wget）：\r\n\r\n# cd /usr/local/src\r\n# wget http://nginx.org/download/nginx-1.10.3.tar.gz\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP2.png\"><img class=\"size-full wp-image-733 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP2.png\" alt=\"\" width=\"895\" height=\"59\" /></a>\r\n\r\n下载完成的状态基本都是以下这样的：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP3.png\"><img class=\"size-full wp-image-734 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP3.png\" alt=\"\" width=\"1219\" height=\"280\" /></a>\r\n<h3>2. 进行解压编译</h3>\r\n# tar xvf nginx-1.10.3.tar.gz\r\n# yum groupinstall \"Development tools\"\r\n# yum -y install gcc wget gcc-c++ automake autoconf libtool libxml2-devel libxslt-devel perl-devel perl-ExtUtils-Embed pcre-devel openssl-devel\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP4.png\"><img class=\"alignnone size-full wp-image-735\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP4.png\" alt=\"\" width=\"1260\" height=\"586\" /></a>\r\n\r\n执行完成。\r\n\r\n进入解压后的nginx-1.10.3文件夹：\r\ncd /usr/local/src/nginx-1.10.3\r\n\r\n执行以下语句：\r\n\r\n[plain]\r\n\r\n./configure \\\r\n--prefix=/usr/local/nginx \\\r\n--sbin-path=/usr/sbin/nginx \\\r\n--conf-path=/etc/nginx/nginx.conf \\\r\n--error-log-path=/var/log/nginx/error.log \\\r\n--http-log-path=/var/log/nginx/access.log \\\r\n--pid-path=/var/run/nginx.pid \\\r\n--lock-path=/var/run/nginx.lock \\\r\n--http-client-body-temp-path=/var/tmp/nginx/client \\\r\n--http-proxy-temp-path=/var/tmp/nginx/proxy \\\r\n--http-fastcgi-temp-path=/var/tmp/nginx/fcgi \\\r\n--http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \\\r\n--http-scgi-temp-path=/var/tmp/nginx/scgi \\\r\n--user=nginx \\\r\n--group=nginx \\\r\n--with-pcre \\\r\n--with-http_v2_module \\\r\n--with-http_ssl_module \\\r\n--with-http_realip_module \\\r\n--with-http_addition_module \\\r\n--with-http_sub_module \\\r\n--with-http_dav_module \\\r\n--with-http_flv_module \\\r\n--with-http_mp4_module \\\r\n--with-http_gunzip_module \\\r\n--with-http_gzip_static_module \\\r\n--with-http_random_index_module \\\r\n--with-http_secure_link_module \\\r\n--with-http_stub_status_module \\\r\n--with-http_auth_request_module \\\r\n--with-mail \\\r\n--with-mail_ssl_module \\\r\n--with-file-aio \\\r\n--with-ipv6 \\\r\n--with-http_v2_module \\\r\n--with-threads \\\r\n--with-stream \\\r\n--with-stream_ssl_module\r\n\r\n[/plain]\r\n\r\n完成后执行编译：\r\n# make &amp;&amp; make install\r\n# mkdir -pv /var/tmp/nginx/client\r\n<h3>3. 添加SysV启动脚本。</h3>\r\n用vim编辑脚本：\r\n# vim /etc/init.d/nginx\r\n<div>写入以下内容：</div>\r\n\r\n[plain]\r\n#!/bin/sh \r\n# \r\n# nginx - this script starts and stops the nginx daemon \r\n# \r\n# chkconfig:   - 85 15 \r\n# description: Nginx is an HTTP(S) server, HTTP(S) reverse \\ \r\n#               proxy and IMAP/POP3 proxy server \r\n# processname: nginx \r\n# config:      /etc/nginx/nginx.conf \r\n# config:      /etc/sysconfig/nginx \r\n# pidfile:     /var/run/nginx.pid \r\n# Source function library. \r\n. /etc/rc.d/init.d/functions\r\n# Source networking configuration. \r\n. /etc/sysconfig/network\r\n# Check that networking is up. \r\n[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; exit 0\r\nnginx=&quot;/usr/sbin/nginx&quot;\r\nprog=$(basename $nginx)\r\nNGINX_CONF_FILE=&quot;/etc/nginx/nginx.conf&quot;\r\n[ -f /etc/sysconfig/nginx ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; . /etc/sysconfig/nginx\r\nlockfile=/var/lock/subsys/nginx\r\nstart() {\r\n    [ -x $nginx ] || exit 5\r\n    [ -f $NGINX_CONF_FILE ] || exit 6\r\n    echo -n $&quot;Starting $prog: &quot; \r\n    daemon $nginx -c $NGINX_CONF_FILE\r\n    retval=$?\r\n    echo \r\n    [ $retval -eq 0 ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; touch $lockfile\r\n    return $retval\r\n}\r\nstop() {\r\n    echo -n $&quot;Stopping $prog: &quot; \r\n    killproc $prog -QUIT\r\n    retval=$?\r\n    echo \r\n    [ $retval -eq 0 ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; rm -f $lockfile\r\n    return $retval\r\nkillall -9 nginx\r\n}\r\nrestart() {\r\n    configtest || return $?\r\n    stop\r\n    sleep 1\r\n    start\r\n}\r\nreload() {\r\n    configtest || return $?\r\n    echo -n $&quot;Reloading $prog: &quot; \r\n    killproc $nginx -HUP\r\nRETVAL=$?\r\n    echo \r\n}\r\nforce_reload() {\r\n    restart\r\n}\r\nconfigtest() {\r\n$nginx -t -c $NGINX_CONF_FILE\r\n}\r\nrh_status() {\r\n    status $prog\r\n}\r\nrh_status_q() {\r\n    rh_status &amp;amp;amp;amp;gt;/dev/null 2&amp;amp;amp;amp;gt;&amp;amp;amp;amp;amp;1\r\n}\r\ncase &quot;$1&quot; in\r\n    start)\r\n        rh_status_q &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; exit 0\r\n    $1\r\n        ;;\r\n    stop)\r\n        rh_status_q || exit 0\r\n        $1\r\n        ;;\r\n    restart|configtest)\r\n        $1\r\n        ;;\r\n    reload)\r\n        rh_status_q || exit 7\r\n        $1\r\n        ;;\r\n    force-reload)\r\n        force_reload\r\n        ;;\r\n    status)\r\n        rh_status\r\n        ;;\r\n    condrestart|try-restart)\r\n        rh_status_q || exit 0\r\n            ;;\r\n    *)\r\n      echo $&quot;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&quot; \r\n        exit 2\r\nesac\r\n[/plain]\r\n\r\n保存退出（按:wq!）；可能你得稍微查一下vim的一些命令，不然操作时可能会出现一点小问题。\r\n赋予脚本执行权限：\r\n# chmod +x /etc/init.d/nginx\r\n\r\n添加至服务管理列表，设置开机自启：\r\n# chkconfig --add nginx\r\n# chkconfig nginx on\r\n<h3>4. 启动服务。</h3>\r\n# service nginx start\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP6.png\"><img class=\"size-full wp-image-736 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP6.png\" alt=\"\" width=\"576\" height=\"238\" /></a>\r\n<div>出现这玩意说明成功了！</div>\r\n<div></div>\r\n<div></div>\r\n<blockquote>\r\n<div>注：如果报错 [emerg]: getpwnam(“nginx”) failed ；</div>\r\n<div>解决方法：</div>\r\n<div># useradd -s /sbin/nologin -M nginx</div>\r\n<div># id nginx</div></blockquote>\r\n<div></div>\r\n<div>\r\n<h2>三 安装mysql</h2>\r\n<h3>1. 版本选择</h3>\r\n<div>在安装之前必须明白一件事情，mysql有很多种安装方式，每种不一样，不要弄混了。</div>\r\n<div>比如源码编译安装（mysql-5.7.17.tar.gz），二进制安装（mysql-5.7.17-linux-glibc2.5-i686.tar），nmp安装（最简单的）。这里我们用源码自己编译安装。</div>\r\n<h3>2. 准备编译环境</h3>\r\n<div># yum groupinstall \"Server Platform Development\" \"Development tools\" -y</div>\r\n<div># yum install cmake -y</div>\r\n<div>cmake在现在的版本是必须要安装的，你可以下载camke之后编译，也可以直接yum安装。接下来的编译过程如果报错缺少什么就补什么。</div>\r\n<div></div>\r\n<h3>3. 准备mysql数据库存放目录</h3>\r\n<div># mkdir /mnt/data</div>\r\n<div># groupadd -r mysql</div>\r\n<div># useradd -r -g mysql -s /sbin/nologin mysql</div>\r\n<div># id mysql</div>\r\n<div></div>\r\n<h3>4. 更改数据目录权限。</h3>\r\n<div># chown -R mysql:mysql /mnt/data</div>\r\n<div></div>\r\n<h3>5. 下载并解压编译官网下载的稳定版的源码包。</h3>\r\n<div>在下载的时候注意一下版本，下载对应的版本。我们源码编译，要下载长这样的安装包：mysql-5.7.17.tar.gz，同时在安装的时候我们需要boost库，5.7需要1.59版本的库；你可以下载boost库然后编译boost库，或者像我一样，下载带有boost库的mysql版本。</div>\r\n<div>开始解压编译：</div>\r\n<div>\r\n\r\n[plain]\r\n# tar xvf mysql-boost-5.7.17.tar.gz -C /usr/local/src\r\n# cd /usr/local/src/mysql-5.7.17\r\n# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\\r\n-DMYSQL_DATADIR=/mnt/data \\\r\n-DSYSCONFDIR=/etc \\\r\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\r\n-DWITH_ARCHIVE_STORAGE_ENGINE=1 \\\r\n-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\\r\n-DWITH_READLINE=1 \\\r\n-DWITH_SSL=system \\\r\n-DWITH_ZLIB=system \\\r\n-DWITH_LIBWRAP=0 \\\r\n-DMYSQL_TCP_PORT=3306 \\\r\n-DMYSQL_UNIX_ADDR=/tmp/mysql.sock \\\r\n-DDEFAULT_CHARSET=utf8 \\\r\n-DDEFAULT_COLLATION=utf8_general_ci\r\n-DDOWNLOAD_BOOST=1 \\\r\n-DWITH_BOOST=/usr/local/mysql/boost/boost_1_59_0 \\\r\n# make &amp;&amp; make install\r\n[/plain]\r\n\r\n</div>\r\n</div>\r\n<div>\r\n<h3>6. 修改安装目录的权限属组</h3>\r\n<div># chown -R mysql:mysql /usr/local/mysql/</div>\r\n</div>\r\n<div>\r\n<h3>7. 初始化数据库。</h3>\r\n<div># /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/mnt/data/</div>\r\n<div>需要注意这里是mysql5.7的初始化命令，而5.7以下的都是用：</div>\r\n<div># /usr/local/mysql/scripts/mysql_install_db --user=mysql --datadir=/mnt/data/</div>\r\n<div></div>\r\n<div>在初始化成功之后，5.7的initial命令会产生一个随机的root登录密码，你要用这个密码登录，然后修改（必须修改生成的随机密码不然无法后续操作）。在最后有一个类似这样的密码：</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP7.png\"><img class=\"alignnone size-full wp-image-737\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP7.png\" alt=\"\" width=\"233\" height=\"45\" /></a></div>\r\n<div>\r\n<div></div>\r\n<h3>8. 复制配置文件</h3>\r\n<div># cp support-files/my-default.cnf /etc/my.cnf</div>\r\n<div>这里又有一点要注意：mysql5.7配置文件需要修改my.cnf关键配置， mysql5.7之前默认配置文件中是有配置项的，不用手动修改。以下为配置，根据实际情况修改：</div>\r\n<div>\r\n\r\n[plain]&lt;/div&gt;\r\n&lt;div&gt;[mysqld]&lt;/div&gt;\r\n&lt;div&gt;basedir = /usr/local/mysql&lt;/div&gt;\r\n&lt;div&gt;datadir = /mnt/data&lt;/div&gt;\r\n&lt;div&gt;port = 3306&lt;/div&gt;\r\n&lt;div&gt;socket = /Ultrapower/test/mysql/tmp/mysql.sock&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES&lt;/div&gt;\r\n&lt;div&gt;[client]&lt;/div&gt;\r\n&lt;div&gt;socket = /Ultrapower/test/mysql/tmp/mysql.sock&lt;/div&gt;\r\n&lt;div&gt;[/plain]\r\n\r\n</div>\r\n<div>如果添加[client]下 的内容，注意sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES要放在[mysqld]下。</div>\r\n<div>如果报错tmp目录不错在，到对应的地方去创建目录，然后创建后要赋予mysql权限，chown -R mysql:mysql tmp。</div>\r\n<div></div>\r\n<h3>9. 设置开机启动</h3>\r\n<div># cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</div>\r\n<div># chmod +x /etc/init.d/mysql</div>\r\n<div>注册为开机启动服务：</div>\r\n<div># chkconfig mysqld on</div>\r\n<div># chkconfig --add mysqld</div>\r\n<div>查看是否设置成功：</div>\r\n<div># chkconfig --list mysql</div>\r\n<div></div>\r\n<h3>10. 设置PATH环境变量。</h3>\r\n<div># echo \"export PATH=$PATH:/usr/local/mysql/bin\" &gt; /etc/profile.d/mysql.sh</div>\r\n<div># source /etc/profile.d/mysql.sh</div>\r\n<div></div>\r\n<h3>11. 启动服务</h3>\r\n<div># service mysqld start</div>\r\n</div>\r\n</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP8.png\"><img class=\"size-full wp-image-738 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP8.png\" alt=\"\" width=\"726\" height=\"578\" /></a></div>\r\n<div>\r\n<div>这样基本上，这个mysql就装好了。</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h3>12. 登录mysql并修改密码</h3>\r\n<div>mysql -uroot -p生成的密码</div>\r\n<div>执行修改密码：</div>\r\n<div>alter user \'root\'@\'localhost\' identified by \'newpassword\';</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h2>四 安装php-fpm</h2>\r\n<h3>1. 安装依赖包:</h3>\r\n<div>yum install libmcrypt libmcrypt-devel mhash mhash-devel libxml2 libxml2-devel bzip2 bzip2-devel</div>\r\n<div>这里还漏了几个，如果报错了提示缺少了什么就yum补上。</div>\r\n<div></div>\r\n<h3>2. 到官网下载源码包后，开始编译安装：</h3>\r\n<div>\r\n\r\n[plain]\r\n# tar xvf php-7.0.16.tar.bz2 -C /usr/local/src\r\n# cd /usr/local/src/php-7.0.16\r\n执行下面的配置文件：\r\n# ./configure --prefix=/usr/local/php \\\r\n--with-config-file-scan-dir=/etc/php.d \\\r\n--with-config-file-path=/etc \\\r\n--with-mysql=/usr/local/mysql \\\r\n--with-mysqli=/usr/local/mysql/bin/mysql_config \\\r\n--enable-fpm \\\r\n--enable-opcache \\\r\n--disable-fileinfo \\\r\n--with-jpeg-dir \\\r\n--with-iconv-dir=/usr/local \\\r\n--with-freetype-dir \\\r\n--with-png-dir \\\r\n--with-zlib \\\r\n--with-libxml-dir=/usr \\\r\n--enable-xml \\\r\n--enable-bcmath \\\r\n--enable-shmop \\\r\n--enable-exif \\\r\n--with-curl \\\r\n--enable-sysvsem \\\r\n--enable-inline-optimization \\\r\n--enable-mbregex \\\r\n--enable-inline-optimization \\\r\n--enable-mbstring \\\r\n--with-mcrypt \\\r\n--with-gd \\\r\n--enable-gd-native-ttf \\\r\n--with-openssl \\\r\n--with-mhash \\\r\n--enable-pcntl \\\r\n--enable-sockets \\\r\n--with-xmlrpc \\\r\n--enable-ftp \\\r\n--with-gettext \\\r\n--enable-zip \\\r\n--enable-soap \\\r\n--with-bz2\r\n[/plain]\r\n\r\n执行以上的配置，如果出现下面这样的license，才是正确的，才可以开始编译，如果出问题，就解决，一般是少了什么库。\r\n\r\n</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP9.png\"><img class=\"size-full wp-image-739 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP9.png\" alt=\"\" width=\"715\" height=\"673\" /></a></div>\r\n<div>\r\n<div>执行编译：</div>\r\n<div># make &amp;&amp; make install</div>\r\n<div></div>\r\n<h3>3. 添加php和php-fpm配置文件。</h3>\r\n<div># cp /usr/local/src/php-7.0.16/php.ini-production /etc/php.ini</div>\r\n<div># cd /usr/local/php/etc/</div>\r\n<div># cp php-fpm.conf.default php-fpm.conf</div>\r\n<div># sed -i \'s@;pid = run/php-fpm.pid@pid = /usr/local/php/var/run/php-fpm.pid@\' php-fpm.conf</div>\r\n<div></div>\r\n<h3>4. 添加php-fpm启动脚本。</h3>\r\n<div># cp /usr/local/src/php-7.0.16/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</div>\r\n<div># chmod +x /etc/init.d/php-fpm</div>\r\n<div></div>\r\n<h3>5. 添加php-fpm至服务列表并设置开机自启。</h3>\r\n<div># chkconfig --add php-fpm</div>\r\n<div># chkconfig --list php-fpm</div>\r\n<div># chkconfig php-fpm on</div>\r\n<div></div>\r\n<h3>6. 启动服务。</h3>\r\n<div># service php-fpm start</div>\r\n<div></div>\r\n<div><strong>注：</strong></div>\r\n<div>启动时如出现错误：WARNING: Nothing matches the include pattern \'/usr/local/etc/php-fpm.d/*.conf\' from /usr/local/etc/php-fpm.conf at line 125.</div>\r\n<div>ERROR:. No pool defined at least one pool section must be specified in config file</div>\r\n<div>ERROR: failed to post process the configuration</div>\r\n<div>ERROR: FPM initialization failed</div>\r\n<div>解决：到指定目录执行cp www.conf.default www.conf</div>\r\n<div></div>\r\n<h3>7. 添加nginx对fastcgi的支持，</h3>\r\n首先备份默认的配置文件。\r\n\r\n# cp /etc/nginx/nginx.conf /etc/nginx/nginx.confbak\r\n\r\n# cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf\r\n<div>编辑/etc/nginx/nginx.conf，在所支持的主页面格式中添加php格式的主页，类似如下：</div>\r\n<div>\r\n\r\n[plain]\r\nlocation / {\r\n    root /usr/local/nginx/html;\r\n    index index.php index.html index.htm;\r\n}\r\n[/plain]\r\n\r\n</div>\r\n<div>取消以下内容前面的注释：</div>\r\n<div>\r\n\r\n[plain]\r\nlocation ~ \\.php$ {\r\n    root /usr/local/nginx/html;\r\n    fastcgi_pass 127.0.0.1:9000;\r\n    fastcgi_index index.php;\r\n    fastcgi_param SCRIPT_FILENAME /usr/local/nginx/html/$fastcgi_script_name;\r\n    include fastcgi_params;\r\n}\r\n[/plain]\r\n\r\n</div>\r\n<div></div>\r\n<h3>8. 重启nginx</h3>\r\n<div># service nginx reload</div>\r\n<div></div>\r\n<h3>9. 测试是否成功</h3>\r\n<div>在/usr/local/nginx/html/新建index.php的测试页面，内容如下：</div>\r\n<div>&lt;?php</div>\r\n<div>phpinfo();</div>\r\n<div>?&gt;</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP10.png\"><img class=\"size-full wp-image-740 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP10.png\" alt=\"\" width=\"959\" height=\"911\" /></a></div>\r\n<div>\r\n<div>如果出现这个熟悉的界面，说明就大功告成了！Linux下一个基本的LNMP就搭建完毕了。</div>\r\n</div>\r\n</div>\r\n</div>', 'Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）', '', 'inherit', 'closed', 'closed', '', '731-revision-v1', '', '', '2017-03-04 20:15:40', '2017-03-04 12:15:40', '', 731, 'https://www.gzpblog.com/20170304/765.html', 0, 'revision', '', 0),
(599, 1, '2017-01-22 17:45:30', '2017-01-22 09:45:30', '鉴于自己开发东西的项目需要，开始学习Vue.js了。其实主要是想尝试一下前后端分离，这样方便以后去拓展移动端，既然是这样的话，就不能像以前那样单纯Jquery干到底了，显然太low。但是一直以来我就是jquery干到底的水平。现在的三剑客，React，Angular，Vue没一个会的。毕竟不是做前端的嘛。但是还是学一下，毕竟要用了，综合上手难度等各方面因素，最后选择了Vue。Vue的中文文档还是非常不错，写的非常具体，毕竟开发者是国人，以及考虑到到时候自己去玩一玩阿里的Weex这东西，觉得还是不错的。\r\n\r\n学完了之后，确实，该学！用久了jquery+原生简单javascript发现这玩意的理念确实不同，有点颠覆了我对写前端代码的认识，现在觉得jquery的DOM操作简直是灾难。再就是最近开始写页面，用bootstrap，又是一个大杀器，以前不想练手前端样式的一个原因就是对写css有点畏惧，不熟所以写一下查一下，比较费时间，现在bootstrap简直不能太方便，还兼顾pc端移动端。不过，有一点需要注意就是，vue的组件这一块，有一部分我竟然没看懂，这点很郁闷，其它都好理解，就有一部分没理解，希望之后实践的时候可以解除疑惑。\r\n\r\n学了bootstrap和Vue之后，感觉自己整个人神清气爽。不过一直以来给自己定的目标是专后台的，本来还要学python，最近又对Golang特别感兴趣，前端方面并没有打算深精，只想应对一下手头的需求，以及学习一下先进的理念。\r\n\r\n不过话说回来，发现要精心雕琢一个“完美”体验的产品 ，真心不容易。', 'Vue.js初体验', '', 'publish', 'open', 'open', '', 'vue-js%e5%88%9d%e4%bd%93%e9%aa%8c', '', '', '2017-01-22 17:45:30', '2017-01-22 09:45:30', '', 0, 'http://www.gzpblog.com/?p=599', 0, 'post', '', 0),
(600, 1, '2017-01-22 17:44:56', '2017-01-22 09:44:56', '', 'vuejs', '', 'inherit', 'open', 'closed', '', 'vuejs', '', '', '2017-01-22 17:44:56', '2017-01-22 09:44:56', '', 599, 'http://www.gzpblog.com/wp-content/uploads/2017/01/vuejs.png', 0, 'attachment', 'image/png', 0),
(601, 1, '2017-01-22 17:45:30', '2017-01-22 09:45:30', '鉴于自己开发东西的项目需要，开始学习Vue.js了。其实主要是想尝试一下前后端分离，这样方便以后去拓展移动端，既然是这样的话，就不能像以前那样单纯Jquery干到底了，显然太low。但是一直以来我就是jquery干到底的水平。现在的三剑客，React，Angular，Vue没一个会的。毕竟不是做前端的嘛。但是还是学一下，毕竟要用了，综合上手难度等各方面因素，最后选择了Vue。Vue的中文文档还是非常不错，写的非常具体，毕竟开发者是国人，以及考虑到到时候自己去玩一玩阿里的Weex这东西，觉得还是不错的。\r\n\r\n学完了之后，确实，该学！用久了jquery+原生简单javascript发现这玩意的理念确实不同，有点颠覆了我对写前端代码的认识，现在觉得jquery的DOM操作简直是灾难。再就是最近开始写页面，用bootstrap，又是一个大杀器，以前不想练手前端样式的一个原因就是对写css有点畏惧，不熟所以写一下查一下，比较费时间，现在bootstrap简直不能太方便，还兼顾pc端移动端。不过，有一点需要注意就是，vue的组件这一块，有一部分我竟然没看懂，这点很郁闷，其它都好理解，就有一部分没理解，希望之后实践的时候可以解除疑惑。\r\n\r\n学了bootstrap和Vue之后，感觉自己整个人神清气爽。不过一直以来给自己定的目标是专后台的，本来还要学python，最近又对Golang特别感兴趣，前端方面并没有打算深精，只想应对一下手头的需求，以及学习一下先进的理念。\r\n\r\n不过话说回来，发现要精心雕琢一个“完美”体验的产品 ，真心不容易。', 'Vue.js初体验', '', 'inherit', 'closed', 'closed', '', '599-revision-v1', '', '', '2017-01-22 17:45:30', '2017-01-22 09:45:30', '', 599, 'http://www.gzpblog.com/20170122/601.html', 0, 'revision', '', 0),
(605, 1, '2017-02-08 15:45:46', '2017-02-08 07:45:46', '', 'git-1', '', 'inherit', 'open', 'closed', '', 'git-1', '', '', '2017-02-08 15:45:46', '2017-02-08 07:45:46', '', 604, 'http://www.gzpblog.com/wp-content/uploads/2017/02/git-1.png', 0, 'attachment', 'image/png', 0),
(606, 1, '2017-02-08 15:45:49', '2017-02-08 07:45:49', '', 'git-2', '', 'inherit', 'open', 'closed', '', 'git-2', '', '', '2017-02-08 15:45:49', '2017-02-08 07:45:49', '', 604, 'http://www.gzpblog.com/wp-content/uploads/2017/02/git-2.png', 0, 'attachment', 'image/png', 0),
(607, 1, '2017-02-08 15:45:54', '2017-02-08 07:45:54', '', 'v2-bc001b6791992c8ac903d31e736008b9_b', '', 'inherit', 'open', 'closed', '', 'v2-bc001b6791992c8ac903d31e736008b9_b', '', '', '2017-02-08 15:45:54', '2017-02-08 07:45:54', '', 604, 'http://www.gzpblog.com/wp-content/uploads/2017/02/v2-bc001b6791992c8ac903d31e736008b9_b.jpg', 0, 'attachment', 'image/jpeg', 0),
(608, 1, '2017-02-08 15:48:59', '2017-02-08 07:48:59', '<h3>Git文件三种状态：</h3>\r\n<div><strong>已提交（committed）</strong>表示数据已经安全的保存在本地数据库中。</div>\r\n<div><strong>已修改（modified）</strong>表示修改了文件，但还没保存到数据库中。</div>\r\n<div><strong>已暂存（staged）</strong>表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</div>\r\n<h3></h3>\r\n<h3>Git 项目的三个工作区域：</h3>\r\n<div><strong>Git 仓库目录：</strong>是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。 （\'Git目录\' 一般就是指项目根目录下的\'.git\'目录）</div>\r\n<div><strong>工作目录：</strong>是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</div>\r\n<div><strong>暂存区域：</strong>是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’\'，不过一般说法还是叫暂存区域。</div>\r\n<div></div>\r\n<div><img src=\"C:\\Users\\Administrator\\AppData\\Local\\YNote\\data\\a3355222@163.com\\23b80706c28042e88c694e8f1ec2323d\\clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"A0926A81E4CB4BE1A1B0C79D50D08AA8\" /><a href=\"http://files.gzpblog.com/wp/2017/02/git-1.png\"><img class=\"alignnone  wp-image-605\" src=\"http://files.gzpblog.com/wp/2017/02/git-1.png\" alt=\"\" width=\"694\" height=\"457\" /></a></div>\r\n<div>根据上面的图片，下面给出了每个部分的简要说明：</div>\r\n<ul>\r\n 	<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>\r\n 	<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>\r\n 	<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>\r\n 	<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>\r\n 	<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>\r\n 	<li>Stash：是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li>\r\n</ul>\r\n<div></div>\r\n<h3>基本的 Git 工作流程如下：</h3>\r\n<ol>\r\n 	<li>在工作目录中修改文件。</li>\r\n 	<li>暂存文件，将文件的快照放入暂存区域。</li>\r\n 	<li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li>\r\n</ol>\r\n<div></div>\r\n<h3><strong>使用 Git 时文件的生命周期：</strong></h3>\r\n<div><img src=\"C:\\Users\\Administrator\\AppData\\Local\\YNote\\data\\a3355222@163.com\\e197689931b84339a3df4b616ede0059\\clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"99FFBB709FAD4467875BCEF536AC00B3\" /><a href=\"http://files.gzpblog.com/wp/2017/02/git-2.png\"><img class=\"alignnone wp-image-606 \" src=\"http://files.gzpblog.com/wp/2017/02/git-2-1024x423.png\" width=\"618\" height=\"255\" /></a></div>\r\n<div></div>\r\n<div></div>\r\n<div></div>', '', '', 'inherit', 'closed', 'closed', '', '604-revision-v1', '', '', '2017-02-08 15:48:59', '2017-02-08 07:48:59', '', 604, 'http://www.gzpblog.com/20170208/608.html', 0, 'revision', '', 0),
(611, 1, '2017-02-08 15:50:42', '2017-02-08 07:50:42', '<h4>Git文件三种状态：</h4>\r\n<div><strong>已提交（committed）</strong>表示数据已经安全的保存在本地数据库中。</div>\r\n<div><strong>已修改（modified）</strong>表示修改了文件，但还没保存到数据库中。</div>\r\n<div><strong>已暂存（staged）</strong>表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</div>\r\n<div></div>\r\n<h4>Git 项目的三个工作区域：</h4>\r\n<div><strong>Git 仓库目录：</strong>是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。 （\'Git目录\' 一般就是指项目根目录下的\'.git\'目录）</div>\r\n<div><strong>工作目录：</strong>是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</div>\r\n<div><strong>暂存区域：</strong>是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’\'，不过一般说法还是叫暂存区域。</div>\r\n<div></div>\r\n<div><img src=\"C:\\Users\\Administrator\\AppData\\Local\\YNote\\data\\a3355222@163.com\\23b80706c28042e88c694e8f1ec2323d\\clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"A0926A81E4CB4BE1A1B0C79D50D08AA8\" /><a href=\"http://files.gzpblog.com/wp/2017/02/git-1.png\"><img class=\"alignnone  wp-image-605\" src=\"http://files.gzpblog.com/wp/2017/02/git-1.png\" alt=\"\" width=\"694\" height=\"457\" /></a></div>\r\n<div>根据上面的图片，下面给出了每个部分的简要说明：</div>\r\n<ul>\r\n 	<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>\r\n 	<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>\r\n 	<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>\r\n 	<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>\r\n 	<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>\r\n 	<li>Stash：是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li>\r\n</ul>\r\n&nbsp;\r\n<h4>基本的 Git 工作流程如下：</h4>\r\n<ol>\r\n 	<li>在工作目录中修改文件。</li>\r\n 	<li>暂存文件，将文件的快照放入暂存区域。</li>\r\n 	<li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li>\r\n</ol>\r\n&nbsp;\r\n<h4><strong>使用 Git 时文件的生命周期：</strong></h4>\r\n<div><img src=\"C:\\Users\\Administrator\\AppData\\Local\\YNote\\data\\a3355222@163.com\\e197689931b84339a3df4b616ede0059\\clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"99FFBB709FAD4467875BCEF536AC00B3\" /><a href=\"http://files.gzpblog.com/wp/2017/02/git-2.png\"><img class=\"alignnone wp-image-606 \" src=\"http://files.gzpblog.com/wp/2017/02/git-2-1024x423.png\" width=\"618\" height=\"255\" /></a></div>\r\n<div></div>\r\n<div></div>\r\n<div></div>', 'Git——基本概念', '', 'inherit', 'closed', 'closed', '', '604-revision-v1', '', '', '2017-02-08 15:50:42', '2017-02-08 07:50:42', '', 604, 'http://www.gzpblog.com/20170208/611.html', 0, 'revision', '', 0),
(609, 1, '2017-02-08 15:49:27', '2017-02-08 07:49:27', '<h3>Git文件三种状态：</h3>\r\n<div><strong>已提交（committed）</strong>表示数据已经安全的保存在本地数据库中。</div>\r\n<div><strong>已修改（modified）</strong>表示修改了文件，但还没保存到数据库中。</div>\r\n<div><strong>已暂存（staged）</strong>表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</div>\r\n<h3></h3>\r\n<h3>Git 项目的三个工作区域：</h3>\r\n<div><strong>Git 仓库目录：</strong>是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。 （\'Git目录\' 一般就是指项目根目录下的\'.git\'目录）</div>\r\n<div><strong>工作目录：</strong>是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</div>\r\n<div><strong>暂存区域：</strong>是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’\'，不过一般说法还是叫暂存区域。</div>\r\n<div></div>\r\n<div><img src=\"C:\\Users\\Administrator\\AppData\\Local\\YNote\\data\\a3355222@163.com\\23b80706c28042e88c694e8f1ec2323d\\clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"A0926A81E4CB4BE1A1B0C79D50D08AA8\" /><a href=\"http://files.gzpblog.com/wp/2017/02/git-1.png\"><img class=\"alignnone  wp-image-605\" src=\"http://files.gzpblog.com/wp/2017/02/git-1.png\" alt=\"\" width=\"694\" height=\"457\" /></a></div>\r\n<div>根据上面的图片，下面给出了每个部分的简要说明：</div>\r\n<ul>\r\n 	<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>\r\n 	<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>\r\n 	<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>\r\n 	<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>\r\n 	<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>\r\n 	<li>Stash：是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li>\r\n</ul>\r\n<div></div>\r\n<h3>基本的 Git 工作流程如下：</h3>\r\n<ol>\r\n 	<li>在工作目录中修改文件。</li>\r\n 	<li>暂存文件，将文件的快照放入暂存区域。</li>\r\n 	<li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li>\r\n</ol>\r\n<div></div>\r\n<h3><strong>使用 Git 时文件的生命周期：</strong></h3>\r\n<div><img src=\"C:\\Users\\Administrator\\AppData\\Local\\YNote\\data\\a3355222@163.com\\e197689931b84339a3df4b616ede0059\\clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"99FFBB709FAD4467875BCEF536AC00B3\" /><a href=\"http://files.gzpblog.com/wp/2017/02/git-2.png\"><img class=\"alignnone wp-image-606 \" src=\"http://files.gzpblog.com/wp/2017/02/git-2-1024x423.png\" width=\"618\" height=\"255\" /></a></div>\r\n<div></div>\r\n<div></div>\r\n<div></div>', 'Git——基本概念', '', 'inherit', 'closed', 'closed', '', '604-revision-v1', '', '', '2017-02-08 15:49:27', '2017-02-08 07:49:27', '', 604, 'http://www.gzpblog.com/20170208/609.html', 0, 'revision', '', 0),
(803, 1, '2017-03-15 10:10:13', '2017-03-15 02:10:13', '<blockquote><strong>写在前面</strong>\r\n\r\n对于新手的一点建议：\r\n<ul>\r\n 	<li> 最好熟悉一下linux 的基本命令，vim的常用命令</li>\r\n 	<li>千万不要无脑复制，先看一下命令，特别是路径要注意</li>\r\n 	<li>学会排查错误</li>\r\n</ul>\r\n本篇安装的软件版本为：\r\n<ul>\r\n 	<li>Linux：Centos6.8</li>\r\n 	<li>Nginx：1.10.3</li>\r\n 	<li>MySQL：5.7.17</li>\r\n 	<li>PHP：7.0.16</li>\r\n</ul>\r\n</blockquote>\r\n最近研究了Linux系统下的PHP环境搭建，个人感觉最好最好不要用yum默认的程序包安装，因为版本都比较低，下载最新的稳定版自行安装比较好。现在网上教程很多，之所以还记这篇，原因有一点，当你重复网上的教程自行安装时，90%还是会出现各种各样的问题，因为你可能linux的系统版本不同，你想装的软件版本不同，安装的方法不同，你下错了安装包的版本，还有其它乱七八糟的。举个例，比如你看着5.6的mysql安装教程，装5.7的，你感觉没问题，但是事实就是，5.7的不一样了！而且网上还没有新的这方面内容，不好找，这就需要你去摸索了，亲身经历啊。这里面，Niginx感觉最好配，MySQL最坑。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP1.png\"><img class=\"size-full wp-image-732 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP1.png\" alt=\"\" width=\"513\" height=\"218\" /></a>\r\n<h2>一 准备工作</h2>\r\n<h3>1. 关闭SELINUX</h3>\r\n修改配置文件，重启服务后永久生效。\r\n# sed -i \'s/SELINUX=.*/SELINUX=disabled/g\' /etc/selinux/config\r\n命令行设置立即生效。\r\n# setenforce 0\r\n<h3>2. 如果是阿里云ECS用户，安全组设置中开启80端口方便调试。</h3>\r\n&nbsp;\r\n<h2>二 安装Nginx</h2>\r\n<h3>1. 下载源码包</h3>\r\n上Nginx官网，复制最新稳定版的下载地址过来，然后用wget下载（接下来需要下载安装包的都可以用wget）：\r\n\r\n# cd /usr/local/src\r\n# wget http://nginx.org/download/nginx-1.10.3.tar.gz\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP2.png\"><img class=\"size-full wp-image-733 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP2.png\" alt=\"\" width=\"895\" height=\"59\" /></a>\r\n\r\n下载完成的状态基本都是以下这样的：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP3.png\"><img class=\"size-full wp-image-734 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP3.png\" alt=\"\" width=\"1219\" height=\"280\" /></a>\r\n<h3>2. 进行解压编译</h3>\r\n# tar xvf nginx-1.10.3.tar.gz\r\n# yum groupinstall \"Development tools\"\r\n# yum -y install gcc wget gcc-c++ automake autoconf libtool libxml2-devel libxslt-devel perl-devel perl-ExtUtils-Embed pcre-devel openssl-devel\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP4.png\"><img class=\"alignnone size-full wp-image-735\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP4.png\" alt=\"\" width=\"1260\" height=\"586\" /></a>\r\n\r\n执行完成。\r\n\r\n进入解压后的nginx-1.10.3文件夹：\r\ncd /usr/local/src/nginx-1.10.3\r\n\r\n执行以下语句：\r\n\r\n[plain]\r\n\r\n./configure \\\r\n--prefix=/usr/local/nginx \\\r\n--sbin-path=/usr/sbin/nginx \\\r\n--conf-path=/etc/nginx/nginx.conf \\\r\n--error-log-path=/var/log/nginx/error.log \\\r\n--http-log-path=/var/log/nginx/access.log \\\r\n--pid-path=/var/run/nginx.pid \\\r\n--lock-path=/var/run/nginx.lock \\\r\n--http-client-body-temp-path=/var/tmp/nginx/client \\\r\n--http-proxy-temp-path=/var/tmp/nginx/proxy \\\r\n--http-fastcgi-temp-path=/var/tmp/nginx/fcgi \\\r\n--http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \\\r\n--http-scgi-temp-path=/var/tmp/nginx/scgi \\\r\n--user=nginx \\\r\n--group=nginx \\\r\n--with-pcre \\\r\n--with-http_v2_module \\\r\n--with-http_ssl_module \\\r\n--with-http_realip_module \\\r\n--with-http_addition_module \\\r\n--with-http_sub_module \\\r\n--with-http_dav_module \\\r\n--with-http_flv_module \\\r\n--with-http_mp4_module \\\r\n--with-http_gunzip_module \\\r\n--with-http_gzip_static_module \\\r\n--with-http_random_index_module \\\r\n--with-http_secure_link_module \\\r\n--with-http_stub_status_module \\\r\n--with-http_auth_request_module \\\r\n--with-mail \\\r\n--with-mail_ssl_module \\\r\n--with-file-aio \\\r\n--with-ipv6 \\\r\n--with-http_v2_module \\\r\n--with-threads \\\r\n--with-stream \\\r\n--with-stream_ssl_module \\\r\n--with-openssl\r\n[/plain]\r\n\r\n完成后执行编译：\r\n# make &amp;&amp; make install\r\n# mkdir -pv /var/tmp/nginx/client\r\n<h3>3. 添加SysV启动脚本。</h3>\r\n用vim编辑脚本：\r\n# vim /etc/init.d/nginx\r\n<div>写入以下内容：</div>\r\n\r\n[plain]\r\n#!/bin/sh \r\n# \r\n# nginx - this script starts and stops the nginx daemon \r\n# \r\n# chkconfig:   - 85 15 \r\n# description: Nginx is an HTTP(S) server, HTTP(S) reverse \\ \r\n#               proxy and IMAP/POP3 proxy server \r\n# processname: nginx \r\n# config:      /etc/nginx/nginx.conf \r\n# config:      /etc/sysconfig/nginx \r\n# pidfile:     /var/run/nginx.pid \r\n# Source function library. \r\n. /etc/rc.d/init.d/functions\r\n# Source networking configuration. \r\n. /etc/sysconfig/network\r\n# Check that networking is up. \r\n[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; exit 0\r\nnginx=&quot;/usr/sbin/nginx&quot;\r\nprog=$(basename $nginx)\r\nNGINX_CONF_FILE=&quot;/etc/nginx/nginx.conf&quot;\r\n[ -f /etc/sysconfig/nginx ] &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; . /etc/sysconfig/nginx\r\nlockfile=/var/lock/subsys/nginx\r\nstart() {\r\n    [ -x $nginx ] || exit 5\r\n    [ -f $NGINX_CONF_FILE ] || exit 6\r\n    echo -n $&quot;Starting $prog: &quot; \r\n    daemon $nginx -c $NGINX_CONF_FILE\r\n    retval=$?\r\n    echo \r\n    [ $retval -eq 0 ] &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; touch $lockfile\r\n    return $retval\r\n}\r\nstop() {\r\n    echo -n $&quot;Stopping $prog: &quot; \r\n    killproc $prog -QUIT\r\n    retval=$?\r\n    echo \r\n    [ $retval -eq 0 ] &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; rm -f $lockfile\r\n    return $retval\r\nkillall -9 nginx\r\n}\r\nrestart() {\r\n    configtest || return $?\r\n    stop\r\n    sleep 1\r\n    start\r\n}\r\nreload() {\r\n    configtest || return $?\r\n    echo -n $&quot;Reloading $prog: &quot; \r\n    killproc $nginx -HUP\r\nRETVAL=$?\r\n    echo \r\n}\r\nforce_reload() {\r\n    restart\r\n}\r\nconfigtest() {\r\n$nginx -t -c $NGINX_CONF_FILE\r\n}\r\nrh_status() {\r\n    status $prog\r\n}\r\nrh_status_q() {\r\n    rh_status &amp;amp;amp;amp;amp;gt;/dev/null 2&amp;amp;amp;amp;amp;gt;&amp;amp;amp;amp;amp;amp;1\r\n}\r\ncase &quot;$1&quot; in\r\n    start)\r\n        rh_status_q &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; exit 0\r\n    $1\r\n        ;;\r\n    stop)\r\n        rh_status_q || exit 0\r\n        $1\r\n        ;;\r\n    restart|configtest)\r\n        $1\r\n        ;;\r\n    reload)\r\n        rh_status_q || exit 7\r\n        $1\r\n        ;;\r\n    force-reload)\r\n        force_reload\r\n        ;;\r\n    status)\r\n        rh_status\r\n        ;;\r\n    condrestart|try-restart)\r\n        rh_status_q || exit 0\r\n            ;;\r\n    *)\r\n      echo $&quot;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&quot; \r\n        exit 2\r\nesac\r\n[/plain]\r\n\r\n保存退出（按:wq!）；可能你得稍微查一下vim的一些命令，不然操作时可能会出现一点小问题。\r\n赋予脚本执行权限：\r\n# chmod +x /etc/init.d/nginx\r\n\r\n添加至服务管理列表，设置开机自启：\r\n# chkconfig --add nginx\r\n# chkconfig nginx on\r\n<h3>4. 启动服务。</h3>\r\n# service nginx start\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP6.png\"><img class=\"size-full wp-image-736 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP6.png\" alt=\"\" width=\"576\" height=\"238\" /></a>\r\n<div>出现这玩意说明成功了！</div>\r\n<div></div>\r\n<div></div>\r\n<blockquote>\r\n<div>注：如果报错 [emerg]: getpwnam(“nginx”) failed ；</div>\r\n<div>解决方法：</div>\r\n<div># useradd -s /sbin/nologin -M nginx</div>\r\n<div># id nginx</div></blockquote>\r\n<div></div>\r\n<div>\r\n<h2>三 安装mysql</h2>\r\n<h3>1. 版本选择</h3>\r\n<div>在安装之前必须明白一件事情，mysql有很多种安装方式，每种不一样，不要弄混了。</div>\r\n<div>比如源码编译安装（mysql-5.7.17.tar.gz），二进制安装（mysql-5.7.17-linux-glibc2.5-i686.tar），nmp安装（最简单的）。这里我们用源码自己编译安装。</div>\r\n<h3>2. 准备编译环境</h3>\r\n<div># yum groupinstall \"Server Platform Development\" \"Development tools\" -y</div>\r\n<div># yum install cmake -y</div>\r\n<div>cmake在现在的版本是必须要安装的，你可以下载camke之后编译，也可以直接yum安装。接下来的编译过程如果报错缺少什么就补什么。</div>\r\n<div></div>\r\n<h3>3. 准备mysql数据库存放目录</h3>\r\n<div># mkdir /mnt/data</div>\r\n<div># groupadd -r mysql</div>\r\n<div># useradd -r -g mysql -s /sbin/nologin mysql</div>\r\n<div># id mysql</div>\r\n<div></div>\r\n<h3>4. 更改数据目录权限。</h3>\r\n<div># chown -R mysql:mysql /mnt/data</div>\r\n<div></div>\r\n<h3>5. 下载并解压编译官网下载的稳定版的源码包。</h3>\r\n<div>在下载的时候注意一下版本，下载对应的版本。我们源码编译，要下载长这样的安装包：mysql-5.7.17.tar.gz，同时在安装的时候我们需要boost库，5.7需要1.59版本的库；你可以下载boost库然后编译boost库，或者像我一样，下载带有boost库的mysql版本。</div>\r\n<div>开始解压编译：</div>\r\n<div>\r\n\r\n[plain]\r\n# tar xvf mysql-boost-5.7.17.tar.gz -C /usr/local/src\r\n# cd /usr/local/src/mysql-5.7.17\r\n# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\\r\n-DMYSQL_DATADIR=/mnt/data \\\r\n-DSYSCONFDIR=/etc \\\r\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\r\n-DWITH_ARCHIVE_STORAGE_ENGINE=1 \\\r\n-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\\r\n-DWITH_READLINE=1 \\\r\n-DWITH_SSL=system \\\r\n-DWITH_ZLIB=system \\\r\n-DWITH_LIBWRAP=0 \\\r\n-DMYSQL_TCP_PORT=3306 \\\r\n-DMYSQL_UNIX_ADDR=/tmp/mysql.sock \\\r\n-DDEFAULT_CHARSET=utf8 \\\r\n-DDEFAULT_COLLATION=utf8_general_ci\r\n-DDOWNLOAD_BOOST=1 \\\r\n-DWITH_BOOST=/usr/local/mysql/boost/boost_1_59_0 \\\r\n# make &amp;amp;&amp;amp; make install\r\n[/plain]\r\n\r\n</div>\r\n</div>\r\n<div>\r\n<h3>6. 修改安装目录的权限属组</h3>\r\n<div># chown -R mysql:mysql /usr/local/mysql/</div>\r\n</div>\r\n<div>\r\n<h3>7. 初始化数据库。</h3>\r\n<div># /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/mnt/data/</div>\r\n<div>需要注意这里是mysql5.7的初始化命令，而5.7以下的都是用：</div>\r\n<div># /usr/local/mysql/scripts/mysql_install_db --user=mysql --datadir=/mnt/data/</div>\r\n<div></div>\r\n<div>在初始化成功之后，5.7的initial命令会产生一个随机的root登录密码，你要用这个密码登录，然后修改（必须修改生成的随机密码不然无法后续操作）。在最后有一个类似这样的密码：</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP7.png\"><img class=\"alignnone size-full wp-image-737\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP7.png\" alt=\"\" width=\"233\" height=\"45\" /></a></div>\r\n<div>\r\n<div></div>\r\n<h3>8. 复制配置文件</h3>\r\n<div># cp support-files/my-default.cnf /etc/my.cnf</div>\r\n<div>这里又有一点要注意：mysql5.7配置文件需要修改my.cnf关键配置， mysql5.7之前默认配置文件中是有配置项的，不用手动修改。以下为配置，根据实际情况修改：</div>\r\n<div>\r\n\r\n[plain]\r\n[mysqld]\r\nbasedir = /usr/local/mysql\r\ndatadir = /mnt/data\r\nport = 3306\r\nsocket = /Ultrapower/test/mysql/tmp/mysql.sock\r\n\r\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\r\n[client]\r\nsocket = /Ultrapower/test/mysql/tmp/mysql.sock\r\n[/plain]\r\n\r\n</div>\r\n<div>如果添加[client]下 的内容，注意sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES要放在[mysqld]下。</div>\r\n<div>如果报错tmp目录不错在，到对应的地方去创建目录，然后创建后要赋予mysql权限，chown -R mysql:mysql tmp。</div>\r\n<div></div>\r\n<h3>9. 设置开机启动</h3>\r\n<div># cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</div>\r\n<div># chmod +x /etc/init.d/mysql</div>\r\n<div>注册为开机启动服务：</div>\r\n<div># chkconfig mysqld on</div>\r\n<div># chkconfig --add mysqld</div>\r\n<div>查看是否设置成功：</div>\r\n<div># chkconfig --list mysql</div>\r\n<div></div>\r\n<h3>10. 设置PATH环境变量。</h3>\r\n<div># echo \"export PATH=$PATH:/usr/local/mysql/bin\" &gt; /etc/profile.d/mysql.sh</div>\r\n<div># source /etc/profile.d/mysql.sh</div>\r\n<div></div>\r\n<h3>11. 启动服务</h3>\r\n<div># service mysqld start</div>\r\n</div>\r\n</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP8.png\"><img class=\"size-full wp-image-738 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP8.png\" alt=\"\" width=\"726\" height=\"578\" /></a></div>\r\n<div>\r\n<div>这样基本上，这个mysql就装好了。</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h3>12. 登录mysql并修改密码</h3>\r\n<div>mysql -uroot -p生成的密码</div>\r\n<div>执行修改密码：</div>\r\n<div>alter user \'root\'@\'localhost\' identified by \'newpassword\';</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h2>四 安装php-fpm</h2>\r\n<h3>1. 安装依赖包:</h3>\r\n<div>yum install libmcrypt libmcrypt-devel mhash mhash-devel libxml2 libxml2-devel bzip2 bzip2-devel</div>\r\n<div>这里还漏了几个，如果报错了提示缺少了什么就yum补上。</div>\r\n<div></div>\r\n<h3>2. 到官网下载源码包后，开始编译安装：</h3>\r\n<div>\r\n\r\n[plain]\r\n# tar xvf php-7.0.16.tar.bz2 -C /usr/local/src\r\n# cd /usr/local/src/php-7.0.16\r\n执行下面的配置文件：\r\n# ./configure --prefix=/usr/local/php \\\r\n--with-config-file-scan-dir=/etc/php.d \\\r\n--with-config-file-path=/etc \\\r\n--with-mysql=/usr/local/mysql \\\r\n--with-mysqli=/usr/local/mysql/bin/mysql_config \\\r\n--enable-fpm \\\r\n--enable-opcache \\\r\n--disable-fileinfo \\\r\n--with-jpeg-dir \\\r\n--with-iconv-dir=/usr/local \\\r\n--with-freetype-dir \\\r\n--with-png-dir \\\r\n--with-zlib \\\r\n--with-libxml-dir=/usr \\\r\n--enable-xml \\\r\n--enable-bcmath \\\r\n--enable-shmop \\\r\n--enable-exif \\\r\n--with-curl \\\r\n--enable-sysvsem \\\r\n--enable-inline-optimization \\\r\n--enable-mbregex \\\r\n--enable-inline-optimization \\\r\n--enable-mbstring \\\r\n--with-mcrypt \\\r\n--with-gd \\\r\n--enable-gd-native-ttf \\\r\n--with-openssl \\\r\n--with-mhash \\\r\n--enable-pcntl \\\r\n--enable-sockets \\\r\n--with-xmlrpc \\\r\n--enable-ftp \\\r\n--with-gettext \\\r\n--enable-zip \\\r\n--enable-soap \\\r\n--with-bz2\r\n[/plain]\r\n\r\n执行以上的配置，如果出现下面这样的license，才是正确的，才可以开始编译，如果出问题，就解决，一般是少了什么库。\r\n<div>（注意将来可能会用到的一些库，先正确地编译好以免以后再来编就麻烦了，比如openssl, gd, mbstring, sockets, opcache等等）</div>\r\n</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP9.png\"><img class=\"size-full wp-image-739 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP9.png\" alt=\"\" width=\"715\" height=\"673\" /></a></div>\r\n<div>\r\n<div>执行编译：</div>\r\n<div># make &amp;&amp; make install</div>\r\n<div></div>\r\n<h3>3. 添加php和php-fpm配置文件。</h3>\r\n<div># cp /usr/local/src/php-7.0.16/php.ini-production /etc/php.ini</div>\r\n<div># cd /usr/local/php/etc/</div>\r\n<div># cp php-fpm.conf.default php-fpm.conf</div>\r\n<div># sed -i \'s@;pid = run/php-fpm.pid@pid = /usr/local/php/var/run/php-fpm.pid@\' php-fpm.conf</div>\r\n<div></div>\r\n<h3>4. 添加php-fpm启动脚本。</h3>\r\n<div># cp /usr/local/src/php-7.0.16/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</div>\r\n<div># chmod +x /etc/init.d/php-fpm</div>\r\n<div></div>\r\n<h3>5. 添加php-fpm至服务列表并设置开机自启。</h3>\r\n<div># chkconfig --add php-fpm</div>\r\n<div># chkconfig --list php-fpm</div>\r\n<div># chkconfig php-fpm on</div>\r\n<div></div>\r\n<h3>6. 启动服务。</h3>\r\n<div># service php-fpm start</div>\r\n<div></div>\r\n<div><strong>注：</strong></div>\r\n<div>启动时如出现错误：WARNING: Nothing matches the include pattern \'/usr/local/etc/php-fpm.d/*.conf\' from /usr/local/etc/php-fpm.conf at line 125.</div>\r\n<div>ERROR:. No pool defined at least one pool section must be specified in config file</div>\r\n<div>ERROR: failed to post process the configuration</div>\r\n<div>ERROR: FPM initialization failed</div>\r\n<div>解决：到指定目录执行cp www.conf.default www.conf</div>\r\n<div></div>\r\n<h3>7. 添加nginx对fastcgi的支持，</h3>\r\n首先备份默认的配置文件。\r\n\r\n# cp /etc/nginx/nginx.conf /etc/nginx/nginx.confbak\r\n\r\n# cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf\r\n<div>编辑/etc/nginx/nginx.conf，在所支持的主页面格式中添加php格式的主页，类似如下：</div>\r\n<div>\r\n\r\n[plain]\r\nlocation / {\r\n    root /usr/local/nginx/html;\r\n    index index.php index.html index.htm;\r\n}\r\n[/plain]\r\n\r\n</div>\r\n<div>取消以下内容前面的注释：</div>\r\n<div>\r\n\r\n[plain]\r\nlocation ~ \\.php$ {\r\n    root /usr/local/nginx/html;\r\n    fastcgi_pass 127.0.0.1:9000;\r\n    fastcgi_index index.php;\r\n    fastcgi_param SCRIPT_FILENAME /usr/local/nginx/html/$fastcgi_script_name;\r\n    include fastcgi_params;\r\n}\r\n[/plain]\r\n\r\n</div>\r\n<div></div>\r\n<h3>8. 重启nginx</h3>\r\n<div># service nginx reload</div>\r\n<div></div>\r\n<h3>9. 测试是否成功</h3>\r\n<div>在/usr/local/nginx/html/新建index.php的测试页面，内容如下：</div>\r\n<div>&lt;?php</div>\r\n<div>phpinfo();</div>\r\n<div>?&gt;</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP10.png\"><img class=\"size-full wp-image-740 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP10.png\" alt=\"\" width=\"959\" height=\"911\" /></a></div>\r\n<div>\r\n<div>如果出现这个熟悉的界面，说明就大功告成了！Linux下一个基本的LNMP就搭建完毕了。</div>\r\n</div>\r\n</div>\r\n</div>', 'Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）', '', 'inherit', 'closed', 'closed', '', '731-revision-v1', '', '', '2017-03-15 10:10:13', '2017-03-15 02:10:13', '', 731, 'https://www.gzpblog.com/20170315/803.html', 0, 'revision', '', 0),
(592, 1, '2017-01-12 11:13:45', '2017-01-12 03:13:45', '今天看到一篇文章：<a href=\"http://www.tmtpost.com/2557765.html\" target=\"_blank\">对抗微信，支付宝牌“小程序”也来了</a>。\r\n\r\n支付宝也要搞小程序？\r\n\r\n讲真，我就知道支付宝会搞，因为再不搞。估计过三年，支付宝就要没了。其实一直心里都不是很喜欢腾讯能这么顺利，因为腾讯实在太凶了。靠微信和QQ这两个社交的庞大用户群，所到之处战无不胜。不管是别人做过的，还是自己要做的，腾讯都做。\r\n\r\n心里总有一点点偏私，希望支付宝能干过微信支付。之所以有这种感觉是因为，中国的互联网公司，不可能腾讯一家独大，这是非常不利于这个生态圈的，挤压了别人的发展空间。就像美国，我们可以瞬间想到很多互联网或者科技巨头，但是现在中国这边，百度没落，腾讯依旧这么凶，阿里一旦被挤掉（虽然蚂蚁分离出来了，但也是有很大依赖性），就一家独大了。作为一个IT人，还希望国内能涌出比较多的好公司，多元化的环境是必要的。', '为什么我“喜欢”支付宝胜过微信支付', '', 'publish', 'open', 'open', '', '%e4%b8%ba%e4%bb%80%e4%b9%88%e6%88%91%e5%96%9c%e6%ac%a2%e6%94%af%e4%bb%98%e5%ae%9d%e8%83%9c%e8%bf%87%e5%be%ae%e4%bf%a1%e6%94%af%e4%bb%98', '', '', '2017-01-12 11:13:45', '2017-01-12 03:13:45', '', 0, 'http://www.gzpblog.com/?p=592', 0, 'post', '', 3),
(593, 1, '2017-01-12 11:13:45', '2017-01-12 03:13:45', '今天看到一篇文章：<a href=\"http://www.tmtpost.com/2557765.html\" target=\"_blank\">对抗微信，支付宝牌“小程序”也来了</a>。\r\n\r\n支付宝也要搞小程序？\r\n\r\n讲真，我就知道支付宝会搞，因为再不搞。估计过三年，支付宝就要没了。其实一直心里都不是很喜欢腾讯能这么顺利，因为腾讯实在太凶了。靠微信和QQ这两个社交的庞大用户群，所到之处战无不胜。不管是别人做过的，还是自己要做的，腾讯都做。\r\n\r\n心里总有一点点偏私，希望支付宝能干过微信支付。之所以有这种感觉是因为，中国的互联网公司，不可能腾讯一家独大，这是非常不利于这个生态圈的，挤压了别人的发展空间。就像美国，我们可以瞬间想到很多互联网或者科技巨头，但是现在中国这边，百度没落，腾讯依旧这么凶，阿里一旦被挤掉（虽然蚂蚁分离出来了，但也是有很大依赖性），就一家独大了。作为一个IT人，还希望国内能涌出比较多的好公司，多元化的环境是必要的。', '为什么我“喜欢”支付宝胜过微信支付', '', 'inherit', 'closed', 'closed', '', '592-revision-v1', '', '', '2017-01-12 11:13:45', '2017-01-12 03:13:45', '', 592, 'http://www.gzpblog.com/20170112/593.html', 0, 'revision', '', 0),
(613, 1, '2017-02-08 15:51:28', '2017-02-08 07:51:28', '<h4>Git文件三种状态：</h4>\r\n<div><strong>已提交（committed）</strong>表示数据已经安全的保存在本地数据库中。</div>\r\n<div><strong>已修改（modified）</strong>表示修改了文件，但还没保存到数据库中。</div>\r\n<div><strong>已暂存（staged）</strong>表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</div>\r\n<div></div>\r\n<div></div>\r\n<h4>Git 项目的三个工作区域：</h4>\r\n<div><strong>Git 仓库目录：</strong>是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。 （\'Git目录\' 一般就是指项目根目录下的\'.git\'目录）</div>\r\n<div><strong>工作目录：</strong>是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</div>\r\n<div><strong>暂存区域：</strong>是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’\'，不过一般说法还是叫暂存区域。</div>\r\n<div></div>\r\n<div><img src=\"C:\\Users\\Administrator\\AppData\\Local\\YNote\\data\\a3355222@163.com\\23b80706c28042e88c694e8f1ec2323d\\clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"A0926A81E4CB4BE1A1B0C79D50D08AA8\" /><a href=\"http://files.gzpblog.com/wp/2017/02/git-1.png\"><img class=\"alignnone  wp-image-605\" src=\"http://files.gzpblog.com/wp/2017/02/git-1.png\" alt=\"\" width=\"694\" height=\"457\" /></a></div>\r\n<div>根据上面的图片，下面给出了每个部分的简要说明：</div>\r\n<ul>\r\n 	<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>\r\n 	<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>\r\n 	<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>\r\n 	<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>\r\n 	<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>\r\n 	<li>Stash：是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li>\r\n</ul>\r\n<h4>基本的 Git 工作流程如下：</h4>\r\n<ol>\r\n 	<li>在工作目录中修改文件。</li>\r\n 	<li>暂存文件，将文件的快照放入暂存区域。</li>\r\n 	<li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li>\r\n</ol>\r\n<h4><strong>使用 Git 时文件的生命周期：</strong></h4>\r\n<div><img src=\"C:\\Users\\Administrator\\AppData\\Local\\YNote\\data\\a3355222@163.com\\e197689931b84339a3df4b616ede0059\\clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"99FFBB709FAD4467875BCEF536AC00B3\" /><a href=\"http://files.gzpblog.com/wp/2017/02/git-2.png\"><img class=\"alignnone wp-image-606 \" src=\"http://files.gzpblog.com/wp/2017/02/git-2-1024x423.png\" width=\"618\" height=\"255\" /></a></div>\r\n<div></div>\r\n<div></div>\r\n<div></div>', 'Git——基本概念', '', 'inherit', 'closed', 'closed', '', '604-revision-v1', '', '', '2017-02-08 15:51:28', '2017-02-08 07:51:28', '', 604, 'http://www.gzpblog.com/20170208/613.html', 0, 'revision', '', 0),
(612, 1, '2017-02-08 15:51:17', '2017-02-08 07:51:17', '<h4>Git文件三种状态：</h4>\r\n<div><strong>已提交（committed）</strong>表示数据已经安全的保存在本地数据库中。</div>\r\n<div><strong>已修改（modified）</strong>表示修改了文件，但还没保存到数据库中。</div>\r\n<div><strong>已暂存（staged）</strong>表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</div>\r\n<div></div>\r\n<div></div>\r\n<h4>Git 项目的三个工作区域：</h4>\r\n<div><strong>Git 仓库目录：</strong>是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。 （\'Git目录\' 一般就是指项目根目录下的\'.git\'目录）</div>\r\n<div><strong>工作目录：</strong>是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</div>\r\n<div><strong>暂存区域：</strong>是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作`‘索引’\'，不过一般说法还是叫暂存区域。</div>\r\n<div></div>\r\n<div><img src=\"C:\\Users\\Administrator\\AppData\\Local\\YNote\\data\\a3355222@163.com\\23b80706c28042e88c694e8f1ec2323d\\clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"A0926A81E4CB4BE1A1B0C79D50D08AA8\" /><a href=\"http://files.gzpblog.com/wp/2017/02/git-1.png\"><img class=\"alignnone  wp-image-605\" src=\"http://files.gzpblog.com/wp/2017/02/git-1.png\" alt=\"\" width=\"694\" height=\"457\" /></a></div>\r\n<div>根据上面的图片，下面给出了每个部分的简要说明：</div>\r\n<ul>\r\n 	<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>\r\n 	<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>\r\n 	<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>\r\n 	<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>\r\n 	<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>\r\n 	<li>Stash：是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li>\r\n</ul>\r\n&nbsp;\r\n<h4>基本的 Git 工作流程如下：</h4>\r\n<ol>\r\n 	<li>在工作目录中修改文件。</li>\r\n 	<li>暂存文件，将文件的快照放入暂存区域。</li>\r\n 	<li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li>\r\n</ol>\r\n&nbsp;\r\n<h4><strong>使用 Git 时文件的生命周期：</strong></h4>\r\n<div><img src=\"C:\\Users\\Administrator\\AppData\\Local\\YNote\\data\\a3355222@163.com\\e197689931b84339a3df4b616ede0059\\clipboard.png\" data-media-type=\"image\" data-attr-org-src-id=\"99FFBB709FAD4467875BCEF536AC00B3\" /><a href=\"http://files.gzpblog.com/wp/2017/02/git-2.png\"><img class=\"alignnone wp-image-606 \" src=\"http://files.gzpblog.com/wp/2017/02/git-2-1024x423.png\" width=\"618\" height=\"255\" /></a></div>\r\n<div></div>\r\n<div></div>\r\n<div></div>', 'Git——基本概念', '', 'inherit', 'closed', 'closed', '', '604-revision-v1', '', '', '2017-02-08 15:51:17', '2017-02-08 07:51:17', '', 604, 'http://www.gzpblog.com/20170208/612.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(587, 1, '2017-01-11 17:00:52', '2017-01-11 09:00:52', '2016年，可以说是最折腾的一年。2016的最后一天，是在广州的医院里陪老妈度过的。\r\n\r\n&nbsp;\r\n\r\n先回顾一下学习工作方面吧，实际上一月份才开始找工作，过年前几天拼了命找呀，就想着年后上班，主要是想在上海稳下来。然后第一份工作，B2B电商平台，卖食品的，实际上我在看到这套程序代码的时候，我是有点接受不来，因为连我这种刚出来混的都觉得这代码有点low。当然，每一份工作都会有所收获，在这里我学到了:熟悉了Ecshop电商系统，基本上能做ecshop的二次开发;用这个项目练了练手，熟悉了一下学了不久的php，熟悉了一些开发过程中中可能会用到的工具，理念，调试方法等等;自己了解了微信公众平台的开发。\r\n\r\n&nbsp;\r\n\r\n第一份工作时间不长，三个月没转正，我就走了，原因是ecshop的二次开发，对于我这种初学者来说，每天重复着在ecshop里添加一些简单的功能，填别人挖的坑，对于我来说提高不大。刚出来混，还是学习深入一点的东西比较好。接下来，一个金融公司，这时候开始独立做app后台了。说实话一开始有点慌，后来过几天之后，就得心应手了，因为比较自由，连框架的选用都是我自己决定，只要我实现了功能就行。在这里，我学会了:熟练了ThinkPHP框架;熟练了命名空间面向对象等一些新的特性;理解了App后台和接口的一些概念，并且能够独立完成这些内容;学会设计一个简单的数据库等。\r\n\r\n&nbsp;\r\n\r\n第二份工作也干得不长，这个项目做完之后，没上线，反而是被停掉了。本来打算至少待一年的，没办法，后来就准备回深圳了。第三份工作，也就是现在，才一个多月，现在准备开始一个云平台的项目。来到这边，我觉得将会有很大的提高，因为其它人也很年轻，也在学习，我有更多的时间去学习和接触新的东西。就这一个多月的时间里，我已经逐渐地在了解学习Redis，composer，git，Nginx等内容了。而且在未来我也要自己抽一些时间去做一些东西了。\r\n\r\n&nbsp;\r\n\r\n总体上，2016年，从上海到深圳，在工作上我觉得是很充实的，学到的东西还是挺多的，而且碰到的同事也都非常不错。就是年尾老妈突然生病这个有点蛋疼，也幸好是回来广东回来得早。\r\n\r\n&nbsp;\r\n\r\n对于2017，技术上，我希望自己能够掌握laravel，swoole，vue.js，不说熟练至少熟悉Linux，看完mysql那本书(真正掌握mysql)，完成一个属于自己的项目，如果有时间学习一下数据结构和算法。生活上，老妈身体健康调整好心态，女朋友顺利来广东，一家人开开心心。当然，要开始想办法赚钱了，现在压力有点大。', '2016回顾总结', '', 'inherit', 'closed', 'closed', '', '569-revision-v1', '', '', '2017-01-11 17:00:52', '2017-01-11 09:00:52', '', 569, 'http://www.gzpblog.com/20170111/587.html', 0, 'revision', '', 0),
(588, 1, '2017-01-11 17:03:23', '2017-01-11 09:03:23', '', 'websecurity', '', 'inherit', 'open', 'closed', '', 'websecurity', '', '', '2017-01-11 17:03:23', '2017-01-11 09:03:23', '', 582, 'http://www.gzpblog.com/wp-content/uploads/2017/01/websecurity.jpg', 0, 'attachment', 'image/jpeg', 0),
(589, 1, '2017-01-11 17:03:32', '2017-01-11 09:03:32', '<h2>一. 防止SQL注入</h2>\r\n<h3>1 危害：</h3>\r\n1） 攻击者可以利用它读取、修改或者删除数据库内的数据，获取数据库中的用户名和密码等敏感信息\r\n2）甚至可以 获得数据库管理员的权限。\r\n3）如果能够再利用SQLServer扩展存储过程和自定义扩展存储过程来执行一些系统命令，攻击者还可以获得该系统的控制权。\r\n4）SQL Injection 也很难防范。网站管理员无法通过安装系统补丁或者进行简单的安全配置进行自我保护，一般的防火墙也无法拦截SQL Injection 攻击。\r\n<h3>2 原理：</h3>\r\n结构化查询语言(SQL)是一种用来和数据库交互的文本语言。SQL Injection 就是利用某些数据库的外部接口把用户数据插入到实际的数据库操作语言(SQL)当中，从而达到入侵数据库乃至操作系统的目的。它的产生主要是由于程序对用户输入 的数据没有进行严格的过滤，导致非法数据库查询语句的执行。\r\n<h3>3 注入方式举例：</h3>\r\n如下面的用户登陆验证程序：\r\n$sql = \"SELECT * FROM user WHERE username=\'$username\' AND password=\'$password\'\";\r\n$result = mysql_db_query($dbname, $sql);\r\n1） or注入\r\n如果我们提交如下url：\r\nhttp://127.0.0.1/injection/user.php?username=angel\' or \'1=1\r\n这个sql就变成：\r\nSELECT * FROM user WHERE username=\'angel\' or \'1=1\' AND password=\'$password\r\npassword部分就被这个or给怼没了，那么就可以不输入密码成功登陆系统\r\n2）注释注入\r\n同样我们也可以利用sql的注释语句实现sql注入，如下面的例子：\r\nhttp://127.0.0.1/injection/user.php?username=angel\'/*\r\nhttp://127.0.0.1/injection/user.php?username=angel\'%23\r\n根据mysql的特性，mysql支持/*和#两种注释格式，所以我们提交的时候是把后面的代码注释掉，值得注意的是由于编码问题，在地址栏里提交#会变成空的，所以我们在地址栏提交的时候，应该提交%23，才会变成#，就成功注释了。\r\n3）SQL注入语句大全\r\nhttp://blog.csdn.net/zzq19860626/article/details/10220427\r\n<h3>4 需要注意以下几个要点：</h3>\r\n1）永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和 双\"-\"进行转换等。\r\n2）永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。\r\n3）永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。\r\n4）不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。\r\n5）应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装\r\n<h3>5 PHP中我们如何解决</h3>\r\n1） PHP手册介绍的预防措施（PHP手册的SQL注入部分：http://php.net/manual/zh/security.database.sql-injection.php）：\r\n● 永远不要使用超级用户或所有者帐号去连接数据库。要用权限被严格限制的帐号。\r\n● 检查输入的数据是否具有所期望的数据格式。PHP 有很多可以用于检查输入的函数，从简单的变量函数和字符类型函数（比如 is_numeric()，ctype_digit()）到复杂的 Perl 兼容正则表达式函数都可以完成这个工作。\r\n● 如果程序等待输入一个数字，可以考虑使用 is_numeric() 来检查，或者直接使用 settype() 来转换它的类型，也可以用 sprintf() 把它格式化为数字。\r\n● 使用数据库特定的敏感字符转义函数（比如 mysql_escape_string() 和 sql_escape_string()）把用户提交上来的非数字数据进行转义。如果数据库没有专门的敏感字符转义功能的话 addslashes() 和 str_replace() 可以代替完成这个工作。\r\n● 要不择手段避免显示出任何有关数据库的信心，尤其是数据库结构。参见错误报告和错误处理函数。\r\n● 也可以选择使用数据库的存储过程和预定义指针等特性来抽象数库访问，使用户不能直接访问数据表和视图。但这个办法又有别的影响。\r\n● 在允许的情况下，使用代码或数据库系统保存查询日志也是一个好办法。显然，日志并不能防止任何攻击，但利用它可以跟踪到哪个程序曾经被尝试攻击过。日志本身没用，要查阅其中包含的信息才行。毕竟，更多的信息总比没有要好。\r\n\r\n2）使用PDO防止SQL注入\r\nPDO防注入原理分析以及使用PDO的注意事项：https://my.oschina.net/zxu/blog/148432\r\n<h2>二. 验证码</h2>\r\n对于识别验证码的程序来说，最难的部分是验证字符的切割和特征码的建立，而国内很多程序员只做验证码时，总是喜欢在验证码加很多干扰素，干扰线，影响效果不说，还达不到很好的效果；所以，要想使自己验证码难于本识别，只做下面两点就够了\r\n● 字符粘连，最好所有的字符都有粘连的部分；\r\n● 不要使用规格字符，验证码的各个部分使用不同比例的缩放或者旋转。\r\n只要做到这两点，或者这两点的变形，识别程序就很难识别。\r\n<h2>三. 刷新提交</h2>\r\n<h3>场景：</h3>\r\n● 点击提交按钮两次。\r\n● 点击刷新按钮。\r\n● 使用浏览器后退按钮重复之前的操作，导致重复提交表单。\r\n● 使用浏览器历史记录重复提交表单。\r\n● 浏览器重复的HTTP请求。\r\n用户提交表单时可能因为网速的原因，或者网页被恶意刷新，致使同一条记录重复插入到数据库中，这是一个比较棘手的问题。我们可以从客户端和服务器端一起着手，设法避免同一表单的重复提交。\r\n<h3>有效策略：</h3>\r\n● js禁掉提交按钮。\r\n表单提交后使用Javascript使提交按钮disable。这种方法防止心急的用户多次点击按钮。但有个问题，如果客户端把Javascript给禁止掉，这种方法就无效了。\r\n● 使用Post/Redirect/Get模式。\r\n在提交后执行页面重定向，这就是所谓的Post-Redirect-Get (PRG)模式。简言之，当用户提交了表单后，你去执行一个客户端的重定向，转到提交成功信息页面。这能避免用户按F5导致的重复提交，而其也不会出现浏览器表单重复提交的警告，也能消除按浏览器前进和后退按导致的同样问题。\r\n● 在session中存放一个特殊标志。\r\n当表单页面被请求时，生成一个特殊的字符标志串，存在session中，同时放在表单的隐藏域里。接受处理表单数据时，检查标识字串是否存在，并立即从session中删除它，然后正常处理数据。\r\n如果发现表单提交里没有有效的标志串，这说明表单已经被提交过了，忽略这次提交。\r\n● 使用header函数转向\r\n当用户提交表单，服务器端处理后立即转向其他的页面，代码如下所示。\r\n\r\n[php]\r\nif (isset($_POST[\'action\']) &amp;&amp; $_POST[\'action\'] == \'submitted\') {\r\n     //处理数据，如插入数据后，立即转向到其他页面\r\n     header(\'location:submits_success.php\');\r\n}\r\n\r\n[/php]\r\n\r\n这样，即使用户使用刷新键，也不会导致表单的重复提交，因为已经转向新的页面，而这个页面脚本已经不理会任何提交的数据了。\r\n● 在数据库里添加约束。\r\n在数据库里添加唯一约束或创建唯一索引，防止出现重复数据。这是最有效的防止重复提交数据的方法。\r\n● 使用Cookie处理\r\n使用Cookie记录表单提交的状态，根据其状态可以检查是否已经提交表单。如果客户端禁止了Cookie，该方法将不起任何作用，这点请注意。\r\n\r\n&nbsp;\r\n<h2>四. DOS攻击</h2>\r\n防止 DDoS 攻击的方式：\r\n● 减少公开暴露\r\n● 利用扩展和冗余\r\n● 充足的网络带宽保证\r\n● 分布式服务拒绝 DDoS 攻击\r\n● 实时监控系统性能\r\n● 这里提供一个简单的参考方法，修改php.ini文件\r\n1) \"disable_functions\"改成gzinflate，默认是放空\r\n2) ”allow_url_fopen“设为Off\r\n3) php_sockets.dll 把这个模块打开\r\n重启使配置生效，一般可以抵御掉DDOS攻击。\r\n● 51CTOblog的DDOS攻击与防御专题：<a href=\"http://blog.51cto.com/zt/282\" target=\"_blank\">http://blog.51cto.com/zt/282</a>\r\n\r\n&nbsp;\r\n<h2>五. 跨域攻击</h2>\r\n以下内容来自：<a href=\"https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/\" target=\"_blank\">https://blog.tonyseek.com/post/introduce-to-xss-and-csrf/</a>\r\n<h3>XSS</h3>\r\nXSS全称“跨站脚本”，是注入攻击的一种。其特点是不对服务器端造成任何伤害，而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个页面的时候就会运行这些脚本。\r\n防止 XSS 的根本之道还是过滤用户输入。用户输入总是不可信任的，这点对于 Web 开发者应该是常识。\r\n如果我们不需要用户输入 HTML 而只想让他们输入纯文本，那么把所有用户输入进行 HTML 转义输出是个不错的做法。似乎很多 Web 开发框架、模版引擎的开发者也发现了这一点，Django 内置模版和 Jinja2 模版总是默认转义输出变量的。如果没有使用它们，我们自己也可以这么做。PHP 可以用 htmlspecialchars 函数，Python 可以导入 cgi 模块用其中的 cgi.escape 函数。如果使用了某款模版引擎，那么其必自带了方便快捷的转义方式。\r\n对于复杂的情况，简单的方法就是白名单重新整理。\r\n“白名单”消毒 HTML 标签和属性（Sanitize HTML）的开源解决方案：\r\nJavaScript: <a href=\"https://github.com/punkave/sanitize-html\" target=\"_blank\">sanitize-html</a>\r\nPHP: <a href=\"http://htmlpurifier.org/\" target=\"_blank\">htmlpurifier </a>\r\n<h3>CSRF</h3>\r\nCSRF 和 XSS 根本是两个不同维度上的分类。XSS 是实现 CSRF 的诸多途径中的一条，但绝对不是唯一的一条。一般习惯上把通过 XSS 来实现的 CSRF 称为 XSRF。CSRF 的全称是“跨站请求伪造”。CSRF 的全称是“跨站请求伪造”，而 XSS 的全称是“跨站脚本”。看起来有点相似，它们都是属于跨站攻击——不攻击服务器端而攻击正常访问网站的用户。CSRF 顾名思义，是伪造请求，冒充用户在站内的正常操作。我们知道，绝大多数网站是通过 cookie 等方式辨识用户身份（包括使用服务器端 Session 的网站，因为 Session ID 也是大多保存在 cookie 里面的），再予以授权的。所以要伪造用户的正常操作，最好的方法是通过 XSS 或链接欺骗等途径，让用户在本机（即拥有身份 cookie 的浏览器端）发起用户所不知道的请求。\r\nCSRF 并不一定要有站内的输入，因为它并不属于注入攻击，而是请求伪造。被伪造的请求可以是任何来源，而非一定是站内。所以我们唯有一条路可行，就是过滤请求的处理者。\r\n首先可以提高的一个门槛，就是改良站内 API 的设计。对于发布帖子这一类创建资源的操作，应该只接受 POST 请求，而 GET 请求应该只浏览而不改变服务器端资源。\r\n接下来我们就可以用比较简单也比较有效的方法来防御 CSRF，这个方法就是“请求令牌”。实现方法非常简单，首先服务器端要以某种策略生成随机字符串，作为令牌（token），保存在 Session 里。然后在发出请求的页面，把该令牌以隐藏域一类的形式，与其他信息一并发出。在接收请求的页面，把接收到的信息中的令牌与 Session 中的令牌比较，只有一致的时候才处理请求，否则返回 HTTP 403 拒绝请求或者要求用户重新登录验证身份。\r\n\r\n如下也列出一些据说能有效防范 CSRF，其实效果甚微的方式甚至无效的做法：\r\n通过 referer 判定来源页面：referer 是在 HTTP Request Head 里面的，也就是由请求的发送者决定的。如果我喜欢，可以给 referer 任何值。当然这个做法并不是毫无作用，起码可以防小白。但我觉得性价比不如令牌。\r\n过滤所有用户发布的链接：这个是最无效的做法，因为首先攻击者不一定要从站内发起请求（上面提到过了），而且就算从站内发起请求，途径也远远不止链接一条。比如 &lt;img src=\"./create_post.php\" /&gt; 就是个不错的选择，还不需要用户去点击，只要用户的浏览器会自动加载图片，就会自动发起请求。\r\n在请求发起页面用 alert 弹窗提醒用户：这个方法看上去能干扰站外通过 iframe 发起的 CSRF，但攻击者也可以考虑用 window.alert = function(){}; 把 alert 弄哑，或者干脆脱离 iframe，使用 Flash 来达到目的。', 'PHP开发之网站安全', '', 'inherit', 'closed', 'closed', '', '582-revision-v1', '', '', '2017-01-11 17:03:32', '2017-01-11 09:03:32', '', 582, 'http://www.gzpblog.com/20170111/589.html', 0, 'revision', '', 0),
(790, 1, '2017-03-11 02:05:26', '2017-03-10 18:05:26', '', 'Apache500_1', '', 'inherit', 'open', 'closed', '', 'apache500_1', '', '', '2017-03-11 02:05:26', '2017-03-10 18:05:26', '', 788, 'https://www.gzpblog.com/wp-content/uploads/2017/03/Apache500_1.png', 0, 'attachment', 'image/png', 0),
(789, 1, '2017-03-11 02:05:25', '2017-03-10 18:05:25', '', 'Apache500_4', '', 'inherit', 'open', 'closed', '', 'apache500_4', '', '', '2017-03-11 02:05:25', '2017-03-10 18:05:25', '', 788, 'https://www.gzpblog.com/wp-content/uploads/2017/03/Apache500_4.png', 0, 'attachment', 'image/png', 0),
(712, 1, '2017-02-28 17:45:58', '2017-02-28 09:45:58', '这几天在折腾服务器，自己搭运行环境，全部编译安装，总是会出现这样那样的问题，差点奔溃。不过还算是研究出来一点眉目，一开始搭建LAMP，LNMP都是各种报错，到能搭出来勉强能跑的环境，再到现在这个稍微正常点的LNMP，别提多幸酸了，特别是mysql这个货，感觉必报错啊！\r\n\r\n基本上一般的错误都被我碰到过了，大概掌握了Linux中如何解决这类问题，以及摸了下linux系统的眉目，学习linux计划中的第一步，学会搭建环境，终于完成（之前学linux没搭好就放弃过一次，然后忙别的就没继续）。\r\n\r\n总结出来一些经验：\r\n<ul>\r\n 	<li>千万不要放弃！刚刚接触，途中会各种报错，各种error，搞到你想放弃！但是放弃了，就永远搭不起来这个环境，要去查看究竟是哪里出错了。</li>\r\n 	<li>在Linux上认识到了log的重要性，不知道错误是什么原因的时候就查日志。</li>\r\n 	<li>查看资料后，不要无脑复制黏贴，特别是一些有路径的。</li>\r\n 	<li>在不断的实践中可以认识到Linux的运行机制，毕竟跟windows差别是天和地，比如配置文件怎么搞，服务怎么搞等等。</li>\r\n 	<li>记一些vim的命令，效率会高很多</li>\r\n</ul>\r\n现在身心疲惫，缓缓。。。', '战了好几天终于搭好了Centos的运行环境！', '', 'publish', 'open', 'open', '', '%e6%88%98%e4%ba%86%e5%a5%bd%e5%87%a0%e5%a4%a9%e7%bb%88%e4%ba%8e%e6%90%ad%e5%a5%bd%e4%ba%86centos%e7%9a%84%e8%bf%90%e8%a1%8c%e7%8e%af%e5%a2%83%ef%bc%81', '', '', '2017-02-28 17:45:58', '2017-02-28 09:45:58', '', 0, 'http://www.gzpblog.com/?p=712', 0, 'post', '', 3),
(715, 1, '2017-02-28 17:45:58', '2017-02-28 09:45:58', '这几天在折腾服务器，自己搭运行环境，全部编译安装，总是会出现这样那样的问题，差点奔溃。不过还算是研究出来一点眉目，一开始搭建LAMP，LNMP都是各种报错，到能搭出来勉强能跑的环境，再到现在这个稍微正常点的LNMP，别提多幸酸了，特别是mysql这个货，感觉必报错啊！\r\n\r\n基本上一般的错误都被我碰到过了，大概掌握了Linux中如何解决这类问题，以及摸了下linux系统的眉目，学习linux计划中的第一步，学会搭建环境，终于完成（之前学linux没搭好就放弃过一次，然后忙别的就没继续）。\r\n\r\n总结出来一些经验：\r\n<ul>\r\n 	<li>千万不要放弃！刚刚接触，途中会各种报错，各种error，搞到你想放弃！但是放弃了，就永远搭不起来这个环境，要去查看究竟是哪里出错了。</li>\r\n 	<li>在Linux上认识到了log的重要性，不知道错误是什么原因的时候就查日志。</li>\r\n 	<li>查看资料后，不要无脑复制黏贴，特别是一些有路径的。</li>\r\n 	<li>在不断的实践中可以认识到Linux的运行机制，毕竟跟windows差别是天和地，比如配置文件怎么搞，服务怎么搞等等。</li>\r\n 	<li>记一些vim的命令，效率会高很多</li>\r\n</ul>\r\n现在身心疲惫，缓缓。。。', '战了好几天终于搭好了Centos的运行环境！', '', 'inherit', 'closed', 'closed', '', '712-revision-v1', '', '', '2017-02-28 17:45:58', '2017-02-28 09:45:58', '', 712, 'http://www.gzpblog.com/20170228/715.html', 0, 'revision', '', 0),
(716, 1, '2017-03-02 00:51:57', '2017-03-01 16:51:57', '更换服务器之后，我发现我的发送邮件功能失效了！原来的服务器是可以的，一定是哪里出问题了，决定来排查一下。我是用的PHPMailer，SMTP方式发送邮件的。\r\n\r\n这种方式首先PHP要开启sockets拓展，查了一下phpinfo页面，是开启的：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail1.png\"><img class=\"size-full wp-image-720 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail1.png\" alt=\"\" width=\"970\" height=\"89\" /></a>\r\n\r\n看了一下openssl也是开启（因为拿了qq邮箱来测），所以没问题：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail2.png\"><img class=\"size-full wp-image-721 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail2.png\" alt=\"\" width=\"950\" height=\"242\" /></a>\r\n\r\n那就再看一下allow_url_fopen，开启的，没问题：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail3.png\"><img class=\"size-full wp-image-722 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail3.png\" alt=\"\" width=\"962\" height=\"33\" /></a>\r\n\r\n是不是禁用了函数？没有禁用，没问题：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail4.png\"><img class=\"size-full wp-image-723 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail4.png\" alt=\"\" width=\"954\" height=\"30\" /></a>\r\n那配置上就没有问题了，我就想，是不是端口被占用了？\r\n\r\n运行一下：<strong>netstat -tnlp</strong>\r\n\r\n第一条就是这玩意：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail5.png\"><img class=\"size-large wp-image-724 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail5-1024x51.png\" alt=\"\" width=\"1024\" height=\"51\" /></a>\r\n\r\n25端口被占用，被一个叫master的玩意占了，好家伙，看看是什么东西，运行<strong>ps -f -p 1818</strong>看一下结果，1818为当前这个程序的进程号PID，可以看到是：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail6.png\"><img class=\"size-full wp-image-725 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail6.png\" alt=\"\" width=\"761\" height=\"64\" /></a>\r\n\r\n是postfix这个东西在运行，可能搭建环境的时候不小心给装了。\r\n<h4>postfix是个什么东西？</h4>\r\npostfix是一款运行在Linux环境下免费的邮件服务器，或者称为MTA(Mail Transfer Agent)，其它类似的有Sendmail、Qmail、exim及Zmailer 等。所以Postfix就是一个搭邮件服务器的。那这玩意肯定是冲突了，我们要通过25端口请求外部的邮件服务器，而本地用25端口运行了一个邮件服务器，这个是不行的估计.\r\n<h4>尝试解决问题</h4>\r\n我们尝试一下用我们这个邮件服务器去发邮件，而不是用外部服务器（比如之前用阿里云企业邮），放了一小段测试代码到PHPMailer目录同级下：\r\n\r\n[php]\r\n&lt;?php header(&quot;content-type:text/html;charset=utf-8&quot;); require \'PHPMailer/class.phpmailer.php\'; try { $mail = new PHPMailer(true); $mail-&gt;IsSMTP();\r\n $mail-&gt;CharSet=\'UTF-8\';\r\n $mail-&gt;SMTPAuth = true;\r\n $mail-&gt;Port = 25;\r\n $mail-&gt;Host = \'127.0.0.1\';//邮箱smtp地址\r\n $mail-&gt;Username = \'gzp@gzpblog.com\';//你的邮箱账号\r\n $mail-&gt;Password = \'扒拉扒拉。。。\';//你的邮箱密码\r\n $mail-&gt;From = \'gzp@gzpblog.com\';//你的邮箱账号\r\n $mail-&gt;FromName = \'锅子\';\r\n $to = &quot;扒拉扒拉@qq.com&quot;;\r\n $mail-&gt;AddAddress($to);\r\n $mail-&gt;Subject = &quot;test&quot;;\r\n $mail-&gt;Body = \'hello!\';\r\n $mail-&gt;WordWrap = 80;\r\n $mail-&gt;IsHTML(true);\r\n $mail-&gt;Send();\r\n echo &quot;success!&quot;;\r\n } catch (phpmailerException $e) {\r\n echo &quot;邮件发送失败：&quot;.$e-&gt;errorMessage(); \r\n}\r\n\r\n[/php]\r\n\r\n通过25端口的本地服务器发送邮件，运行这个页面，发现不行，报错不能够验证，说明这其中还有一些配置要弄，暂时行不通，不往下深究本地服务器发送了，我们尝试一下换回：\r\n\r\n$mail-&gt;Host = \'smtp.mxhichina.com\'; //阿里云的邮箱smtp地址\r\n\r\n试一下，还是不行：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail7.png\"><img class=\"size-full wp-image-717 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail7.png\" alt=\"\" width=\"502\" height=\"53\" /></a>\r\n\r\n没办法连接到SMTP。那我们把25端口的postfix服务器杀掉， 执行<strong>kill 1818</strong>（当前postfix的PID），再执行一次，还是同样错误，无法连接上。这就奇了怪了，25端口没有程序运行了，还不行。\r\n<h4>可能的原因</h4>\r\n查到有可能是因为ipv6的原因，phpMailer在进行smtp服务器DNS解析时，得到了IP v6地址，然后与IP v6解析到的地址进行连接，导致连接失败。\r\n\r\n我试一下：\r\n\r\n<strong>ip -6 addr show</strong>\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail8.png\"><img class=\"size-full wp-image-718 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail8.png\" alt=\"\" width=\"589\" height=\"55\" /></a>\r\n\r\n没东西，那又不是这个问题。\r\n\r\n那是什么原因呢？\r\n<h4>解决问题</h4>\r\n既然25端口不可用，于是我想，是否可以尝试一下其它端口，用465端口试试。\r\n<blockquote>465端口（SMTPS）：465端口是为SMTPS（SMTP-over-SSL）协议服务开放的，这是SMTP协议基于SSL安全协议之上的一种变种协议，它继承了SSL安全协议的非对称加密的高度安全可靠性，可防止邮件泄露。SMTPS和SMTP协议一样，也是用来发送邮件的，只是更安全些，防止邮件被黑客截取泄露，还可实现邮件发送者抗抵赖功能。防止发送者发送之后删除已发邮件，拒不承认发送过这样一份邮件。</blockquote>\r\n465端口似乎看起来还更好，直接就开始尝试了，进行以下尝试，以下为命令：\r\n<strong>sbin/iptables -I OUTPUT -p tcp --dport 465 -j ACCEPT</strong>  打通465端口\r\n<strong>/etc/rc.d/init.d/iptables save</strong> 保存\r\n<strong>service iptables restart</strong> 重启\r\n<strong>/etc/init.d/iptables status</strong> 查看需要打开的端口是否生效？\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail9.png\"><img class=\"size-full wp-image-719 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail9.png\" alt=\"\" width=\"896\" height=\"412\" /></a>\r\n\r\n似乎可行，现在尝试一下，用SMTP的465SSL连接方式来发送邮件，稍微改了一下测试代码：\r\n\r\n[php]\r\n&lt;?php header(&quot;content-type:text/html;charset=utf-8&quot;); require \'PHPMailer/class.phpmailer.php\'; try { $mail = new PHPMailer(true); $mail-&gt;IsSMTP();\r\n$mail-&gt;CharSet=\'UTF-8\';\r\n$mail-&gt;SMTPAuth = true;\r\n$mail-&gt;SMTPSecure = \'ssl\';\r\n$mail-&gt;Port = 465;\r\n$mail-&gt;Host = \'smtp.mxhichina.com\';//邮箱smtp地址\r\n$mail-&gt;Username = \'gzp@gzpblog.com\';//你的邮箱账号\r\n$mail-&gt;Password = \'扒拉扒拉。。。\';//你的邮箱密码\r\n$mail-&gt;From = \'gzp@gzpblog.com\';//你的邮箱账号\r\n$mail-&gt;FromName = \'锅子\';\r\n$to = &quot;扒拉扒拉@qq.com&quot;;\r\n$mail-&gt;AddAddress($to);\r\n$mail-&gt;Subject = &quot;test&quot;;\r\n$mail-&gt;Body = \'hello!\';\r\n$mail-&gt;WordWrap = 80;\r\n//$mail-&gt;AddAttachment(&quot;f:/test.png&quot;); //可以添加附件\r\n$mail-&gt;IsHTML(true);\r\n$mail-&gt;Send();\r\necho &quot;success!&quot;;\r\n} catch (phpmailerException $e) {\r\necho &quot;邮件发送失败：&quot;.$e-&gt;errorMessage(); //测试的时候可以去掉此行的注释\r\n}\r\n\r\n[/php]\r\n\r\n执行，成功！右下角弹出了QQ邮件的提醒。\r\n<h4>总结</h4>\r\nPHPMailer通过465端口进行更安全的SMTPS协议发送邮件\r\n\r\n可以修改：\r\n\r\n[php]\r\n\r\n$mail-&gt;Port = 465;\r\n\r\n[/php]\r\n\r\n为：\r\n\r\n[php]\r\n\r\n$mail-&gt;SMTPSecure = \'ssl\';\r\n$mail-&gt;Port = 465;\r\n\r\n[/php]\r\n\r\n即可。\r\n\r\n&nbsp;', 'Linux服务器中PHPMailer发送邮件失效排查并解决', '', 'publish', 'open', 'open', '', 'linux%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%b8%adphpmailer%e5%8f%91%e9%80%81%e9%82%ae%e4%bb%b6%e5%a4%b1%e6%95%88%e6%8e%92%e6%9f%a5%e5%b9%b6%e8%a7%a3%e5%86%b3', '', '', '2017-03-02 00:59:38', '2017-03-01 16:59:38', '', 0, 'http://www.gzpblog.com/?p=716', 0, 'post', '', 0),
(717, 1, '2017-03-02 00:32:21', '2017-03-01 16:32:21', '', 'checkmail7', '', 'inherit', 'open', 'closed', '', 'checkmail7', '', '', '2017-03-02 00:32:21', '2017-03-01 16:32:21', '', 716, 'http://www.gzpblog.com/wp-content/uploads/2017/03/checkmail7.png', 0, 'attachment', 'image/png', 0),
(718, 1, '2017-03-02 00:32:24', '2017-03-01 16:32:24', '', 'checkmail8', '', 'inherit', 'open', 'closed', '', 'checkmail8', '', '', '2017-03-02 00:32:24', '2017-03-01 16:32:24', '', 716, 'http://www.gzpblog.com/wp-content/uploads/2017/03/checkmail8.png', 0, 'attachment', 'image/png', 0),
(719, 1, '2017-03-02 00:32:26', '2017-03-01 16:32:26', '', 'checkmail9', '', 'inherit', 'open', 'closed', '', 'checkmail9', '', '', '2017-03-02 00:32:26', '2017-03-01 16:32:26', '', 716, 'http://www.gzpblog.com/wp-content/uploads/2017/03/checkmail9.png', 0, 'attachment', 'image/png', 0),
(720, 1, '2017-03-02 00:32:28', '2017-03-01 16:32:28', '', 'checkmail1', '', 'inherit', 'open', 'closed', '', 'checkmail1', '', '', '2017-03-02 00:32:28', '2017-03-01 16:32:28', '', 716, 'http://www.gzpblog.com/wp-content/uploads/2017/03/checkmail1.png', 0, 'attachment', 'image/png', 0),
(721, 1, '2017-03-02 00:32:29', '2017-03-01 16:32:29', '', 'checkmail2', '', 'inherit', 'open', 'closed', '', 'checkmail2', '', '', '2017-03-02 00:32:29', '2017-03-01 16:32:29', '', 716, 'http://www.gzpblog.com/wp-content/uploads/2017/03/checkmail2.png', 0, 'attachment', 'image/png', 0),
(722, 1, '2017-03-02 00:32:31', '2017-03-01 16:32:31', '', 'checkmail3', '', 'inherit', 'open', 'closed', '', 'checkmail3', '', '', '2017-03-02 00:32:31', '2017-03-01 16:32:31', '', 716, 'http://www.gzpblog.com/wp-content/uploads/2017/03/checkmail3.png', 0, 'attachment', 'image/png', 0),
(723, 1, '2017-03-02 00:32:32', '2017-03-01 16:32:32', '', 'checkmail4', '', 'inherit', 'open', 'closed', '', 'checkmail4', '', '', '2017-03-02 00:32:32', '2017-03-01 16:32:32', '', 716, 'http://www.gzpblog.com/wp-content/uploads/2017/03/checkmail4.png', 0, 'attachment', 'image/png', 0),
(724, 1, '2017-03-02 00:32:33', '2017-03-01 16:32:33', '', 'checkmail5', '', 'inherit', 'open', 'closed', '', 'checkmail5', '', '', '2017-03-02 00:32:33', '2017-03-01 16:32:33', '', 716, 'http://www.gzpblog.com/wp-content/uploads/2017/03/checkmail5.png', 0, 'attachment', 'image/png', 0),
(725, 1, '2017-03-02 00:32:35', '2017-03-01 16:32:35', '', 'checkmail6', '', 'inherit', 'open', 'closed', '', 'checkmail6', '', '', '2017-03-02 00:32:35', '2017-03-01 16:32:35', '', 716, 'http://www.gzpblog.com/wp-content/uploads/2017/03/checkmail6.png', 0, 'attachment', 'image/png', 0),
(726, 1, '2017-03-02 00:47:59', '2017-03-01 16:47:59', '', 'checkmail10', '', 'inherit', 'open', 'closed', '', 'checkmail10', '', '', '2017-03-02 00:47:59', '2017-03-01 16:47:59', '', 716, 'http://www.gzpblog.com/wp-content/uploads/2017/03/checkmail10.png', 0, 'attachment', 'image/png', 0),
(729, 1, '2017-03-02 00:59:38', '2017-03-01 16:59:38', '更换服务器之后，我发现我的发送邮件功能失效了！原来的服务器是可以的，一定是哪里出问题了，决定来排查一下。我是用的PHPMailer，SMTP方式发送邮件的。\r\n\r\n这种方式首先PHP要开启sockets拓展，查了一下phpinfo页面，是开启的：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail1.png\"><img class=\"size-full wp-image-720 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail1.png\" alt=\"\" width=\"970\" height=\"89\" /></a>\r\n\r\n看了一下openssl也是开启（因为拿了qq邮箱来测），所以没问题：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail2.png\"><img class=\"size-full wp-image-721 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail2.png\" alt=\"\" width=\"950\" height=\"242\" /></a>\r\n\r\n那就再看一下allow_url_fopen，开启的，没问题：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail3.png\"><img class=\"size-full wp-image-722 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail3.png\" alt=\"\" width=\"962\" height=\"33\" /></a>\r\n\r\n是不是禁用了函数？没有禁用，没问题：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail4.png\"><img class=\"size-full wp-image-723 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail4.png\" alt=\"\" width=\"954\" height=\"30\" /></a>\r\n那配置上就没有问题了，我就想，是不是端口被占用了？\r\n\r\n运行一下：<strong>netstat -tnlp</strong>\r\n\r\n第一条就是这玩意：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail5.png\"><img class=\"size-large wp-image-724 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail5-1024x51.png\" alt=\"\" width=\"1024\" height=\"51\" /></a>\r\n\r\n25端口被占用，被一个叫master的玩意占了，好家伙，看看是什么东西，运行<strong>ps -f -p 1818</strong>看一下结果，1818为当前这个程序的进程号PID，可以看到是：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail6.png\"><img class=\"size-full wp-image-725 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail6.png\" alt=\"\" width=\"761\" height=\"64\" /></a>\r\n\r\n是postfix这个东西在运行，可能搭建环境的时候不小心给装了。\r\n<h4>postfix是个什么东西？</h4>\r\npostfix是一款运行在Linux环境下免费的邮件服务器，或者称为MTA(Mail Transfer Agent)，其它类似的有Sendmail、Qmail、exim及Zmailer 等。所以Postfix就是一个搭邮件服务器的。那这玩意肯定是冲突了，我们要通过25端口请求外部的邮件服务器，而本地用25端口运行了一个邮件服务器，这个是不行的估计.\r\n<h4>尝试解决问题</h4>\r\n我们尝试一下用我们这个邮件服务器去发邮件，而不是用外部服务器（比如之前用阿里云企业邮），放了一小段测试代码到PHPMailer目录同级下：\r\n\r\n[php]\r\n&lt;?php header(&quot;content-type:text/html;charset=utf-8&quot;); require \'PHPMailer/class.phpmailer.php\'; try { $mail = new PHPMailer(true); $mail-&gt;IsSMTP();\r\n $mail-&gt;CharSet=\'UTF-8\';\r\n $mail-&gt;SMTPAuth = true;\r\n $mail-&gt;Port = 25;\r\n $mail-&gt;Host = \'127.0.0.1\';//邮箱smtp地址\r\n $mail-&gt;Username = \'gzp@gzpblog.com\';//你的邮箱账号\r\n $mail-&gt;Password = \'扒拉扒拉。。。\';//你的邮箱密码\r\n $mail-&gt;From = \'gzp@gzpblog.com\';//你的邮箱账号\r\n $mail-&gt;FromName = \'锅子\';\r\n $to = &quot;扒拉扒拉@qq.com&quot;;\r\n $mail-&gt;AddAddress($to);\r\n $mail-&gt;Subject = &quot;test&quot;;\r\n $mail-&gt;Body = \'hello!\';\r\n $mail-&gt;WordWrap = 80;\r\n $mail-&gt;IsHTML(true);\r\n $mail-&gt;Send();\r\n echo &quot;success!&quot;;\r\n } catch (phpmailerException $e) {\r\n echo &quot;邮件发送失败：&quot;.$e-&gt;errorMessage(); \r\n}\r\n\r\n[/php]\r\n\r\n通过25端口的本地服务器发送邮件，运行这个页面，发现不行，报错不能够验证，说明这其中还有一些配置要弄，暂时行不通，不往下深究本地服务器发送了，我们尝试一下换回：\r\n\r\n$mail-&gt;Host = \'smtp.mxhichina.com\'; //阿里云的邮箱smtp地址\r\n\r\n试一下，还是不行：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail7.png\"><img class=\"size-full wp-image-717 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail7.png\" alt=\"\" width=\"502\" height=\"53\" /></a>\r\n\r\n没办法连接到SMTP。那我们把25端口的postfix服务器杀掉， 执行<strong>kill 1818</strong>（当前postfix的PID），再执行一次，还是同样错误，无法连接上。这就奇了怪了，25端口没有程序运行了，还不行。\r\n<h4>可能的原因</h4>\r\n查到有可能是因为ipv6的原因，phpMailer在进行smtp服务器DNS解析时，得到了IP v6地址，然后与IP v6解析到的地址进行连接，导致连接失败。\r\n\r\n我试一下：\r\n\r\n<strong>ip -6 addr show</strong>\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail8.png\"><img class=\"size-full wp-image-718 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail8.png\" alt=\"\" width=\"589\" height=\"55\" /></a>\r\n\r\n没东西，那又不是这个问题。\r\n\r\n那是什么原因呢？\r\n<h4>解决问题</h4>\r\n既然25端口不可用，于是我想，是否可以尝试一下其它端口，用465端口试试。\r\n<blockquote>465端口（SMTPS）：465端口是为SMTPS（SMTP-over-SSL）协议服务开放的，这是SMTP协议基于SSL安全协议之上的一种变种协议，它继承了SSL安全协议的非对称加密的高度安全可靠性，可防止邮件泄露。SMTPS和SMTP协议一样，也是用来发送邮件的，只是更安全些，防止邮件被黑客截取泄露，还可实现邮件发送者抗抵赖功能。防止发送者发送之后删除已发邮件，拒不承认发送过这样一份邮件。</blockquote>\r\n465端口似乎看起来还更好，直接就开始尝试了，进行以下尝试，以下为命令：\r\n<strong>sbin/iptables -I OUTPUT -p tcp --dport 465 -j ACCEPT</strong>  打通465端口\r\n<strong>/etc/rc.d/init.d/iptables save</strong> 保存\r\n<strong>service iptables restart</strong> 重启\r\n<strong>/etc/init.d/iptables status</strong> 查看需要打开的端口是否生效？\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail9.png\"><img class=\"size-full wp-image-719 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail9.png\" alt=\"\" width=\"896\" height=\"412\" /></a>\r\n\r\n似乎可行，现在尝试一下，用SMTP的465SSL连接方式来发送邮件，稍微改了一下测试代码：\r\n\r\n[php]\r\n&lt;?php header(&quot;content-type:text/html;charset=utf-8&quot;); require \'PHPMailer/class.phpmailer.php\'; try { $mail = new PHPMailer(true); $mail-&gt;IsSMTP();\r\n$mail-&gt;CharSet=\'UTF-8\';\r\n$mail-&gt;SMTPAuth = true;\r\n$mail-&gt;SMTPSecure = \'ssl\';\r\n$mail-&gt;Port = 465;\r\n$mail-&gt;Host = \'smtp.mxhichina.com\';//邮箱smtp地址\r\n$mail-&gt;Username = \'gzp@gzpblog.com\';//你的邮箱账号\r\n$mail-&gt;Password = \'扒拉扒拉。。。\';//你的邮箱密码\r\n$mail-&gt;From = \'gzp@gzpblog.com\';//你的邮箱账号\r\n$mail-&gt;FromName = \'锅子\';\r\n$to = &quot;扒拉扒拉@qq.com&quot;;\r\n$mail-&gt;AddAddress($to);\r\n$mail-&gt;Subject = &quot;test&quot;;\r\n$mail-&gt;Body = \'hello!\';\r\n$mail-&gt;WordWrap = 80;\r\n//$mail-&gt;AddAttachment(&quot;f:/test.png&quot;); //可以添加附件\r\n$mail-&gt;IsHTML(true);\r\n$mail-&gt;Send();\r\necho &quot;success!&quot;;\r\n} catch (phpmailerException $e) {\r\necho &quot;邮件发送失败：&quot;.$e-&gt;errorMessage(); //测试的时候可以去掉此行的注释\r\n}\r\n\r\n[/php]\r\n\r\n执行，成功！右下角弹出了QQ邮件的提醒。\r\n<h4>总结</h4>\r\nPHPMailer通过465端口进行更安全的SMTPS协议发送邮件\r\n\r\n可以修改：\r\n\r\n[php]\r\n\r\n$mail-&gt;Port = 465;\r\n\r\n[/php]\r\n\r\n为：\r\n\r\n[php]\r\n\r\n$mail-&gt;SMTPSecure = \'ssl\';\r\n$mail-&gt;Port = 465;\r\n\r\n[/php]\r\n\r\n即可。\r\n\r\n&nbsp;', 'Linux服务器中PHPMailer发送邮件失效排查并解决', '', 'inherit', 'closed', 'closed', '', '716-revision-v1', '', '', '2017-03-02 00:59:38', '2017-03-01 16:59:38', '', 716, 'http://www.gzpblog.com/20170302/729.html', 0, 'revision', '', 0),
(727, 1, '2017-03-02 00:51:57', '2017-03-01 16:51:57', '更换服务器之后，我发现我的发送邮件功能失效了！原来的服务器是可以的，一定是哪里出问题了，决定来排查一下。我是用的PHPMailer，SMTP方式发送邮件的。\r\n\r\n这种方式首先PHP要开启sockets拓展，查了一下phpinfo页面，是开启的：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail1.png\"><img class=\"size-full wp-image-720 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail1.png\" alt=\"\" width=\"970\" height=\"89\" /></a>\r\n\r\n看了一下openssl也是开启（因为拿了qq邮箱来测），所以没问题：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail2.png\"><img class=\"size-full wp-image-721 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail2.png\" alt=\"\" width=\"950\" height=\"242\" /></a>\r\n\r\n那就再看一下allow_url_fopen，开启的，没问题：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail3.png\"><img class=\"size-full wp-image-722 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail3.png\" alt=\"\" width=\"962\" height=\"33\" /></a>\r\n\r\n是不是禁用了函数？没有禁用，没问题：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail4.png\"><img class=\"size-full wp-image-723 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail4.png\" alt=\"\" width=\"954\" height=\"30\" /></a>\r\n那配置上就没有问题了，我就想，是不是端口被占用了？\r\n\r\n运行一下：<strong>netstat -tnlp</strong>\r\n\r\n第一条就是这玩意：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail5.png\"><img class=\"size-large wp-image-724 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail5-1024x51.png\" alt=\"\" width=\"1024\" height=\"51\" /></a>\r\n\r\n25端口被占用，被一个叫master的玩意占了，好家伙，看看是什么东西，运行ps -f -p 1818看一下结果，1818为当前这个程序的进程号PID，可以看到是：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail6.png\"><img class=\"size-full wp-image-725 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail6.png\" alt=\"\" width=\"761\" height=\"64\" /></a>\r\n\r\n是postfix这个东西在运行，可能搭建环境的时候不小心给装了。\r\n<h4>postfix是个什么东西？</h4>\r\npostfix是一款运行在Linux环境下免费的邮件服务器，或者称为MTA(Mail Transfer Agent)，其它类似的有Sendmail、Qmail、exim及Zmailer 等。所以Postfix就是一个搭邮件服务器的。那这玩意肯定是冲突了，我们要通过25端口请求外部的邮件服务器，而本地用25端口运行了一个邮件服务器，这个是不行的估计.\r\n<h4>尝试解决问题</h4>\r\n我们尝试一下用我们这个邮件服务器去发邮件，而不是用外部服务器（比如之前用阿里云企业邮），放了一小段测试代码到PHPMailer目录同级下：\r\n\r\n[php]\r\n&amp;lt;?php \r\nheader(&quot;content-type:text/html;charset=utf-8&quot;);\r\nrequire \'PHPMailer/class.phpmailer.php\';\r\ntry {\r\n $mail = new PHPMailer(true);\r\n $mail-&amp;gt;IsSMTP();\r\n $mail-&amp;gt;CharSet=\'UTF-8\';\r\n $mail-&amp;gt;SMTPAuth = true;\r\n $mail-&amp;gt;Port = 25;\r\n $mail-&amp;gt;Host = \'127.0.0.1\';\r\n $mail-&amp;gt;Username = \'gzp@gzpblog.com\';//你的邮箱账号\r\n $mail-&amp;gt;Password = \'扒拉扒拉。。。\';//你的邮箱密码\r\n $mail-&amp;gt;From = \'gzp@gzpblog.com\';//你的邮箱账号\r\n $mail-&amp;gt;FromName = \'锅子\';\r\n $to = &quot;扒拉扒拉@qq.com&quot;;\r\n $mail-&amp;gt;AddAddress($to);\r\n $mail-&amp;gt;Subject = &quot;test&quot;;\r\n $mail-&amp;gt;Body = \'hello!\';\r\n $mail-&amp;gt;WordWrap = 80;\r\n $mail-&amp;gt;IsHTML(true);\r\n $mail-&amp;gt;Send();\r\n echo &quot;success!&quot;;\r\n } catch (phpmailerException $e) {\r\n echo &quot;邮件发送失败：&quot;.$e-&amp;gt;errorMessage(); \r\n}\r\n\r\n[/php]\r\n\r\n通过25端口的本地服务器发送邮件，运行这个页面，发现不行，报错不能够验证，说明这其中还有一些配置要弄，暂时行不通，不往下深究本地服务器发送了，我们尝试一下换回：\r\n\r\n&nbsp;\r\n\r\n$mail-&gt;Host = \'smtp.mxhichina.com\'; //阿里云的邮箱smtp地址\r\n\r\n试一下，还是不行：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail7.png\"><img class=\"size-full wp-image-717 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail7.png\" alt=\"\" width=\"502\" height=\"53\" /></a>\r\n\r\n没办法连接到SMTP。那我们把25端口的postfix服务器杀掉， 执行<strong>kill 1818</strong>（当前postfix的PID），再执行一次，还是同样错误，无法连接上。这就奇了怪了，25端口没有程序运行了，还不行。\r\n<h4>可能的原因</h4>\r\n查到有可能是因为ipv6的原因，phpMailer在进行smtp服务器DNS解析时，得到了IP v6地址，然后与IP v6解析到的地址进行连接，导致连接失败。\r\n\r\n我试一下：\r\n\r\n<strong>ip -6 addr show</strong>\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail8.png\"><img class=\"size-full wp-image-718 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail8.png\" alt=\"\" width=\"589\" height=\"55\" /></a>\r\n\r\n没东西，那又不是这个问题。\r\n\r\n<strong>那是什么原因呢？</strong>\r\n\r\n既然25端口不可用，于是我想，是否可以尝试一下其它端口，用465端口试试。\r\n<blockquote>465端口（SMTPS）：465端口是为SMTPS（SMTP-over-SSL）协议服务开放的，这是SMTP协议基于SSL安全协议之上的一种变种协议，它继承了SSL安全协议的非对称加密的高度安全可靠性，可防止邮件泄露。SMTPS和SMTP协议一样，也是用来发送邮件的，只是更安全些，防止邮件被黑客截取泄露，还可实现邮件发送者抗抵赖功能。防止发送者发送之后删除已发邮件，拒不承认发送过这样一份邮件。</blockquote>\r\n465端口似乎看起来还更好，直接就开始尝试了，进行以下尝试，以下为命令：\r\n<strong>sbin/iptables -I OUTPUT -p tcp --dport 465 -j ACCEPT</strong>  打通465端口\r\n<strong>/etc/rc.d/init.d/iptables save</strong> 保存\r\n<strong>service iptables restart</strong> 重启\r\n<strong>/etc/init.d/iptables status</strong> 查看需要打开的端口是否生效？\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail9.png\"><img class=\"size-full wp-image-719 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail9.png\" alt=\"\" width=\"896\" height=\"412\" /></a>\r\n\r\n似乎可行，现在尝试一下，用SMTP的465SSL连接方式来发送邮件，稍微改了一下测试代码：\r\n\r\n\r\n[php]\r\n&lt;?php\r\nheader(&quot;content-type:text/html;charset=utf-8&quot;);\r\nrequire \'PHPMailer/class.phpmailer.php\';\r\ntry {\r\n$mail = new PHPMailer(true);\r\n$mail-&gt;IsSMTP();\r\n$mail-&gt;CharSet=\'UTF-8\';\r\n$mail-&gt;SMTPAuth = true;\r\n$mail-&gt;SMTPSecure = \'ssl\';\r\n$mail-&gt;Port = 465;\r\n$mail-&gt;Host = \'smtp.mxhichina.com\';//邮箱smtp地址\r\n$mail-&gt;Username = \'gzp@gzpblog.com\';//你的邮箱账号\r\n$mail-&gt;Password = \'扒拉扒拉。。。\';//你的邮箱密码\r\n$mail-&gt;From = \'gzp@gzpblog.com\';//你的邮箱账号\r\n$mail-&gt;FromName = \'锅子\';\r\n$to = &quot;扒拉扒拉@qq.com&quot;;\r\n$mail-&gt;AddAddress($to);\r\n$mail-&gt;Subject = &quot;test&quot;;\r\n$mail-&gt;Body = \'hello!\';\r\n$mail-&gt;WordWrap = 80;\r\n//$mail-&gt;AddAttachment(&quot;f:/test.png&quot;); //可以添加附件\r\n$mail-&gt;IsHTML(true);\r\n$mail-&gt;Send();\r\necho &quot;success!&quot;;\r\n} catch (phpmailerException $e) {\r\necho &quot;邮件发送失败：&quot;.$e-&gt;errorMessage(); //测试的时候可以去掉此行的注释\r\n}\r\n\r\n[/php]\r\n\r\n\r\n执行，成功！右下角弹出了QQ邮件的提醒。\r\n<h4>总结</h4>\r\nPHPMailer通过465端口进行更安全的SMTPS协议发送邮件\r\n\r\n可以修改：\r\n\r\n\r\n[php]\r\n\r\n$mail-&gt;Port = 465;\r\n\r\n[/php]\r\n\r\n\r\n为：\r\n\r\n\r\n[php]\r\n\r\n$mail-&gt;SMTPSecure = \'ssl\';\r\n$mail-&gt;Port = 465;\r\n\r\n[/php]\r\n\r\n\r\n即可。\r\n\r\n&nbsp;', 'Linux服务器中PHPMailer发送邮件失效排查并解决', '', 'inherit', 'closed', 'closed', '', '716-revision-v1', '', '', '2017-03-02 00:51:57', '2017-03-01 16:51:57', '', 716, 'http://www.gzpblog.com/20170302/727.html', 0, 'revision', '', 0),
(728, 1, '2017-05-24 01:43:58', '2017-05-23 17:43:58', '更换服务器之后，我发现我的发送邮件功能失效了！原来的服务器是可以的，一定是哪里出问题了，决定来排查一下。我是用的PHPMailer，SMTP方式发送邮件的。\n\n这种方式首先PHP要开启sockets拓展，查了一下phpinfo页面，是开启的：\n\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail1.png\"><img class=\"size-full wp-image-720 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail1.png\" alt=\"\" width=\"970\" height=\"89\" /></a>\n\n看了一下openssl也是开启（因为拿了qq邮箱来测），所以没问题：\n\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail2.png\"><img class=\"size-full wp-image-721 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail2.png\" alt=\"\" width=\"950\" height=\"242\" /></a>\n\n那就再看一下allow_url_fopen，开启的，没问题：\n\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail3.png\"><img class=\"size-full wp-image-722 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail3.png\" alt=\"\" width=\"962\" height=\"33\" /></a>\n\n是不是禁用了函数？没有禁用，没问题：\n\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail4.png\"><img class=\"size-full wp-image-723 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail4.png\" alt=\"\" width=\"954\" height=\"30\" /></a>\n那配置上就没有问题了，我就想，是不是端口被占用了？\n\n运行一下：<strong>netstat -tnlp</strong>\n\n第一条就是这玩意：\n\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail5.png\"><img class=\"size-large wp-image-724 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail5-1024x51.png\" alt=\"\" width=\"1024\" height=\"51\" /></a>\n\n25端口被占用，被一个叫master的玩意占了，好家伙，看看是什么东西，运行<strong>ps -f -p 1818</strong>看一下结果，1818为当前这个程序的进程号PID，可以看到是：\n\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail6.png\"><img class=\"size-full wp-image-725 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail6.png\" alt=\"\" width=\"761\" height=\"64\" /></a>\n\n是postfix这个东西在运行，可能搭建环境的时候不小心给装了。\n<h4>postfix是个什么东西？</h4>\npostfix是一款运行在Linux环境下免费的邮件服务器，或者称为MTA(Mail Transfer Agent)，其它类似的有Sendmail、Qmail、exim及Zmailer 等。所以Postfix就是一个搭邮件服务器的。那这玩意肯定是冲突了，我们要通过25端口请求外部的邮件服务器，而本地用25端口运行了一个邮件服务器，这个是不行的估计.\n<h4>尝试解决问题</h4>\n我们尝试一下用我们这个邮件服务器去发邮件，而不是用外部服务器（比如之前用阿里云企业邮），放了一小段测试代码到PHPMailer目录同级下：\n\n[php]\n&lt;?php header(&quot;content-type:text/html;charset=utf-8&quot;); require \'PHPMailer/class.phpmailer.php\'; try { $mail = new PHPMailer(true); $mail-&gt;IsSMTP();\n $mail-&gt;CharSet=\'UTF-8\';\n $mail-&gt;SMTPAuth = true;\n $mail-&gt;Port = 25;\n $mail-&gt;Host = \'127.0.0.1\';//邮箱smtp地址\n $mail-&gt;Username = \'gzp@gzpblog.com\';//你的邮箱账号\n $mail-&gt;Password = \'扒拉扒拉。。。\';//你的邮箱密码\n $mail-&gt;From = \'gzp@gzpblog.com\';//你的邮箱账号\n $mail-&gt;FromName = \'锅子\';\n $to = &quot;扒拉扒拉@qq.com&quot;;\n $mail-&gt;AddAddress($to);\n $mail-&gt;Subject = &quot;test&quot;;\n $mail-&gt;Body = \'hello!\';\n $mail-&gt;WordWrap = 80;\n $mail-&gt;IsHTML(true);\n $mail-&gt;Send();\n echo &quot;success!&quot;;\n } catch (phpmailerException $e) {\n echo &quot;邮件发送失败：&quot;.$e-&gt;errorMessage(); \n}\n\n[/php]\n\n通过25端口的本地服务器发送邮件，运行这个页面，发现不行，报错不能够验证，说明这其中还有一些配置要弄，暂时行不通，不往下深究本地服务器发送了，我们尝试一下换回：\n\n$mail-&gt;Host = \'smtp.mxhichina.com\'; //阿里云的邮箱smtp地址\n\n试一下，还是不行：\n\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail7.png\"><img class=\"size-full wp-image-717 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail7.png\" alt=\"\" width=\"502\" height=\"53\" /></a>\n\n没办法连接到SMTP。那我们把25端口的postfix服务器杀掉， 执行<strong>kill 1818</strong>（当前postfix的PID），再执行一次，还是同样错误，无法连接上。这就奇了怪了，25端口没有程序运行了，还不行。\n<h4>可能的原因</h4>\n查到有可能是因为ipv6的原因，phpMailer在进行smtp服务器DNS解析时，得到了IP v6地址，然后与IP v6解析到的地址进行连接，导致连接失败。\n\n我试一下：\n\n<strong>ip -6 addr show</strong>\n\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail8.png\"><img class=\"size-full wp-image-718 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail8.png\" alt=\"\" width=\"589\" height=\"55\" /></a>\n\n没东西，那又不是这个问题。\n\n那是什么原因呢？\n<h4>解决问题</h4>\n既然25端口不可用，于是我想，是否可以尝试一下其它端口，用465端口试试。\n<blockquote>465端口（SMTPS）：465端口是为SMTPS（SMTP-over-SSL）协议服务开放的，这是SMTP协议基于SSL安全协议之上的一种变种协议，它继承了SSL安全协议的非对称加密的高度安全可靠性，可防止邮件泄露。SMTPS和SMTP协议一样，也是用来发送邮件的，只是更安全些，防止邮件被黑客截取泄露，还可实现邮件发送者抗抵赖功能。防止发送者发送之后删除已发邮件，拒不承认发送过这样一份邮件。</blockquote>\n465端口似乎看起来还更好，直接就开始尝试了，进行以下尝试，以下为命令：\n<strong>sbin/iptables -I OUTPUT -p tcp --dport 465 -j ACCEPT</strong>  打通465端口\n<strong>/etc/rc.d/init.d/iptables save</strong> 保存\n<strong>service iptables restart</strong> 重启\n<strong>/etc/init.d/iptables status</strong> 查看需要打开的端口是否生效？\n\n<a href=\"http://files.gzpblog.com/wp/2017/03/checkmail9.png\"><img class=\"size-full wp-image-719 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/checkmail9.png\" alt=\"\" width=\"896\" height=\"412\" /></a>\n\n似乎可行，现在尝试一下，用SMTP的465SSL连接方式来发送邮件，稍微改了一下测试代码：\n\n[php]\n&lt;?php header(&quot;content-type:text/html;charset=utf-8&quot;); require \'PHPMailer/class.phpmailer.php\'; try { $mail = new PHPMailer(true); $mail-&gt;IsSMTP();\n$mail-&gt;CharSet=\'UTF-8\';\n$mail-&gt;SMTPAuth = true;\n$mail-&gt;SMTPSecure = \'ssl\';\n$mail-&gt;Port = 465;\n$mail-&gt;Host = \'smtp.mxhichina.com\';//邮箱smtp地址\n$mail-&gt;Username = \'gzp@gzpblog.com\';//你的邮箱账号\n$mail-&gt;Password = \'扒拉扒拉。。。\';//你的邮箱密码\n$mail-&gt;From = \'gzp@gzpblog.com\';//你的邮箱账号\n$mail-&gt;FromName = \'锅子\';\n$to = &quot;扒拉扒拉@qq.com&quot;;\n$mail-&gt;AddAddress($to);\n$mail-&gt;Subject = &quot;test&quot;;\n$mail-&gt;Body = \'hello!\';\n$mail-&gt;WordWrap = 80;\n//$mail-&gt;AddAttachment(&quot;f:/test.png&quot;); //可以添加附件\n$mail-&gt;IsHTML(true);\n$mail-&gt;Send();\necho &quot;success!&quot;;\n} catch (phpmailerException $e) {\necho &quot;邮件发送失败：&quot;.$e-&gt;errorMessage(); //测试的时候可以去掉此行的注释\n}\n\n[/php]\n\n执行，成功！右下角弹出了QQ邮件的提醒。\n<h4>总结</h4>\nPHPMailer通过465端口进行更安全的SMTPS协议发送邮件\n\n可以修改：\n\n[php]\n\n$mail-&gt;Port = 465;\n\n[/php]\n\n为：\n\n[php]\n\n$mail-&gt;SMTPSecure = \'ssl\';\n$mail-&gt;Port = 465;\n\n[/php]\n\n即可。\n\n<hr />\n\n2017.5.24更新\n\n发现', 'Linux服务器中PHPMailer发送邮件失效排查并解决', '', 'inherit', 'closed', 'closed', '', '716-autosave-v1', '', '', '2017-05-24 01:43:58', '2017-05-23 17:43:58', '', 716, 'http://www.gzpblog.com/20170302/728.html', 0, 'revision', '', 0),
(788, 1, '2017-03-11 02:44:08', '2017-03-10 18:44:08', '<h3>问题描述</h3>\r\n之前在搭建环境的时候出现了一个问题，搭建好了的LAMP环境，程序跑起来之后，总是会出现突然一下子500服务器错误，然后马上又好了的状况；就是间歇性Apache服务端500崩溃。\r\n\r\n&nbsp;\r\n<h3>排查错误</h3>\r\n首先我们可以排除的问题是程序出错，我跑的wordpress，一切是正常的，只是会突然出现这个情况，wordpress没有已知的这种bug，所以不会是程序问题。那么我们来看一下错误日志吧。\r\n\r\n查找Apache的Log记录，出现得最多的记录是：\r\n\r\nPHP Fatal error: Out of memory (allocated 2097152) (tried to allocate 8192 bytes) in 。。。 on line 390\r\n<div>是内存不足导致的！我们来看一下这个服务器是不是连个网站都跑不起来了，这有点尴尬。首先我查看一下php.ini的内存配置：</div>\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_1.png\"><img class=\"size-full wp-image-790 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_1.png\" alt=\"\" width=\"269\" height=\"51\" /></a>\r\n\r\n这个数字没问题，这样配是可以的。\r\n\r\n查看一下Apache的内存占用：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_2.png\"><img class=\"size-full wp-image-791 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_2.png\" alt=\"\" width=\"710\" height=\"104\" /></a>\r\n\r\n单个的httpd进程竟然有200多M，因为之前并没有研究过Apache的内存占用问题，在我看来这有点夸张了，一个小PHP程序不应该这样。于是再仔细查看一下问题所在。\r\n<div>使用top命令，然后shift+M命令看一下CPU和内存占用情况：</div>\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_3.png\"><img class=\"size-full wp-image-792 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_3.png\" alt=\"\" width=\"498\" height=\"201\" /></a>\r\n\r\n最高的那个进程，占掉了26.8%，看来已经找到了原因，就是Apache占用内存太高了，我的服务器只有1G内存。查了一下资料:\r\n\r\nApache中，影响apache性能的几个重要参数有：\r\n<blockquote>\r\n<div>KeepAlive　是否允许持续连接</div>\r\n<div>MaxKeepAliveRequests　允许的持续连接的最大数</div>\r\n<div>KeepAliveTimeout　持续连接在没有请求多少秒后切断</div>\r\n<div>StartServers 最初启动时启动多少个服务器进程</div>\r\n<div>MinSpareServers 空闲服务器进程的最小数</div>\r\n<div>MaxSpareServers 空闲服务器进程的最大数</div>\r\n<div>MaxClients 同时处理的请求数（最重要的参数，要少于ServerLimit)</div>\r\n<div>MaxRequestsPerChild 每个子进程处理的最大请求数</div></blockquote>\r\n<div>网上的资料都说锅在MaxRequestsPerChild这个配置上，于是我尝试了一下修改这项配置：</div>\r\n\r\n[code]\r\n&lt;IfModule mpm_prefork_module&gt;\r\nMaxRequestsPerChild 0\r\n&lt;/IfModule&gt;\r\n[/code]\r\n\r\n<div>改为</div>\r\n\r\n[code]\r\n&lt;IfModule mpm_prefork_module&gt;\r\nMaxRequestsPerChild 500\r\n&lt;/IfModule&gt;\r\n[/code]\r\n\r\n<div>\r\n<div>重新启动Apache服务，来看一下：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_4.png\"><img class=\"size-full wp-image-789 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_4.png\" alt=\"\" width=\"480\" height=\"111\" /></a></div>\r\n<div>内存占用明显降低。但是过了一段时间之后我们再来看：</div>\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_5.png\"><img class=\"size-full wp-image-795 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_5.png\" alt=\"\" width=\"482\" height=\"126\" /></a>\r\n\r\n<strong>apache进程在使用内存时，是“渐长”的。也就是说，直到这个进程死掉，使用内存的数量是一直增长而不会减少的。</strong>\r\n\r\n所以重点在于，<strong>什么时候杀死堆积到一定内存占用的Apache进程？</strong>\r\n<div>在上一张图的的最大内存占用的进程由26%到30%多的时候。当我再次刷新页面时，报500错误了！这时候我就想，是不是最上面的那个进程，被杀掉了，然后报了500错误。看一下占用，果然，最大的那个没了，在下面产生了一个新的：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_6.png\"><img class=\"size-full wp-image-794 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_6.png\" alt=\"\" width=\"484\" height=\"97\" /></a></div>\r\n<div>\r\n<div>所以，<strong>报500的原因其实是，进程突然被杀掉了</strong>！</div>\r\n<blockquote>\r\n<div>MaxRequestsPerChild参数详解\r\n这个参数是说，apache进程在处理了多少个请求之后，必须退出，重新开始，以免在处理中的内存问题。\r\n对于php脚本来说，把这个参数设置的小一些是有好处的，可以避免程序使用的内存持续增长对apache带来的压力：让这个参数定期释放内存，因为php是在脚本执行完毕后，自动释放只用的资源（内存）的。\r\n比如设置为50？如果太小的话，重新产生一个apache进程也是要消耗资源的，这是一个平衡问题。</div>\r\n<div>最好的设置方法是根据服务器内存情况设置一个合理的值。</div></blockquote>\r\n<div>那这样来看的话，MaxRequestsPerChild参数其实越大越好（如果服务器够强），甚至是原先的0（不限制），这样就不会无端端被杀掉进程；而服务器内存比较低的情况下，设置一个比较低的值是可以防止总内存值溢出；最好的做法是根据服务器情况设置一个合理的值。</div>\r\n<div>很明显MaxRequestsPerChild并不是我们现在所需要的，那么这个问题该怎么解决呢？</div>\r\n<div></div>\r\n<div>接下来发现了KeepAliveTimeout 这个参数：</div>\r\n<blockquote>\r\n<div>KeepAliveTimeout 这个参数决定了，在什么都不做之前，一个http进程能够等待多长时间？设想一下，如果keepalive设置为on，而 keepalivetimeout设置为一个比较大的数字，apache占用内存会很快的增长。这是因为，一个apache进程完成了一个任务（并达到了一定的内存占用，想一下“渐进”模式），并不会马上退出，而是等待一个keepalivetimeout时间。假设用户的链接请求持续不断的到来，则积累起来的无用的apache进程就会相当多，直到timeout，这些进程才会被杀死。\r\n但是，keepalive的确对于静态的文件，比如图像文件的传送是很有效的，因此，keepalive要设置为on，（off）但是keepalvietimeout要设置的小些。</div></blockquote>\r\n<div>这似乎正是我们所要的。根据这个描述，我再次修改了一下配置文件，这次情况好多了，虽然有所改善，但是还是会存在500错误的问题。</div>\r\n<div>目前不知道是不是哪一步配置出了问题，还是服务器的内存的确太少，这个间歇性错误似乎无可避免，只能降低其频率。</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>我最终的解决方案，其实很简单，换Nginx，看一下nginx的表现：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_7.png\"><img class=\"size-full wp-image-793 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_7.png\" alt=\"\" width=\"486\" height=\"124\" /></a></div>\r\n<div>php-fpm监控php-cgi的方式，非常高效，占用内存非常的少，而且很稳定！突然明白了为什么Nginx越来越受欢迎了。</div>', 'Apache间歇性500服务器错误探究', '', 'publish', 'open', 'closed', '', 'apache%e9%97%b4%e6%ad%87%e6%80%a7500%e6%9c%8d%e5%8a%a1%e5%99%a8%e9%94%99%e8%af%af%e6%8e%a2%e7%a9%b6', '', '', '2017-03-11 02:45:06', '2017-03-10 18:45:06', '', 0, 'https://www.gzpblog.com/?p=788', 0, 'post', '', 2);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(731, 1, '2017-03-03 01:48:13', '2017-03-02 17:48:13', '<blockquote><strong>写在前面</strong>\r\n\r\n对于新手的一点建议：\r\n<ul>\r\n 	<li> 最好熟悉一下linux 的基本命令，vim的常用命令</li>\r\n 	<li>千万不要无脑复制，先看一下命令，特别是路径要注意</li>\r\n 	<li>学会排查错误</li>\r\n</ul>\r\n本篇安装的软件版本为：\r\n<ul>\r\n 	<li>Linux：Centos6.8</li>\r\n 	<li>Nginx：1.10.3</li>\r\n 	<li>MySQL：5.7.17</li>\r\n 	<li>PHP：7.0.16</li>\r\n</ul>\r\n</blockquote>\r\n最近研究了Linux系统下的PHP环境搭建，个人感觉最好最好不要用yum默认的程序包安装，因为版本都比较低，下载最新的稳定版自行安装比较好。现在网上教程很多，之所以还记这篇，原因有一点，当你重复网上的教程自行安装时，90%还是会出现各种各样的问题，因为你可能linux的系统版本不同，你想装的软件版本不同，安装的方法不同，你下错了安装包的版本，还有其它乱七八糟的。举个例，比如你看着5.6的mysql安装教程，装5.7的，你感觉没问题，但是事实就是，5.7的不一样了！而且网上还没有新的这方面内容，不好找，这就需要你去摸索了，亲身经历啊。这里面，Niginx感觉最好配，MySQL最坑。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP1.png\"><img class=\"size-full wp-image-732 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP1.png\" alt=\"\" width=\"513\" height=\"218\" /></a>\r\n<h2>一 准备工作</h2>\r\n<h3>1. 关闭SELINUX</h3>\r\n修改配置文件，重启服务后永久生效。\r\n# sed -i \'s/SELINUX=.*/SELINUX=disabled/g\' /etc/selinux/config\r\n命令行设置立即生效。\r\n# setenforce 0\r\n<h3>2. 如果是阿里云ECS用户，安全组设置中开启80端口方便调试。</h3>\r\n&nbsp;\r\n<h2>二 安装Nginx</h2>\r\n<h3>1. 下载源码包</h3>\r\n上Nginx官网，复制最新稳定版的下载地址过来，然后用wget下载（接下来需要下载安装包的都可以用wget）：\r\n\r\n# cd /usr/local/src\r\n# wget http://nginx.org/download/nginx-1.10.3.tar.gz\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP2.png\"><img class=\"size-full wp-image-733 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP2.png\" alt=\"\" width=\"895\" height=\"59\" /></a>\r\n\r\n下载完成的状态基本都是以下这样的：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP3.png\"><img class=\"size-full wp-image-734 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP3.png\" alt=\"\" width=\"1219\" height=\"280\" /></a>\r\n<h3>2. 进行解压编译</h3>\r\n# tar xvf nginx-1.10.3.tar.gz\r\n# yum groupinstall \"Development tools\"\r\n# yum -y install gcc wget gcc-c++ automake autoconf libtool libxml2-devel libxslt-devel perl-devel perl-ExtUtils-Embed pcre-devel openssl-devel\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP4.png\"><img class=\"alignnone size-full wp-image-735\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP4.png\" alt=\"\" width=\"1260\" height=\"586\" /></a>\r\n\r\n执行完成。\r\n\r\n进入解压后的nginx-1.10.3文件夹：\r\ncd /usr/local/src/nginx-1.10.3\r\n\r\n执行以下语句：\r\n\r\n[plain]\r\n\r\n./configure \\\r\n--prefix=/usr/local/nginx \\\r\n--sbin-path=/usr/sbin/nginx \\\r\n--conf-path=/etc/nginx/nginx.conf \\\r\n--error-log-path=/var/log/nginx/error.log \\\r\n--http-log-path=/var/log/nginx/access.log \\\r\n--pid-path=/var/run/nginx.pid \\\r\n--lock-path=/var/run/nginx.lock \\\r\n--http-client-body-temp-path=/var/tmp/nginx/client \\\r\n--http-proxy-temp-path=/var/tmp/nginx/proxy \\\r\n--http-fastcgi-temp-path=/var/tmp/nginx/fcgi \\\r\n--http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \\\r\n--http-scgi-temp-path=/var/tmp/nginx/scgi \\\r\n--user=nginx \\\r\n--group=nginx \\\r\n--with-pcre \\\r\n--with-http_v2_module \\\r\n--with-http_ssl_module \\\r\n--with-http_realip_module \\\r\n--with-http_addition_module \\\r\n--with-http_sub_module \\\r\n--with-http_dav_module \\\r\n--with-http_flv_module \\\r\n--with-http_mp4_module \\\r\n--with-http_gunzip_module \\\r\n--with-http_gzip_static_module \\\r\n--with-http_random_index_module \\\r\n--with-http_secure_link_module \\\r\n--with-http_stub_status_module \\\r\n--with-http_auth_request_module \\\r\n--with-mail \\\r\n--with-mail_ssl_module \\\r\n--with-file-aio \\\r\n--with-ipv6 \\\r\n--with-http_v2_module \\\r\n--with-threads \\\r\n--with-stream \\\r\n--with-stream_ssl_module \\\r\n--with-openssl\r\n[/plain]\r\n\r\n完成后执行编译：\r\n# make &amp;&amp; make install\r\n# mkdir -pv /var/tmp/nginx/client\r\n<h3>3. 添加SysV启动脚本。</h3>\r\n用vim编辑脚本：\r\n# vim /etc/init.d/nginx\r\n<div>写入以下内容：</div>\r\n\r\n[plain]\r\n#!/bin/sh \r\n# \r\n# nginx - this script starts and stops the nginx daemon \r\n# \r\n# chkconfig:   - 85 15 \r\n# description: Nginx is an HTTP(S) server, HTTP(S) reverse \\ \r\n#               proxy and IMAP/POP3 proxy server \r\n# processname: nginx \r\n# config:      /etc/nginx/nginx.conf \r\n# config:      /etc/sysconfig/nginx \r\n# pidfile:     /var/run/nginx.pid \r\n# Source function library. \r\n. /etc/rc.d/init.d/functions\r\n# Source networking configuration. \r\n. /etc/sysconfig/network\r\n# Check that networking is up. \r\n[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; exit 0\r\nnginx=&quot;/usr/sbin/nginx&quot;\r\nprog=$(basename $nginx)\r\nNGINX_CONF_FILE=&quot;/etc/nginx/nginx.conf&quot;\r\n[ -f /etc/sysconfig/nginx ] &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; . /etc/sysconfig/nginx\r\nlockfile=/var/lock/subsys/nginx\r\nstart() {\r\n    [ -x $nginx ] || exit 5\r\n    [ -f $NGINX_CONF_FILE ] || exit 6\r\n    echo -n $&quot;Starting $prog: &quot; \r\n    daemon $nginx -c $NGINX_CONF_FILE\r\n    retval=$?\r\n    echo \r\n    [ $retval -eq 0 ] &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; touch $lockfile\r\n    return $retval\r\n}\r\nstop() {\r\n    echo -n $&quot;Stopping $prog: &quot; \r\n    killproc $prog -QUIT\r\n    retval=$?\r\n    echo \r\n    [ $retval -eq 0 ] &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; rm -f $lockfile\r\n    return $retval\r\nkillall -9 nginx\r\n}\r\nrestart() {\r\n    configtest || return $?\r\n    stop\r\n    sleep 1\r\n    start\r\n}\r\nreload() {\r\n    configtest || return $?\r\n    echo -n $&quot;Reloading $prog: &quot; \r\n    killproc $nginx -HUP\r\nRETVAL=$?\r\n    echo \r\n}\r\nforce_reload() {\r\n    restart\r\n}\r\nconfigtest() {\r\n$nginx -t -c $NGINX_CONF_FILE\r\n}\r\nrh_status() {\r\n    status $prog\r\n}\r\nrh_status_q() {\r\n    rh_status &amp;amp;amp;amp;amp;gt;/dev/null 2&amp;amp;amp;amp;amp;gt;&amp;amp;amp;amp;amp;amp;1\r\n}\r\ncase &quot;$1&quot; in\r\n    start)\r\n        rh_status_q &amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp; exit 0\r\n    $1\r\n        ;;\r\n    stop)\r\n        rh_status_q || exit 0\r\n        $1\r\n        ;;\r\n    restart|configtest)\r\n        $1\r\n        ;;\r\n    reload)\r\n        rh_status_q || exit 7\r\n        $1\r\n        ;;\r\n    force-reload)\r\n        force_reload\r\n        ;;\r\n    status)\r\n        rh_status\r\n        ;;\r\n    condrestart|try-restart)\r\n        rh_status_q || exit 0\r\n            ;;\r\n    *)\r\n      echo $&quot;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&quot; \r\n        exit 2\r\nesac\r\n[/plain]\r\n\r\n保存退出（按:wq!）；可能你得稍微查一下vim的一些命令，不然操作时可能会出现一点小问题。\r\n赋予脚本执行权限：\r\n# chmod +x /etc/init.d/nginx\r\n\r\n添加至服务管理列表，设置开机自启：\r\n# chkconfig --add nginx\r\n# chkconfig nginx on\r\n<h3>4. 启动服务。</h3>\r\n# service nginx start\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP6.png\"><img class=\"size-full wp-image-736 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP6.png\" alt=\"\" width=\"576\" height=\"238\" /></a>\r\n<div>出现这玩意说明成功了！</div>\r\n<div></div>\r\n<div></div>\r\n<blockquote>\r\n<div>注：如果报错 [emerg]: getpwnam(“nginx”) failed ；</div>\r\n<div>解决方法：</div>\r\n<div># useradd -s /sbin/nologin -M nginx</div>\r\n<div># id nginx</div></blockquote>\r\n<div></div>\r\n<div>\r\n<h2>三 安装mysql</h2>\r\n<h3>1. 版本选择</h3>\r\n<div>在安装之前必须明白一件事情，mysql有很多种安装方式，每种不一样，不要弄混了。</div>\r\n<div>比如源码编译安装（mysql-5.7.17.tar.gz），二进制安装（mysql-5.7.17-linux-glibc2.5-i686.tar），nmp安装（最简单的）。这里我们用源码自己编译安装。</div>\r\n<h3>2. 准备编译环境</h3>\r\n<div># yum groupinstall \"Server Platform Development\" \"Development tools\" -y</div>\r\n<div># yum install cmake -y</div>\r\n<div>cmake在现在的版本是必须要安装的，你可以下载camke之后编译，也可以直接yum安装。接下来的编译过程如果报错缺少什么就补什么。</div>\r\n<div></div>\r\n<h3>3. 准备mysql数据库存放目录</h3>\r\n<div># mkdir /mnt/data</div>\r\n<div># groupadd -r mysql</div>\r\n<div># useradd -r -g mysql -s /sbin/nologin mysql</div>\r\n<div># id mysql</div>\r\n<div></div>\r\n<h3>4. 更改数据目录权限。</h3>\r\n<div># chown -R mysql:mysql /mnt/data</div>\r\n<div></div>\r\n<h3>5. 下载并解压编译官网下载的稳定版的源码包。</h3>\r\n<div>在下载的时候注意一下版本，下载对应的版本。我们源码编译，要下载长这样的安装包：mysql-5.7.17.tar.gz，同时在安装的时候我们需要boost库，5.7需要1.59版本的库；你可以下载boost库然后编译boost库，或者像我一样，下载带有boost库的mysql版本。</div>\r\n<div>开始解压编译：</div>\r\n<div>\r\n\r\n[plain]\r\n# tar xvf mysql-boost-5.7.17.tar.gz -C /usr/local/src\r\n# cd /usr/local/src/mysql-5.7.17\r\n# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\\r\n-DMYSQL_DATADIR=/mnt/data \\\r\n-DSYSCONFDIR=/etc \\\r\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\r\n-DWITH_ARCHIVE_STORAGE_ENGINE=1 \\\r\n-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\\r\n-DWITH_READLINE=1 \\\r\n-DWITH_SSL=system \\\r\n-DWITH_ZLIB=system \\\r\n-DWITH_LIBWRAP=0 \\\r\n-DMYSQL_TCP_PORT=3306 \\\r\n-DMYSQL_UNIX_ADDR=/tmp/mysql.sock \\\r\n-DDEFAULT_CHARSET=utf8 \\\r\n-DDEFAULT_COLLATION=utf8_general_ci\r\n-DDOWNLOAD_BOOST=1 \\\r\n-DWITH_BOOST=/usr/local/mysql/boost/boost_1_59_0 \\\r\n# make &amp;amp;&amp;amp; make install\r\n[/plain]\r\n\r\n</div>\r\n</div>\r\n<div>\r\n<h3>6. 修改安装目录的权限属组</h3>\r\n<div># chown -R mysql:mysql /usr/local/mysql/</div>\r\n</div>\r\n<div>\r\n<h3>7. 初始化数据库。</h3>\r\n<div># /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/mnt/data/</div>\r\n<div>需要注意这里是mysql5.7的初始化命令，而5.7以下的都是用：</div>\r\n<div># /usr/local/mysql/scripts/mysql_install_db --user=mysql --datadir=/mnt/data/</div>\r\n<div></div>\r\n<div>在初始化成功之后，5.7的initial命令会产生一个随机的root登录密码，你要用这个密码登录，然后修改（必须修改生成的随机密码不然无法后续操作）。在最后有一个类似这样的密码：</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP7.png\"><img class=\"alignnone size-full wp-image-737\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP7.png\" alt=\"\" width=\"233\" height=\"45\" /></a></div>\r\n<div>\r\n<div></div>\r\n<h3>8. 复制配置文件</h3>\r\n<div># cp support-files/my-default.cnf /etc/my.cnf</div>\r\n<div>这里又有一点要注意：mysql5.7配置文件需要修改my.cnf关键配置， mysql5.7之前默认配置文件中是有配置项的，不用手动修改。以下为配置，根据实际情况修改：</div>\r\n<div>\r\n\r\n[plain]\r\n[mysqld]\r\nbasedir = /usr/local/mysql\r\ndatadir = /mnt/data\r\nport = 3306\r\nsocket = /Ultrapower/test/mysql/tmp/mysql.sock\r\n\r\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\r\n[client]\r\nsocket = /Ultrapower/test/mysql/tmp/mysql.sock\r\n[/plain]\r\n\r\n</div>\r\n<div>如果添加[client]下 的内容，注意sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES要放在[mysqld]下。</div>\r\n<div>如果报错tmp目录不错在，到对应的地方去创建目录，然后创建后要赋予mysql权限，chown -R mysql:mysql tmp。</div>\r\n<div></div>\r\n<h3>9. 设置开机启动</h3>\r\n<div># cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</div>\r\n<div># chmod +x /etc/init.d/mysql</div>\r\n<div>注册为开机启动服务：</div>\r\n<div># chkconfig mysqld on</div>\r\n<div># chkconfig --add mysqld</div>\r\n<div>查看是否设置成功：</div>\r\n<div># chkconfig --list mysql</div>\r\n<div></div>\r\n<h3>10. 设置PATH环境变量。</h3>\r\n<div># echo \"export PATH=$PATH:/usr/local/mysql/bin\" &gt; /etc/profile.d/mysql.sh</div>\r\n<div># source /etc/profile.d/mysql.sh</div>\r\n<div></div>\r\n<h3>11. 启动服务</h3>\r\n<div># service mysqld start</div>\r\n</div>\r\n</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP8.png\"><img class=\"size-full wp-image-738 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP8.png\" alt=\"\" width=\"726\" height=\"578\" /></a></div>\r\n<div>\r\n<div>这样基本上，这个mysql就装好了。</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h3>12. 登录mysql并修改密码</h3>\r\n<div>mysql -uroot -p生成的密码</div>\r\n<div>执行修改密码：</div>\r\n<div>alter user \'root\'@\'localhost\' identified by \'newpassword\';</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h2>四 安装php-fpm</h2>\r\n<h3>1. 安装依赖包:</h3>\r\n<div>yum install libmcrypt libmcrypt-devel mhash mhash-devel libxml2 libxml2-devel bzip2 bzip2-devel</div>\r\n<div>这里还漏了几个，如果报错了提示缺少了什么就yum补上。</div>\r\n<div></div>\r\n<h3>2. 到官网下载源码包后，开始编译安装：</h3>\r\n<div>\r\n\r\n[plain]\r\n# tar xvf php-7.0.16.tar.bz2 -C /usr/local/src\r\n# cd /usr/local/src/php-7.0.16\r\n执行下面的配置文件：\r\n# ./configure --prefix=/usr/local/php \\\r\n--with-config-file-scan-dir=/etc/php.d \\\r\n--with-config-file-path=/etc \\\r\n--with-mysql=/usr/local/mysql \\\r\n--with-mysqli=/usr/local/mysql/bin/mysql_config \\\r\n--enable-fpm \\\r\n--enable-opcache \\\r\n--disable-fileinfo \\\r\n--with-jpeg-dir \\\r\n--with-iconv-dir=/usr/local \\\r\n--with-freetype-dir \\\r\n--with-png-dir \\\r\n--with-zlib \\\r\n--with-libxml-dir=/usr \\\r\n--enable-xml \\\r\n--enable-bcmath \\\r\n--enable-shmop \\\r\n--enable-exif \\\r\n--with-curl \\\r\n--enable-sysvsem \\\r\n--enable-inline-optimization \\\r\n--enable-mbregex \\\r\n--enable-inline-optimization \\\r\n--enable-mbstring \\\r\n--with-mcrypt \\\r\n--with-gd \\\r\n--enable-gd-native-ttf \\\r\n--with-openssl \\\r\n--with-mhash \\\r\n--enable-pcntl \\\r\n--enable-sockets \\\r\n--with-xmlrpc \\\r\n--enable-ftp \\\r\n--with-gettext \\\r\n--enable-zip \\\r\n--enable-soap \\\r\n--with-bz2\r\n[/plain]\r\n\r\n执行以上的配置，如果出现下面这样的license，才是正确的，才可以开始编译，如果出问题，就解决，一般是少了什么库。\r\n<div>（注意将来可能会用到的一些库，先正确地编译好以免以后再来编就麻烦了，比如openssl, gd, mbstring, sockets, opcache等等）</div>\r\n</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP9.png\"><img class=\"size-full wp-image-739 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP9.png\" alt=\"\" width=\"715\" height=\"673\" /></a></div>\r\n<div>\r\n<div>执行编译：</div>\r\n<div># make &amp;&amp; make install</div>\r\n<div></div>\r\n<h3>3. 添加php和php-fpm配置文件。</h3>\r\n<div># cp /usr/local/src/php-7.0.16/php.ini-production /etc/php.ini</div>\r\n<div># cd /usr/local/php/etc/</div>\r\n<div># cp php-fpm.conf.default php-fpm.conf</div>\r\n<div># sed -i \'s@;pid = run/php-fpm.pid@pid = /usr/local/php/var/run/php-fpm.pid@\' php-fpm.conf</div>\r\n<div></div>\r\n<h3>4. 添加php-fpm启动脚本。</h3>\r\n<div># cp /usr/local/src/php-7.0.16/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</div>\r\n<div># chmod +x /etc/init.d/php-fpm</div>\r\n<div></div>\r\n<h3>5. 添加php-fpm至服务列表并设置开机自启。</h3>\r\n<div># chkconfig --add php-fpm</div>\r\n<div># chkconfig --list php-fpm</div>\r\n<div># chkconfig php-fpm on</div>\r\n<div></div>\r\n<h3>6. 启动服务。</h3>\r\n<div># service php-fpm start</div>\r\n<div></div>\r\n<div><strong>注：</strong></div>\r\n<div>启动时如出现错误：WARNING: Nothing matches the include pattern \'/usr/local/etc/php-fpm.d/*.conf\' from /usr/local/etc/php-fpm.conf at line 125.</div>\r\n<div>ERROR:. No pool defined at least one pool section must be specified in config file</div>\r\n<div>ERROR: failed to post process the configuration</div>\r\n<div>ERROR: FPM initialization failed</div>\r\n<div>解决：到指定目录执行cp www.conf.default www.conf</div>\r\n<div></div>\r\n<h3>7. 添加nginx对fastcgi的支持，</h3>\r\n首先备份默认的配置文件。\r\n\r\n# cp /etc/nginx/nginx.conf /etc/nginx/nginx.confbak\r\n\r\n# cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf\r\n<div>编辑/etc/nginx/nginx.conf，在所支持的主页面格式中添加php格式的主页，类似如下：</div>\r\n<div>\r\n\r\n[plain]\r\nlocation / {\r\n    root /usr/local/nginx/html;\r\n    index index.php index.html index.htm;\r\n}\r\n[/plain]\r\n\r\n</div>\r\n<div>取消以下内容前面的注释：</div>\r\n<div>\r\n\r\n[plain]\r\nlocation ~ \\.php$ {\r\n    root /usr/local/nginx/html;\r\n    fastcgi_pass 127.0.0.1:9000;\r\n    fastcgi_index index.php;\r\n    fastcgi_param SCRIPT_FILENAME /usr/local/nginx/html/$fastcgi_script_name;\r\n    include fastcgi_params;\r\n}\r\n[/plain]\r\n\r\n</div>\r\n<div></div>\r\n<h3>8. 重启nginx</h3>\r\n<div># service nginx reload</div>\r\n<div></div>\r\n<h3>9. 测试是否成功</h3>\r\n<div>在/usr/local/nginx/html/新建index.php的测试页面，内容如下：</div>\r\n<div>&lt;?php</div>\r\n<div>phpinfo();</div>\r\n<div>?&gt;</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP10.png\"><img class=\"size-full wp-image-740 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP10.png\" alt=\"\" width=\"959\" height=\"911\" /></a></div>\r\n<div>\r\n<div>如果出现这个熟悉的界面，说明就大功告成了！Linux下一个基本的LNMP就搭建完毕了。</div>\r\n</div>\r\n</div>\r\n</div>', 'Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）', '', 'publish', 'open', 'open', '', 'centos6-8%e7%bc%96%e8%af%91%e5%ae%89%e8%a3%85lnmp%e7%8e%af%e5%a2%83%ef%bc%88nginxmysqlphp%ef%bc%89', '', '', '2017-03-15 10:10:13', '2017-03-15 02:10:13', '', 0, 'http://www.gzpblog.com/?p=731', 0, 'post', '', 1),
(732, 1, '2017-03-03 01:28:40', '2017-03-02 17:28:40', '', 'LNMP1', '', 'inherit', 'open', 'closed', '', 'lnmp1', '', '', '2017-03-03 01:28:40', '2017-03-02 17:28:40', '', 731, 'http://www.gzpblog.com/wp-content/uploads/2017/03/LNMP1.png', 0, 'attachment', 'image/png', 0),
(733, 1, '2017-03-03 01:28:41', '2017-03-02 17:28:41', '', 'LNMP2', '', 'inherit', 'open', 'closed', '', 'lnmp2', '', '', '2017-03-03 01:28:41', '2017-03-02 17:28:41', '', 731, 'http://www.gzpblog.com/wp-content/uploads/2017/03/LNMP2.png', 0, 'attachment', 'image/png', 0),
(734, 1, '2017-03-03 01:28:42', '2017-03-02 17:28:42', '', 'LNMP3', '', 'inherit', 'open', 'closed', '', 'lnmp3', '', '', '2017-03-03 01:28:42', '2017-03-02 17:28:42', '', 731, 'http://www.gzpblog.com/wp-content/uploads/2017/03/LNMP3.png', 0, 'attachment', 'image/png', 0),
(735, 1, '2017-03-03 01:28:43', '2017-03-02 17:28:43', '', 'LNMP4', '', 'inherit', 'open', 'closed', '', 'lnmp4', '', '', '2017-03-03 01:28:43', '2017-03-02 17:28:43', '', 731, 'http://www.gzpblog.com/wp-content/uploads/2017/03/LNMP4.png', 0, 'attachment', 'image/png', 0),
(736, 1, '2017-03-03 01:28:45', '2017-03-02 17:28:45', '', 'LNMP6', '', 'inherit', 'open', 'closed', '', 'lnmp6', '', '', '2017-03-03 01:28:45', '2017-03-02 17:28:45', '', 731, 'http://www.gzpblog.com/wp-content/uploads/2017/03/LNMP6.png', 0, 'attachment', 'image/png', 0),
(737, 1, '2017-03-03 01:28:46', '2017-03-02 17:28:46', '', 'LNMP7', '', 'inherit', 'open', 'closed', '', 'lnmp7', '', '', '2017-03-03 01:28:46', '2017-03-02 17:28:46', '', 731, 'http://www.gzpblog.com/wp-content/uploads/2017/03/LNMP7.png', 0, 'attachment', 'image/png', 0),
(738, 1, '2017-03-03 01:28:46', '2017-03-02 17:28:46', '', 'LNMP8', '', 'inherit', 'open', 'closed', '', 'lnmp8', '', '', '2017-03-03 01:28:46', '2017-03-02 17:28:46', '', 731, 'http://www.gzpblog.com/wp-content/uploads/2017/03/LNMP8.png', 0, 'attachment', 'image/png', 0),
(739, 1, '2017-03-03 01:28:47', '2017-03-02 17:28:47', '', 'LNMP9', '', 'inherit', 'open', 'closed', '', 'lnmp9', '', '', '2017-03-03 01:28:47', '2017-03-02 17:28:47', '', 731, 'http://www.gzpblog.com/wp-content/uploads/2017/03/LNMP9.png', 0, 'attachment', 'image/png', 0),
(740, 1, '2017-03-03 01:28:49', '2017-03-02 17:28:49', '', 'LNMP10', '', 'inherit', 'open', 'closed', '', 'lnmp10', '', '', '2017-03-03 01:28:49', '2017-03-02 17:28:49', '', 731, 'http://www.gzpblog.com/wp-content/uploads/2017/03/LNMP10.png', 0, 'attachment', 'image/png', 0),
(741, 1, '2017-03-03 01:48:13', '2017-03-02 17:48:13', '<blockquote><strong>写在前面</strong>\r\n\r\n对于新手的一点建议：\r\n<ul>\r\n 	<li> 最好熟悉一下linux 的基本命令，vim的常用命令</li>\r\n 	<li>千万不要无脑复制，先看一下命令，特别是路径要注意</li>\r\n 	<li>学会排查错误</li>\r\n</ul>\r\n本篇安装的软件版本为：\r\n<ul>\r\n 	<li>Linux：Centos6.8</li>\r\n 	<li> Nginx：1.10.2</li>\r\n 	<li>MySQL：5.7.17</li>\r\n 	<li>PHP：7.016</li>\r\n</ul>\r\n</blockquote>\r\n最近研究了Linux系统下的PHP环境搭建，个人感觉最好最好不要用yum默认的程序包安装，因为版本都比较低，下载最新的稳定版自行安装比较好。现在网上教程很多，之所以还记这篇，原因有一点，当你重复网上的教程自行安装时，90%还是会出现各种各样的问题，因为你可能linux的系统版本不同，你想装的软件版本不同，安装的方法不同，你下错了安装包的版本，还有其它乱七八糟的。举个例，比如你看着5.6的mysql安装教程，装5.7的，你感觉没问题，但是事实就是，5.7的不一样了！而且网上还没有新的这方面内容，不好找，这就需要你去摸索了，亲身经历啊。这里面，Niginx感觉最好配，MySQL最坑。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP1.png\"><img class=\"size-full wp-image-732 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP1.png\" alt=\"\" width=\"513\" height=\"218\" /></a>\r\n<h2>一 准备工作</h2>\r\n<h3>1. 关闭SELINUX</h3>\r\n修改配置文件，重启服务后永久生效。\r\n# sed -i \'s/SELINUX=.*/SELINUX=disabled/g\' /etc/selinux/config\r\n命令行设置立即生效。\r\n# setenforce 0\r\n\r\n&nbsp;\r\n<h3>2. 如果是阿里云ECS用户，安全组设置中开启80端口方便调试。</h3>\r\n<h2>二 安装Nginx</h2>\r\n<h3>1. 下载源码包</h3>\r\n上Nginx官网，复制最新稳定版的地址过来，然后用wget下载（接下来需要下载安装包的都可以用wget）：\r\n\r\n# cd /usr/local/src\r\n# wget http://nginx.org/download/nginx-1.10.3.tar.gz\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP2.png\"><img class=\"size-full wp-image-733 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP2.png\" alt=\"\" width=\"895\" height=\"59\" /></a>\r\n\r\n下载完成的状态基本都是以下这样的：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP3.png\"><img class=\"size-full wp-image-734 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP3.png\" alt=\"\" width=\"1219\" height=\"280\" /></a>\r\n<h3>2. 进行解压编译</h3>\r\n# tar xvf nginx-1.10.2.tar.gz\r\n# yum groupinstall \"Development tools\"\r\n# yum -y install gcc wget gcc-c++ automake autoconf libtool libxml2-devel libxslt-devel perl-devel perl-ExtUtils-Embed pcre-devel openssl-devel\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP4.png\"><img class=\"alignnone size-full wp-image-735\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP4.png\" alt=\"\" width=\"1260\" height=\"586\" /></a>\r\n\r\n执行完成。\r\n\r\n进入解压后的nginx-1.10.3文件夹：\r\ncd /usr/local/src/nginx-1.10.2\r\n\r\n执行以下语句：\r\n\r\n[plain]\r\n\r\n./configure \\\r\n--prefix=/usr/local/nginx \\\r\n--sbin-path=/usr/sbin/nginx \\\r\n--conf-path=/etc/nginx/nginx.conf \\\r\n--error-log-path=/var/log/nginx/error.log \\\r\n--http-log-path=/var/log/nginx/access.log \\\r\n--pid-path=/var/run/nginx.pid \\\r\n--lock-path=/var/run/nginx.lock \\\r\n--http-client-body-temp-path=/var/tmp/nginx/client \\\r\n--http-proxy-temp-path=/var/tmp/nginx/proxy \\\r\n--http-fastcgi-temp-path=/var/tmp/nginx/fcgi \\\r\n--http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \\\r\n--http-scgi-temp-path=/var/tmp/nginx/scgi \\\r\n--user=nginx \\\r\n--group=nginx \\\r\n--with-pcre \\\r\n--with-http_v2_module \\\r\n--with-http_ssl_module \\\r\n--with-http_realip_module \\\r\n--with-http_addition_module \\\r\n--with-http_sub_module \\\r\n--with-http_dav_module \\\r\n--with-http_flv_module \\\r\n--with-http_mp4_module \\\r\n--with-http_gunzip_module \\\r\n--with-http_gzip_static_module \\\r\n--with-http_random_index_module \\\r\n--with-http_secure_link_module \\\r\n--with-http_stub_status_module \\\r\n--with-http_auth_request_module \\\r\n--with-mail \\\r\n--with-mail_ssl_module \\\r\n--with-file-aio \\\r\n--with-ipv6 \\\r\n--with-http_v2_module \\\r\n--with-threads \\\r\n--with-stream \\\r\n--with-stream_ssl_module\r\n\r\n[/plain]\r\n\r\n完成后执行编译：\r\n# make &amp;&amp; make install\r\n# mkdir -pv /var/tmp/nginx/client\r\n<h3>3. 添加SysV启动脚本。</h3>\r\n用vim编辑脚本：\r\n# vim /etc/init.d/nginx\r\n<div>写入以下内容：</div>\r\n\r\n[plain]\r\n#!/bin/sh \r\n# \r\n# nginx - this script starts and stops the nginx daemon \r\n# \r\n# chkconfig:   - 85 15 \r\n# description: Nginx is an HTTP(S) server, HTTP(S) reverse \\ \r\n#               proxy and IMAP/POP3 proxy server \r\n# processname: nginx \r\n# config:      /etc/nginx/nginx.conf \r\n# config:      /etc/sysconfig/nginx \r\n# pidfile:     /var/run/nginx.pid \r\n# Source function library. \r\n. /etc/rc.d/init.d/functions\r\n# Source networking configuration. \r\n. /etc/sysconfig/network\r\n# Check that networking is up. \r\n[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; exit 0\r\nnginx=&quot;/usr/sbin/nginx&quot;\r\nprog=$(basename $nginx)\r\nNGINX_CONF_FILE=&quot;/etc/nginx/nginx.conf&quot;\r\n[ -f /etc/sysconfig/nginx ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; . /etc/sysconfig/nginx\r\nlockfile=/var/lock/subsys/nginx\r\nstart() {\r\n    [ -x $nginx ] || exit 5\r\n    [ -f $NGINX_CONF_FILE ] || exit 6\r\n    echo -n $&quot;Starting $prog: &quot; \r\n    daemon $nginx -c $NGINX_CONF_FILE\r\n    retval=$?\r\n    echo \r\n    [ $retval -eq 0 ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; touch $lockfile\r\n    return $retval\r\n}\r\nstop() {\r\n    echo -n $&quot;Stopping $prog: &quot; \r\n    killproc $prog -QUIT\r\n    retval=$?\r\n    echo \r\n    [ $retval -eq 0 ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; rm -f $lockfile\r\n    return $retval\r\nkillall -9 nginx\r\n}\r\nrestart() {\r\n    configtest || return $?\r\n    stop\r\n    sleep 1\r\n    start\r\n}\r\nreload() {\r\n    configtest || return $?\r\n    echo -n $&quot;Reloading $prog: &quot; \r\n    killproc $nginx -HUP\r\nRETVAL=$?\r\n    echo \r\n}\r\nforce_reload() {\r\n    restart\r\n}\r\nconfigtest() {\r\n$nginx -t -c $NGINX_CONF_FILE\r\n}\r\nrh_status() {\r\n    status $prog\r\n}\r\nrh_status_q() {\r\n    rh_status &amp;amp;amp;amp;gt;/dev/null 2&amp;amp;amp;amp;gt;&amp;amp;amp;amp;amp;1\r\n}\r\ncase &quot;$1&quot; in\r\n    start)\r\n        rh_status_q &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; exit 0\r\n    $1\r\n        ;;\r\n    stop)\r\n        rh_status_q || exit 0\r\n        $1\r\n        ;;\r\n    restart|configtest)\r\n        $1\r\n        ;;\r\n    reload)\r\n        rh_status_q || exit 7\r\n        $1\r\n        ;;\r\n    force-reload)\r\n        force_reload\r\n        ;;\r\n    status)\r\n        rh_status\r\n        ;;\r\n    condrestart|try-restart)\r\n        rh_status_q || exit 0\r\n            ;;\r\n    *)\r\n      echo $&quot;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&quot; \r\n        exit 2\r\nesac\r\n[/plain]\r\n\r\n保存退出（按:wq!）；可能你得稍微查一下vim的一些命令，不然操作时可能会出现一点小问题。\r\n赋予脚本执行权限：\r\n# chmod +x /etc/init.d/nginx\r\n\r\n添加至服务管理列表，设置开机自启：\r\n# chkconfig --add nginx\r\n# chkconfig nginx on\r\n<h3>\r\n4. 启动服务。</h3>\r\n# service nginx start\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP6.png\"><img class=\"size-full wp-image-736 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP6.png\" alt=\"\" width=\"576\" height=\"238\" /></a>\r\n<div>出现这玩意说明成功了！</div>\r\n<div></div>\r\n<blockquote>\r\n<div>注：如果报错 [emerg]: getpwnam(“nginx”) failed ；</div>\r\n<div>解决方法：</div>\r\n<div># useradd -s /sbin/nologin -M nginx</div>\r\n<div># id nginx</div></blockquote>\r\n<div></div>\r\n<div>\r\n<h2>三 安装mysql</h2>\r\n<h3>1. 版本选择</h3>\r\n<div>在安装之前必须明白一件事情，mysql有很多种安装方式，每种不一样，不要弄混了。</div>\r\n<div>比如源码编译安装（mysql-5.7.17.tar.gz），二进制安装（mysql-5.7.17-linux-glibc2.5-i686.tar），nmp安装（最简单的）。这里我们用源码自己编译安装。</div>\r\n<h3>2. 准备编译环境</h3>\r\n<div># yum groupinstall \"Server Platform Development\" \"Development tools\" -y</div>\r\n<div># yum install cmake -y</div>\r\n<div>cmake在现在的版本是必须要安装的，你可以下载camke之后编译，也可以直接yum安装。接下来的编译过程如果报错缺少什么就补什么。</div>\r\n<div></div>\r\n<h3>3. 准备mysql数据库存放目录</h3>\r\n<div># mkdir /mnt/data</div>\r\n<div># groupadd -r mysql</div>\r\n<div># useradd -r -g mysql -s /sbin/nologin mysql</div>\r\n<div># id mysql</div>\r\n<div></div>\r\n<h3>4. 更改数据目录权限。</h3>\r\n<div># chown -R mysql:mysql /mnt/data</div>\r\n<div></div>\r\n<h3>5. 下载并解压编译官网下载稳定版的源码包。</h3>\r\n<div>在下载的时候注意一下版本，下载对应的版本。我们源码编译，要下载长这样的安装包：mysql-5.7.17.tar.gz，同时在安装的时候我们需要boost库，5.7需要1.59版本的库；你可以下载boost库然后编译boost库，或者像我一样，下载带有boost库的mysql版本。</div>\r\n<div>开始解压编译：</div>\r\n<div>\r\n[plain]&lt;/div&gt;\r\n&lt;div&gt;# tar xvf mysql-boost-5.7.17.tar.gz -C /usr/local/src\r\n# cd /usr/local/src/mysql-5.7.17\r\n# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\\r\n-DMYSQL_DATADIR=/mnt/data \\\r\n-DSYSCONFDIR=/etc \\\r\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\r\n-DWITH_ARCHIVE_STORAGE_ENGINE=1 \\\r\n-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\\r\n-DWITH_READLINE=1 \\\r\n-DWITH_SSL=system \\\r\n-DWITH_ZLIB=system \\\r\n-DWITH_LIBWRAP=0 \\\r\n-DMYSQL_TCP_PORT=3306 \\\r\n-DMYSQL_UNIX_ADDR=/tmp/mysql.sock \\\r\n-DDEFAULT_CHARSET=utf8 \\\r\n-DDEFAULT_COLLATION=utf8_general_ci\r\n-DDOWNLOAD_BOOST=1 \\\r\n-DWITH_BOOST=/usr/local/mysql/boost/boost_1_59_0 \\\r\n# make &amp;&amp; make install&lt;/div&gt;\r\n&lt;div&gt;[/plain]\r\n</div>\r\n</div>\r\n<div>\r\n<h3>6. 修改安装目录的权限属组</h3>\r\n<div># chown -R mysql:mysql /usr/local/mysql/</div>\r\n</div>\r\n<div>\r\n<h3>7. 初始化数据库。</h3>\r\n<div># /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/mnt/data/</div>\r\n<div>需要注意这里是mysql5.7的初始化命令，而5.7一下的都是用：</div>\r\n<div># /usr/local/mysql/scripts/mysql_install_db --user=mysql --datadir=/mnt/data/</div>\r\n<div></div>\r\n<div>在初始化成功之后，5.7的initial命令会产生一个随机的root登录密码，你要用这个密码登录，然后修改（必须修改生成的随机密码不然无法后续操作）。在最后有一个类似这样的密码：</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP7.png\"><img class=\"alignnone size-full wp-image-737\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP7.png\" alt=\"\" width=\"233\" height=\"45\" /></a></div>\r\n<div>\r\n<div></div>\r\n<h3>8. 复制配置文件</h3>\r\n<div># cp support-files/my-default.cnf /etc/my.cnf</div>\r\n<div>这里又有一点要注意：mysql5.7配置文件需要修改my.cnf关键配置， mysql5.7之前默认配置文件中是有配置项的，不用手动修改。以下为配置，根据实际情况修改：</div>\r\n<div>[mysqld]</div>\r\n<div>basedir = /usr/local/mysql</div>\r\n<div>datadir = /mnt/data</div>\r\n<div>port = 3306</div>\r\n<div>socket = /Ultrapower/test/mysql/tmp/mysql.sock</div>\r\n<div></div>\r\n<div>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</div>\r\n<div>[client]</div>\r\n<div>socket = /Ultrapower/test/mysql/tmp/mysql.sock</div>\r\n<div>如果添加[client]下 的内容，注意sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES要放在[mysqld]下。</div>\r\n<div>如果报错tmp目录不错在，到对应的地方去创建目录，然后创建后要赋予mysql权限，chown -R mysql:mysql tmp。</div>\r\n<div></div>\r\n<h3>9. 设置开机启动</h3>\r\n<div># cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</div>\r\n<div># chmod +x /etc/init.d/mysql</div>\r\n<div>注册为开机启动服务：</div>\r\n<div># chkconfig mysqld on</div>\r\n<div># chkconfig --add mysqld</div>\r\n<div>查看是否设置成功：</div>\r\n<div># chkconfig --list mysql</div>\r\n<div></div>\r\n<h3>10. 设置PATH环境变量。</h3>\r\n<div># echo \"export PATH=$PATH:/usr/local/mysql/bin\" &gt; /etc/profile.d/mysql.sh</div>\r\n<div># source /etc/profile.d/mysql.sh</div>\r\n<div></div>\r\n<h3>11. 启动服务</h3>\r\n<div># service mysqld start</div>\r\n</div>\r\n</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP8.png\"><img class=\"size-full wp-image-738 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP8.png\" alt=\"\" width=\"726\" height=\"578\" /></a></div>\r\n<div>\r\n<div>这样基本上，这个mysql就装好了。</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h3>12. 登录mysql并修改密码</h3>\r\n<div>mysql -uroot -p生成的密码</div>\r\n<div>执行修改密码：</div>\r\n<div>alter user \'root\'@\'localhost\' identified by \'newpassword\';</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h2>四 安装php-fpm</h2>\r\n<h3>1. 安装依赖包:</h3>\r\n<div>yum install libmcrypt libmcrypt-devel mhash mhash-devel libxml2 libxml2-devel bzip2 bzip2-devel</div>\r\n<div>这里还漏了几个，如果报错了再补上。</div>\r\n<div></div>\r\n<h3>2. 到官网下载源码包，开始编译安装：</h3>\r\n<div>\r\n\r\n[plain]\r\n# tar xvf php-7.0.16.tar.bz2 -C /usr/local/src\r\n# cd /usr/local/src/php-7.0.16\r\n执行下面的配置文件：\r\n# ./configure --prefix=/usr/local/php \\\r\n--with-config-file-scan-dir=/etc/php.d \\\r\n--with-config-file-path=/etc \\\r\n--with-mysql=/usr/local/mysql \\\r\n--with-mysqli=/usr/local/mysql/bin/mysql_config \\\r\n--enable-fpm \\\r\n--enable-opcache \\\r\n--disable-fileinfo \\\r\n--with-jpeg-dir \\\r\n--with-iconv-dir=/usr/local \\\r\n--with-freetype-dir \\\r\n--with-png-dir \\\r\n--with-zlib \\\r\n--with-libxml-dir=/usr \\\r\n--enable-xml \\\r\n--enable-bcmath \\\r\n--enable-shmop \\\r\n--enable-exif \\\r\n--with-curl \\\r\n--enable-sysvsem \\\r\n--enable-inline-optimization \\\r\n--enable-mbregex \\\r\n--enable-inline-optimization \\\r\n--enable-mbstring \\\r\n--with-mcrypt \\\r\n--with-gd \\\r\n--enable-gd-native-ttf \\\r\n--with-openssl \\\r\n--with-mhash \\\r\n--enable-pcntl \\\r\n--enable-sockets \\\r\n--with-xmlrpc \\\r\n--enable-ftp \\\r\n--with-gettext \\\r\n--enable-zip \\\r\n--enable-soap \\\r\n--with-bz2\r\n[/plain]\r\n\r\n执行以上的配置，如果出现下面这样的license，才是正确的，才可以开始编译，如果出问题，就解决，一般是少了什么库。</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP9.png\"><img class=\"size-full wp-image-739 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP9.png\" alt=\"\" width=\"715\" height=\"673\" /></a></div>\r\n<div>\r\n<div>执行编译：</div>\r\n<div># make &amp;&amp; make install</div>\r\n<div></div>\r\n<h3>3. 添加php和php-fpm配置文件。</h3>\r\n<div># cp /usr/local/src/php-7.0.16/php.ini-production /etc/php.ini</div>\r\n<div># cd /usr/local/php/etc/</div>\r\n<div># cp php-fpm.conf.default php-fpm.conf</div>\r\n<div># sed -i \'s@;pid = run/php-fpm.pid@pid = /usr/local/php/var/run/php-fpm.pid@\' php-fpm.conf</div>\r\n<div></div>\r\n<h3>4. 添加php-fpm启动脚本。</h3>\r\n<div># cp /usr/local/src/php-7.0.16/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</div>\r\n<div># chmod +x /etc/init.d/php-fpm</div>\r\n<div></div>\r\n<h3>5. 添加php-fpm至服务列表并设置开机自启。</h3>\r\n<div># chkconfig --add php-fpm</div>\r\n<div># chkconfig --list php-fpm</div>\r\n<div># chkconfig php-fpm on</div>\r\n<div></div>\r\n<h3>6. 启动服务。</h3>\r\n<div># service php-fpm start</div>\r\n<div></div>\r\n<div><strong>注：</strong></div>\r\n<div>启动时如出现错误：WARNING: Nothing matches the include pattern \'/usr/local/etc/php-fpm.d/*.conf\' from /usr/local/etc/php-fpm.conf at line 125.</div>\r\n<div>ERROR:. No pool defined at least one pool section must be specified in config file</div>\r\n<div>ERROR: failed to post process the configuration</div>\r\n<div>ERROR: FPM initialization failed</div>\r\n<div>解决：到指定目录执行cp www.conf.default www.conf</div>\r\n<div></div>\r\n<h3>7. 添加nginx对fastcgi的支持，首先备份默认的配置文件。</h3>\r\n<div># cp /etc/nginx/nginx.conf /etc/nginx/nginx.confbak</div>\r\n<div># cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf</div>\r\n<div>编辑/etc/nginx/nginx.conf，在所支持的主页面格式中添加php格式的主页，类似如下：</div>\r\n<div>location / {</div>\r\n<div>root /usr/local/nginx/html;</div>\r\n<div>index index.php index.html index.htm;</div>\r\n<div>}</div>\r\n<div>取消以下内容前面的注释：</div>\r\n<div>location ~ \\.php$ {</div>\r\n<div>root /usr/local/nginx/html;</div>\r\n<div>fastcgi_pass 127.0.0.1:9000;</div>\r\n<div>fastcgi_index index.php;</div>\r\n<div>fastcgi_param SCRIPT_FILENAME /usr/local/nginx/html/$fastcgi_script_name;</div>\r\n<div>include fastcgi_params;</div>\r\n<div>}</div>\r\n<div></div>\r\n<h3>8. 重启nginx</h3>\r\n<div># service nginx reload</div>\r\n<div></div>\r\n<h3>9. 测试是否成功</h3>\r\n<div>在/usr/local/nginx/html/新建index.php的测试页面，内容如下：</div>\r\n<div>&lt;?php</div>\r\n<div>phpinfo();</div>\r\n<div>?&gt;</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP10.png\"><img class=\"size-full wp-image-740 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP10.png\" alt=\"\" width=\"959\" height=\"911\" /></a></div>\r\n<div>\r\n<div>如果出现这个熟悉的界面，说明就大功告成了！Linux下一个基本的LNMP就搭建完毕了。</div>\r\n</div>\r\n</div>\r\n</div>', 'Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）', '', 'inherit', 'closed', 'closed', '', '731-revision-v1', '', '', '2017-03-03 01:48:13', '2017-03-02 17:48:13', '', 731, 'http://www.gzpblog.com/20170303/741.html', 0, 'revision', '', 0),
(742, 1, '2017-03-14 09:39:05', '2017-03-14 01:39:05', '<blockquote><strong>写在前面</strong>\n\n对于新手的一点建议：\n<ul>\n 	<li> 最好熟悉一下linux 的基本命令，vim的常用命令</li>\n 	<li>千万不要无脑复制，先看一下命令，特别是路径要注意</li>\n 	<li>学会排查错误</li>\n</ul>\n本篇安装的软件版本为：\n<ul>\n 	<li>Linux：Centos6.8</li>\n 	<li>Nginx：1.10.3</li>\n 	<li>MySQL：5.7.17</li>\n 	<li>PHP：7.0.16</li>\n</ul>\n</blockquote>\n最近研究了Linux系统下的PHP环境搭建，个人感觉最好最好不要用yum默认的程序包安装，因为版本都比较低，下载最新的稳定版自行安装比较好。现在网上教程很多，之所以还记这篇，原因有一点，当你重复网上的教程自行安装时，90%还是会出现各种各样的问题，因为你可能linux的系统版本不同，你想装的软件版本不同，安装的方法不同，你下错了安装包的版本，还有其它乱七八糟的。举个例，比如你看着5.6的mysql安装教程，装5.7的，你感觉没问题，但是事实就是，5.7的不一样了！而且网上还没有新的这方面内容，不好找，这就需要你去摸索了，亲身经历啊。这里面，Niginx感觉最好配，MySQL最坑。\n\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP1.png\"><img class=\"size-full wp-image-732 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP1.png\" alt=\"\" width=\"513\" height=\"218\" /></a>\n<h2>一 准备工作</h2>\n<h3>1. 关闭SELINUX</h3>\n修改配置文件，重启服务后永久生效。\n# sed -i \'s/SELINUX=.*/SELINUX=disabled/g\' /etc/selinux/config\n命令行设置立即生效。\n# setenforce 0\n<h3>2. 如果是阿里云ECS用户，安全组设置中开启80端口方便调试。</h3>\n&nbsp;\n<h2>二 安装Nginx</h2>\n<h3>1. 下载源码包</h3>\n上Nginx官网，复制最新稳定版的下载地址过来，然后用wget下载（接下来需要下载安装包的都可以用wget）：\n\n# cd /usr/local/src\n# wget http://nginx.org/download/nginx-1.10.3.tar.gz\n\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP2.png\"><img class=\"size-full wp-image-733 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP2.png\" alt=\"\" width=\"895\" height=\"59\" /></a>\n\n下载完成的状态基本都是以下这样的：\n\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP3.png\"><img class=\"size-full wp-image-734 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP3.png\" alt=\"\" width=\"1219\" height=\"280\" /></a>\n<h3>2. 进行解压编译</h3>\n# tar xvf nginx-1.10.3.tar.gz\n# yum groupinstall \"Development tools\"\n# yum -y install gcc wget gcc-c++ automake autoconf libtool libxml2-devel libxslt-devel perl-devel perl-ExtUtils-Embed pcre-devel openssl-devel\n\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP4.png\"><img class=\"alignnone size-full wp-image-735\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP4.png\" alt=\"\" width=\"1260\" height=\"586\" /></a>\n\n执行完成。\n\n进入解压后的nginx-1.10.3文件夹：\ncd /usr/local/src/nginx-1.10.3\n\n执行以下语句：\n\n[plain]\n\n./configure \\\n--prefix=/usr/local/nginx \\\n--sbin-path=/usr/sbin/nginx \\\n--conf-path=/etc/nginx/nginx.conf \\\n--error-log-path=/var/log/nginx/error.log \\\n--http-log-path=/var/log/nginx/access.log \\\n--pid-path=/var/run/nginx.pid \\\n--lock-path=/var/run/nginx.lock \\\n--http-client-body-temp-path=/var/tmp/nginx/client \\\n--http-proxy-temp-path=/var/tmp/nginx/proxy \\\n--http-fastcgi-temp-path=/var/tmp/nginx/fcgi \\\n--http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \\\n--http-scgi-temp-path=/var/tmp/nginx/scgi \\\n--user=nginx \\\n--group=nginx \\\n--with-pcre \\\n--with-http_v2_module \\\n--with-http_ssl_module \\\n--with-http_realip_module \\\n--with-http_addition_module \\\n--with-http_sub_module \\\n--with-http_dav_module \\\n--with-http_flv_module \\\n--with-http_mp4_module \\\n--with-http_gunzip_module \\\n--with-http_gzip_static_module \\\n--with-http_random_index_module \\\n--with-http_secure_link_module \\\n--with-http_stub_status_module \\\n--with-http_auth_request_module \\\n--with-mail \\\n--with-mail_ssl_module \\\n--with-file-aio \\\n--with-ipv6 \\\n--with-http_v2_module \\\n--with-threads \\\n--with-stream \\\n--with-stream_ssl_module\n\n[/plain]\n\n完成后执行编译：\n# make &amp;&amp; make install\n# mkdir -pv /var/tmp/nginx/client\n<h3>3. 添加SysV启动脚本。</h3>\n用vim编辑脚本：\n# vim /etc/init.d/nginx\n<div>写入以下内容：</div>\n\n[plain]\n#!/bin/sh \n# \n# nginx - this script starts and stops the nginx daemon \n# \n# chkconfig:   - 85 15 \n# description: Nginx is an HTTP(S) server, HTTP(S) reverse \\ \n#               proxy and IMAP/POP3 proxy server \n# processname: nginx \n# config:      /etc/nginx/nginx.conf \n# config:      /etc/sysconfig/nginx \n# pidfile:     /var/run/nginx.pid \n# Source function library. \n. /etc/rc.d/init.d/functions\n# Source networking configuration. \n. /etc/sysconfig/network\n# Check that networking is up. \n[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; exit 0\nnginx=&quot;/usr/sbin/nginx&quot;\nprog=$(basename $nginx)\nNGINX_CONF_FILE=&quot;/etc/nginx/nginx.conf&quot;\n[ -f /etc/sysconfig/nginx ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; . /etc/sysconfig/nginx\nlockfile=/var/lock/subsys/nginx\nstart() {\n    [ -x $nginx ] || exit 5\n    [ -f $NGINX_CONF_FILE ] || exit 6\n    echo -n $&quot;Starting $prog: &quot; \n    daemon $nginx -c $NGINX_CONF_FILE\n    retval=$?\n    echo \n    [ $retval -eq 0 ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; touch $lockfile\n    return $retval\n}\nstop() {\n    echo -n $&quot;Stopping $prog: &quot; \n    killproc $prog -QUIT\n    retval=$?\n    echo \n    [ $retval -eq 0 ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; rm -f $lockfile\n    return $retval\nkillall -9 nginx\n}\nrestart() {\n    configtest || return $?\n    stop\n    sleep 1\n    start\n}\nreload() {\n    configtest || return $?\n    echo -n $&quot;Reloading $prog: &quot; \n    killproc $nginx -HUP\nRETVAL=$?\n    echo \n}\nforce_reload() {\n    restart\n}\nconfigtest() {\n$nginx -t -c $NGINX_CONF_FILE\n}\nrh_status() {\n    status $prog\n}\nrh_status_q() {\n    rh_status &amp;amp;amp;amp;gt;/dev/null 2&amp;amp;amp;amp;gt;&amp;amp;amp;amp;amp;1\n}\ncase &quot;$1&quot; in\n    start)\n        rh_status_q &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; exit 0\n    $1\n        ;;\n    stop)\n        rh_status_q || exit 0\n        $1\n        ;;\n    restart|configtest)\n        $1\n        ;;\n    reload)\n        rh_status_q || exit 7\n        $1\n        ;;\n    force-reload)\n        force_reload\n        ;;\n    status)\n        rh_status\n        ;;\n    condrestart|try-restart)\n        rh_status_q || exit 0\n            ;;\n    *)\n      echo $&quot;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&quot; \n        exit 2\nesac\n[/plain]\n\n保存退出（按:wq!）；可能你得稍微查一下vim的一些命令，不然操作时可能会出现一点小问题。\n赋予脚本执行权限：\n# chmod +x /etc/init.d/nginx\n\n添加至服务管理列表，设置开机自启：\n# chkconfig --add nginx\n# chkconfig nginx on\n<h3>4. 启动服务。</h3>\n# service nginx start\n\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP6.png\"><img class=\"size-full wp-image-736 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP6.png\" alt=\"\" width=\"576\" height=\"238\" /></a>\n<div>出现这玩意说明成功了！</div>\n<div></div>\n<div></div>\n<blockquote>\n<div>注：如果报错 [emerg]: getpwnam(“nginx”) failed ；</div>\n<div>解决方法：</div>\n<div># useradd -s /sbin/nologin -M nginx</div>\n<div># id nginx</div></blockquote>\n<div></div>\n<div>\n<h2>三 安装mysql</h2>\n<h3>1. 版本选择</h3>\n<div>在安装之前必须明白一件事情，mysql有很多种安装方式，每种不一样，不要弄混了。</div>\n<div>比如源码编译安装（mysql-5.7.17.tar.gz），二进制安装（mysql-5.7.17-linux-glibc2.5-i686.tar），nmp安装（最简单的）。这里我们用源码自己编译安装。</div>\n<h3>2. 准备编译环境</h3>\n<div># yum groupinstall \"Server Platform Development\" \"Development tools\" -y</div>\n<div># yum install cmake -y</div>\n<div>cmake在现在的版本是必须要安装的，你可以下载camke之后编译，也可以直接yum安装。接下来的编译过程如果报错缺少什么就补什么。</div>\n<div></div>\n<h3>3. 准备mysql数据库存放目录</h3>\n<div># mkdir /mnt/data</div>\n<div># groupadd -r mysql</div>\n<div># useradd -r -g mysql -s /sbin/nologin mysql</div>\n<div># id mysql</div>\n<div></div>\n<h3>4. 更改数据目录权限。</h3>\n<div># chown -R mysql:mysql /mnt/data</div>\n<div></div>\n<h3>5. 下载并解压编译官网下载的稳定版的源码包。</h3>\n<div>在下载的时候注意一下版本，下载对应的版本。我们源码编译，要下载长这样的安装包：mysql-5.7.17.tar.gz，同时在安装的时候我们需要boost库，5.7需要1.59版本的库；你可以下载boost库然后编译boost库，或者像我一样，下载带有boost库的mysql版本。</div>\n<div>开始解压编译：</div>\n<div>\n\n[plain]\n# tar xvf mysql-boost-5.7.17.tar.gz -C /usr/local/src\n# cd /usr/local/src/mysql-5.7.17\n# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\\n-DMYSQL_DATADIR=/mnt/data \\\n-DSYSCONFDIR=/etc \\\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\n-DWITH_ARCHIVE_STORAGE_ENGINE=1 \\\n-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\\n-DWITH_READLINE=1 \\\n-DWITH_SSL=system \\\n-DWITH_ZLIB=system \\\n-DWITH_LIBWRAP=0 \\\n-DMYSQL_TCP_PORT=3306 \\\n-DMYSQL_UNIX_ADDR=/tmp/mysql.sock \\\n-DDEFAULT_CHARSET=utf8 \\\n-DDEFAULT_COLLATION=utf8_general_ci\n-DDOWNLOAD_BOOST=1 \\\n-DWITH_BOOST=/usr/local/mysql/boost/boost_1_59_0 \\\n# make &amp;&amp; make install\n[/plain]\n\n</div>\n</div>\n<div>\n<h3>6. 修改安装目录的权限属组</h3>\n<div># chown -R mysql:mysql /usr/local/mysql/</div>\n</div>\n<div>\n<h3>7. 初始化数据库。</h3>\n<div># /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/mnt/data/</div>\n<div>需要注意这里是mysql5.7的初始化命令，而5.7以下的都是用：</div>\n<div># /usr/local/mysql/scripts/mysql_install_db --user=mysql --datadir=/mnt/data/</div>\n<div></div>\n<div>在初始化成功之后，5.7的initial命令会产生一个随机的root登录密码，你要用这个密码登录，然后修改（必须修改生成的随机密码不然无法后续操作）。在最后有一个类似这样的密码：</div>\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP7.png\"><img class=\"alignnone size-full wp-image-737\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP7.png\" alt=\"\" width=\"233\" height=\"45\" /></a></div>\n<div>\n<div></div>\n<h3>8. 复制配置文件</h3>\n<div># cp support-files/my-default.cnf /etc/my.cnf</div>\n<div>这里又有一点要注意：mysql5.7配置文件需要修改my.cnf关键配置， mysql5.7之前默认配置文件中是有配置项的，不用手动修改。以下为配置，根据实际情况修改：</div>\n<div>\n\n[plain]\n[mysqld]\nbasedir = /usr/local/mysql\ndatadir = /mnt/data\nport = 3306\nsocket = /Ultrapower/test/mysql/tmp/mysql.sock\n\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\n[client]\nsocket = /Ultrapower/test/mysql/tmp/mysql.sock\n[/plain]\n\n</div>\n<div>如果添加[client]下 的内容，注意sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES要放在[mysqld]下。</div>\n<div>如果报错tmp目录不错在，到对应的地方去创建目录，然后创建后要赋予mysql权限，chown -R mysql:mysql tmp。</div>\n<div></div>\n<h3>9. 设置开机启动</h3>\n<div># cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</div>\n<div># chmod +x /etc/init.d/mysql</div>\n<div>注册为开机启动服务：</div>\n<div># chkconfig mysqld on</div>\n<div># chkconfig --add mysqld</div>\n<div>查看是否设置成功：</div>\n<div># chkconfig --list mysql</div>\n<div></div>\n<h3>10. 设置PATH环境变量。</h3>\n<div># echo \"export PATH=$PATH:/usr/local/mysql/bin\" &gt; /etc/profile.d/mysql.sh</div>\n<div># source /etc/profile.d/mysql.sh</div>\n<div></div>\n<h3>11. 启动服务</h3>\n<div># service mysqld start</div>\n</div>\n</div>\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP8.png\"><img class=\"size-full wp-image-738 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP8.png\" alt=\"\" width=\"726\" height=\"578\" /></a></div>\n<div>\n<div>这样基本上，这个mysql就装好了。</div>\n</div>\n<div></div>\n<div>\n<h3>12. 登录mysql并修改密码</h3>\n<div>mysql -uroot -p生成的密码</div>\n<div>执行修改密码：</div>\n<div>alter user \'root\'@\'localhost\' identified by \'newpassword\';</div>\n</div>\n<div></div>\n<div>\n<h2>四 安装php-fpm</h2>\n<h3>1. 安装依赖包:</h3>\n<div>yum install libmcrypt libmcrypt-devel mhash mhash-devel libxml2 libxml2-devel bzip2 bzip2-devel</div>\n<div>这里还漏了几个，如果报错了提示缺少了什么就yum补上。</div>\n<div></div>\n<h3>2. 到官网下载源码包后，开始编译安装：</h3>\n<div>\n\n[plain]\n# tar xvf php-7.0.16.tar.bz2 -C /usr/local/src\n# cd /usr/local/src/php-7.0.16\n执行下面的配置文件：\n# ./configure --prefix=/usr/local/php \\\n--with-config-file-scan-dir=/etc/php.d \\\n--with-config-file-path=/etc \\\n--with-mysql=/usr/local/mysql \\\n--with-mysqli=/usr/local/mysql/bin/mysql_config \\\n--enable-fpm \\\n--enable-opcache \\\n--disable-fileinfo \\\n--with-jpeg-dir \\\n--with-iconv-dir=/usr/local \\\n--with-freetype-dir \\\n--with-png-dir \\\n--with-zlib \\\n--with-libxml-dir=/usr \\\n--enable-xml \\\n--enable-bcmath \\\n--enable-shmop \\\n--enable-exif \\\n--with-curl \\\n--enable-sysvsem \\\n--enable-inline-optimization \\\n--enable-mbregex \\\n--enable-inline-optimization \\\n--enable-mbstring \\\n--with-mcrypt \\\n--with-gd \\\n--enable-gd-native-ttf \\\n--with-openssl \\\n--with-mhash \\\n--enable-pcntl \\\n--enable-sockets \\\n--with-xmlrpc \\\n--enable-ftp \\\n--with-gettext \\\n--enable-zip \\\n--enable-soap \\\n--with-bz2\n[/plain]\n\n执行以上的配置，如果出现下面这样的license，才是正确的，才可以开始编译，如果出问题，就解决，一般是少了什么库。\n<div>（注意将来可能会用到的一些库，先正确地编译好以免以后再来编就麻烦:openssl, gd, mbstring, sockets, opcache）</div>\n</div>\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP9.png\"><img class=\"size-full wp-image-739 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP9.png\" alt=\"\" width=\"715\" height=\"673\" /></a></div>\n<div>\n<div>执行编译：</div>\n<div># make &amp;&amp; make install</div>\n<div></div>\n<h3>3. 添加php和php-fpm配置文件。</h3>\n<div># cp /usr/local/src/php-7.0.16/php.ini-production /etc/php.ini</div>\n<div># cd /usr/local/php/etc/</div>\n<div># cp php-fpm.conf.default php-fpm.conf</div>\n<div># sed -i \'s@;pid = run/php-fpm.pid@pid = /usr/local/php/var/run/php-fpm.pid@\' php-fpm.conf</div>\n<div></div>\n<h3>4. 添加php-fpm启动脚本。</h3>\n<div># cp /usr/local/src/php-7.0.16/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</div>\n<div># chmod +x /etc/init.d/php-fpm</div>\n<div></div>\n<h3>5. 添加php-fpm至服务列表并设置开机自启。</h3>\n<div># chkconfig --add php-fpm</div>\n<div># chkconfig --list php-fpm</div>\n<div># chkconfig php-fpm on</div>\n<div></div>\n<h3>6. 启动服务。</h3>\n<div># service php-fpm start</div>\n<div></div>\n<div><strong>注：</strong></div>\n<div>启动时如出现错误：WARNING: Nothing matches the include pattern \'/usr/local/etc/php-fpm.d/*.conf\' from /usr/local/etc/php-fpm.conf at line 125.</div>\n<div>ERROR:. No pool defined at least one pool section must be specified in config file</div>\n<div>ERROR: failed to post process the configuration</div>\n<div>ERROR: FPM initialization failed</div>\n<div>解决：到指定目录执行cp www.conf.default www.conf</div>\n<div></div>\n<h3>7. 添加nginx对fastcgi的支持，</h3>\n首先备份默认的配置文件。\n\n# cp /etc/nginx/nginx.conf /etc/nginx/nginx.confbak\n\n# cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf\n<div>编辑/etc/nginx/nginx.conf，在所支持的主页面格式中添加php格式的主页，类似如下：</div>\n<div>\n\n[plain]\nlocation / {\n    root /usr/local/nginx/html;\n    index index.php index.html index.htm;\n}\n[/plain]\n\n</div>\n<div>取消以下内容前面的注释：</div>\n<div>\n\n[plain]\nlocation ~ \\.php$ {\n    root /usr/local/nginx/html;\n    fastcgi_pass 127.0.0.1:9000;\n    fastcgi_index index.php;\n    fastcgi_param SCRIPT_FILENAME /usr/local/nginx/html/$fastcgi_script_name;\n    include fastcgi_params;\n}\n[/plain]\n\n</div>\n<div></div>\n<h3>8. 重启nginx</h3>\n<div># service nginx reload</div>\n<div></div>\n<h3>9. 测试是否成功</h3>\n<div>在/usr/local/nginx/html/新建index.php的测试页面，内容如下：</div>\n<div>&lt;?php</div>\n<div>phpinfo();</div>\n<div>?&gt;</div>\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP10.png\"><img class=\"size-full wp-image-740 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP10.png\" alt=\"\" width=\"959\" height=\"911\" /></a></div>\n<div>\n<div>如果出现这个熟悉的界面，说明就大功告成了！Linux下一个基本的LNMP就搭建完毕了。</div>\n</div>\n</div>\n</div>', 'Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）', '', 'inherit', 'closed', 'closed', '', '731-autosave-v1', '', '', '2017-03-14 09:39:05', '2017-03-14 01:39:05', '', 731, 'http://www.gzpblog.com/20170303/742.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(766, 1, '2017-03-04 20:19:15', '2017-03-04 12:19:15', '<blockquote><strong>写在前面</strong>\r\n\r\n对于新手的一点建议：\r\n<ul>\r\n 	<li> 最好熟悉一下linux 的基本命令，vim的常用命令</li>\r\n 	<li>千万不要无脑复制，先看一下命令，特别是路径要注意</li>\r\n 	<li>学会排查错误</li>\r\n</ul>\r\n本篇安装的软件版本为：\r\n<ul>\r\n 	<li>Linux：Centos6.8</li>\r\n 	<li>Nginx：1.10.3</li>\r\n 	<li>MySQL：5.7.17</li>\r\n 	<li>PHP：7.0.16</li>\r\n</ul>\r\n</blockquote>\r\n最近研究了Linux系统下的PHP环境搭建，个人感觉最好最好不要用yum默认的程序包安装，因为版本都比较低，下载最新的稳定版自行安装比较好。现在网上教程很多，之所以还记这篇，原因有一点，当你重复网上的教程自行安装时，90%还是会出现各种各样的问题，因为你可能linux的系统版本不同，你想装的软件版本不同，安装的方法不同，你下错了安装包的版本，还有其它乱七八糟的。举个例，比如你看着5.6的mysql安装教程，装5.7的，你感觉没问题，但是事实就是，5.7的不一样了！而且网上还没有新的这方面内容，不好找，这就需要你去摸索了，亲身经历啊。这里面，Niginx感觉最好配，MySQL最坑。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP1.png\"><img class=\"size-full wp-image-732 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP1.png\" alt=\"\" width=\"513\" height=\"218\" /></a>\r\n<h2>一 准备工作</h2>\r\n<h3>1. 关闭SELINUX</h3>\r\n修改配置文件，重启服务后永久生效。\r\n# sed -i \'s/SELINUX=.*/SELINUX=disabled/g\' /etc/selinux/config\r\n命令行设置立即生效。\r\n# setenforce 0\r\n<h3>2. 如果是阿里云ECS用户，安全组设置中开启80端口方便调试。</h3>\r\n&nbsp;\r\n<h2>二 安装Nginx</h2>\r\n<h3>1. 下载源码包</h3>\r\n上Nginx官网，复制最新稳定版的下载地址过来，然后用wget下载（接下来需要下载安装包的都可以用wget）：\r\n\r\n# cd /usr/local/src\r\n# wget http://nginx.org/download/nginx-1.10.3.tar.gz\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP2.png\"><img class=\"size-full wp-image-733 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP2.png\" alt=\"\" width=\"895\" height=\"59\" /></a>\r\n\r\n下载完成的状态基本都是以下这样的：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP3.png\"><img class=\"size-full wp-image-734 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP3.png\" alt=\"\" width=\"1219\" height=\"280\" /></a>\r\n<h3>2. 进行解压编译</h3>\r\n# tar xvf nginx-1.10.3.tar.gz\r\n# yum groupinstall \"Development tools\"\r\n# yum -y install gcc wget gcc-c++ automake autoconf libtool libxml2-devel libxslt-devel perl-devel perl-ExtUtils-Embed pcre-devel openssl-devel\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP4.png\"><img class=\"alignnone size-full wp-image-735\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP4.png\" alt=\"\" width=\"1260\" height=\"586\" /></a>\r\n\r\n执行完成。\r\n\r\n进入解压后的nginx-1.10.3文件夹：\r\ncd /usr/local/src/nginx-1.10.3\r\n\r\n执行以下语句：\r\n\r\n[plain]\r\n\r\n./configure \\\r\n--prefix=/usr/local/nginx \\\r\n--sbin-path=/usr/sbin/nginx \\\r\n--conf-path=/etc/nginx/nginx.conf \\\r\n--error-log-path=/var/log/nginx/error.log \\\r\n--http-log-path=/var/log/nginx/access.log \\\r\n--pid-path=/var/run/nginx.pid \\\r\n--lock-path=/var/run/nginx.lock \\\r\n--http-client-body-temp-path=/var/tmp/nginx/client \\\r\n--http-proxy-temp-path=/var/tmp/nginx/proxy \\\r\n--http-fastcgi-temp-path=/var/tmp/nginx/fcgi \\\r\n--http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \\\r\n--http-scgi-temp-path=/var/tmp/nginx/scgi \\\r\n--user=nginx \\\r\n--group=nginx \\\r\n--with-pcre \\\r\n--with-http_v2_module \\\r\n--with-http_ssl_module \\\r\n--with-http_realip_module \\\r\n--with-http_addition_module \\\r\n--with-http_sub_module \\\r\n--with-http_dav_module \\\r\n--with-http_flv_module \\\r\n--with-http_mp4_module \\\r\n--with-http_gunzip_module \\\r\n--with-http_gzip_static_module \\\r\n--with-http_random_index_module \\\r\n--with-http_secure_link_module \\\r\n--with-http_stub_status_module \\\r\n--with-http_auth_request_module \\\r\n--with-mail \\\r\n--with-mail_ssl_module \\\r\n--with-file-aio \\\r\n--with-ipv6 \\\r\n--with-http_v2_module \\\r\n--with-threads \\\r\n--with-stream \\\r\n--with-stream_ssl_module\r\n\r\n[/plain]\r\n\r\n完成后执行编译：\r\n# make &amp;&amp; make install\r\n# mkdir -pv /var/tmp/nginx/client\r\n<h3>3. 添加SysV启动脚本。</h3>\r\n用vim编辑脚本：\r\n# vim /etc/init.d/nginx\r\n<div>写入以下内容：</div>\r\n\r\n[plain]\r\n#!/bin/sh \r\n# \r\n# nginx - this script starts and stops the nginx daemon \r\n# \r\n# chkconfig:   - 85 15 \r\n# description: Nginx is an HTTP(S) server, HTTP(S) reverse \\ \r\n#               proxy and IMAP/POP3 proxy server \r\n# processname: nginx \r\n# config:      /etc/nginx/nginx.conf \r\n# config:      /etc/sysconfig/nginx \r\n# pidfile:     /var/run/nginx.pid \r\n# Source function library. \r\n. /etc/rc.d/init.d/functions\r\n# Source networking configuration. \r\n. /etc/sysconfig/network\r\n# Check that networking is up. \r\n[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; exit 0\r\nnginx=&quot;/usr/sbin/nginx&quot;\r\nprog=$(basename $nginx)\r\nNGINX_CONF_FILE=&quot;/etc/nginx/nginx.conf&quot;\r\n[ -f /etc/sysconfig/nginx ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; . /etc/sysconfig/nginx\r\nlockfile=/var/lock/subsys/nginx\r\nstart() {\r\n    [ -x $nginx ] || exit 5\r\n    [ -f $NGINX_CONF_FILE ] || exit 6\r\n    echo -n $&quot;Starting $prog: &quot; \r\n    daemon $nginx -c $NGINX_CONF_FILE\r\n    retval=$?\r\n    echo \r\n    [ $retval -eq 0 ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; touch $lockfile\r\n    return $retval\r\n}\r\nstop() {\r\n    echo -n $&quot;Stopping $prog: &quot; \r\n    killproc $prog -QUIT\r\n    retval=$?\r\n    echo \r\n    [ $retval -eq 0 ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; rm -f $lockfile\r\n    return $retval\r\nkillall -9 nginx\r\n}\r\nrestart() {\r\n    configtest || return $?\r\n    stop\r\n    sleep 1\r\n    start\r\n}\r\nreload() {\r\n    configtest || return $?\r\n    echo -n $&quot;Reloading $prog: &quot; \r\n    killproc $nginx -HUP\r\nRETVAL=$?\r\n    echo \r\n}\r\nforce_reload() {\r\n    restart\r\n}\r\nconfigtest() {\r\n$nginx -t -c $NGINX_CONF_FILE\r\n}\r\nrh_status() {\r\n    status $prog\r\n}\r\nrh_status_q() {\r\n    rh_status &amp;amp;amp;amp;gt;/dev/null 2&amp;amp;amp;amp;gt;&amp;amp;amp;amp;amp;1\r\n}\r\ncase &quot;$1&quot; in\r\n    start)\r\n        rh_status_q &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; exit 0\r\n    $1\r\n        ;;\r\n    stop)\r\n        rh_status_q || exit 0\r\n        $1\r\n        ;;\r\n    restart|configtest)\r\n        $1\r\n        ;;\r\n    reload)\r\n        rh_status_q || exit 7\r\n        $1\r\n        ;;\r\n    force-reload)\r\n        force_reload\r\n        ;;\r\n    status)\r\n        rh_status\r\n        ;;\r\n    condrestart|try-restart)\r\n        rh_status_q || exit 0\r\n            ;;\r\n    *)\r\n      echo $&quot;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&quot; \r\n        exit 2\r\nesac\r\n[/plain]\r\n\r\n保存退出（按:wq!）；可能你得稍微查一下vim的一些命令，不然操作时可能会出现一点小问题。\r\n赋予脚本执行权限：\r\n# chmod +x /etc/init.d/nginx\r\n\r\n添加至服务管理列表，设置开机自启：\r\n# chkconfig --add nginx\r\n# chkconfig nginx on\r\n<h3>4. 启动服务。</h3>\r\n# service nginx start\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP6.png\"><img class=\"size-full wp-image-736 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP6.png\" alt=\"\" width=\"576\" height=\"238\" /></a>\r\n<div>出现这玩意说明成功了！</div>\r\n<div></div>\r\n<div></div>\r\n<blockquote>\r\n<div>注：如果报错 [emerg]: getpwnam(“nginx”) failed ；</div>\r\n<div>解决方法：</div>\r\n<div># useradd -s /sbin/nologin -M nginx</div>\r\n<div># id nginx</div></blockquote>\r\n<div></div>\r\n<div>\r\n<h2>三 安装mysql</h2>\r\n<h3>1. 版本选择</h3>\r\n<div>在安装之前必须明白一件事情，mysql有很多种安装方式，每种不一样，不要弄混了。</div>\r\n<div>比如源码编译安装（mysql-5.7.17.tar.gz），二进制安装（mysql-5.7.17-linux-glibc2.5-i686.tar），nmp安装（最简单的）。这里我们用源码自己编译安装。</div>\r\n<h3>2. 准备编译环境</h3>\r\n<div># yum groupinstall \"Server Platform Development\" \"Development tools\" -y</div>\r\n<div># yum install cmake -y</div>\r\n<div>cmake在现在的版本是必须要安装的，你可以下载camke之后编译，也可以直接yum安装。接下来的编译过程如果报错缺少什么就补什么。</div>\r\n<div></div>\r\n<h3>3. 准备mysql数据库存放目录</h3>\r\n<div># mkdir /mnt/data</div>\r\n<div># groupadd -r mysql</div>\r\n<div># useradd -r -g mysql -s /sbin/nologin mysql</div>\r\n<div># id mysql</div>\r\n<div></div>\r\n<h3>4. 更改数据目录权限。</h3>\r\n<div># chown -R mysql:mysql /mnt/data</div>\r\n<div></div>\r\n<h3>5. 下载并解压编译官网下载的稳定版的源码包。</h3>\r\n<div>在下载的时候注意一下版本，下载对应的版本。我们源码编译，要下载长这样的安装包：mysql-5.7.17.tar.gz，同时在安装的时候我们需要boost库，5.7需要1.59版本的库；你可以下载boost库然后编译boost库，或者像我一样，下载带有boost库的mysql版本。</div>\r\n<div>开始解压编译：</div>\r\n<div>\r\n\r\n[plain]\r\n# tar xvf mysql-boost-5.7.17.tar.gz -C /usr/local/src\r\n# cd /usr/local/src/mysql-5.7.17\r\n# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\\r\n-DMYSQL_DATADIR=/mnt/data \\\r\n-DSYSCONFDIR=/etc \\\r\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\r\n-DWITH_ARCHIVE_STORAGE_ENGINE=1 \\\r\n-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\\r\n-DWITH_READLINE=1 \\\r\n-DWITH_SSL=system \\\r\n-DWITH_ZLIB=system \\\r\n-DWITH_LIBWRAP=0 \\\r\n-DMYSQL_TCP_PORT=3306 \\\r\n-DMYSQL_UNIX_ADDR=/tmp/mysql.sock \\\r\n-DDEFAULT_CHARSET=utf8 \\\r\n-DDEFAULT_COLLATION=utf8_general_ci\r\n-DDOWNLOAD_BOOST=1 \\\r\n-DWITH_BOOST=/usr/local/mysql/boost/boost_1_59_0 \\\r\n# make &amp;&amp; make install\r\n[/plain]\r\n\r\n</div>\r\n</div>\r\n<div>\r\n<h3>6. 修改安装目录的权限属组</h3>\r\n<div># chown -R mysql:mysql /usr/local/mysql/</div>\r\n</div>\r\n<div>\r\n<h3>7. 初始化数据库。</h3>\r\n<div># /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/mnt/data/</div>\r\n<div>需要注意这里是mysql5.7的初始化命令，而5.7以下的都是用：</div>\r\n<div># /usr/local/mysql/scripts/mysql_install_db --user=mysql --datadir=/mnt/data/</div>\r\n<div></div>\r\n<div>在初始化成功之后，5.7的initial命令会产生一个随机的root登录密码，你要用这个密码登录，然后修改（必须修改生成的随机密码不然无法后续操作）。在最后有一个类似这样的密码：</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP7.png\"><img class=\"alignnone size-full wp-image-737\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP7.png\" alt=\"\" width=\"233\" height=\"45\" /></a></div>\r\n<div>\r\n<div></div>\r\n<h3>8. 复制配置文件</h3>\r\n<div># cp support-files/my-default.cnf /etc/my.cnf</div>\r\n<div>这里又有一点要注意：mysql5.7配置文件需要修改my.cnf关键配置， mysql5.7之前默认配置文件中是有配置项的，不用手动修改。以下为配置，根据实际情况修改：</div>\r\n<div>\r\n\r\n[plain]\r\n[mysqld]\r\nbasedir = /usr/local/mysql\r\ndatadir = /mnt/data\r\nport = 3306\r\nsocket = /Ultrapower/test/mysql/tmp/mysql.sock\r\n\r\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\r\n[client]\r\nsocket = /Ultrapower/test/mysql/tmp/mysql.sock\r\n[/plain]\r\n\r\n</div>\r\n<div>如果添加[client]下 的内容，注意sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES要放在[mysqld]下。</div>\r\n<div>如果报错tmp目录不错在，到对应的地方去创建目录，然后创建后要赋予mysql权限，chown -R mysql:mysql tmp。</div>\r\n<div></div>\r\n<h3>9. 设置开机启动</h3>\r\n<div># cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</div>\r\n<div># chmod +x /etc/init.d/mysql</div>\r\n<div>注册为开机启动服务：</div>\r\n<div># chkconfig mysqld on</div>\r\n<div># chkconfig --add mysqld</div>\r\n<div>查看是否设置成功：</div>\r\n<div># chkconfig --list mysql</div>\r\n<div></div>\r\n<h3>10. 设置PATH环境变量。</h3>\r\n<div># echo \"export PATH=$PATH:/usr/local/mysql/bin\" &gt; /etc/profile.d/mysql.sh</div>\r\n<div># source /etc/profile.d/mysql.sh</div>\r\n<div></div>\r\n<h3>11. 启动服务</h3>\r\n<div># service mysqld start</div>\r\n</div>\r\n</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP8.png\"><img class=\"size-full wp-image-738 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP8.png\" alt=\"\" width=\"726\" height=\"578\" /></a></div>\r\n<div>\r\n<div>这样基本上，这个mysql就装好了。</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h3>12. 登录mysql并修改密码</h3>\r\n<div>mysql -uroot -p生成的密码</div>\r\n<div>执行修改密码：</div>\r\n<div>alter user \'root\'@\'localhost\' identified by \'newpassword\';</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h2>四 安装php-fpm</h2>\r\n<h3>1. 安装依赖包:</h3>\r\n<div>yum install libmcrypt libmcrypt-devel mhash mhash-devel libxml2 libxml2-devel bzip2 bzip2-devel</div>\r\n<div>这里还漏了几个，如果报错了提示缺少了什么就yum补上。</div>\r\n<div></div>\r\n<h3>2. 到官网下载源码包后，开始编译安装：</h3>\r\n<div>\r\n\r\n[plain]\r\n# tar xvf php-7.0.16.tar.bz2 -C /usr/local/src\r\n# cd /usr/local/src/php-7.0.16\r\n执行下面的配置文件：\r\n# ./configure --prefix=/usr/local/php \\\r\n--with-config-file-scan-dir=/etc/php.d \\\r\n--with-config-file-path=/etc \\\r\n--with-mysql=/usr/local/mysql \\\r\n--with-mysqli=/usr/local/mysql/bin/mysql_config \\\r\n--enable-fpm \\\r\n--enable-opcache \\\r\n--disable-fileinfo \\\r\n--with-jpeg-dir \\\r\n--with-iconv-dir=/usr/local \\\r\n--with-freetype-dir \\\r\n--with-png-dir \\\r\n--with-zlib \\\r\n--with-libxml-dir=/usr \\\r\n--enable-xml \\\r\n--enable-bcmath \\\r\n--enable-shmop \\\r\n--enable-exif \\\r\n--with-curl \\\r\n--enable-sysvsem \\\r\n--enable-inline-optimization \\\r\n--enable-mbregex \\\r\n--enable-inline-optimization \\\r\n--enable-mbstring \\\r\n--with-mcrypt \\\r\n--with-gd \\\r\n--enable-gd-native-ttf \\\r\n--with-openssl \\\r\n--with-mhash \\\r\n--enable-pcntl \\\r\n--enable-sockets \\\r\n--with-xmlrpc \\\r\n--enable-ftp \\\r\n--with-gettext \\\r\n--enable-zip \\\r\n--enable-soap \\\r\n--with-bz2\r\n[/plain]\r\n\r\n执行以上的配置，如果出现下面这样的license，才是正确的，才可以开始编译，如果出问题，就解决，一般是少了什么库。\r\n\r\n</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP9.png\"><img class=\"size-full wp-image-739 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP9.png\" alt=\"\" width=\"715\" height=\"673\" /></a></div>\r\n<div>\r\n<div>执行编译：</div>\r\n<div># make &amp;&amp; make install</div>\r\n<div></div>\r\n<h3>3. 添加php和php-fpm配置文件。</h3>\r\n<div># cp /usr/local/src/php-7.0.16/php.ini-production /etc/php.ini</div>\r\n<div># cd /usr/local/php/etc/</div>\r\n<div># cp php-fpm.conf.default php-fpm.conf</div>\r\n<div># sed -i \'s@;pid = run/php-fpm.pid@pid = /usr/local/php/var/run/php-fpm.pid@\' php-fpm.conf</div>\r\n<div></div>\r\n<h3>4. 添加php-fpm启动脚本。</h3>\r\n<div># cp /usr/local/src/php-7.0.16/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</div>\r\n<div># chmod +x /etc/init.d/php-fpm</div>\r\n<div></div>\r\n<h3>5. 添加php-fpm至服务列表并设置开机自启。</h3>\r\n<div># chkconfig --add php-fpm</div>\r\n<div># chkconfig --list php-fpm</div>\r\n<div># chkconfig php-fpm on</div>\r\n<div></div>\r\n<h3>6. 启动服务。</h3>\r\n<div># service php-fpm start</div>\r\n<div></div>\r\n<div><strong>注：</strong></div>\r\n<div>启动时如出现错误：WARNING: Nothing matches the include pattern \'/usr/local/etc/php-fpm.d/*.conf\' from /usr/local/etc/php-fpm.conf at line 125.</div>\r\n<div>ERROR:. No pool defined at least one pool section must be specified in config file</div>\r\n<div>ERROR: failed to post process the configuration</div>\r\n<div>ERROR: FPM initialization failed</div>\r\n<div>解决：到指定目录执行cp www.conf.default www.conf</div>\r\n<div></div>\r\n<h3>7. 添加nginx对fastcgi的支持，</h3>\r\n首先备份默认的配置文件。\r\n\r\n# cp /etc/nginx/nginx.conf /etc/nginx/nginx.confbak\r\n\r\n# cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf\r\n<div>编辑/etc/nginx/nginx.conf，在所支持的主页面格式中添加php格式的主页，类似如下：</div>\r\n<div>\r\n\r\n[plain]\r\nlocation / {\r\n    root /usr/local/nginx/html;\r\n    index index.php index.html index.htm;\r\n}\r\n[/plain]\r\n\r\n</div>\r\n<div>取消以下内容前面的注释：</div>\r\n<div>\r\n\r\n[plain]\r\nlocation ~ \\.php$ {\r\n    root /usr/local/nginx/html;\r\n    fastcgi_pass 127.0.0.1:9000;\r\n    fastcgi_index index.php;\r\n    fastcgi_param SCRIPT_FILENAME /usr/local/nginx/html/$fastcgi_script_name;\r\n    include fastcgi_params;\r\n}\r\n[/plain]\r\n\r\n</div>\r\n<div></div>\r\n<h3>8. 重启nginx</h3>\r\n<div># service nginx reload</div>\r\n<div></div>\r\n<h3>9. 测试是否成功</h3>\r\n<div>在/usr/local/nginx/html/新建index.php的测试页面，内容如下：</div>\r\n<div>&lt;?php</div>\r\n<div>phpinfo();</div>\r\n<div>?&gt;</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP10.png\"><img class=\"size-full wp-image-740 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP10.png\" alt=\"\" width=\"959\" height=\"911\" /></a></div>\r\n<div>\r\n<div>如果出现这个熟悉的界面，说明就大功告成了！Linux下一个基本的LNMP就搭建完毕了。</div>\r\n</div>\r\n</div>\r\n</div>', 'Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）', '', 'inherit', 'closed', 'closed', '', '731-revision-v1', '', '', '2017-03-04 20:19:15', '2017-03-04 12:19:15', '', 731, 'https://www.gzpblog.com/20170304/766.html', 0, 'revision', '', 0),
(743, 1, '2017-03-03 02:00:49', '2017-03-02 18:00:49', '<blockquote><strong>写在前面</strong>\r\n\r\n对于新手的一点建议：\r\n<ul>\r\n 	<li> 最好熟悉一下linux 的基本命令，vim的常用命令</li>\r\n 	<li>千万不要无脑复制，先看一下命令，特别是路径要注意</li>\r\n 	<li>学会排查错误</li>\r\n</ul>\r\n本篇安装的软件版本为：\r\n<ul>\r\n 	<li>Linux：Centos6.8</li>\r\n 	<li>Nginx：1.10.3</li>\r\n 	<li>MySQL：5.7.17</li>\r\n 	<li>PHP：7.0.16</li>\r\n</ul>\r\n</blockquote>\r\n最近研究了Linux系统下的PHP环境搭建，个人感觉最好最好不要用yum默认的程序包安装，因为版本都比较低，下载最新的稳定版自行安装比较好。现在网上教程很多，之所以还记这篇，原因有一点，当你重复网上的教程自行安装时，90%还是会出现各种各样的问题，因为你可能linux的系统版本不同，你想装的软件版本不同，安装的方法不同，你下错了安装包的版本，还有其它乱七八糟的。举个例，比如你看着5.6的mysql安装教程，装5.7的，你感觉没问题，但是事实就是，5.7的不一样了！而且网上还没有新的这方面内容，不好找，这就需要你去摸索了，亲身经历啊。这里面，Niginx感觉最好配，MySQL最坑。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP1.png\"><img class=\"size-full wp-image-732 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP1.png\" alt=\"\" width=\"513\" height=\"218\" /></a>\r\n<h2>一 准备工作</h2>\r\n<h3>1. 关闭SELINUX</h3>\r\n修改配置文件，重启服务后永久生效。\r\n# sed -i \'s/SELINUX=.*/SELINUX=disabled/g\' /etc/selinux/config\r\n命令行设置立即生效。\r\n# setenforce 0\r\n<h3>2. 如果是阿里云ECS用户，安全组设置中开启80端口方便调试。</h3>\r\n&nbsp;\r\n<h2>二 安装Nginx</h2>\r\n<h3>1. 下载源码包</h3>\r\n上Nginx官网，复制最新稳定版的下载地址过来，然后用wget下载（接下来需要下载安装包的都可以用wget）：\r\n\r\n# cd /usr/local/src\r\n# wget http://nginx.org/download/nginx-1.10.3.tar.gz\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP2.png\"><img class=\"size-full wp-image-733 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP2.png\" alt=\"\" width=\"895\" height=\"59\" /></a>\r\n\r\n下载完成的状态基本都是以下这样的：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP3.png\"><img class=\"size-full wp-image-734 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP3.png\" alt=\"\" width=\"1219\" height=\"280\" /></a>\r\n<h3>2. 进行解压编译</h3>\r\n# tar xvf nginx-1.10.3.tar.gz\r\n# yum groupinstall \"Development tools\"\r\n# yum -y install gcc wget gcc-c++ automake autoconf libtool libxml2-devel libxslt-devel perl-devel perl-ExtUtils-Embed pcre-devel openssl-devel\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP4.png\"><img class=\"alignnone size-full wp-image-735\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP4.png\" alt=\"\" width=\"1260\" height=\"586\" /></a>\r\n\r\n执行完成。\r\n\r\n进入解压后的nginx-1.10.3文件夹：\r\ncd /usr/local/src/nginx-1.10.3\r\n\r\n执行以下语句：\r\n\r\n[plain]\r\n\r\n./configure \\\r\n--prefix=/usr/local/nginx \\\r\n--sbin-path=/usr/sbin/nginx \\\r\n--conf-path=/etc/nginx/nginx.conf \\\r\n--error-log-path=/var/log/nginx/error.log \\\r\n--http-log-path=/var/log/nginx/access.log \\\r\n--pid-path=/var/run/nginx.pid \\\r\n--lock-path=/var/run/nginx.lock \\\r\n--http-client-body-temp-path=/var/tmp/nginx/client \\\r\n--http-proxy-temp-path=/var/tmp/nginx/proxy \\\r\n--http-fastcgi-temp-path=/var/tmp/nginx/fcgi \\\r\n--http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \\\r\n--http-scgi-temp-path=/var/tmp/nginx/scgi \\\r\n--user=nginx \\\r\n--group=nginx \\\r\n--with-pcre \\\r\n--with-http_v2_module \\\r\n--with-http_ssl_module \\\r\n--with-http_realip_module \\\r\n--with-http_addition_module \\\r\n--with-http_sub_module \\\r\n--with-http_dav_module \\\r\n--with-http_flv_module \\\r\n--with-http_mp4_module \\\r\n--with-http_gunzip_module \\\r\n--with-http_gzip_static_module \\\r\n--with-http_random_index_module \\\r\n--with-http_secure_link_module \\\r\n--with-http_stub_status_module \\\r\n--with-http_auth_request_module \\\r\n--with-mail \\\r\n--with-mail_ssl_module \\\r\n--with-file-aio \\\r\n--with-ipv6 \\\r\n--with-http_v2_module \\\r\n--with-threads \\\r\n--with-stream \\\r\n--with-stream_ssl_module\r\n\r\n[/plain]\r\n\r\n完成后执行编译：\r\n# make &amp;&amp; make install\r\n# mkdir -pv /var/tmp/nginx/client\r\n<h3>3. 添加SysV启动脚本。</h3>\r\n用vim编辑脚本：\r\n# vim /etc/init.d/nginx\r\n<div>写入以下内容：</div>\r\n\r\n[plain]\r\n#!/bin/sh \r\n# \r\n# nginx - this script starts and stops the nginx daemon \r\n# \r\n# chkconfig:   - 85 15 \r\n# description: Nginx is an HTTP(S) server, HTTP(S) reverse \\ \r\n#               proxy and IMAP/POP3 proxy server \r\n# processname: nginx \r\n# config:      /etc/nginx/nginx.conf \r\n# config:      /etc/sysconfig/nginx \r\n# pidfile:     /var/run/nginx.pid \r\n# Source function library. \r\n. /etc/rc.d/init.d/functions\r\n# Source networking configuration. \r\n. /etc/sysconfig/network\r\n# Check that networking is up. \r\n[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; exit 0\r\nnginx=&quot;/usr/sbin/nginx&quot;\r\nprog=$(basename $nginx)\r\nNGINX_CONF_FILE=&quot;/etc/nginx/nginx.conf&quot;\r\n[ -f /etc/sysconfig/nginx ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; . /etc/sysconfig/nginx\r\nlockfile=/var/lock/subsys/nginx\r\nstart() {\r\n    [ -x $nginx ] || exit 5\r\n    [ -f $NGINX_CONF_FILE ] || exit 6\r\n    echo -n $&quot;Starting $prog: &quot; \r\n    daemon $nginx -c $NGINX_CONF_FILE\r\n    retval=$?\r\n    echo \r\n    [ $retval -eq 0 ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; touch $lockfile\r\n    return $retval\r\n}\r\nstop() {\r\n    echo -n $&quot;Stopping $prog: &quot; \r\n    killproc $prog -QUIT\r\n    retval=$?\r\n    echo \r\n    [ $retval -eq 0 ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; rm -f $lockfile\r\n    return $retval\r\nkillall -9 nginx\r\n}\r\nrestart() {\r\n    configtest || return $?\r\n    stop\r\n    sleep 1\r\n    start\r\n}\r\nreload() {\r\n    configtest || return $?\r\n    echo -n $&quot;Reloading $prog: &quot; \r\n    killproc $nginx -HUP\r\nRETVAL=$?\r\n    echo \r\n}\r\nforce_reload() {\r\n    restart\r\n}\r\nconfigtest() {\r\n$nginx -t -c $NGINX_CONF_FILE\r\n}\r\nrh_status() {\r\n    status $prog\r\n}\r\nrh_status_q() {\r\n    rh_status &amp;amp;amp;amp;gt;/dev/null 2&amp;amp;amp;amp;gt;&amp;amp;amp;amp;amp;1\r\n}\r\ncase &quot;$1&quot; in\r\n    start)\r\n        rh_status_q &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; exit 0\r\n    $1\r\n        ;;\r\n    stop)\r\n        rh_status_q || exit 0\r\n        $1\r\n        ;;\r\n    restart|configtest)\r\n        $1\r\n        ;;\r\n    reload)\r\n        rh_status_q || exit 7\r\n        $1\r\n        ;;\r\n    force-reload)\r\n        force_reload\r\n        ;;\r\n    status)\r\n        rh_status\r\n        ;;\r\n    condrestart|try-restart)\r\n        rh_status_q || exit 0\r\n            ;;\r\n    *)\r\n      echo $&quot;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&quot; \r\n        exit 2\r\nesac\r\n[/plain]\r\n\r\n保存退出（按:wq!）；可能你得稍微查一下vim的一些命令，不然操作时可能会出现一点小问题。\r\n赋予脚本执行权限：\r\n# chmod +x /etc/init.d/nginx\r\n\r\n添加至服务管理列表，设置开机自启：\r\n# chkconfig --add nginx\r\n# chkconfig nginx on\r\n<h3>4. 启动服务。</h3>\r\n# service nginx start\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP6.png\"><img class=\"size-full wp-image-736 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP6.png\" alt=\"\" width=\"576\" height=\"238\" /></a>\r\n<div>出现这玩意说明成功了！</div>\r\n<div></div>\r\n<div></div>\r\n<blockquote>\r\n<div>注：如果报错 [emerg]: getpwnam(“nginx”) failed ；</div>\r\n<div>解决方法：</div>\r\n<div># useradd -s /sbin/nologin -M nginx</div>\r\n<div># id nginx</div></blockquote>\r\n<div></div>\r\n<div>\r\n<h2>三 安装mysql</h2>\r\n<h3>1. 版本选择</h3>\r\n<div>在安装之前必须明白一件事情，mysql有很多种安装方式，每种不一样，不要弄混了。</div>\r\n<div>比如源码编译安装（mysql-5.7.17.tar.gz），二进制安装（mysql-5.7.17-linux-glibc2.5-i686.tar），nmp安装（最简单的）。这里我们用源码自己编译安装。</div>\r\n<h3>2. 准备编译环境</h3>\r\n<div># yum groupinstall \"Server Platform Development\" \"Development tools\" -y</div>\r\n<div># yum install cmake -y</div>\r\n<div>cmake在现在的版本是必须要安装的，你可以下载camke之后编译，也可以直接yum安装。接下来的编译过程如果报错缺少什么就补什么。</div>\r\n<div></div>\r\n<h3>3. 准备mysql数据库存放目录</h3>\r\n<div># mkdir /mnt/data</div>\r\n<div># groupadd -r mysql</div>\r\n<div># useradd -r -g mysql -s /sbin/nologin mysql</div>\r\n<div># id mysql</div>\r\n<div></div>\r\n<h3>4. 更改数据目录权限。</h3>\r\n<div># chown -R mysql:mysql /mnt/data</div>\r\n<div></div>\r\n<h3>5. 下载并解压编译官网下载的稳定版的源码包。</h3>\r\n<div>在下载的时候注意一下版本，下载对应的版本。我们源码编译，要下载长这样的安装包：mysql-5.7.17.tar.gz，同时在安装的时候我们需要boost库，5.7需要1.59版本的库；你可以下载boost库然后编译boost库，或者像我一样，下载带有boost库的mysql版本。</div>\r\n<div>开始解压编译：</div>\r\n<div>\r\n\r\n[plain]\r\n# tar xvf mysql-boost-5.7.17.tar.gz -C /usr/local/src\r\n# cd /usr/local/src/mysql-5.7.17\r\n# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\\r\n-DMYSQL_DATADIR=/mnt/data \\\r\n-DSYSCONFDIR=/etc \\\r\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\r\n-DWITH_ARCHIVE_STORAGE_ENGINE=1 \\\r\n-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\\r\n-DWITH_READLINE=1 \\\r\n-DWITH_SSL=system \\\r\n-DWITH_ZLIB=system \\\r\n-DWITH_LIBWRAP=0 \\\r\n-DMYSQL_TCP_PORT=3306 \\\r\n-DMYSQL_UNIX_ADDR=/tmp/mysql.sock \\\r\n-DDEFAULT_CHARSET=utf8 \\\r\n-DDEFAULT_COLLATION=utf8_general_ci\r\n-DDOWNLOAD_BOOST=1 \\\r\n-DWITH_BOOST=/usr/local/mysql/boost/boost_1_59_0 \\\r\n# make &amp;&amp; make install\r\n[/plain]\r\n\r\n</div>\r\n</div>\r\n<div>\r\n<h3>6. 修改安装目录的权限属组</h3>\r\n<div># chown -R mysql:mysql /usr/local/mysql/</div>\r\n</div>\r\n<div>\r\n<h3>7. 初始化数据库。</h3>\r\n<div># /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/mnt/data/</div>\r\n<div>需要注意这里是mysql5.7的初始化命令，而5.7以下的都是用：</div>\r\n<div># /usr/local/mysql/scripts/mysql_install_db --user=mysql --datadir=/mnt/data/</div>\r\n<div></div>\r\n<div>在初始化成功之后，5.7的initial命令会产生一个随机的root登录密码，你要用这个密码登录，然后修改（必须修改生成的随机密码不然无法后续操作）。在最后有一个类似这样的密码：</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP7.png\"><img class=\"alignnone size-full wp-image-737\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP7.png\" alt=\"\" width=\"233\" height=\"45\" /></a></div>\r\n<div>\r\n<div></div>\r\n<h3>8. 复制配置文件</h3>\r\n<div># cp support-files/my-default.cnf /etc/my.cnf</div>\r\n<div>这里又有一点要注意：mysql5.7配置文件需要修改my.cnf关键配置， mysql5.7之前默认配置文件中是有配置项的，不用手动修改。以下为配置，根据实际情况修改：</div>\r\n<div>\r\n[plain]&lt;/div&gt;\r\n&lt;div&gt;[mysqld]&lt;/div&gt;\r\n&lt;div&gt;basedir = /usr/local/mysql&lt;/div&gt;\r\n&lt;div&gt;datadir = /mnt/data&lt;/div&gt;\r\n&lt;div&gt;port = 3306&lt;/div&gt;\r\n&lt;div&gt;socket = /Ultrapower/test/mysql/tmp/mysql.sock&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES&lt;/div&gt;\r\n&lt;div&gt;[client]&lt;/div&gt;\r\n&lt;div&gt;socket = /Ultrapower/test/mysql/tmp/mysql.sock&lt;/div&gt;\r\n&lt;div&gt;[/plain]\r\n</div>\r\n<div>如果添加[client]下 的内容，注意sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES要放在[mysqld]下。</div>\r\n<div>如果报错tmp目录不错在，到对应的地方去创建目录，然后创建后要赋予mysql权限，chown -R mysql:mysql tmp。</div>\r\n<div></div>\r\n<h3>9. 设置开机启动</h3>\r\n<div># cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</div>\r\n<div># chmod +x /etc/init.d/mysql</div>\r\n<div>注册为开机启动服务：</div>\r\n<div># chkconfig mysqld on</div>\r\n<div># chkconfig --add mysqld</div>\r\n<div>查看是否设置成功：</div>\r\n<div># chkconfig --list mysql</div>\r\n<div></div>\r\n<h3>10. 设置PATH环境变量。</h3>\r\n<div># echo \"export PATH=$PATH:/usr/local/mysql/bin\" &gt; /etc/profile.d/mysql.sh</div>\r\n<div># source /etc/profile.d/mysql.sh</div>\r\n<div></div>\r\n<h3>11. 启动服务</h3>\r\n<div># service mysqld start</div>\r\n</div>\r\n</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP8.png\"><img class=\"size-full wp-image-738 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP8.png\" alt=\"\" width=\"726\" height=\"578\" /></a></div>\r\n<div>\r\n<div>这样基本上，这个mysql就装好了。</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h3>12. 登录mysql并修改密码</h3>\r\n<div>mysql -uroot -p生成的密码</div>\r\n<div>执行修改密码：</div>\r\n<div>alter user \'root\'@\'localhost\' identified by \'newpassword\';</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h2>四 安装php-fpm</h2>\r\n<h3>1. 安装依赖包:</h3>\r\n<div>yum install libmcrypt libmcrypt-devel mhash mhash-devel libxml2 libxml2-devel bzip2 bzip2-devel</div>\r\n<div>这里还漏了几个，如果报错了提示缺少了什么就yum补上。</div>\r\n<div></div>\r\n<h3>2. 到官网下载源码包后，开始编译安装：</h3>\r\n<div>\r\n\r\n[plain]\r\n# tar xvf php-7.0.16.tar.bz2 -C /usr/local/src\r\n# cd /usr/local/src/php-7.0.16\r\n执行下面的配置文件：\r\n# ./configure --prefix=/usr/local/php \\\r\n--with-config-file-scan-dir=/etc/php.d \\\r\n--with-config-file-path=/etc \\\r\n--with-mysql=/usr/local/mysql \\\r\n--with-mysqli=/usr/local/mysql/bin/mysql_config \\\r\n--enable-fpm \\\r\n--enable-opcache \\\r\n--disable-fileinfo \\\r\n--with-jpeg-dir \\\r\n--with-iconv-dir=/usr/local \\\r\n--with-freetype-dir \\\r\n--with-png-dir \\\r\n--with-zlib \\\r\n--with-libxml-dir=/usr \\\r\n--enable-xml \\\r\n--enable-bcmath \\\r\n--enable-shmop \\\r\n--enable-exif \\\r\n--with-curl \\\r\n--enable-sysvsem \\\r\n--enable-inline-optimization \\\r\n--enable-mbregex \\\r\n--enable-inline-optimization \\\r\n--enable-mbstring \\\r\n--with-mcrypt \\\r\n--with-gd \\\r\n--enable-gd-native-ttf \\\r\n--with-openssl \\\r\n--with-mhash \\\r\n--enable-pcntl \\\r\n--enable-sockets \\\r\n--with-xmlrpc \\\r\n--enable-ftp \\\r\n--with-gettext \\\r\n--enable-zip \\\r\n--enable-soap \\\r\n--with-bz2\r\n[/plain]\r\n\r\n执行以上的配置，如果出现下面这样的license，才是正确的，才可以开始编译，如果出问题，就解决，一般是少了什么库。\r\n\r\n</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP9.png\"><img class=\"size-full wp-image-739 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP9.png\" alt=\"\" width=\"715\" height=\"673\" /></a></div>\r\n<div>\r\n<div>执行编译：</div>\r\n<div># make &amp;&amp; make install</div>\r\n<div></div>\r\n<h3>3. 添加php和php-fpm配置文件。</h3>\r\n<div># cp /usr/local/src/php-7.0.16/php.ini-production /etc/php.ini</div>\r\n<div># cd /usr/local/php/etc/</div>\r\n<div># cp php-fpm.conf.default php-fpm.conf</div>\r\n<div># sed -i \'s@;pid = run/php-fpm.pid@pid = /usr/local/php/var/run/php-fpm.pid@\' php-fpm.conf</div>\r\n<div></div>\r\n<h3>4. 添加php-fpm启动脚本。</h3>\r\n<div># cp /usr/local/src/php-7.0.16/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</div>\r\n<div># chmod +x /etc/init.d/php-fpm</div>\r\n<div></div>\r\n<h3>5. 添加php-fpm至服务列表并设置开机自启。</h3>\r\n<div># chkconfig --add php-fpm</div>\r\n<div># chkconfig --list php-fpm</div>\r\n<div># chkconfig php-fpm on</div>\r\n<div></div>\r\n<h3>6. 启动服务。</h3>\r\n<div># service php-fpm start</div>\r\n<div></div>\r\n<div><strong>注：</strong></div>\r\n<div>启动时如出现错误：WARNING: Nothing matches the include pattern \'/usr/local/etc/php-fpm.d/*.conf\' from /usr/local/etc/php-fpm.conf at line 125.</div>\r\n<div>ERROR:. No pool defined at least one pool section must be specified in config file</div>\r\n<div>ERROR: failed to post process the configuration</div>\r\n<div>ERROR: FPM initialization failed</div>\r\n<div>解决：到指定目录执行cp www.conf.default www.conf</div>\r\n<div></div>\r\n<h3>7. 添加nginx对fastcgi的支持，</h3>\r\n首先备份默认的配置文件。\r\n\r\n# cp /etc/nginx/nginx.conf /etc/nginx/nginx.confbak\r\n\r\n# cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf\r\n<div>编辑/etc/nginx/nginx.conf，在所支持的主页面格式中添加php格式的主页，类似如下：</div>\r\n<div>\r\n[plain]&lt;/div&gt;\r\n&lt;div&gt;location / {&lt;/div&gt;\r\n&lt;div&gt;root /usr/local/nginx/html;&lt;/div&gt;\r\n&lt;div&gt;index index.php index.html index.htm;&lt;/div&gt;\r\n&lt;div&gt;}&lt;/div&gt;\r\n&lt;div&gt;[/plain]\r\n</div>\r\n<div>取消以下内容前面的注释：</div>\r\n<div>\r\n[plain]&lt;/div&gt;\r\n&lt;div&gt;location ~ \\.php$ {&lt;/div&gt;\r\n&lt;div&gt;root /usr/local/nginx/html;&lt;/div&gt;\r\n&lt;div&gt;fastcgi_pass 127.0.0.1:9000;&lt;/div&gt;\r\n&lt;div&gt;fastcgi_index index.php;&lt;/div&gt;\r\n&lt;div&gt;fastcgi_param SCRIPT_FILENAME /usr/local/nginx/html/$fastcgi_script_name;&lt;/div&gt;\r\n&lt;div&gt;include fastcgi_params;&lt;/div&gt;\r\n&lt;div&gt;}&lt;/div&gt;\r\n&lt;div&gt;[/plain]\r\n</div>\r\n<div></div>\r\n<h3>8. 重启nginx</h3>\r\n<div># service nginx reload</div>\r\n<div></div>\r\n<h3>9. 测试是否成功</h3>\r\n<div>在/usr/local/nginx/html/新建index.php的测试页面，内容如下：</div>\r\n<div>&lt;?php</div>\r\n<div>phpinfo();</div>\r\n<div>?&gt;</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP10.png\"><img class=\"size-full wp-image-740 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP10.png\" alt=\"\" width=\"959\" height=\"911\" /></a></div>\r\n<div>\r\n<div>如果出现这个熟悉的界面，说明就大功告成了！Linux下一个基本的LNMP就搭建完毕了。</div>\r\n</div>\r\n</div>\r\n</div>', 'Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）', '', 'inherit', 'closed', 'closed', '', '731-revision-v1', '', '', '2017-03-03 02:00:49', '2017-03-02 18:00:49', '', 731, 'http://www.gzpblog.com/20170303/743.html', 0, 'revision', '', 0),
(745, 1, '2017-03-04 01:09:03', '2017-03-03 17:09:03', '虽说之前的虚拟主机速度还算可以吧，阿里云送的免费两年主机，能有那样的速度还算不错了，但是毕竟是共享的虚拟主机，弊端很多：\r\n<ul>\r\n 	<li>内存共享</li>\r\n 	<li>带宽共享</li>\r\n 	<li>ip共享</li>\r\n 	<li>服务器配置不自由</li>\r\n</ul>\r\n所以这种共享主机，想转https都没法子做。况且我迟早是要好好研究linux的，于是乎，下了狠心，买了个ECS，买的最低配的了，价格还是这么贵。但是肯定是物有所值的。\r\n<h3>服务器硬盘镜像选择</h3>\r\n其实我试了一下官方云市场的那些镜像，给你装好环境的，感觉并不是很好，装了乱七八糟的东西有点多，而且不能按照自己的意思来。所以还是自己搭建环境实在，实在是搭不出来，或者是懒了，随时可以换镜像。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/zhuancentos.png\"><img class=\"size-full wp-image-746 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/zhuancentos.png\" alt=\"\" width=\"1144\" height=\"94\" /></a>\r\n\r\n其实，我一开始拿到这个鲜嫩多汁的ECS服务器时，选择的是32位系统，因为我只有1G的内存啊！但是后来我改成了64位，我发现不能用我们正常的一个机子去衡量这种ECS服务器，64位完全可行。系统自然是Linux系统，版本我是选了centos。\r\n\r\n通过右边的一个远程连接可以连接到我们的服务器：<a href=\"https://files.gzpblog.com/wp/2017/03/zhuancentos2.png\"><img class=\"alignnone size-full wp-image-748\" src=\"https://files.gzpblog.com/wp/2017/03/zhuancentos2.png\" alt=\"\" width=\"1400\" height=\"91\" /></a>\r\n\r\n但是，我不推荐这种使用方式，可以下一个ssh来使用，比如我用的是Xshell，通过Xshell，我们直接在我们的电脑上连接到远程阿里云的ECS进行操作。\r\n<h3>开始动工</h3>\r\n服务器到手了，我们当然要开始开工了，第一件事就是装好环境，别的先不说，让我们的wordpress博客先跑起来先。\r\n\r\n搭建环境的话，竟然是自己的服务器了，那想怎么搞怎么搞，直接上PHP7，性能提升不是一点两点。\r\n\r\n这里有一篇自己的实践：<a href=\"https://www.gzpblog.com/20170303/731.html\" target=\"_blank\">Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）</a>\r\n\r\n&nbsp;', '服务器由阿里云虚拟主机转云服务器ECS实践（一）', '', 'publish', 'open', 'open', '', '%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%94%b1%e9%98%bf%e9%87%8c%e4%ba%91%e8%99%9a%e6%8b%9f%e4%b8%bb%e6%9c%ba%e8%bd%ac%e4%ba%91%e6%9c%8d%e5%8a%a1%e5%99%a8ecs%e5%ae%9e%e8%b7%b5%ef%bc%88%e4%b8%80%ef%bc%89', '', '\nhttps://www.gzpblog.com/20170303/731.html', '2017-03-04 23:36:15', '2017-03-04 15:36:15', '', 0, 'https://www.gzpblog.com/?p=745', 0, 'post', '', 2),
(746, 1, '2017-03-04 00:58:37', '2017-03-03 16:58:37', '', 'zhuancentos', '', 'inherit', 'open', 'closed', '', 'zhuancentos', '', '', '2017-03-04 00:58:37', '2017-03-03 16:58:37', '', 745, 'https://www.gzpblog.com/wp-content/uploads/2017/03/zhuancentos.png', 0, 'attachment', 'image/png', 0),
(748, 1, '2017-03-04 01:02:05', '2017-03-03 17:02:05', '', 'zhuancentos2', '', 'inherit', 'open', 'closed', '', 'zhuancentos2', '', '', '2017-03-04 01:02:05', '2017-03-03 17:02:05', '', 745, 'https://www.gzpblog.com/wp-content/uploads/2017/03/zhuancentos2.png', 0, 'attachment', 'image/png', 0),
(749, 1, '2017-03-04 01:09:03', '2017-03-03 17:09:03', '虽说之前的虚拟主机速度还算可以吧，阿里云送的免费两年主机，能有那样的速度还算不错了，但是毕竟是共享的虚拟主机，弊端很多：\r\n<ul>\r\n 	<li>内存共享</li>\r\n 	<li>带宽共享</li>\r\n 	<li>ip共享</li>\r\n 	<li>服务器配置不自由</li>\r\n</ul>\r\n所以这种共享主机，想转https都没法子做。况且我迟早是要好好研究linux的，于是乎，下了狠心，买了个ECS，买的最低配的了，价格还是这么贵。但是肯定是物有所值的。\r\n<h3>服务器硬盘镜像选择</h3>\r\n其实我试了一下官方云市场的那些镜像，给你装好环境的，感觉并不是很好，装了乱七八糟的东西有点多，而且不能按照自己的意思来。所以还是自己搭建环境实在，实在是搭不出来，或者是懒了，随时可以换镜像。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/zhuancentos.png\"><img class=\"size-full wp-image-746 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/zhuancentos.png\" alt=\"\" width=\"1144\" height=\"94\" /></a>\r\n\r\n其实，我一开始拿到这个鲜嫩多汁的ECS服务器时，选择的是32位系统，因为我只有1G的内存啊！但是后来我改成了64位，我发现不能用我们正常的一个机子去衡量这种ECS服务器，64位完全可行。系统自然是Linux系统，版本我是选了centos。\r\n\r\n通过右边的一个远程连接可以连接到我们的服务器：<a href=\"https://files.gzpblog.com/wp/2017/03/zhuancentos2.png\"><img class=\"alignnone size-full wp-image-748\" src=\"https://files.gzpblog.com/wp/2017/03/zhuancentos2.png\" alt=\"\" width=\"1400\" height=\"91\" /></a>\r\n\r\n但是，我不推荐这种使用方式，可以下一个ssh来使用，比如我用的是Xshell，通过Xshell，我们直接在我们的电脑上连接到远程阿里云的ECS进行操作。\r\n<h3>开始动工</h3>\r\n服务器到手了，我们当然要开始开工了，第一件事就是装好环境，别的先不说，让我们的wordpress博客先跑起来先。\r\n\r\n搭建环境的话，竟然是自己的服务器了，那想怎么搞怎么搞，直接上PHP7，性能提升不是一点两点。\r\n\r\n这里又一篇自己的实践：<a href=\"https://www.gzpblog.com/20170303/731.html\" target=\"_blank\">Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）</a>\r\n\r\n&nbsp;', '服务器由阿里云虚拟主机转云服务器ECS实践（一）', '', 'inherit', 'closed', 'closed', '', '745-revision-v1', '', '', '2017-03-04 01:09:03', '2017-03-03 17:09:03', '', 745, 'https://www.gzpblog.com/20170304/749.html', 0, 'revision', '', 0),
(750, 1, '2017-03-04 01:10:26', '2017-03-03 17:10:26', '虽说之前的虚拟主机速度还算可以吧，阿里云送的免费两年主机，能有那样的速度还算不错了，但是毕竟是共享的虚拟主机，弊端很多：\n<ul>\n 	<li>内存共享</li>\n 	<li>带宽共享</li>\n 	<li>ip共享</li>\n 	<li>服务器配置不自由</li>\n</ul>\n所以这种共享主机，想转https都没法子做。况且我迟早是要好好研究linux的，于是乎，下了狠心，买了个ECS，买的最低配的了，价格还是这么贵。但是肯定是物有所值的。\n<h3>服务器硬盘镜像选择</h3>\n其实我试了一下官方云市场的那些镜像，给你装好环境的，感觉并不是很好，装了乱七八糟的东西有点多，而且不能按照自己的意思来。所以还是自己搭建环境实在，实在是搭不出来，或者是懒了，随时可以换镜像。\n\n<a href=\"https://files.gzpblog.com/wp/2017/03/zhuancentos.png\"><img class=\"size-full wp-image-746 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/zhuancentos.png\" alt=\"\" width=\"1144\" height=\"94\" /></a>\n\n其实，我一开始拿到这个鲜嫩多汁的ECS服务器时，选择的是32位系统，因为我只有1G的内存啊！但是后来我改成了64位，我发现不能用我们正常的一个机子去衡量这种ECS服务器，64位完全可行。系统自然是Linux系统，版本我是选了centos。\n\n通过右边的一个远程连接可以连接到我们的服务器：<a href=\"https://files.gzpblog.com/wp/2017/03/zhuancentos2.png\"><img class=\"alignnone size-full wp-image-748\" src=\"https://files.gzpblog.com/wp/2017/03/zhuancentos2.png\" alt=\"\" width=\"1400\" height=\"91\" /></a>\n\n但是，我不推荐这种使用方式，可以下一个ssh来使用，比如我用的是Xshell，通过Xshell，我们直接在我们的电脑上连接到远程阿里云的ECS进行操作。\n<h3>开始动工</h3>\n服务器到手了，我们当然要开始开工了，第一件事就是装好环境，别的先不说，让我们的wordpress博客先跑起来先。\n\n搭建环境的话，竟然是自己的服务器了，那想怎么搞怎么搞，直接上PHP7，性能提升不是一点两点。\n\n这里有一篇自己的实践：<a href=\"https://www.gzpblog.com/20170303/731.html\" target=\"_blank\">Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）</a>\n\n&nbsp;', '服务器由阿里云虚拟主机转云服务器ECS实践（一）', '', 'inherit', 'closed', 'closed', '', '745-autosave-v1', '', '', '2017-03-04 01:10:26', '2017-03-03 17:10:26', '', 745, 'https://www.gzpblog.com/20170304/750.html', 0, 'revision', '', 0),
(751, 1, '2017-03-04 01:56:33', '2017-03-03 17:56:33', '服务器搭建完毕，程序正常跑起来了，还不够，我们还需要干点有意思的事情，让程序跑得更爽！所以优化一下性能，让网站速度更快。\r\n<blockquote>注：环境是Nginx+MySQL5.7+PHP7</blockquote>\r\n<h3>一 开启OPcache加速</h3>\r\nOPcache 通过将 PHP 脚本预编译的字节码存储到共享内存中来提升 PHP 的性能， 存储预编译字节码的好处就是省去了每次加载和解析 PHP 脚本的开销。鸟哥Laruence在提到PHP7性能提升的第一点，就是开启OPchache。\r\n\r\n关于OPcache的更多东西，可以到php手册上去了解：<a href=\"http://php.net/manual/zh/book.opcache.php\" target=\"_blank\">PHP：OPcache - Manual</a>， 这里就不废话了。\r\n\r\nOPcache的配置还是挺多的，可以一个一个去了解一下，根据需要开启，以下是我的配置：\r\n\r\n[code]\r\n[opcache]\r\nzend_extension=/usr/local/php/lib/php/extensions/no-debug-non-zts-20151012/opcache.so\r\nopcache.enable=1\r\nopcache.enable_cli=1\r\nopcache.memory_consumption=64\r\nopcache.interned_strings_buffer=4\r\nopcache.max_accelerated_files=2000\r\nopcache.max_wasted_percentage=5\r\nopcache.fast_shutdown=1\r\n[/code]\r\n\r\n在php.ini配置文件找到[opcache]然后进行配置，记得引入opcache.so拓展模块，因为我在编译的时候就直接安装了这个拓展，所以我直接引入就行，没有的话就先安装。\r\n如果出现这种情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache1.png\"><img class=\"size-full wp-image-752 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache1.png\" alt=\"\" width=\"1350\" height=\"82\" /></a><a href=\"https://files.gzpblog.com/wp/2017/03/opcache1.png\">\r\n</a>那说明没成功，拓展没装好，或者没引对，再试试，正常是这样的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache2.png\"><img class=\"size-full wp-image-753 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache2.png\" alt=\"\" width=\"464\" height=\"45\" /></a>\r\n\r\n成功后我们可以在phpinfo看到：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache3.png\"><img class=\"size-full wp-image-754 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache3.png\" alt=\"\" width=\"950\" height=\"636\" /></a>\r\n\r\n开启OPcache后速度的提升，是非常明显的！\r\n<h3>二 开启Gzip压缩</h3>\r\nNginx默认是没有开启Gzip压缩的，要使用Gzip压缩还需要自己去开启。Gzip开启以后会将输出到用户浏览器的数据进行压缩的处理，这样就会减小通过网络传输的数据量，提高浏览的速度。基本上这个也是都会使用的功能。\r\n\r\n在Nginx的配置文件中添加一些配置：\r\n\r\n[code]\r\n\r\n gzip on;\r\n gzip_min_length 5k;\r\n gzip_buffers 4 16k;\r\n gzip_http_version 1.0;\r\n gzip_comp_level 1;\r\n gzip_types text/plain application/x-javascript text/css text/html application/xml;\r\n gzip_vary on;\r\n\r\n[/code]\r\n\r\n图片之类的文件我们不启用，试了一下开启图片的压缩反而慢了。本来就用了缓存，所以不压图片也是好的。\r\n\r\n可以用这个工具进行Gzip的测试：<a href=\"http://tool.chinaz.com/Gzips/\" target=\"_blank\">Gzip压缩检测</a>\r\n\r\n没有开启压缩之前：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip1.png\"><img class=\"size-full wp-image-760 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip1.png\" alt=\"\" width=\"1182\" height=\"418\" /></a>\r\n\r\n开启压缩之后：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip4.png\"><img class=\"size-full wp-image-757 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip4.png\" alt=\"\" width=\"1043\" height=\"483\" /></a>\r\n\r\n压缩率达到80%以上，直接砍掉80%以上，这个看起来效果非常不错啊。\r\n\r\n但是，我的站点速度提升似乎并不明显：\r\n\r\n没有开启加速时，google浏览器，清除缓存，加载首页不滚动（因为用了延迟加载）的加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip2png.png\"><img class=\"size-full wp-image-755 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip2png.png\" alt=\"\" width=\"523\" height=\"29\" /></a>\r\n\r\n有缓存加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip3.png\"><img class=\"size-full wp-image-756 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip3.png\" alt=\"\" width=\"536\" height=\"25\" /></a>\r\n\r\n开启加速之后，同样的，没缓存加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip5.png\"><img class=\"size-full wp-image-758 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip5.png\" alt=\"\" width=\"524\" height=\"21\" /></a>\r\n\r\n有缓存加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip6.png\"><img class=\"size-full wp-image-759 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip6.png\" alt=\"\" width=\"533\" height=\"23\" /></a>\r\n\r\n从这个数据来看，加载的速度似乎并没有什么大的提升，应该说是没什么区别。但是确实是传输的内容90KB变成了17KB。我还没仔细去研究配置，以后找个时间再来慢慢研究一下，不知道是不是配置的问题还是什么问题，目前感觉应该是服务器带宽的限制了。\r\n\r\n&nbsp;\r\n<h3>三 开启CDN</h3>\r\n用的阿里云CDN，加速图片的加载。如果不启用https的话，内网似乎是有一定的免费流量的。我之前设置过一次，但是我设完没去注意，然后现在从新去研究一下发现流量一直是0，原来设置错了，改了一下现在正常了。最好的实践方法是，需要开一个子域名给oss用，我的是叫files.gzpblog.com，然后绑定到oss的bucket域名中，使用这个域名；设置cdn解析，不能设置www域名主域名，而是设oss的这个域名，开启加速。具体的，阿里云官方文档其实很多。\r\n\r\n&nbsp;', '服务器由阿里云虚拟主机转云服务器ECS实践（二）性能优化', '', 'publish', 'open', 'open', '', '%e6%9c%8d%e5%8a%a1%e5%99%a8%e7%94%b1%e9%98%bf%e9%87%8c%e4%ba%91%e8%99%9a%e6%8b%9f%e4%b8%bb%e6%9c%ba%e8%bd%ac%e4%ba%91%e6%9c%8d%e5%8a%a1%e5%99%a8ecs%e5%ae%9e%e8%b7%b5%ef%bc%88%e4%ba%8c%ef%bc%89', '', '', '2017-03-04 23:36:54', '2017-03-04 15:36:54', '', 0, 'https://www.gzpblog.com/?p=751', 0, 'post', '', 0),
(752, 1, '2017-03-04 01:29:48', '2017-03-03 17:29:48', '', 'opcache1', '', 'inherit', 'open', 'closed', '', 'opcache1', '', '', '2017-03-04 01:29:48', '2017-03-03 17:29:48', '', 751, 'https://www.gzpblog.com/wp-content/uploads/2017/03/opcache1.png', 0, 'attachment', 'image/png', 0),
(753, 1, '2017-03-04 01:29:50', '2017-03-03 17:29:50', '', 'opcache2', '', 'inherit', 'open', 'closed', '', 'opcache2', '', '', '2017-03-04 01:29:50', '2017-03-03 17:29:50', '', 751, 'https://www.gzpblog.com/wp-content/uploads/2017/03/opcache2.png', 0, 'attachment', 'image/png', 0),
(754, 1, '2017-03-04 01:29:51', '2017-03-03 17:29:51', '', 'opcache3', '', 'inherit', 'open', 'closed', '', 'opcache3', '', '', '2017-03-04 01:29:51', '2017-03-03 17:29:51', '', 751, 'https://www.gzpblog.com/wp-content/uploads/2017/03/opcache3.png', 0, 'attachment', 'image/png', 0),
(755, 1, '2017-03-04 01:40:33', '2017-03-03 17:40:33', '', 'gzip2png', '', 'inherit', 'open', 'closed', '', 'gzip2png', '', '', '2017-03-04 01:40:33', '2017-03-03 17:40:33', '', 751, 'https://www.gzpblog.com/wp-content/uploads/2017/03/gzip2png.png', 0, 'attachment', 'image/png', 0),
(756, 1, '2017-03-04 01:40:34', '2017-03-03 17:40:34', '', 'gzip3', '', 'inherit', 'open', 'closed', '', 'gzip3', '', '', '2017-03-04 01:40:34', '2017-03-03 17:40:34', '', 751, 'https://www.gzpblog.com/wp-content/uploads/2017/03/gzip3.png', 0, 'attachment', 'image/png', 0),
(757, 1, '2017-03-04 01:40:35', '2017-03-03 17:40:35', '', 'gzip4', '', 'inherit', 'open', 'closed', '', 'gzip4', '', '', '2017-03-04 01:40:35', '2017-03-03 17:40:35', '', 751, 'https://www.gzpblog.com/wp-content/uploads/2017/03/gzip4.png', 0, 'attachment', 'image/png', 0),
(758, 1, '2017-03-04 01:40:36', '2017-03-03 17:40:36', '', 'gzip5', '', 'inherit', 'open', 'closed', '', 'gzip5', '', '', '2017-03-04 01:40:36', '2017-03-03 17:40:36', '', 751, 'https://www.gzpblog.com/wp-content/uploads/2017/03/gzip5.png', 0, 'attachment', 'image/png', 0),
(759, 1, '2017-03-04 01:40:37', '2017-03-03 17:40:37', '', 'gzip6', '', 'inherit', 'open', 'closed', '', 'gzip6', '', '', '2017-03-04 01:40:37', '2017-03-03 17:40:37', '', 751, 'https://www.gzpblog.com/wp-content/uploads/2017/03/gzip6.png', 0, 'attachment', 'image/png', 0),
(760, 1, '2017-03-04 01:40:38', '2017-03-03 17:40:38', '', 'gzip1', '', 'inherit', 'open', 'closed', '', 'gzip1', '', '', '2017-03-04 01:40:38', '2017-03-03 17:40:38', '', 751, 'https://www.gzpblog.com/wp-content/uploads/2017/03/gzip1.png', 0, 'attachment', 'image/png', 0),
(761, 1, '2017-03-04 01:56:33', '2017-03-03 17:56:33', '服务器搭建完毕，程序正常跑起来了，还不够，我们还需要干点有意思的事情，让程序跑得更爽！所以优化一下性能，让网站速度更快。\r\n<blockquote>注：环境是Nginx+MySQL5.7+PHP7</blockquote>\r\n<h3>一 开启OPcache加速</h3>\r\nOPcache 通过将 PHP 脚本预编译的字节码存储到共享内存中来提升 PHP 的性能， 存储预编译字节码的好处就是省去了每次加载和解析 PHP 脚本的开销。鸟哥Laruence在提到PHP7性能提升的第一点，就是开启OPchache。\r\n\r\n关于OPcache的更多东西，可以到php手册上去了解：<a href=\"http://php.net/manual/zh/book.opcache.php\" target=\"_blank\">PHP：OPcache - Manual</a>， 这里就补废话了。\r\n\r\nOPcache的配置还是挺多的，可以一个一个去了解一下，根据需要开启，以下是我的配置：\r\n\r\n[code]\r\n[opcache]\r\nzend_extension=/usr/local/php/lib/php/extensions/no-debug-non-zts-20151012/opcache.so\r\nopcache.enable=1\r\nopcache.enable_cli=1\r\nopcache.memory_consumption=64\r\nopcache.interned_strings_buffer=4\r\nopcache.max_accelerated_files=2000\r\nopcache.max_wasted_percentage=5\r\nopcache.fast_shutdown=1\r\n[/code]\r\n\r\n在php.ini配置文件找到[opcache]然后进行配置，记得引入opcache.so拓展模块，因为我在编译的时候就直接安装了这个拓展，所以我直接引入就行，没有的话就先安装。\r\n如果出现这种情况：\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache1.png\"><img class=\"size-full wp-image-752 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache1.png\" alt=\"\" width=\"1350\" height=\"82\" />\r\n</a>那说明没成功，拓展没装好，或者没引对，再试试，正常是这样的：\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache2.png\"><img class=\"size-full wp-image-753 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache2.png\" alt=\"\" width=\"464\" height=\"45\" />\r\n</a>成功后我们可以在phpinfo看到：\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache3.png\"><img class=\"size-full wp-image-754 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache3.png\" alt=\"\" width=\"950\" height=\"636\" />\r\n</a>开启OPcache后速度的提升，是非常明显的！\r\n\r\n二 开启Gzip压缩\r\nNginx默认是没有开启Gzip压缩的，要使用Gzip压缩还需要自己去开启。Gzip开启以后会将输出到用户浏览器的数据进行压缩的处理，这样就会减小通过网络传输的数据量，提高浏览的速度。基本上这个也是都会使用的功能。\r\n\r\n在Nginx的配置文件中添加一些配置：\r\n\r\n[code]\r\n\r\n gzip on;\r\n gzip_min_length 5k;\r\n gzip_buffers 4 16k;\r\n gzip_http_version 1.0;\r\n gzip_comp_level 1;\r\n gzip_types text/plain application/x-javascript text/css text/html application/xml;\r\n gzip_vary on;\r\n\r\n[/code]\r\n\r\n图片之类的文件我们不启用，试了一下开启图片的压缩反而慢了。本来就用了缓存，所以不压图片也是好的。\r\n\r\n可以用这个工具进行Gzip的测试：<a href=\"http://tool.chinaz.com/Gzips/\" target=\"_blank\">Gzip压缩检测</a>\r\n\r\n没有开启压缩之前：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip1.png\"><img class=\"size-full wp-image-760 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip1.png\" alt=\"\" width=\"1182\" height=\"418\" /></a>\r\n\r\n开启压缩之后：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip4.png\"><img class=\"size-full wp-image-757 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip4.png\" alt=\"\" width=\"1043\" height=\"483\" /></a>\r\n\r\n压缩率达到80%以上，直接砍掉80%以上，这个看起来效果非常不错啊。\r\n\r\n但是，我的站点速度提升似乎并不明显：\r\n\r\n没有开启加速时，google浏览器，清除缓存，加载首页不滚动（因为用了延迟加载）的加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip2png.png\"><img class=\"size-full wp-image-755 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip2png.png\" alt=\"\" width=\"523\" height=\"29\" /></a>\r\n\r\n有缓存加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip3.png\"><img class=\"size-full wp-image-756 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip3.png\" alt=\"\" width=\"536\" height=\"25\" /></a>\r\n\r\n开启加速之后，同样的，没缓存加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip5.png\"><img class=\"size-full wp-image-758 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip5.png\" alt=\"\" width=\"524\" height=\"21\" /></a>\r\n\r\n有缓存加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip6.png\"><img class=\"size-full wp-image-759 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip6.png\" alt=\"\" width=\"533\" height=\"23\" /></a>\r\n\r\n从这个数据来看，加载的速度似乎并没有什么大的提升，应该说是没什么区别。但是确实是传输的内容90KB变成了17KB。我还没仔细去研究配置，不知道是不是配置的问题还是什么问题，目前感觉应该是服务器带宽的限制了。\r\n\r\n&nbsp;\r\n\r\n三 开启CDN\r\n\r\n用的阿里云CDN，加速图片的加载。如果不启用https的话，内网似乎是有一定的免费流量的。我之前设置过一次，但是我设完没去注意，然后现在从新去研究一下发现流量一直是0，原来设置错了，改了一下现在正常了。最好的实践方法是，需要开一个子域名给oss用，我的是叫files.gzpblog.com，然后绑定到oss的bucket域名中，使用这个域名；设置cdn解析，不能设置www域名主域名，而是设oss的这个域名，开启加速。具体的，阿里云官方文档其实很多。\r\n\r\n&nbsp;', '服务器由阿里云虚拟主机转云服务器ECS实践（二）性能优化', '', 'inherit', 'closed', 'closed', '', '751-revision-v1', '', '', '2017-03-04 01:56:33', '2017-03-03 17:56:33', '', 751, 'https://www.gzpblog.com/20170304/761.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(762, 1, '2017-03-04 02:00:08', '2017-03-03 18:00:08', '虽说之前的虚拟主机速度还算可以吧，阿里云送的免费两年主机，能有那样的速度还算不错了，但是毕竟是共享的虚拟主机，弊端很多：\r\n<ul>\r\n 	<li>内存共享</li>\r\n 	<li>带宽共享</li>\r\n 	<li>ip共享</li>\r\n 	<li>服务器配置不自由</li>\r\n</ul>\r\n所以这种共享主机，想转https都没法子做。况且我迟早是要好好研究linux的，于是乎，下了狠心，买了个ECS，买的最低配的了，价格还是这么贵。但是肯定是物有所值的。\r\n<h3>服务器硬盘镜像选择</h3>\r\n其实我试了一下官方云市场的那些镜像，给你装好环境的，感觉并不是很好，装了乱七八糟的东西有点多，而且不能按照自己的意思来。所以还是自己搭建环境实在，实在是搭不出来，或者是懒了，随时可以换镜像。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/zhuancentos.png\"><img class=\"size-full wp-image-746 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/zhuancentos.png\" alt=\"\" width=\"1144\" height=\"94\" /></a>\r\n\r\n其实，我一开始拿到这个鲜嫩多汁的ECS服务器时，选择的是32位系统，因为我只有1G的内存啊！但是后来我改成了64位，我发现不能用我们正常的一个机子去衡量这种ECS服务器，64位完全可行。系统自然是Linux系统，版本我是选了centos。\r\n\r\n通过右边的一个远程连接可以连接到我们的服务器：<a href=\"https://files.gzpblog.com/wp/2017/03/zhuancentos2.png\"><img class=\"alignnone size-full wp-image-748\" src=\"https://files.gzpblog.com/wp/2017/03/zhuancentos2.png\" alt=\"\" width=\"1400\" height=\"91\" /></a>\r\n\r\n但是，我不推荐这种使用方式，可以下一个ssh来使用，比如我用的是Xshell，通过Xshell，我们直接在我们的电脑上连接到远程阿里云的ECS进行操作。\r\n<h3>开始动工</h3>\r\n服务器到手了，我们当然要开始开工了，第一件事就是装好环境，别的先不说，让我们的wordpress博客先跑起来先。\r\n\r\n搭建环境的话，竟然是自己的服务器了，那想怎么搞怎么搞，直接上PHP7，性能提升不是一点两点。\r\n\r\n这里有一篇自己的实践：<a href=\"https://www.gzpblog.com/20170303/731.html\" target=\"_blank\">Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）</a>\r\n\r\n&nbsp;', '服务器由阿里云虚拟主机转云服务器ECS实践（一）', '', 'inherit', 'closed', 'closed', '', '745-revision-v1', '', '', '2017-03-04 02:00:08', '2017-03-03 18:00:08', '', 745, 'https://www.gzpblog.com/20170304/762.html', 0, 'revision', '', 0),
(763, 1, '2017-03-04 20:21:44', '2017-03-04 12:21:44', '服务器搭建完毕，程序正常跑起来了，还不够，我们还需要干点有意思的事情，让程序跑得更爽！所以优化一下性能，让网站速度更快。\n<blockquote>注：环境是Nginx+MySQL5.7+PHP7</blockquote>\n<h3>一 开启OPcache加速</h3>\nOPcache 通过将 PHP 脚本预编译的字节码存储到共享内存中来提升 PHP 的性能， 存储预编译字节码的好处就是省去了每次加载和解析 PHP 脚本的开销。鸟哥Laruence在提到PHP7性能提升的第一点，就是开启OPchache。\n\n关于OPcache的更多东西，可以到php手册上去了解：<a href=\"http://php.net/manual/zh/book.opcache.php\" target=\"_blank\">PHP：OPcache - Manual</a>， 这里就不废话了。\n\nOPcache的配置还是挺多的，可以一个一个去了解一下，根据需要开启，以下是我的配置：\n\n[code]\n[opcache]\nzend_extension=/usr/local/php/lib/php/extensions/no-debug-non-zts-20151012/opcache.so\nopcache.enable=1\nopcache.enable_cli=1\nopcache.memory_consumption=64\nopcache.interned_strings_buffer=4\nopcache.max_accelerated_files=2000\nopcache.max_wasted_percentage=5\nopcache.fast_shutdown=1\n[/code]\n\n在php.ini配置文件找到[opcache]然后进行配置，记得引入opcache.so拓展模块，因为我在编译的时候就直接安装了这个拓展，所以我直接引入就行，没有的话就先安装。\n如果出现这种情况：\n\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache1.png\"><img class=\"size-full wp-image-752 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache1.png\" alt=\"\" width=\"1350\" height=\"82\" /></a><a href=\"https://files.gzpblog.com/wp/2017/03/opcache1.png\">\n</a>那说明没成功，拓展没装好，或者没引对，再试试，正常是这样的：\n\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache2.png\"><img class=\"size-full wp-image-753 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache2.png\" alt=\"\" width=\"464\" height=\"45\" /></a><a href=\"https://files.gzpblog.com/wp/2017/03/opcache2.png\">\n\n</a>成功后我们可以在phpinfo看到：\n\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache3.png\">\n\n</a>开启OPcache后速度的提升，是非常明显的！\n<h3>二 开启Gzip压缩</h3>\nNginx默认是没有开启Gzip压缩的，要使用Gzip压缩还需要自己去开启。Gzip开启以后会将输出到用户浏览器的数据进行压缩的处理，这样就会减小通过网络传输的数据量，提高浏览的速度。基本上这个也是都会使用的功能。\n\n在Nginx的配置文件中添加一些配置：\n\n[code]\n\n gzip on;\n gzip_min_length 5k;\n gzip_buffers 4 16k;\n gzip_http_version 1.0;\n gzip_comp_level 1;\n gzip_types text/plain application/x-javascript text/css text/html application/xml;\n gzip_vary on;\n\n[/code]\n\n图片之类的文件我们不启用，试了一下开启图片的压缩反而慢了。本来就用了缓存，所以不压图片也是好的。\n\n可以用这个工具进行Gzip的测试：<a href=\"http://tool.chinaz.com/Gzips/\" target=\"_blank\">Gzip压缩检测</a>\n\n没有开启压缩之前：\n\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip1.png\"><img class=\"size-full wp-image-760 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip1.png\" alt=\"\" width=\"1182\" height=\"418\" /></a>\n\n开启压缩之后：\n\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip4.png\"><img class=\"size-full wp-image-757 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip4.png\" alt=\"\" width=\"1043\" height=\"483\" /></a>\n\n压缩率达到80%以上，直接砍掉80%以上，这个看起来效果非常不错啊。\n\n但是，我的站点速度提升似乎并不明显：\n\n没有开启加速时，google浏览器，清除缓存，加载首页不滚动（因为用了延迟加载）的加载情况：\n\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip2png.png\"><img class=\"size-full wp-image-755 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip2png.png\" alt=\"\" width=\"523\" height=\"29\" /></a>\n\n有缓存加载情况：\n\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip3.png\"><img class=\"size-full wp-image-756 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip3.png\" alt=\"\" width=\"536\" height=\"25\" /></a>\n\n开启加速之后，同样的，没缓存加载情况：\n\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip5.png\"><img class=\"size-full wp-image-758 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip5.png\" alt=\"\" width=\"524\" height=\"21\" /></a>\n\n有缓存加载情况：\n\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip6.png\"><img class=\"size-full wp-image-759 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip6.png\" alt=\"\" width=\"533\" height=\"23\" /></a>\n\n从这个数据来看，加载的速度似乎并没有什么大的提升，应该说是没什么区别。但是确实是传输的内容90KB变成了17KB。我还没仔细去研究配置，以后找个时间再来慢慢研究一下，不知道是不是配置的问题还是什么问题，目前感觉应该是服务器带宽的限制了。\n\n&nbsp;\n<h3>三 开启CDN</h3>\n用的阿里云CDN，加速图片的加载。如果不启用https的话，内网似乎是有一定的免费流量的。我之前设置过一次，但是我设完没去注意，然后现在从新去研究一下发现流量一直是0，原来设置错了，改了一下现在正常了。最好的实践方法是，需要开一个子域名给oss用，我的是叫files.gzpblog.com，然后绑定到oss的bucket域名中，使用这个域名；设置cdn解析，不能设置www域名主域名，而是设oss的这个域名，开启加速。具体的，阿里云官方文档其实很多。\n\n&nbsp;', '服务器由阿里云虚拟主机转云服务器ECS实践（二）性能优化', '', 'inherit', 'closed', 'closed', '', '751-autosave-v1', '', '', '2017-03-04 20:21:44', '2017-03-04 12:21:44', '', 751, 'https://www.gzpblog.com/20170304/763.html', 0, 'revision', '', 0),
(764, 1, '2017-03-04 02:12:32', '2017-03-03 18:12:32', '服务器搭建完毕，程序正常跑起来了，还不够，我们还需要干点有意思的事情，让程序跑得更爽！所以优化一下性能，让网站速度更快。\r\n<blockquote>注：环境是Nginx+MySQL5.7+PHP7</blockquote>\r\n<h3>一 开启OPcache加速</h3>\r\nOPcache 通过将 PHP 脚本预编译的字节码存储到共享内存中来提升 PHP 的性能， 存储预编译字节码的好处就是省去了每次加载和解析 PHP 脚本的开销。鸟哥Laruence在提到PHP7性能提升的第一点，就是开启OPchache。\r\n\r\n关于OPcache的更多东西，可以到php手册上去了解：<a href=\"http://php.net/manual/zh/book.opcache.php\" target=\"_blank\">PHP：OPcache - Manual</a>， 这里就不废话了。\r\n\r\nOPcache的配置还是挺多的，可以一个一个去了解一下，根据需要开启，以下是我的配置：\r\n\r\n[code]\r\n[opcache]\r\nzend_extension=/usr/local/php/lib/php/extensions/no-debug-non-zts-20151012/opcache.so\r\nopcache.enable=1\r\nopcache.enable_cli=1\r\nopcache.memory_consumption=64\r\nopcache.interned_strings_buffer=4\r\nopcache.max_accelerated_files=2000\r\nopcache.max_wasted_percentage=5\r\nopcache.fast_shutdown=1\r\n[/code]\r\n\r\n在php.ini配置文件找到[opcache]然后进行配置，记得引入opcache.so拓展模块，因为我在编译的时候就直接安装了这个拓展，所以我直接引入就行，没有的话就先安装。\r\n如果出现这种情况：\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache1.png\"><img class=\"size-full wp-image-752 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache1.png\" alt=\"\" width=\"1350\" height=\"82\" />\r\n</a>那说明没成功，拓展没装好，或者没引对，再试试，正常是这样的：\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache2.png\"><img class=\"size-full wp-image-753 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache2.png\" alt=\"\" width=\"464\" height=\"45\" />\r\n</a>成功后我们可以在phpinfo看到：\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache3.png\"><img class=\"size-full wp-image-754 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache3.png\" alt=\"\" width=\"950\" height=\"636\" />\r\n</a>开启OPcache后速度的提升，是非常明显的！\r\n<h3>二 开启Gzip压缩</h3>\r\nNginx默认是没有开启Gzip压缩的，要使用Gzip压缩还需要自己去开启。Gzip开启以后会将输出到用户浏览器的数据进行压缩的处理，这样就会减小通过网络传输的数据量，提高浏览的速度。基本上这个也是都会使用的功能。\r\n\r\n在Nginx的配置文件中添加一些配置：\r\n\r\n[code]\r\n\r\n gzip on;\r\n gzip_min_length 5k;\r\n gzip_buffers 4 16k;\r\n gzip_http_version 1.0;\r\n gzip_comp_level 1;\r\n gzip_types text/plain application/x-javascript text/css text/html application/xml;\r\n gzip_vary on;\r\n\r\n[/code]\r\n\r\n图片之类的文件我们不启用，试了一下开启图片的压缩反而慢了。本来就用了缓存，所以不压图片也是好的。\r\n\r\n可以用这个工具进行Gzip的测试：<a href=\"http://tool.chinaz.com/Gzips/\" target=\"_blank\">Gzip压缩检测</a>\r\n\r\n没有开启压缩之前：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip1.png\"><img class=\"size-full wp-image-760 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip1.png\" alt=\"\" width=\"1182\" height=\"418\" /></a>\r\n\r\n开启压缩之后：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip4.png\"><img class=\"size-full wp-image-757 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip4.png\" alt=\"\" width=\"1043\" height=\"483\" /></a>\r\n\r\n压缩率达到80%以上，直接砍掉80%以上，这个看起来效果非常不错啊。\r\n\r\n但是，我的站点速度提升似乎并不明显：\r\n\r\n没有开启加速时，google浏览器，清除缓存，加载首页不滚动（因为用了延迟加载）的加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip2png.png\"><img class=\"size-full wp-image-755 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip2png.png\" alt=\"\" width=\"523\" height=\"29\" /></a>\r\n\r\n有缓存加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip3.png\"><img class=\"size-full wp-image-756 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip3.png\" alt=\"\" width=\"536\" height=\"25\" /></a>\r\n\r\n开启加速之后，同样的，没缓存加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip5.png\"><img class=\"size-full wp-image-758 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip5.png\" alt=\"\" width=\"524\" height=\"21\" /></a>\r\n\r\n有缓存加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip6.png\"><img class=\"size-full wp-image-759 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip6.png\" alt=\"\" width=\"533\" height=\"23\" /></a>\r\n\r\n从这个数据来看，加载的速度似乎并没有什么大的提升，应该说是没什么区别。但是确实是传输的内容90KB变成了17KB。我还没仔细去研究配置，以后找个时间再来慢慢研究一下，不知道是不是配置的问题还是什么问题，目前感觉应该是服务器带宽的限制了。\r\n\r\n&nbsp;\r\n<h3>三 开启CDN</h3>\r\n用的阿里云CDN，加速图片的加载。如果不启用https的话，内网似乎是有一定的免费流量的。我之前设置过一次，但是我设完没去注意，然后现在从新去研究一下发现流量一直是0，原来设置错了，改了一下现在正常了。最好的实践方法是，需要开一个子域名给oss用，我的是叫files.gzpblog.com，然后绑定到oss的bucket域名中，使用这个域名；设置cdn解析，不能设置www域名主域名，而是设oss的这个域名，开启加速。具体的，阿里云官方文档其实很多。\r\n\r\n&nbsp;', '服务器由阿里云虚拟主机转云服务器ECS实践（二）性能优化', '', 'inherit', 'closed', 'closed', '', '751-revision-v1', '', '', '2017-03-04 02:12:32', '2017-03-03 18:12:32', '', 751, 'https://www.gzpblog.com/20170304/764.html', 0, 'revision', '', 0),
(770, 1, '2017-03-04 23:36:54', '2017-03-04 15:36:54', '服务器搭建完毕，程序正常跑起来了，还不够，我们还需要干点有意思的事情，让程序跑得更爽！所以优化一下性能，让网站速度更快。\r\n<blockquote>注：环境是Nginx+MySQL5.7+PHP7</blockquote>\r\n<h3>一 开启OPcache加速</h3>\r\nOPcache 通过将 PHP 脚本预编译的字节码存储到共享内存中来提升 PHP 的性能， 存储预编译字节码的好处就是省去了每次加载和解析 PHP 脚本的开销。鸟哥Laruence在提到PHP7性能提升的第一点，就是开启OPchache。\r\n\r\n关于OPcache的更多东西，可以到php手册上去了解：<a href=\"http://php.net/manual/zh/book.opcache.php\" target=\"_blank\">PHP：OPcache - Manual</a>， 这里就不废话了。\r\n\r\nOPcache的配置还是挺多的，可以一个一个去了解一下，根据需要开启，以下是我的配置：\r\n\r\n[code]\r\n[opcache]\r\nzend_extension=/usr/local/php/lib/php/extensions/no-debug-non-zts-20151012/opcache.so\r\nopcache.enable=1\r\nopcache.enable_cli=1\r\nopcache.memory_consumption=64\r\nopcache.interned_strings_buffer=4\r\nopcache.max_accelerated_files=2000\r\nopcache.max_wasted_percentage=5\r\nopcache.fast_shutdown=1\r\n[/code]\r\n\r\n在php.ini配置文件找到[opcache]然后进行配置，记得引入opcache.so拓展模块，因为我在编译的时候就直接安装了这个拓展，所以我直接引入就行，没有的话就先安装。\r\n如果出现这种情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache1.png\"><img class=\"size-full wp-image-752 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache1.png\" alt=\"\" width=\"1350\" height=\"82\" /></a><a href=\"https://files.gzpblog.com/wp/2017/03/opcache1.png\">\r\n</a>那说明没成功，拓展没装好，或者没引对，再试试，正常是这样的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache2.png\"><img class=\"size-full wp-image-753 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache2.png\" alt=\"\" width=\"464\" height=\"45\" /></a>\r\n\r\n成功后我们可以在phpinfo看到：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache3.png\"><img class=\"size-full wp-image-754 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache3.png\" alt=\"\" width=\"950\" height=\"636\" /></a>\r\n\r\n开启OPcache后速度的提升，是非常明显的！\r\n<h3>二 开启Gzip压缩</h3>\r\nNginx默认是没有开启Gzip压缩的，要使用Gzip压缩还需要自己去开启。Gzip开启以后会将输出到用户浏览器的数据进行压缩的处理，这样就会减小通过网络传输的数据量，提高浏览的速度。基本上这个也是都会使用的功能。\r\n\r\n在Nginx的配置文件中添加一些配置：\r\n\r\n[code]\r\n\r\n gzip on;\r\n gzip_min_length 5k;\r\n gzip_buffers 4 16k;\r\n gzip_http_version 1.0;\r\n gzip_comp_level 1;\r\n gzip_types text/plain application/x-javascript text/css text/html application/xml;\r\n gzip_vary on;\r\n\r\n[/code]\r\n\r\n图片之类的文件我们不启用，试了一下开启图片的压缩反而慢了。本来就用了缓存，所以不压图片也是好的。\r\n\r\n可以用这个工具进行Gzip的测试：<a href=\"http://tool.chinaz.com/Gzips/\" target=\"_blank\">Gzip压缩检测</a>\r\n\r\n没有开启压缩之前：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip1.png\"><img class=\"size-full wp-image-760 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip1.png\" alt=\"\" width=\"1182\" height=\"418\" /></a>\r\n\r\n开启压缩之后：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip4.png\"><img class=\"size-full wp-image-757 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip4.png\" alt=\"\" width=\"1043\" height=\"483\" /></a>\r\n\r\n压缩率达到80%以上，直接砍掉80%以上，这个看起来效果非常不错啊。\r\n\r\n但是，我的站点速度提升似乎并不明显：\r\n\r\n没有开启加速时，google浏览器，清除缓存，加载首页不滚动（因为用了延迟加载）的加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip2png.png\"><img class=\"size-full wp-image-755 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip2png.png\" alt=\"\" width=\"523\" height=\"29\" /></a>\r\n\r\n有缓存加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip3.png\"><img class=\"size-full wp-image-756 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip3.png\" alt=\"\" width=\"536\" height=\"25\" /></a>\r\n\r\n开启加速之后，同样的，没缓存加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip5.png\"><img class=\"size-full wp-image-758 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip5.png\" alt=\"\" width=\"524\" height=\"21\" /></a>\r\n\r\n有缓存加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip6.png\"><img class=\"size-full wp-image-759 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip6.png\" alt=\"\" width=\"533\" height=\"23\" /></a>\r\n\r\n从这个数据来看，加载的速度似乎并没有什么大的提升，应该说是没什么区别。但是确实是传输的内容90KB变成了17KB。我还没仔细去研究配置，以后找个时间再来慢慢研究一下，不知道是不是配置的问题还是什么问题，目前感觉应该是服务器带宽的限制了。\r\n\r\n&nbsp;\r\n<h3>三 开启CDN</h3>\r\n用的阿里云CDN，加速图片的加载。如果不启用https的话，内网似乎是有一定的免费流量的。我之前设置过一次，但是我设完没去注意，然后现在从新去研究一下发现流量一直是0，原来设置错了，改了一下现在正常了。最好的实践方法是，需要开一个子域名给oss用，我的是叫files.gzpblog.com，然后绑定到oss的bucket域名中，使用这个域名；设置cdn解析，不能设置www域名主域名，而是设oss的这个域名，开启加速。具体的，阿里云官方文档其实很多。\r\n\r\n&nbsp;', '服务器由阿里云虚拟主机转云服务器ECS实践（二）性能优化', '', 'inherit', 'closed', 'closed', '', '751-revision-v1', '', '', '2017-03-04 23:36:54', '2017-03-04 15:36:54', '', 751, 'https://www.gzpblog.com/20170304/770.html', 0, 'revision', '', 0),
(767, 1, '2017-03-04 20:21:48', '2017-03-04 12:21:48', '服务器搭建完毕，程序正常跑起来了，还不够，我们还需要干点有意思的事情，让程序跑得更爽！所以优化一下性能，让网站速度更快。\r\n<blockquote>注：环境是Nginx+MySQL5.7+PHP7</blockquote>\r\n<h3>一 开启OPcache加速</h3>\r\nOPcache 通过将 PHP 脚本预编译的字节码存储到共享内存中来提升 PHP 的性能， 存储预编译字节码的好处就是省去了每次加载和解析 PHP 脚本的开销。鸟哥Laruence在提到PHP7性能提升的第一点，就是开启OPchache。\r\n\r\n关于OPcache的更多东西，可以到php手册上去了解：<a href=\"http://php.net/manual/zh/book.opcache.php\" target=\"_blank\">PHP：OPcache - Manual</a>， 这里就不废话了。\r\n\r\nOPcache的配置还是挺多的，可以一个一个去了解一下，根据需要开启，以下是我的配置：\r\n\r\n[code]\r\n[opcache]\r\nzend_extension=/usr/local/php/lib/php/extensions/no-debug-non-zts-20151012/opcache.so\r\nopcache.enable=1\r\nopcache.enable_cli=1\r\nopcache.memory_consumption=64\r\nopcache.interned_strings_buffer=4\r\nopcache.max_accelerated_files=2000\r\nopcache.max_wasted_percentage=5\r\nopcache.fast_shutdown=1\r\n[/code]\r\n\r\n在php.ini配置文件找到[opcache]然后进行配置，记得引入opcache.so拓展模块，因为我在编译的时候就直接安装了这个拓展，所以我直接引入就行，没有的话就先安装。\r\n如果出现这种情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache1.png\"><img class=\"size-full wp-image-752 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache1.png\" alt=\"\" width=\"1350\" height=\"82\" /></a><a href=\"https://files.gzpblog.com/wp/2017/03/opcache1.png\">\r\n</a>那说明没成功，拓展没装好，或者没引对，再试试，正常是这样的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache2.png\"><img class=\"size-full wp-image-753 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache2.png\" alt=\"\" width=\"464\" height=\"45\" /></a><a href=\"https://files.gzpblog.com/wp/2017/03/opcache2.png\">\r\n\r\n</a>成功后我们可以在phpinfo看到：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/opcache3.png\"><img class=\"size-full wp-image-754 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/opcache3.png\" alt=\"\" width=\"950\" height=\"636\" /></a><a href=\"https://files.gzpblog.com/wp/2017/03/opcache3.png\">\r\n\r\n</a>开启OPcache后速度的提升，是非常明显的！\r\n<h3>二 开启Gzip压缩</h3>\r\nNginx默认是没有开启Gzip压缩的，要使用Gzip压缩还需要自己去开启。Gzip开启以后会将输出到用户浏览器的数据进行压缩的处理，这样就会减小通过网络传输的数据量，提高浏览的速度。基本上这个也是都会使用的功能。\r\n\r\n在Nginx的配置文件中添加一些配置：\r\n\r\n[code]\r\n\r\n gzip on;\r\n gzip_min_length 5k;\r\n gzip_buffers 4 16k;\r\n gzip_http_version 1.0;\r\n gzip_comp_level 1;\r\n gzip_types text/plain application/x-javascript text/css text/html application/xml;\r\n gzip_vary on;\r\n\r\n[/code]\r\n\r\n图片之类的文件我们不启用，试了一下开启图片的压缩反而慢了。本来就用了缓存，所以不压图片也是好的。\r\n\r\n可以用这个工具进行Gzip的测试：<a href=\"http://tool.chinaz.com/Gzips/\" target=\"_blank\">Gzip压缩检测</a>\r\n\r\n没有开启压缩之前：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip1.png\"><img class=\"size-full wp-image-760 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip1.png\" alt=\"\" width=\"1182\" height=\"418\" /></a>\r\n\r\n开启压缩之后：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip4.png\"><img class=\"size-full wp-image-757 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip4.png\" alt=\"\" width=\"1043\" height=\"483\" /></a>\r\n\r\n压缩率达到80%以上，直接砍掉80%以上，这个看起来效果非常不错啊。\r\n\r\n但是，我的站点速度提升似乎并不明显：\r\n\r\n没有开启加速时，google浏览器，清除缓存，加载首页不滚动（因为用了延迟加载）的加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip2png.png\"><img class=\"size-full wp-image-755 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip2png.png\" alt=\"\" width=\"523\" height=\"29\" /></a>\r\n\r\n有缓存加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip3.png\"><img class=\"size-full wp-image-756 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip3.png\" alt=\"\" width=\"536\" height=\"25\" /></a>\r\n\r\n开启加速之后，同样的，没缓存加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip5.png\"><img class=\"size-full wp-image-758 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip5.png\" alt=\"\" width=\"524\" height=\"21\" /></a>\r\n\r\n有缓存加载情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/gzip6.png\"><img class=\"size-full wp-image-759 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/gzip6.png\" alt=\"\" width=\"533\" height=\"23\" /></a>\r\n\r\n从这个数据来看，加载的速度似乎并没有什么大的提升，应该说是没什么区别。但是确实是传输的内容90KB变成了17KB。我还没仔细去研究配置，以后找个时间再来慢慢研究一下，不知道是不是配置的问题还是什么问题，目前感觉应该是服务器带宽的限制了。\r\n\r\n&nbsp;\r\n<h3>三 开启CDN</h3>\r\n用的阿里云CDN，加速图片的加载。如果不启用https的话，内网似乎是有一定的免费流量的。我之前设置过一次，但是我设完没去注意，然后现在从新去研究一下发现流量一直是0，原来设置错了，改了一下现在正常了。最好的实践方法是，需要开一个子域名给oss用，我的是叫files.gzpblog.com，然后绑定到oss的bucket域名中，使用这个域名；设置cdn解析，不能设置www域名主域名，而是设oss的这个域名，开启加速。具体的，阿里云官方文档其实很多。\r\n\r\n&nbsp;', '服务器由阿里云虚拟主机转云服务器ECS实践（二）性能优化', '', 'inherit', 'closed', 'closed', '', '751-revision-v1', '', '', '2017-03-04 20:21:48', '2017-03-04 12:21:48', '', 751, 'https://www.gzpblog.com/20170304/767.html', 0, 'revision', '', 0),
(769, 1, '2017-03-04 23:35:59', '2017-03-04 15:35:59', '', 'foryun', '', 'inherit', 'open', 'closed', '', 'foryun', '', '', '2017-03-04 23:35:59', '2017-03-04 15:35:59', '', 745, 'https://www.gzpblog.com/wp-content/uploads/2017/03/foryun.jpg', 0, 'attachment', 'image/jpeg', 0),
(771, 1, '2017-03-05 02:03:14', '2017-03-04 18:03:14', '', 'tohttps10', '', 'inherit', 'open', 'closed', '', 'tohttps10', '', '', '2017-03-05 02:16:13', '2017-03-04 18:16:13', '', 785, 'https://www.gzpblog.com/wp-content/uploads/2017/03/tohttps10.png', 0, 'attachment', 'image/png', 0),
(772, 1, '2017-03-05 02:03:16', '2017-03-04 18:03:16', '', 'tohttps11', '', 'inherit', 'open', 'closed', '', 'tohttps11', '', '', '2017-03-05 02:17:37', '2017-03-04 18:17:37', '', 785, 'https://www.gzpblog.com/wp-content/uploads/2017/03/tohttps11.png', 0, 'attachment', 'image/png', 0),
(773, 1, '2017-03-05 02:03:17', '2017-03-04 18:03:17', '', 'tohttps12', '', 'inherit', 'open', 'closed', '', 'tohttps12', '', '', '2017-03-05 02:17:56', '2017-03-04 18:17:56', '', 785, 'https://www.gzpblog.com/wp-content/uploads/2017/03/tohttps12.png', 0, 'attachment', 'image/png', 0),
(774, 1, '2017-03-05 02:03:18', '2017-03-04 18:03:18', '', 'tohttps13', '', 'inherit', 'open', 'closed', '', 'tohttps13', '', '', '2017-03-05 02:18:49', '2017-03-04 18:18:49', '', 785, 'https://www.gzpblog.com/wp-content/uploads/2017/03/tohttps13.png', 0, 'attachment', 'image/png', 0),
(775, 1, '2017-03-05 02:03:19', '2017-03-04 18:03:19', '', 'tohttps14', '', 'inherit', 'open', 'closed', '', 'tohttps14', '', '', '2017-03-05 02:19:24', '2017-03-04 18:19:24', '', 785, 'https://www.gzpblog.com/wp-content/uploads/2017/03/tohttps14.png', 0, 'attachment', 'image/png', 0),
(776, 1, '2017-03-05 02:03:20', '2017-03-04 18:03:20', '', 'tohttps', '', 'inherit', 'open', 'closed', '', 'tohttps', '', '', '2017-03-05 02:03:20', '2017-03-04 18:03:20', '', 0, 'https://www.gzpblog.com/wp-content/uploads/2017/03/tohttps.png', 0, 'attachment', 'image/png', 0),
(777, 1, '2017-03-05 02:03:21', '2017-03-04 18:03:21', '', 'tohttps2', '', 'inherit', 'open', 'closed', '', 'tohttps2', '', '', '2017-03-05 02:06:41', '2017-03-04 18:06:41', '', 785, 'https://www.gzpblog.com/wp-content/uploads/2017/03/tohttps2.png', 0, 'attachment', 'image/png', 0),
(778, 1, '2017-03-05 02:03:23', '2017-03-04 18:03:23', '', 'tohttps3', '', 'inherit', 'open', 'closed', '', 'tohttps3', '', '', '2017-03-05 02:11:12', '2017-03-04 18:11:12', '', 785, 'https://www.gzpblog.com/wp-content/uploads/2017/03/tohttps3.png', 0, 'attachment', 'image/png', 0),
(779, 1, '2017-03-05 02:03:25', '2017-03-04 18:03:25', '', 'tohttps4', '', 'inherit', 'open', 'closed', '', 'tohttps4', '', '', '2017-03-05 02:13:34', '2017-03-04 18:13:34', '', 785, 'https://www.gzpblog.com/wp-content/uploads/2017/03/tohttps4.png', 0, 'attachment', 'image/png', 0),
(780, 1, '2017-03-05 02:03:25', '2017-03-04 18:03:25', '', 'tohttps5', '', 'inherit', 'open', 'closed', '', 'tohttps5', '', '', '2017-03-05 02:13:58', '2017-03-04 18:13:58', '', 785, 'https://www.gzpblog.com/wp-content/uploads/2017/03/tohttps5.png', 0, 'attachment', 'image/png', 0),
(781, 1, '2017-03-05 02:03:26', '2017-03-04 18:03:26', '', 'tohttps6', '', 'inherit', 'open', 'closed', '', 'tohttps6', '', '', '2017-03-05 02:14:11', '2017-03-04 18:14:11', '', 785, 'https://www.gzpblog.com/wp-content/uploads/2017/03/tohttps6.png', 0, 'attachment', 'image/png', 0),
(782, 1, '2017-03-05 02:03:27', '2017-03-04 18:03:27', '', 'tohttps7', '', 'inherit', 'open', 'closed', '', 'tohttps7', '', '', '2017-03-05 02:14:23', '2017-03-04 18:14:23', '', 785, 'https://www.gzpblog.com/wp-content/uploads/2017/03/tohttps7.png', 0, 'attachment', 'image/png', 0),
(783, 1, '2017-03-05 02:03:28', '2017-03-04 18:03:28', '', 'tohttps8', '', 'inherit', 'open', 'closed', '', 'tohttps8', '', '', '2017-03-05 02:15:29', '2017-03-04 18:15:29', '', 785, 'https://www.gzpblog.com/wp-content/uploads/2017/03/tohttps8.png', 0, 'attachment', 'image/png', 0),
(784, 1, '2017-03-05 02:03:29', '2017-03-04 18:03:29', '', 'tohttps9', '', 'inherit', 'open', 'closed', '', 'tohttps9', '', '', '2017-03-05 02:15:34', '2017-03-04 18:15:34', '', 785, 'https://www.gzpblog.com/wp-content/uploads/2017/03/tohttps9.png', 0, 'attachment', 'image/png', 0),
(785, 1, '2017-03-05 02:24:19', '2017-03-04 18:24:19', '<blockquote>首先，讲一下我对于HTTP转HTTPS的想法和做法。\r\n\r\n现在有一些站长是采用保守的策略，考虑到一些其它的因素，保留了HTTP，即HTTP和HTTPS共存。作为一个IT行业的人，我个人的想法是，这种做法，那你转HTTPS就失去了本身的意义了。所以本站转HTTPS，将把HTTP强制转HTTPS，既然要做，那就做彻底，HTTPS是大势所趋，与时俱进。现代浏览器基本都是支持的。\r\n\r\n是的，就是这么简单粗暴。当然啦，这是我个人的做法。</blockquote>\r\n<h3>什么是HTTPS</h3>\r\n其实就是HTTP的安全版。就是在HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。\r\n\r\n&nbsp;\r\n<h3>HTTPS对于站点加载速度的影响</h3>\r\n很多站长不想升级HTTPS，是因为都觉得HTTPS慢！确实，是有这个原因的，HTTPS因为对数据进行加密，所有要处理一些加解密废了些时间。不过，有一点要知道，那就是，HTTPS只有在第一次访问的时候才会慢一点，进入站点后第二次开始就跟HTTP没区别了。举个例子，两个人初次会面，先握个手，然后开始聊天，聊天过程中不会再握手；第二天再见面时，再握个手，然后接下来聊天又不会握手了。HTTPS的缓存期过了之后，才会重新进行一次加密验证，所以对于速度的影响，其实不大。\r\n\r\n如果实在担心速度问题，可以对服务器做一些优化。\r\n\r\n&nbsp;\r\n<h3>申请SSL证书</h3>\r\n现在很多平台，比如阿里云，腾讯云，七牛都可以申请证书了，而且有免费的证书可以申请。像我们这样的个人用户，其实申请免费的就可以了。这里拿阿里云做例子，因为本人是阿里云用户。\r\n在控制台的“安全（云盾）”板块找到“证书服务”，进去之后就是你证书的列表，直接点击购买证书。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/tohttps2.png\"><img class=\"size-full wp-image-777 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps2.png\" alt=\"\" width=\"1234\" height=\"618\" /></a>\r\n\r\n选择免费型DV SSL。直接购买即可。\r\n\r\n买了之后回到证书服务的页面，把该填的信息填了，提交审核就可以。阿里云很方便，我们可以选择自动生成证书的pem和key。如果是万网的域名，还可以选择自动解析。如果是阿里云一站式用户，基本上就是填一些资料提交就行了。\r\n\r\n&nbsp;\r\n<h3>安装证书</h3>\r\n证书下来之后，点击下载。就进入到证书的下载页面，把证书下载下来。阿里云已经提供了各种服务器类型的安装方法。这里我用的是Nginx，以下是我弃用http（80端口）的做法：\r\n找到listen 80要升级为https的server{}配置，修改为：\r\n\r\n[code]\r\nserver {\r\n	    listen 443 ssl;\r\n	    server_name www.gzpblog.com;\r\n	    ssl_certificate   /usr/local/nginx/cert/ggg.pem;\r\n	    ssl_certificate_key  /usr/local/nginx/cert/ggg.key;\r\n	    ssl_session_timeout 5m;\r\n	    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\r\n	    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\r\n	    ssl_prefer_server_ciphers on;\r\n	   \r\n#其它配置省略 \r\n        location / {\r\n           ……\r\n        }\r\n           ……\r\n}\r\n[/code]\r\n\r\n<div>这些内容阿里云有提供的。如果你想仔细研究一下配置也可以。注意一下证书引入的路径，你需要将你下载下来的证书上传到那里，并且引入。配置完这个，重启Nginx，基本上就可以通过Https来访问你的站点了。</div>\r\n<div></div>\r\n<h3>HSTS的启用</h3>\r\nHSTS是一种新的Web安全协议，它的作用，是强制客户端（如浏览器）使用HTTPS与服务器创建连接。在启用前先确定一下这是你需要的，本站全站HTTPS了，所以开启此功能。\r\n\r\n在我们刚才安装证书的配置下面，加上下面这一条：\r\n\r\n[code]\r\nadd_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;;\r\n[/code]\r\n\r\n重启Nginx就可以了。开启HSTS之后，只要用户通过HTTPS访问了你的站点，下次再访问时，就会自动通过HTTPS来访问。\r\n\r\n那么就有一个问题，当有人从来没访问过你的站点时，那他第一次访问，肯定还是通过http，因为此时HSTS还没有通过HTTPS生效。当然，这个问题是有解决办法的，谷歌维护了一个<a href=\"https://hstspreload.org/\" target=\"_blank\">预载入列表</a>，一开始是Chrome使用的，后来大部分浏览器都加入了。这个列表直接告诉浏览器，这个站点支持HTTPS，你得用HTTPS的方式来访问。不过，如果你并不能确定你的网站从此以后一直使用 HTTPS，那还是不要加入这个列表。因为，加入后很难撤销，你可以要求撤销，但是这个数据重新更新到稳定版的 Chrome 同样需要几个月，而别的浏览器是如何处理这个撤销数据的，则无法保证。所以，目前，我采用301跳转的方式处理第一访问的http，给自己留个后路。\r\n\r\n&nbsp;\r\n<h3>301跳转</h3>\r\n转HTTPS之后，还有一些站长比较担心搜索引擎收录。谷歌的支持是比较好的，而国内的好像还不太行。\r\n\r\n不过，百度是有发过公告支持HTTPS的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/tohttps3.png\"><img class=\"size-full wp-image-778 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps3.png\" alt=\"\" width=\"756\" height=\"428\" /></a>\r\n\r\n具体百度做得怎么样，我们就不深究了，但是既然人家都发话了，那我也就不怂了，毕竟我这个博客，对收录还不至于很致命。所以，我干脆直接301跳转，就是这么刚！\r\n\r\n除了以上配置，我还有一些301跳转的配置以强制使用HTTPS：\r\n<div>80端口全部跳转到443：</div>\r\n<div>\r\n\r\n[code]\r\n	server {\r\n	    listen       80;\r\n	    server_name  www.gzpblog.com gzpblog.com;\r\n	    return       301 https://www.gzpblog.com$request_uri;\r\n	}\r\n[/code]\r\n\r\n443端口主域名跳转到www域名：\r\n\r\n[code]\r\n	server {\r\n	    listen 443 ssl;\r\n	    server_name gzpblog.com;\r\n		return      301 https://www.gzpblog.com$request_uri;\r\n	}\r\n[/code]\r\n\r\n<h3>看一下启用HTTPS后的速度</h3>\r\n<div>现在我们的站点已经是启用HTTPS了，可以看到舒服的小绿锁：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps4.png\"><img class=\"size-full wp-image-779 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps4.png\" alt=\"\" width=\"279\" height=\"37\" /></a></div>\r\n<div>\r\n<div>来看一下启用后网站加载速度的影响，首先这个是启用之前：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps5.png\"><img class=\"size-full wp-image-780 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps5.png\" alt=\"\" width=\"529\" height=\"26\" /></a></div>\r\n<div>\r\n<div>然后启用之后是这样的，首次握手的表现：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps6.png\"><img class=\"size-full wp-image-781 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps6.png\" alt=\"\" width=\"500\" height=\"30\" /></a></div>\r\n<div>\r\n<div>可以看到，传输数据爆增，加载速度确实慢下来了，但是当我们再次刷新网页时：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps7.png\"><img class=\"size-full wp-image-782 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps7.png\" alt=\"\" width=\"534\" height=\"23\" /></a>速度又回到之前的水平，只有第一次才收到影响。而实际上在第一次时，从用户体验上来看，差距也不大，并没有太大的页面呈现拖后（是有一点点，但是问题不大啊）。</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h3>全站HTTPS</h3>\r\n<div>接下来，如果我们点进文章页，会发现这种情况，比如在谷歌下，小绿锁变成了感叹号：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps8.png\"><img class=\"size-full wp-image-783 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps8.png\" alt=\"\" width=\"352\" height=\"125\" /></a></div>\r\n<div>在火狐下，出现了黄色感叹号标志：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps9.png\"><img class=\"size-full wp-image-784 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps9.png\" alt=\"\" width=\"367\" height=\"185\" /></a></div>\r\n<div>既然全站HTTPS，这种情况我们是要解决的。这说明我们的文章中的图片，还是http的。接下来处理这个问题。我们先到后台改一下这个链接为https的：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps10.png\"><img class=\"size-full wp-image-771 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps10.png\" alt=\"\" width=\"596\" height=\"104\" /></a></div>\r\n<div>\r\n<div>处理图片这个问题，分两种情况，图片存在本服务器，和图片来自于比如阿里云OSS的服务器。我是存在阿里云的OSS的，加下来是存在OSS的解决方法。</div>\r\n<div>我们先在直接在wordpress的主题中的functions.php中加上：</div>\r\n<div>\r\n\r\n[code]\r\nfunction replacehttp($content){\r\n	if( is_ssl() ){\r\n		$content = str_replace(\'http://files.gzpblog.com/wp/\', \'https://files.gzpblog.com/wp/\', $content);\r\n	}\r\n	return $content;\r\n}\r\nadd_filter(\'the_content\', \'replacehttp\');\r\n[/code]\r\n\r\n<div>修改后，我们文章中的图片地址就变成了https：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps11.png\"><img class=\"size-full wp-image-772 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps11.png\" alt=\"\" width=\"386\" height=\"55\" /></a></div>\r\n<div>\r\n<div>地址这个问题就解决了。但是这些图片链接点进去是这样的：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps12.png\"><img class=\"size-medium wp-image-773 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps12-300x109.png\" alt=\"\" width=\"300\" height=\"109\" /></a></div>\r\n<div>\r\n<div>说明files.gzpblog.com域名还不支持HTTPS。这是接下来要做的。</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<h3>阿里云OSS服务器支持HTTPS</h3>\r\n首先阿里云OSS是支持https的，如果你是调用类似于bucket.oss-cn-shenzhen.aliyuncs.com域名图片地址时，本身就已经是https了。但是很多时候，我们并不这样做，比如本站就将该域名绑定到了二级域名files.gzpblog.com，用这个域名专门做图片链接。但是，我们的证书是免费证书，就是说不支持泛域名（比如*.gzpblog.com），那么这个时候files.gzpblog.com域名是不支持https的。oss的自定义绑定域名cname，不能https。\r\n\r\n处理这个问题，我们可以配合CDN加速来解决，开启HTTPS加速之后，要收费，其实这个不贵，1G的流量2毛线，个人觉得还行，因为我的流量不会很大；如果不使用这种方法，可以采用反向代理来解决，那就是Nginx改一下配置的事了。\r\n\r\n那现在我们需要为该域名再申请一张证书，申请的方法是一样的，但是这次我们不需要再自己安装证书了。使用云产品推送，直接推送到CDN（如果你是用了CDN加速图片并且是阿里云的OSS服务器，那就可以直接推过去，否则先设置一下加速域名，注意是加速类似files.gzpblog.com这个域名而不是主域名）。\r\n\r\n推送过去之后，我们到CDN的域名列表，点击“管理”，编辑“HTTPS安全加速”：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/tohttps13.png\"><img class=\"size-full wp-image-774 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps13.png\" alt=\"\" width=\"521\" height=\"166\" /></a>\r\n\r\n将这个开启，并且选择证书，注意不要选错选到www的证书去了。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/tohttps14.png\"><img class=\"size-full wp-image-775 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps14.png\" alt=\"\" width=\"504\" height=\"76\" /></a>\r\n\r\n配置完成后，这个域名就支持HTTPS了。到了这一步，基本上全站就支持HTTPS了，点进去基本都是小绿锁，可能你引入http链接的文章会没有。\r\n\r\n&nbsp;\r\n<h3>测试结果</h3>\r\n其实到目前为止，本站的HTTPS化并不完全，像什么IE6啊XP啊之类的老古董可能会不支持的。抱着与时俱进的心态，那些就先不考虑了，以后再做优化吧。来测试一下HTTPS的支持得如何，这是一个测试网站：<a href=\"https://www.ssllabs.com/ssltest/index.html\" target=\"_blank\">SSL Server Test</a>\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/tohttps15.png\"><img class=\"size-full wp-image-786 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps15.png\" alt=\"\" width=\"1074\" height=\"520\" /></a>\r\n\r\n看来评分不高，有空再研究研究这东西，看看如何优化提升。\r\n\r\n&nbsp;', '全站HTTP转HTTPS实践（Wordpress+阿里云）', '', 'publish', 'open', 'closed', '', '%e5%85%a8%e7%ab%99http%e8%bd%achttps%e5%ae%9e%e8%b7%b5%ef%bc%88wordpress%e9%98%bf%e9%87%8c%e4%ba%91%ef%bc%89', '', '', '2017-03-05 02:24:19', '2017-03-04 18:24:19', '', 0, 'https://www.gzpblog.com/?p=785', 0, 'post', '', 11),
(786, 1, '2017-03-05 02:21:21', '2017-03-04 18:21:21', '', 'tohttps15', '', 'inherit', 'open', 'closed', '', 'tohttps15', '', '', '2017-03-05 02:21:21', '2017-03-04 18:21:21', '', 785, 'https://www.gzpblog.com/wp-content/uploads/2017/03/tohttps15.png', 0, 'attachment', 'image/png', 0),
(787, 1, '2017-03-05 02:24:19', '2017-03-04 18:24:19', '<blockquote>首先，讲一下我对于HTTP转HTTPS的想法和做法。\r\n\r\n现在有一些站长是采用保守的策略，考虑到一些其它的因素，保留了HTTP，即HTTP和HTTPS共存。作为一个IT行业的人，我个人的想法是，这种做法，那你转HTTPS就失去了本身的意义了。所以本站转HTTPS，将把HTTP强制转HTTPS，既然要做，那就做彻底，HTTPS是大势所趋，与时俱进。现代浏览器基本都是支持的。\r\n\r\n是的，就是这么简单粗暴。当然啦，这是我个人的做法。</blockquote>\r\n<h3>什么是HTTPS</h3>\r\n其实就是HTTP的安全版。就是在HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。\r\n\r\n&nbsp;\r\n<h3>HTTPS对于站点加载速度的影响</h3>\r\n很多站长不想升级HTTPS，是因为都觉得HTTPS慢！确实，是有这个原因的，HTTPS因为对数据进行加密，所有要处理一些加解密废了些时间。不过，有一点要知道，那就是，HTTPS只有在第一次访问的时候才会慢一点，进入站点后第二次开始就跟HTTP没区别了。举个例子，两个人初次会面，先握个手，然后开始聊天，聊天过程中不会再握手；第二天再见面时，再握个手，然后接下来聊天又不会握手了。HTTPS的缓存期过了之后，才会重新进行一次加密验证，所以对于速度的影响，其实不大。\r\n\r\n如果实在担心速度问题，可以对服务器做一些优化。\r\n\r\n&nbsp;\r\n<h3>申请SSL证书</h3>\r\n现在很多平台，比如阿里云，腾讯云，七牛都可以申请证书了，而且有免费的证书可以申请。像我们这样的个人用户，其实申请免费的就可以了。这里拿阿里云做例子，因为本人是阿里云用户。\r\n在控制台的“安全（云盾）”板块找到“证书服务”，进去之后就是你证书的列表，直接点击购买证书。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/tohttps2.png\"><img class=\"size-full wp-image-777 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps2.png\" alt=\"\" width=\"1234\" height=\"618\" /></a>\r\n\r\n选择免费型DV SSL。直接购买即可。\r\n\r\n买了之后回到证书服务的页面，把该填的信息填了，提交审核就可以。阿里云很方便，我们可以选择自动生成证书的pem和key。如果是万网的域名，还可以选择自动解析。如果是阿里云一站式用户，基本上就是填一些资料提交就行了。\r\n\r\n&nbsp;\r\n<h3>安装证书</h3>\r\n证书下来之后，点击下载。就进入到证书的下载页面，把证书下载下来。阿里云已经提供了各种服务器类型的安装方法。这里我用的是Nginx，以下是我弃用http（80端口）的做法：\r\n找到listen 80要升级为https的server{}配置，修改为：\r\n\r\n[code]\r\nserver {\r\n	    listen 443 ssl;\r\n	    server_name www.gzpblog.com;\r\n	    ssl_certificate   /usr/local/nginx/cert/ggg.pem;\r\n	    ssl_certificate_key  /usr/local/nginx/cert/ggg.key;\r\n	    ssl_session_timeout 5m;\r\n	    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\r\n	    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\r\n	    ssl_prefer_server_ciphers on;\r\n	   \r\n#其它配置省略 \r\n        location / {\r\n           ……\r\n        }\r\n           ……\r\n}\r\n[/code]\r\n\r\n<div>这些内容阿里云有提供的。如果你想仔细研究一下配置也可以。注意一下证书引入的路径，你需要将你下载下来的证书上传到那里，并且引入。配置完这个，重启Nginx，基本上就可以通过Https来访问你的站点了。</div>\r\n<div></div>\r\n<h3>HSTS的启用</h3>\r\nHSTS是一种新的Web安全协议，它的作用，是强制客户端（如浏览器）使用HTTPS与服务器创建连接。在启用前先确定一下这是你需要的，本站全站HTTPS了，所以开启此功能。\r\n\r\n在我们刚才安装证书的配置下面，加上下面这一条：\r\n\r\n[code]\r\nadd_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;;\r\n[/code]\r\n\r\n重启Nginx就可以了。开启HSTS之后，只要用户通过HTTPS访问了你的站点，下次再访问时，就会自动通过HTTPS来访问。\r\n\r\n那么就有一个问题，当有人从来没访问过你的站点时，那他第一次访问，肯定还是通过http，因为此时HSTS还没有通过HTTPS生效。当然，这个问题是有解决办法的，谷歌维护了一个<a href=\"https://hstspreload.org/\" target=\"_blank\">预载入列表</a>，一开始是Chrome使用的，后来大部分浏览器都加入了。这个列表直接告诉浏览器，这个站点支持HTTPS，你得用HTTPS的方式来访问。不过，如果你并不能确定你的网站从此以后一直使用 HTTPS，那还是不要加入这个列表。因为，加入后很难撤销，你可以要求撤销，但是这个数据重新更新到稳定版的 Chrome 同样需要几个月，而别的浏览器是如何处理这个撤销数据的，则无法保证。所以，目前，我采用301跳转的方式处理第一访问的http，给自己留个后路。\r\n\r\n&nbsp;\r\n<h3>301跳转</h3>\r\n转HTTPS之后，还有一些站长比较担心搜索引擎收录。谷歌的支持是比较好的，而国内的好像还不太行。\r\n\r\n不过，百度是有发过公告支持HTTPS的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/tohttps3.png\"><img class=\"size-full wp-image-778 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps3.png\" alt=\"\" width=\"756\" height=\"428\" /></a>\r\n\r\n具体百度做得怎么样，我们就不深究了，但是既然人家都发话了，那我也就不怂了，毕竟我这个博客，对收录还不至于很致命。所以，我干脆直接301跳转，就是这么刚！\r\n\r\n除了以上配置，我还有一些301跳转的配置以强制使用HTTPS：\r\n<div>80端口全部跳转到443：</div>\r\n<div>\r\n\r\n[code]\r\n	server {\r\n	    listen       80;\r\n	    server_name  www.gzpblog.com gzpblog.com;\r\n	    return       301 https://www.gzpblog.com$request_uri;\r\n	}\r\n[/code]\r\n\r\n443端口主域名跳转到www域名：\r\n\r\n[code]\r\n	server {\r\n	    listen 443 ssl;\r\n	    server_name gzpblog.com;\r\n		return      301 https://www.gzpblog.com$request_uri;\r\n	}\r\n[/code]\r\n\r\n<h3>看一下启用HTTPS后的速度</h3>\r\n<div>现在我们的站点已经是启用HTTPS了，可以看到舒服的小绿锁：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps4.png\"><img class=\"size-full wp-image-779 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps4.png\" alt=\"\" width=\"279\" height=\"37\" /></a></div>\r\n<div>\r\n<div>来看一下启用后网站加载速度的影响，首先这个是启用之前：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps5.png\"><img class=\"size-full wp-image-780 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps5.png\" alt=\"\" width=\"529\" height=\"26\" /></a></div>\r\n<div>\r\n<div>然后启用之后是这样的，首次握手的表现：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps6.png\"><img class=\"size-full wp-image-781 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps6.png\" alt=\"\" width=\"500\" height=\"30\" /></a></div>\r\n<div>\r\n<div>可以看到，传输数据爆增，加载速度确实慢下来了，但是当我们再次刷新网页时：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps7.png\"><img class=\"size-full wp-image-782 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps7.png\" alt=\"\" width=\"534\" height=\"23\" /></a>速度又回到之前的水平，只有第一次才收到影响。而实际上在第一次时，从用户体验上来看，差距也不大，并没有太大的页面呈现拖后（是有一点点，但是问题不大啊）。</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h3>全站HTTPS</h3>\r\n<div>接下来，如果我们点进文章页，会发现这种情况，比如在谷歌下，小绿锁变成了感叹号：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps8.png\"><img class=\"size-full wp-image-783 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps8.png\" alt=\"\" width=\"352\" height=\"125\" /></a></div>\r\n<div>在火狐下，出现了黄色感叹号标志：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps9.png\"><img class=\"size-full wp-image-784 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps9.png\" alt=\"\" width=\"367\" height=\"185\" /></a></div>\r\n<div>既然全站HTTPS，这种情况我们是要解决的。这说明我们的文章中的图片，还是http的。接下来处理这个问题。我们先到后台改一下这个链接为https的：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps10.png\"><img class=\"size-full wp-image-771 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps10.png\" alt=\"\" width=\"596\" height=\"104\" /></a></div>\r\n<div>\r\n<div>处理图片这个问题，分两种情况，图片存在本服务器，和图片来自于比如阿里云OSS的服务器。我是存在阿里云的OSS的，加下来是存在OSS的解决方法。</div>\r\n<div>我们先在直接在wordpress的主题中的functions.php中加上：</div>\r\n<div>\r\n\r\n[code]\r\nfunction replacehttp($content){\r\n	if( is_ssl() ){\r\n		$content = str_replace(\'http://files.gzpblog.com/wp/\', \'https://files.gzpblog.com/wp/\', $content);\r\n	}\r\n	return $content;\r\n}\r\nadd_filter(\'the_content\', \'replacehttp\');\r\n[/code]\r\n\r\n<div>修改后，我们文章中的图片地址就变成了https：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps11.png\"><img class=\"size-full wp-image-772 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps11.png\" alt=\"\" width=\"386\" height=\"55\" /></a></div>\r\n<div>\r\n<div>地址这个问题就解决了。但是这些图片链接点进去是这样的：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/tohttps12.png\"><img class=\"size-medium wp-image-773 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps12-300x109.png\" alt=\"\" width=\"300\" height=\"109\" /></a></div>\r\n<div>\r\n<div>说明files.gzpblog.com域名还不支持HTTPS。这是接下来要做的。</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<h3>阿里云OSS服务器支持HTTPS</h3>\r\n首先阿里云OSS是支持https的，如果你是调用类似于bucket.oss-cn-shenzhen.aliyuncs.com域名图片地址时，本身就已经是https了。但是很多时候，我们并不这样做，比如本站就将该域名绑定到了二级域名files.gzpblog.com，用这个域名专门做图片链接。但是，我们的证书是免费证书，就是说不支持泛域名（比如*.gzpblog.com），那么这个时候files.gzpblog.com域名是不支持https的。oss的自定义绑定域名cname，不能https。\r\n\r\n处理这个问题，我们可以配合CDN加速来解决，开启HTTPS加速之后，要收费，其实这个不贵，1G的流量2毛线，个人觉得还行，因为我的流量不会很大；如果不使用这种方法，可以采用反向代理来解决，那就是Nginx改一下配置的事了。\r\n\r\n那现在我们需要为该域名再申请一张证书，申请的方法是一样的，但是这次我们不需要再自己安装证书了。使用云产品推送，直接推送到CDN（如果你是用了CDN加速图片并且是阿里云的OSS服务器，那就可以直接推过去，否则先设置一下加速域名，注意是加速类似files.gzpblog.com这个域名而不是主域名）。\r\n\r\n推送过去之后，我们到CDN的域名列表，点击“管理”，编辑“HTTPS安全加速”：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/tohttps13.png\"><img class=\"size-full wp-image-774 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps13.png\" alt=\"\" width=\"521\" height=\"166\" /></a>\r\n\r\n将这个开启，并且选择证书，注意不要选错选到www的证书去了。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/tohttps14.png\"><img class=\"size-full wp-image-775 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps14.png\" alt=\"\" width=\"504\" height=\"76\" /></a>\r\n\r\n配置完成后，这个域名就支持HTTPS了。到了这一步，基本上全站就支持HTTPS了，点进去基本都是小绿锁，可能你引入http链接的文章会没有。\r\n\r\n&nbsp;\r\n<h3>测试结果</h3>\r\n其实到目前为止，本站的HTTPS化并不完全，像什么IE6啊XP啊之类的老古董可能会不支持的。抱着与时俱进的心态，那些就先不考虑了，以后再做优化吧。来测试一下HTTPS的支持得如何，这是一个测试网站：<a href=\"https://www.ssllabs.com/ssltest/index.html\" target=\"_blank\">SSL Server Test</a>\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/tohttps15.png\"><img class=\"size-full wp-image-786 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/tohttps15.png\" alt=\"\" width=\"1074\" height=\"520\" /></a>\r\n\r\n看来评分不高，有空再研究研究这东西，看看如何优化提升。\r\n\r\n&nbsp;', '全站HTTP转HTTPS实践（Wordpress+阿里云）', '', 'inherit', 'closed', 'closed', '', '785-revision-v1', '', '', '2017-03-05 02:24:19', '2017-03-04 18:24:19', '', 785, 'https://www.gzpblog.com/20170305/787.html', 0, 'revision', '', 0),
(791, 1, '2017-03-11 02:05:27', '2017-03-10 18:05:27', '', 'Apache500_2', '', 'inherit', 'open', 'closed', '', 'apache500_2', '', '', '2017-03-11 02:05:27', '2017-03-10 18:05:27', '', 788, 'https://www.gzpblog.com/wp-content/uploads/2017/03/Apache500_2.png', 0, 'attachment', 'image/png', 0),
(792, 1, '2017-03-11 02:05:28', '2017-03-10 18:05:28', '', 'Apache500_3', '', 'inherit', 'open', 'closed', '', 'apache500_3', '', '', '2017-03-11 02:05:28', '2017-03-10 18:05:28', '', 788, 'https://www.gzpblog.com/wp-content/uploads/2017/03/Apache500_3.png', 0, 'attachment', 'image/png', 0),
(793, 1, '2017-03-11 02:05:29', '2017-03-10 18:05:29', '', 'Apache500_7', '', 'inherit', 'open', 'closed', '', 'apache500_7', '', '', '2017-03-11 02:05:29', '2017-03-10 18:05:29', '', 788, 'https://www.gzpblog.com/wp-content/uploads/2017/03/Apache500_7.png', 0, 'attachment', 'image/png', 0),
(794, 1, '2017-03-11 02:05:30', '2017-03-10 18:05:30', '', 'Apache500_6', '', 'inherit', 'open', 'closed', '', 'apache500_6', '', '', '2017-03-11 02:05:30', '2017-03-10 18:05:30', '', 788, 'https://www.gzpblog.com/wp-content/uploads/2017/03/Apache500_6.png', 0, 'attachment', 'image/png', 0),
(795, 1, '2017-03-11 02:05:31', '2017-03-10 18:05:31', '', 'Apache500_5', '', 'inherit', 'open', 'closed', '', 'apache500_5', '', '', '2017-03-11 02:05:31', '2017-03-10 18:05:31', '', 788, 'https://www.gzpblog.com/wp-content/uploads/2017/03/Apache500_5.png', 0, 'attachment', 'image/png', 0),
(796, 1, '2017-03-11 02:43:56', '2017-03-10 18:43:56', '', 'Apache_logo', '', 'inherit', 'open', 'closed', '', 'apache_logo', '', '', '2017-03-11 02:43:56', '2017-03-10 18:43:56', '', 788, 'https://www.gzpblog.com/wp-content/uploads/2017/03/Apache_logo.jpg', 0, 'attachment', 'image/jpeg', 0),
(797, 1, '2017-03-11 02:43:57', '2017-03-10 18:43:57', '', 'Nginx_logo', '', 'inherit', 'open', 'closed', '', 'nginx_logo', '', '', '2017-03-11 02:43:57', '2017-03-10 18:43:57', '', 788, 'https://www.gzpblog.com/wp-content/uploads/2017/03/Nginx_logo.jpg', 0, 'attachment', 'image/jpeg', 0),
(798, 1, '2017-03-11 02:44:08', '2017-03-10 18:44:08', '<h3>问题描述</h3>\r\n之前在搭建环境的时候出现了一个问题，搭建好了的LAMP环境，程序跑起来之后，总是会出现突然一下子500服务器错误，然后马上又好了的状况；就是间歇性Apache服务端500崩溃。\r\n\r\n&nbsp;\r\n<h3>排查错误</h3>\r\n首先我们可以排除的问题是程序出错，我跑的wordpress，一切是正常的，只是会突然出现这个情况，wordpress没有已知的这种bug，所以不会是程序问题。那么我们来看一下错误日志吧。\r\n\r\n查找Apache的Log记录，出现得最多的记录是：\r\n\r\nPHP Fatal error: Out of memory (allocated 2097152) (tried to allocate 8192 bytes) in 。。。 on line 390\r\n<div>是内存不足导致的！我们来看一下这个服务器是不是连个网站都跑不起来了，这有点尴尬。首先我查看一下php.ini的内存配置：</div>\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_1.png\"><img class=\"size-full wp-image-790 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_1.png\" alt=\"\" width=\"269\" height=\"51\" /></a>\r\n\r\n这个数字没问题，这样配是可以的。\r\n\r\n查看一下Apache的内存占用：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_2.png\"><img class=\"size-full wp-image-791 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_2.png\" alt=\"\" width=\"710\" height=\"104\" /></a>\r\n\r\n单个的httpd进程竟然有200多M，因为之前并没有研究过Apache的内存占用问题，在我看来这有点夸张了，一个小PHP程序不应该这样。于是再仔细查看一下问题所在。\r\n<div>使用top命令，然后shift+M命令看一下CPU和内存占用情况：</div>\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_3.png\"><img class=\"size-full wp-image-792 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_3.png\" alt=\"\" width=\"498\" height=\"201\" /></a>\r\n\r\n最高的那个进程，占掉了26.8%，看来已经找到了原因，就是Apache占用内存太高了，我的服务器只有1G内存。查了一下资料:\r\n\r\nApache中，影响apache性能的几个重要参数有：\r\n<blockquote>\r\n<div>KeepAlive　是否允许持续连接</div>\r\n<div>MaxKeepAliveRequests　允许的持续连接的最大数</div>\r\n<div>KeepAliveTimeout　持续连接在没有请求多少秒后切断</div>\r\n<div>StartServers 最初启动时启动多少个服务器进程</div>\r\n<div>MinSpareServers 空闲服务器进程的最小数</div>\r\n<div>MaxSpareServers 空闲服务器进程的最大数</div>\r\n<div>MaxClients 同时处理的请求数（最重要的参数，要少于ServerLimit)</div>\r\n<div>MaxRequestsPerChild 每个子进程处理的最大请求数</div></blockquote>\r\n<div>网上的资料都说锅在MaxRequestsPerChild这个配置上，于是我尝试了一下修改这项配置：</div>\r\n\r\n[code]\r\n&amp;lt;IfModule mpm_prefork_module&amp;gt;\r\n    MaxRequestsPerChild 0\r\n&amp;lt;/IfModule&amp;gt;\r\n[/code]\r\n\r\n<div>改为</div>\r\n\r\n[code]\r\n&amp;lt;IfModule mpm_prefork_module&amp;gt;\r\n    MaxRequestsPerChild 500\r\n&amp;lt;/IfModule&amp;gt;\r\n[/code]\r\n\r\n<div>\r\n<div>重新启动Apache服务，来看一下：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_4.png\"><img class=\"size-full wp-image-789 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_4.png\" alt=\"\" width=\"480\" height=\"111\" /></a></div>\r\n<div>内存占用明显降低。但是过了一段时间之后我们再来看：</div>\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_5.png\"><img class=\"size-full wp-image-795 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_5.png\" alt=\"\" width=\"482\" height=\"126\" /></a>\r\n\r\n<strong>apache进程在使用内存时，是“渐长”的。也就是说，直到这个进程死掉，使用内存的数量是一直增长而不会减少的。</strong>\r\n\r\n所以重点在于，<strong>什么时候杀死堆积到一定内存占用的Apache进程？</strong>\r\n<div>在上一张图的的最大内存占用的进程由26%到30%多的时候。当我再次刷新页面时，报500错误了！这时候我就想，是不是最上面的那个进程，被杀掉了，然后报了500错误。看一下占用，果然，最大的那个没了，在下面产生了一个新的：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_6.png\"><img class=\"size-full wp-image-794 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_6.png\" alt=\"\" width=\"484\" height=\"97\" /></a></div>\r\n<div>\r\n<div>所以，<strong>报500的原因其实是，进程突然被杀掉了</strong>！</div>\r\n<blockquote>\r\n<div>MaxRequestsPerChild参数详解\r\n这个参数是说，apache进程在处理了多少个请求之后，必须退出，重新开始，以免在处理中的内存问题。\r\n对于php脚本来说，把这个参数设置的小一些是有好处的，可以避免程序使用的内存持续增长对apache带来的压力：让这个参数定期释放内存，因为php是在脚本执行完毕后，自动释放只用的资源（内存）的。\r\n比如设置为50？如果太小的话，重新产生一个apache进程也是要消耗资源的，这是一个平衡问题。</div>\r\n<div>最好的设置方法是根据服务器内存情况设置一个合理的值。</div></blockquote>\r\n<div>那这样来看的话，MaxRequestsPerChild参数其实越大越好（如果服务器够强），甚至是原先的0（不限制），这样就不会无端端被杀掉进程；而服务器内存比较低的情况下，设置一个比较低的值是可以防止总内存值溢出；最好的做法是根据服务器情况设置一个合理的值。</div>\r\n<div>很明显MaxRequestsPerChild并不是我们现在所需要的，那么这个问题该怎么解决呢？</div>\r\n<div></div>\r\n<div>接下来发现了KeepAliveTimeout 这个参数：</div>\r\n<blockquote>\r\n<div>KeepAliveTimeout 这个参数决定了，在什么都不做之前，一个http进程能够等待多长时间？设想一下，如果keepalive设置为on，而 keepalivetimeout设置为一个比较大的数字，apache占用内存会很快的增长。这是因为，一个apache进程完成了一个任务（并达到了一定的内存占用，想一下“渐进”模式），并不会马上退出，而是等待一个keepalivetimeout时间。假设用户的链接请求持续不断的到来，则积累起来的无用的apache进程就会相当多，直到timeout，这些进程才会被杀死。\r\n但是，keepalive的确对于静态的文件，比如图像文件的传送是很有效的，因此，keepalive要设置为on，（off）但是keepalvietimeout要设置的小些。</div></blockquote>\r\n<div>这似乎正是我们所要的。根据这个描述，我再次修改了一下配置文件，这次情况好多了，虽然有所改善，但是还是会存在500错误的问题。</div>\r\n<div>目前不知道是不是哪一步配置出了问题，还是服务器的内存的确太少，这个间歇性错误似乎无可避免，只能降低其频率。</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>我最终的解决方案，其实很简单，换Nginx，看一下nginx的表现：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_7.png\"><img class=\"size-full wp-image-793 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_7.png\" alt=\"\" width=\"486\" height=\"124\" /></a></div>\r\n<div>php-fpm监控php-cgi的方式，非常高效，占用内存非常的少，而且很稳定！突然明白了为什么Nginx越来越受欢迎了。</div>', 'Apache间歇性500服务器错误探究', '', 'inherit', 'closed', 'closed', '', '788-revision-v1', '', '', '2017-03-11 02:44:08', '2017-03-10 18:44:08', '', 788, 'https://www.gzpblog.com/20170311/798.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(799, 1, '2017-03-11 02:45:06', '2017-03-10 18:45:06', '<h3>问题描述</h3>\r\n之前在搭建环境的时候出现了一个问题，搭建好了的LAMP环境，程序跑起来之后，总是会出现突然一下子500服务器错误，然后马上又好了的状况；就是间歇性Apache服务端500崩溃。\r\n\r\n&nbsp;\r\n<h3>排查错误</h3>\r\n首先我们可以排除的问题是程序出错，我跑的wordpress，一切是正常的，只是会突然出现这个情况，wordpress没有已知的这种bug，所以不会是程序问题。那么我们来看一下错误日志吧。\r\n\r\n查找Apache的Log记录，出现得最多的记录是：\r\n\r\nPHP Fatal error: Out of memory (allocated 2097152) (tried to allocate 8192 bytes) in 。。。 on line 390\r\n<div>是内存不足导致的！我们来看一下这个服务器是不是连个网站都跑不起来了，这有点尴尬。首先我查看一下php.ini的内存配置：</div>\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_1.png\"><img class=\"size-full wp-image-790 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_1.png\" alt=\"\" width=\"269\" height=\"51\" /></a>\r\n\r\n这个数字没问题，这样配是可以的。\r\n\r\n查看一下Apache的内存占用：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_2.png\"><img class=\"size-full wp-image-791 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_2.png\" alt=\"\" width=\"710\" height=\"104\" /></a>\r\n\r\n单个的httpd进程竟然有200多M，因为之前并没有研究过Apache的内存占用问题，在我看来这有点夸张了，一个小PHP程序不应该这样。于是再仔细查看一下问题所在。\r\n<div>使用top命令，然后shift+M命令看一下CPU和内存占用情况：</div>\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_3.png\"><img class=\"size-full wp-image-792 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_3.png\" alt=\"\" width=\"498\" height=\"201\" /></a>\r\n\r\n最高的那个进程，占掉了26.8%，看来已经找到了原因，就是Apache占用内存太高了，我的服务器只有1G内存。查了一下资料:\r\n\r\nApache中，影响apache性能的几个重要参数有：\r\n<blockquote>\r\n<div>KeepAlive　是否允许持续连接</div>\r\n<div>MaxKeepAliveRequests　允许的持续连接的最大数</div>\r\n<div>KeepAliveTimeout　持续连接在没有请求多少秒后切断</div>\r\n<div>StartServers 最初启动时启动多少个服务器进程</div>\r\n<div>MinSpareServers 空闲服务器进程的最小数</div>\r\n<div>MaxSpareServers 空闲服务器进程的最大数</div>\r\n<div>MaxClients 同时处理的请求数（最重要的参数，要少于ServerLimit)</div>\r\n<div>MaxRequestsPerChild 每个子进程处理的最大请求数</div></blockquote>\r\n<div>网上的资料都说锅在MaxRequestsPerChild这个配置上，于是我尝试了一下修改这项配置：</div>\r\n\r\n[code]\r\n&lt;IfModule mpm_prefork_module&gt;\r\nMaxRequestsPerChild 0\r\n&lt;/IfModule&gt;\r\n[/code]\r\n\r\n<div>改为</div>\r\n\r\n[code]\r\n&lt;IfModule mpm_prefork_module&gt;\r\nMaxRequestsPerChild 500\r\n&lt;/IfModule&gt;\r\n[/code]\r\n\r\n<div>\r\n<div>重新启动Apache服务，来看一下：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_4.png\"><img class=\"size-full wp-image-789 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_4.png\" alt=\"\" width=\"480\" height=\"111\" /></a></div>\r\n<div>内存占用明显降低。但是过了一段时间之后我们再来看：</div>\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_5.png\"><img class=\"size-full wp-image-795 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_5.png\" alt=\"\" width=\"482\" height=\"126\" /></a>\r\n\r\n<strong>apache进程在使用内存时，是“渐长”的。也就是说，直到这个进程死掉，使用内存的数量是一直增长而不会减少的。</strong>\r\n\r\n所以重点在于，<strong>什么时候杀死堆积到一定内存占用的Apache进程？</strong>\r\n<div>在上一张图的的最大内存占用的进程由26%到30%多的时候。当我再次刷新页面时，报500错误了！这时候我就想，是不是最上面的那个进程，被杀掉了，然后报了500错误。看一下占用，果然，最大的那个没了，在下面产生了一个新的：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_6.png\"><img class=\"size-full wp-image-794 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_6.png\" alt=\"\" width=\"484\" height=\"97\" /></a></div>\r\n<div>\r\n<div>所以，<strong>报500的原因其实是，进程突然被杀掉了</strong>！</div>\r\n<blockquote>\r\n<div>MaxRequestsPerChild参数详解\r\n这个参数是说，apache进程在处理了多少个请求之后，必须退出，重新开始，以免在处理中的内存问题。\r\n对于php脚本来说，把这个参数设置的小一些是有好处的，可以避免程序使用的内存持续增长对apache带来的压力：让这个参数定期释放内存，因为php是在脚本执行完毕后，自动释放只用的资源（内存）的。\r\n比如设置为50？如果太小的话，重新产生一个apache进程也是要消耗资源的，这是一个平衡问题。</div>\r\n<div>最好的设置方法是根据服务器内存情况设置一个合理的值。</div></blockquote>\r\n<div>那这样来看的话，MaxRequestsPerChild参数其实越大越好（如果服务器够强），甚至是原先的0（不限制），这样就不会无端端被杀掉进程；而服务器内存比较低的情况下，设置一个比较低的值是可以防止总内存值溢出；最好的做法是根据服务器情况设置一个合理的值。</div>\r\n<div>很明显MaxRequestsPerChild并不是我们现在所需要的，那么这个问题该怎么解决呢？</div>\r\n<div></div>\r\n<div>接下来发现了KeepAliveTimeout 这个参数：</div>\r\n<blockquote>\r\n<div>KeepAliveTimeout 这个参数决定了，在什么都不做之前，一个http进程能够等待多长时间？设想一下，如果keepalive设置为on，而 keepalivetimeout设置为一个比较大的数字，apache占用内存会很快的增长。这是因为，一个apache进程完成了一个任务（并达到了一定的内存占用，想一下“渐进”模式），并不会马上退出，而是等待一个keepalivetimeout时间。假设用户的链接请求持续不断的到来，则积累起来的无用的apache进程就会相当多，直到timeout，这些进程才会被杀死。\r\n但是，keepalive的确对于静态的文件，比如图像文件的传送是很有效的，因此，keepalive要设置为on，（off）但是keepalvietimeout要设置的小些。</div></blockquote>\r\n<div>这似乎正是我们所要的。根据这个描述，我再次修改了一下配置文件，这次情况好多了，虽然有所改善，但是还是会存在500错误的问题。</div>\r\n<div>目前不知道是不是哪一步配置出了问题，还是服务器的内存的确太少，这个间歇性错误似乎无可避免，只能降低其频率。</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>我最终的解决方案，其实很简单，换Nginx，看一下nginx的表现：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/Apache500_7.png\"><img class=\"size-full wp-image-793 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/Apache500_7.png\" alt=\"\" width=\"486\" height=\"124\" /></a></div>\r\n<div>php-fpm监控php-cgi的方式，非常高效，占用内存非常的少，而且很稳定！突然明白了为什么Nginx越来越受欢迎了。</div>', 'Apache间歇性500服务器错误探究', '', 'inherit', 'closed', 'closed', '', '788-revision-v1', '', '', '2017-03-11 02:45:06', '2017-03-10 18:45:06', '', 788, 'https://www.gzpblog.com/20170311/799.html', 0, 'revision', '', 0),
(974, 1, '2017-06-01 10:02:56', '2017-06-01 02:02:56', '', '链接收藏', '', 'publish', 'closed', 'closed', '', 'collectionlink', '', '', '2017-06-01 10:08:04', '2017-06-01 02:08:04', '', 0, 'https://www.gzpblog.com/?page_id=974', 0, 'page', '', 0),
(802, 1, '2017-03-14 09:39:27', '2017-03-14 01:39:27', '<blockquote><strong>写在前面</strong>\r\n\r\n对于新手的一点建议：\r\n<ul>\r\n 	<li> 最好熟悉一下linux 的基本命令，vim的常用命令</li>\r\n 	<li>千万不要无脑复制，先看一下命令，特别是路径要注意</li>\r\n 	<li>学会排查错误</li>\r\n</ul>\r\n本篇安装的软件版本为：\r\n<ul>\r\n 	<li>Linux：Centos6.8</li>\r\n 	<li>Nginx：1.10.3</li>\r\n 	<li>MySQL：5.7.17</li>\r\n 	<li>PHP：7.0.16</li>\r\n</ul>\r\n</blockquote>\r\n最近研究了Linux系统下的PHP环境搭建，个人感觉最好最好不要用yum默认的程序包安装，因为版本都比较低，下载最新的稳定版自行安装比较好。现在网上教程很多，之所以还记这篇，原因有一点，当你重复网上的教程自行安装时，90%还是会出现各种各样的问题，因为你可能linux的系统版本不同，你想装的软件版本不同，安装的方法不同，你下错了安装包的版本，还有其它乱七八糟的。举个例，比如你看着5.6的mysql安装教程，装5.7的，你感觉没问题，但是事实就是，5.7的不一样了！而且网上还没有新的这方面内容，不好找，这就需要你去摸索了，亲身经历啊。这里面，Niginx感觉最好配，MySQL最坑。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP1.png\"><img class=\"size-full wp-image-732 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP1.png\" alt=\"\" width=\"513\" height=\"218\" /></a>\r\n<h2>一 准备工作</h2>\r\n<h3>1. 关闭SELINUX</h3>\r\n修改配置文件，重启服务后永久生效。\r\n# sed -i \'s/SELINUX=.*/SELINUX=disabled/g\' /etc/selinux/config\r\n命令行设置立即生效。\r\n# setenforce 0\r\n<h3>2. 如果是阿里云ECS用户，安全组设置中开启80端口方便调试。</h3>\r\n&nbsp;\r\n<h2>二 安装Nginx</h2>\r\n<h3>1. 下载源码包</h3>\r\n上Nginx官网，复制最新稳定版的下载地址过来，然后用wget下载（接下来需要下载安装包的都可以用wget）：\r\n\r\n# cd /usr/local/src\r\n# wget http://nginx.org/download/nginx-1.10.3.tar.gz\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP2.png\"><img class=\"size-full wp-image-733 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP2.png\" alt=\"\" width=\"895\" height=\"59\" /></a>\r\n\r\n下载完成的状态基本都是以下这样的：\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP3.png\"><img class=\"size-full wp-image-734 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP3.png\" alt=\"\" width=\"1219\" height=\"280\" /></a>\r\n<h3>2. 进行解压编译</h3>\r\n# tar xvf nginx-1.10.3.tar.gz\r\n# yum groupinstall \"Development tools\"\r\n# yum -y install gcc wget gcc-c++ automake autoconf libtool libxml2-devel libxslt-devel perl-devel perl-ExtUtils-Embed pcre-devel openssl-devel\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP4.png\"><img class=\"alignnone size-full wp-image-735\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP4.png\" alt=\"\" width=\"1260\" height=\"586\" /></a>\r\n\r\n执行完成。\r\n\r\n进入解压后的nginx-1.10.3文件夹：\r\ncd /usr/local/src/nginx-1.10.3\r\n\r\n执行以下语句：\r\n\r\n[plain]\r\n\r\n./configure \\\r\n--prefix=/usr/local/nginx \\\r\n--sbin-path=/usr/sbin/nginx \\\r\n--conf-path=/etc/nginx/nginx.conf \\\r\n--error-log-path=/var/log/nginx/error.log \\\r\n--http-log-path=/var/log/nginx/access.log \\\r\n--pid-path=/var/run/nginx.pid \\\r\n--lock-path=/var/run/nginx.lock \\\r\n--http-client-body-temp-path=/var/tmp/nginx/client \\\r\n--http-proxy-temp-path=/var/tmp/nginx/proxy \\\r\n--http-fastcgi-temp-path=/var/tmp/nginx/fcgi \\\r\n--http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \\\r\n--http-scgi-temp-path=/var/tmp/nginx/scgi \\\r\n--user=nginx \\\r\n--group=nginx \\\r\n--with-pcre \\\r\n--with-http_v2_module \\\r\n--with-http_ssl_module \\\r\n--with-http_realip_module \\\r\n--with-http_addition_module \\\r\n--with-http_sub_module \\\r\n--with-http_dav_module \\\r\n--with-http_flv_module \\\r\n--with-http_mp4_module \\\r\n--with-http_gunzip_module \\\r\n--with-http_gzip_static_module \\\r\n--with-http_random_index_module \\\r\n--with-http_secure_link_module \\\r\n--with-http_stub_status_module \\\r\n--with-http_auth_request_module \\\r\n--with-mail \\\r\n--with-mail_ssl_module \\\r\n--with-file-aio \\\r\n--with-ipv6 \\\r\n--with-http_v2_module \\\r\n--with-threads \\\r\n--with-stream \\\r\n--with-stream_ssl_module\r\n\r\n[/plain]\r\n\r\n完成后执行编译：\r\n# make &amp;&amp; make install\r\n# mkdir -pv /var/tmp/nginx/client\r\n<h3>3. 添加SysV启动脚本。</h3>\r\n用vim编辑脚本：\r\n# vim /etc/init.d/nginx\r\n<div>写入以下内容：</div>\r\n\r\n[plain]\r\n#!/bin/sh \r\n# \r\n# nginx - this script starts and stops the nginx daemon \r\n# \r\n# chkconfig:   - 85 15 \r\n# description: Nginx is an HTTP(S) server, HTTP(S) reverse \\ \r\n#               proxy and IMAP/POP3 proxy server \r\n# processname: nginx \r\n# config:      /etc/nginx/nginx.conf \r\n# config:      /etc/sysconfig/nginx \r\n# pidfile:     /var/run/nginx.pid \r\n# Source function library. \r\n. /etc/rc.d/init.d/functions\r\n# Source networking configuration. \r\n. /etc/sysconfig/network\r\n# Check that networking is up. \r\n[ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; exit 0\r\nnginx=&quot;/usr/sbin/nginx&quot;\r\nprog=$(basename $nginx)\r\nNGINX_CONF_FILE=&quot;/etc/nginx/nginx.conf&quot;\r\n[ -f /etc/sysconfig/nginx ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; . /etc/sysconfig/nginx\r\nlockfile=/var/lock/subsys/nginx\r\nstart() {\r\n    [ -x $nginx ] || exit 5\r\n    [ -f $NGINX_CONF_FILE ] || exit 6\r\n    echo -n $&quot;Starting $prog: &quot; \r\n    daemon $nginx -c $NGINX_CONF_FILE\r\n    retval=$?\r\n    echo \r\n    [ $retval -eq 0 ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; touch $lockfile\r\n    return $retval\r\n}\r\nstop() {\r\n    echo -n $&quot;Stopping $prog: &quot; \r\n    killproc $prog -QUIT\r\n    retval=$?\r\n    echo \r\n    [ $retval -eq 0 ] &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; rm -f $lockfile\r\n    return $retval\r\nkillall -9 nginx\r\n}\r\nrestart() {\r\n    configtest || return $?\r\n    stop\r\n    sleep 1\r\n    start\r\n}\r\nreload() {\r\n    configtest || return $?\r\n    echo -n $&quot;Reloading $prog: &quot; \r\n    killproc $nginx -HUP\r\nRETVAL=$?\r\n    echo \r\n}\r\nforce_reload() {\r\n    restart\r\n}\r\nconfigtest() {\r\n$nginx -t -c $NGINX_CONF_FILE\r\n}\r\nrh_status() {\r\n    status $prog\r\n}\r\nrh_status_q() {\r\n    rh_status &amp;amp;amp;amp;gt;/dev/null 2&amp;amp;amp;amp;gt;&amp;amp;amp;amp;amp;1\r\n}\r\ncase &quot;$1&quot; in\r\n    start)\r\n        rh_status_q &amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp; exit 0\r\n    $1\r\n        ;;\r\n    stop)\r\n        rh_status_q || exit 0\r\n        $1\r\n        ;;\r\n    restart|configtest)\r\n        $1\r\n        ;;\r\n    reload)\r\n        rh_status_q || exit 7\r\n        $1\r\n        ;;\r\n    force-reload)\r\n        force_reload\r\n        ;;\r\n    status)\r\n        rh_status\r\n        ;;\r\n    condrestart|try-restart)\r\n        rh_status_q || exit 0\r\n            ;;\r\n    *)\r\n      echo $&quot;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&quot; \r\n        exit 2\r\nesac\r\n[/plain]\r\n\r\n保存退出（按:wq!）；可能你得稍微查一下vim的一些命令，不然操作时可能会出现一点小问题。\r\n赋予脚本执行权限：\r\n# chmod +x /etc/init.d/nginx\r\n\r\n添加至服务管理列表，设置开机自启：\r\n# chkconfig --add nginx\r\n# chkconfig nginx on\r\n<h3>4. 启动服务。</h3>\r\n# service nginx start\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/03/LNMP6.png\"><img class=\"size-full wp-image-736 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP6.png\" alt=\"\" width=\"576\" height=\"238\" /></a>\r\n<div>出现这玩意说明成功了！</div>\r\n<div></div>\r\n<div></div>\r\n<blockquote>\r\n<div>注：如果报错 [emerg]: getpwnam(“nginx”) failed ；</div>\r\n<div>解决方法：</div>\r\n<div># useradd -s /sbin/nologin -M nginx</div>\r\n<div># id nginx</div></blockquote>\r\n<div></div>\r\n<div>\r\n<h2>三 安装mysql</h2>\r\n<h3>1. 版本选择</h3>\r\n<div>在安装之前必须明白一件事情，mysql有很多种安装方式，每种不一样，不要弄混了。</div>\r\n<div>比如源码编译安装（mysql-5.7.17.tar.gz），二进制安装（mysql-5.7.17-linux-glibc2.5-i686.tar），nmp安装（最简单的）。这里我们用源码自己编译安装。</div>\r\n<h3>2. 准备编译环境</h3>\r\n<div># yum groupinstall \"Server Platform Development\" \"Development tools\" -y</div>\r\n<div># yum install cmake -y</div>\r\n<div>cmake在现在的版本是必须要安装的，你可以下载camke之后编译，也可以直接yum安装。接下来的编译过程如果报错缺少什么就补什么。</div>\r\n<div></div>\r\n<h3>3. 准备mysql数据库存放目录</h3>\r\n<div># mkdir /mnt/data</div>\r\n<div># groupadd -r mysql</div>\r\n<div># useradd -r -g mysql -s /sbin/nologin mysql</div>\r\n<div># id mysql</div>\r\n<div></div>\r\n<h3>4. 更改数据目录权限。</h3>\r\n<div># chown -R mysql:mysql /mnt/data</div>\r\n<div></div>\r\n<h3>5. 下载并解压编译官网下载的稳定版的源码包。</h3>\r\n<div>在下载的时候注意一下版本，下载对应的版本。我们源码编译，要下载长这样的安装包：mysql-5.7.17.tar.gz，同时在安装的时候我们需要boost库，5.7需要1.59版本的库；你可以下载boost库然后编译boost库，或者像我一样，下载带有boost库的mysql版本。</div>\r\n<div>开始解压编译：</div>\r\n<div>\r\n\r\n[plain]\r\n# tar xvf mysql-boost-5.7.17.tar.gz -C /usr/local/src\r\n# cd /usr/local/src/mysql-5.7.17\r\n# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\\r\n-DMYSQL_DATADIR=/mnt/data \\\r\n-DSYSCONFDIR=/etc \\\r\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\r\n-DWITH_ARCHIVE_STORAGE_ENGINE=1 \\\r\n-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\\r\n-DWITH_READLINE=1 \\\r\n-DWITH_SSL=system \\\r\n-DWITH_ZLIB=system \\\r\n-DWITH_LIBWRAP=0 \\\r\n-DMYSQL_TCP_PORT=3306 \\\r\n-DMYSQL_UNIX_ADDR=/tmp/mysql.sock \\\r\n-DDEFAULT_CHARSET=utf8 \\\r\n-DDEFAULT_COLLATION=utf8_general_ci\r\n-DDOWNLOAD_BOOST=1 \\\r\n-DWITH_BOOST=/usr/local/mysql/boost/boost_1_59_0 \\\r\n# make &amp;&amp; make install\r\n[/plain]\r\n\r\n</div>\r\n</div>\r\n<div>\r\n<h3>6. 修改安装目录的权限属组</h3>\r\n<div># chown -R mysql:mysql /usr/local/mysql/</div>\r\n</div>\r\n<div>\r\n<h3>7. 初始化数据库。</h3>\r\n<div># /usr/local/mysql/bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/mnt/data/</div>\r\n<div>需要注意这里是mysql5.7的初始化命令，而5.7以下的都是用：</div>\r\n<div># /usr/local/mysql/scripts/mysql_install_db --user=mysql --datadir=/mnt/data/</div>\r\n<div></div>\r\n<div>在初始化成功之后，5.7的initial命令会产生一个随机的root登录密码，你要用这个密码登录，然后修改（必须修改生成的随机密码不然无法后续操作）。在最后有一个类似这样的密码：</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP7.png\"><img class=\"alignnone size-full wp-image-737\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP7.png\" alt=\"\" width=\"233\" height=\"45\" /></a></div>\r\n<div>\r\n<div></div>\r\n<h3>8. 复制配置文件</h3>\r\n<div># cp support-files/my-default.cnf /etc/my.cnf</div>\r\n<div>这里又有一点要注意：mysql5.7配置文件需要修改my.cnf关键配置， mysql5.7之前默认配置文件中是有配置项的，不用手动修改。以下为配置，根据实际情况修改：</div>\r\n<div>\r\n\r\n[plain]\r\n[mysqld]\r\nbasedir = /usr/local/mysql\r\ndatadir = /mnt/data\r\nport = 3306\r\nsocket = /Ultrapower/test/mysql/tmp/mysql.sock\r\n\r\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\r\n[client]\r\nsocket = /Ultrapower/test/mysql/tmp/mysql.sock\r\n[/plain]\r\n\r\n</div>\r\n<div>如果添加[client]下 的内容，注意sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES要放在[mysqld]下。</div>\r\n<div>如果报错tmp目录不错在，到对应的地方去创建目录，然后创建后要赋予mysql权限，chown -R mysql:mysql tmp。</div>\r\n<div></div>\r\n<h3>9. 设置开机启动</h3>\r\n<div># cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</div>\r\n<div># chmod +x /etc/init.d/mysql</div>\r\n<div>注册为开机启动服务：</div>\r\n<div># chkconfig mysqld on</div>\r\n<div># chkconfig --add mysqld</div>\r\n<div>查看是否设置成功：</div>\r\n<div># chkconfig --list mysql</div>\r\n<div></div>\r\n<h3>10. 设置PATH环境变量。</h3>\r\n<div># echo \"export PATH=$PATH:/usr/local/mysql/bin\" &gt; /etc/profile.d/mysql.sh</div>\r\n<div># source /etc/profile.d/mysql.sh</div>\r\n<div></div>\r\n<h3>11. 启动服务</h3>\r\n<div># service mysqld start</div>\r\n</div>\r\n</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP8.png\"><img class=\"size-full wp-image-738 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP8.png\" alt=\"\" width=\"726\" height=\"578\" /></a></div>\r\n<div>\r\n<div>这样基本上，这个mysql就装好了。</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h3>12. 登录mysql并修改密码</h3>\r\n<div>mysql -uroot -p生成的密码</div>\r\n<div>执行修改密码：</div>\r\n<div>alter user \'root\'@\'localhost\' identified by \'newpassword\';</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h2>四 安装php-fpm</h2>\r\n<h3>1. 安装依赖包:</h3>\r\n<div>yum install libmcrypt libmcrypt-devel mhash mhash-devel libxml2 libxml2-devel bzip2 bzip2-devel</div>\r\n<div>这里还漏了几个，如果报错了提示缺少了什么就yum补上。</div>\r\n<div></div>\r\n<h3>2. 到官网下载源码包后，开始编译安装：</h3>\r\n<div>\r\n\r\n[plain]\r\n# tar xvf php-7.0.16.tar.bz2 -C /usr/local/src\r\n# cd /usr/local/src/php-7.0.16\r\n执行下面的配置文件：\r\n# ./configure --prefix=/usr/local/php \\\r\n--with-config-file-scan-dir=/etc/php.d \\\r\n--with-config-file-path=/etc \\\r\n--with-mysql=/usr/local/mysql \\\r\n--with-mysqli=/usr/local/mysql/bin/mysql_config \\\r\n--enable-fpm \\\r\n--enable-opcache \\\r\n--disable-fileinfo \\\r\n--with-jpeg-dir \\\r\n--with-iconv-dir=/usr/local \\\r\n--with-freetype-dir \\\r\n--with-png-dir \\\r\n--with-zlib \\\r\n--with-libxml-dir=/usr \\\r\n--enable-xml \\\r\n--enable-bcmath \\\r\n--enable-shmop \\\r\n--enable-exif \\\r\n--with-curl \\\r\n--enable-sysvsem \\\r\n--enable-inline-optimization \\\r\n--enable-mbregex \\\r\n--enable-inline-optimization \\\r\n--enable-mbstring \\\r\n--with-mcrypt \\\r\n--with-gd \\\r\n--enable-gd-native-ttf \\\r\n--with-openssl \\\r\n--with-mhash \\\r\n--enable-pcntl \\\r\n--enable-sockets \\\r\n--with-xmlrpc \\\r\n--enable-ftp \\\r\n--with-gettext \\\r\n--enable-zip \\\r\n--enable-soap \\\r\n--with-bz2\r\n[/plain]\r\n\r\n执行以上的配置，如果出现下面这样的license，才是正确的，才可以开始编译，如果出问题，就解决，一般是少了什么库。\r\n<div>（注意将来可能会用到的一些库，先正确地编译好以免以后再来编就麻烦了，比如openssl, gd, mbstring, sockets, opcache等等）</div>\r\n</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP9.png\"><img class=\"size-full wp-image-739 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP9.png\" alt=\"\" width=\"715\" height=\"673\" /></a></div>\r\n<div>\r\n<div>执行编译：</div>\r\n<div># make &amp;&amp; make install</div>\r\n<div></div>\r\n<h3>3. 添加php和php-fpm配置文件。</h3>\r\n<div># cp /usr/local/src/php-7.0.16/php.ini-production /etc/php.ini</div>\r\n<div># cd /usr/local/php/etc/</div>\r\n<div># cp php-fpm.conf.default php-fpm.conf</div>\r\n<div># sed -i \'s@;pid = run/php-fpm.pid@pid = /usr/local/php/var/run/php-fpm.pid@\' php-fpm.conf</div>\r\n<div></div>\r\n<h3>4. 添加php-fpm启动脚本。</h3>\r\n<div># cp /usr/local/src/php-7.0.16/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</div>\r\n<div># chmod +x /etc/init.d/php-fpm</div>\r\n<div></div>\r\n<h3>5. 添加php-fpm至服务列表并设置开机自启。</h3>\r\n<div># chkconfig --add php-fpm</div>\r\n<div># chkconfig --list php-fpm</div>\r\n<div># chkconfig php-fpm on</div>\r\n<div></div>\r\n<h3>6. 启动服务。</h3>\r\n<div># service php-fpm start</div>\r\n<div></div>\r\n<div><strong>注：</strong></div>\r\n<div>启动时如出现错误：WARNING: Nothing matches the include pattern \'/usr/local/etc/php-fpm.d/*.conf\' from /usr/local/etc/php-fpm.conf at line 125.</div>\r\n<div>ERROR:. No pool defined at least one pool section must be specified in config file</div>\r\n<div>ERROR: failed to post process the configuration</div>\r\n<div>ERROR: FPM initialization failed</div>\r\n<div>解决：到指定目录执行cp www.conf.default www.conf</div>\r\n<div></div>\r\n<h3>7. 添加nginx对fastcgi的支持，</h3>\r\n首先备份默认的配置文件。\r\n\r\n# cp /etc/nginx/nginx.conf /etc/nginx/nginx.confbak\r\n\r\n# cp /etc/nginx/nginx.conf.default /etc/nginx/nginx.conf\r\n<div>编辑/etc/nginx/nginx.conf，在所支持的主页面格式中添加php格式的主页，类似如下：</div>\r\n<div>\r\n\r\n[plain]\r\nlocation / {\r\n    root /usr/local/nginx/html;\r\n    index index.php index.html index.htm;\r\n}\r\n[/plain]\r\n\r\n</div>\r\n<div>取消以下内容前面的注释：</div>\r\n<div>\r\n\r\n[plain]\r\nlocation ~ \\.php$ {\r\n    root /usr/local/nginx/html;\r\n    fastcgi_pass 127.0.0.1:9000;\r\n    fastcgi_index index.php;\r\n    fastcgi_param SCRIPT_FILENAME /usr/local/nginx/html/$fastcgi_script_name;\r\n    include fastcgi_params;\r\n}\r\n[/plain]\r\n\r\n</div>\r\n<div></div>\r\n<h3>8. 重启nginx</h3>\r\n<div># service nginx reload</div>\r\n<div></div>\r\n<h3>9. 测试是否成功</h3>\r\n<div>在/usr/local/nginx/html/新建index.php的测试页面，内容如下：</div>\r\n<div>&lt;?php</div>\r\n<div>phpinfo();</div>\r\n<div>?&gt;</div>\r\n<div><a href=\"http://files.gzpblog.com/wp/2017/03/LNMP10.png\"><img class=\"size-full wp-image-740 aligncenter\" src=\"http://files.gzpblog.com/wp/2017/03/LNMP10.png\" alt=\"\" width=\"959\" height=\"911\" /></a></div>\r\n<div>\r\n<div>如果出现这个熟悉的界面，说明就大功告成了！Linux下一个基本的LNMP就搭建完毕了。</div>\r\n</div>\r\n</div>\r\n</div>', 'Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）', '', 'inherit', 'closed', 'closed', '', '731-revision-v1', '', '', '2017-03-14 09:39:27', '2017-03-14 01:39:27', '', 731, 'https://www.gzpblog.com/20170314/802.html', 0, 'revision', '', 0),
(804, 1, '2017-03-16 15:24:42', '2017-03-16 07:24:42', '<div>既然上了HTTPS，就肯定得上HTTP2了，HTTP2的速度上升了不止一个档次，让网站飞起来吧。</div>\r\n<div>升级到HTTP/2其实很简单，我们只需要注意这几点：</div>\r\n<ol>\r\n 	<li>HTTP2现在需要HTTPS</li>\r\n 	<li>HTTP2要求Nginx版本是1.9.5以上</li>\r\n 	<li>openssl版本要求1.0.2</li>\r\n 	<li>修改Nginx的配置：在listen 443 ssl 后面加上http2 default_server就行了</li>\r\n</ol>\r\n理论上，这样就可以了。但是配置之后通过浏览器请求头看到http的请求还是http1.1的。\r\n\r\n于是开启了我的HTTP2折腾之旅。\r\n<h2>什么是NPN和ALPN?</h2>\r\n通过测试发现ALPN没开启。NPN开启了，但是ALPN没开启。\r\n\r\nNPN，是一个 TLS 扩展，由 Google 在开发 SPDY 协议时提出。随着 SPDY 被 HTTP/2 取代，NPN 也被修订为 ALPN。NPN 是服务端发送所支持的 HTTP 协议列表，由客户端选择；而 ALPN 是客户端发送所支持的 HTTP 协议列表，由服务端选择；是否支持 NPN 或 ALPN 完全取决于使用的 OpenSSL 版本。在Chrome51之后必须ALPN访问http2。\r\n<div>理论上没有支持ALPN，我们还是可以通过其它浏览器支持http2，但是我发现现在还是不行的。为了排除某些不知道的因素，还是先看一下怎么支持ALPN。</div>\r\n<div>\r\n<h2>是否支持ALPN</h2>\r\n<div>执行命令：</div>\r\n\r\n[code]\r\nopenssl s_client -alpn h2 -servername www.gzpblog.com -connect www.gzpblog.com:443 &lt; /dev/null | grep \'ALPN\'\r\nNo ALPN negotiated\r\n[/code]\r\n\r\n<div>显然不支持。查了资料发现需要开启OCSP Stapling。</div>\r\n</div>\r\n<div>\r\n<h2>查看OCSP Stapling是否开启</h2>\r\n</div>\r\n<div>\r\n<div>执行命令：</div>\r\n<div>\r\n\r\n[code]\r\nopenssl s_client -connect www.gzpblog.com:443 -status -tlsextdebug &lt; /dev/null 2&gt;&amp;1 | grep -i &quot;OCSP response&quot;\r\n[/code]\r\n\r\n</div>\r\n<div>获得的信息是：OCSP response: no response sent</div>\r\n<div>就是OCSP Stapling还没开启。接下来开启，我们需要获取证书OCSP Response。</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h2>获取证书 OCSP Response</h2>\r\n<div>这部分参考自取屈大神的一篇：<a href=\"https://imququ.com/post/why-can-not-turn-on-ocsp-stapling.html\" target=\"_blank\">从无法开启 OCSP Stapling 说起</a>，所以我们要做的就是准备好待验证网站证书链上的所有证书。证书链一般由根证书、一个或多个中间证书、站点证书组成。整理好这三个证书。</div>\r\n<h3>获取根证书</h3>\r\n根证书因为SSL证书提供商的不同而不同，我的是Symantec的证书。\r\n\r\n可以直接通过google浏览器F12-&gt;Security-&gt;View certificate看到根证书：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/http2-1.png\"><img class=\"wp-image-808 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-1.png\" alt=\"\" width=\"550\" height=\"465\" /></a>\r\n<div>查到根证书是哪张了，可以通过火狐浏览器导出这张证书：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-2.png\"><img class=\"wp-image-809 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-2-1024x516.png\" alt=\"\" width=\"831\" height=\"419\" /></a>将导出的证书重命名为：root.pem</div>\r\n<div>\r\n<h3>获取中间证书和站点证书</h3>\r\n有两种情况吧：第一种如果你是通过阿里云等第三方帮你直接生成的证书，比如阿里云的免费证书，下载的证书中public.pem是站点证书，chain.pem是中间证书。第二种情况，就是不管怎么样，你就是找不到你的证书了，那，我们可以这样来弄：\r\n<div>通过命令：</div>\r\n\r\n[code]\r\nopenssl s_client -connect www.gzpblog.com:443 -showcerts &lt; /dev/null 2&gt;&amp;1\r\n[/code]\r\n\r\n<div>获取到的内容中 Certificate Chain 这一节，编号为 0 的证书是站点证书；编号为 1 的证书是中间证书。比如我的证书链一共是三级，服务端只需要发送两个证书；四级证书链服务端发送三个证书，根证书无需发送。</div>\r\n<div>将站点证书保存为 site.pem；中间证书保存为 intermediate.pem（如果有多个中间证书，按照子证书在上的顺序保存）</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<div>验证一下每个证书的 Common Name：</div>\r\n<div>\r\n\r\n[code]\r\n# openssl x509 -in /usr/local/nginx/cert/site.pem -noout -subject\r\nsubject= /CN=www.gzpblog.com\r\n# openssl x509 -in /usr/local/nginx/cert/intermediate.pem -noout -subject\r\nsubject= /C=US/O=Symantec Corporation/OU=Symantec Trust Network/OU=Domain Validated SSL/CN=Symantec Basic DV SSL CA - G1\r\n# openssl x509 -in /usr/local/nginx/cert/root.pem -noout -subject\r\nsubject= /C=US/O=VeriSign, Inc./OU=VeriSign Trust Network/OU=(c) 2006 VeriSign, Inc. - For authorized use only/CN=VeriSign Class 3 Public Primary Certification Authority - G5\r\n[/code]\r\n\r\n</div>\r\n<div></div>\r\n<div>获取站点证书的 OCSP 服务地址：</div>\r\n<div>\r\n\r\n[code]\r\n# openssl x509 -in /usr/local/nginx/cert/site.pem -noout -ocsp_uri\r\nhttp://hc.symcd.com\r\n[/code]\r\n\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<div>使用以下命令获得站点证书的 OCSP Response：</div>\r\n<div>\r\n\r\n[code]\r\nopenssl ocsp -issuer /usr/local/nginx/cert/intermediate.pem -cert /usr/local/nginx/cert/site.pem -no_nonce -text -url http://hc.symcd.com\r\n[/code]\r\n\r\n</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-3.png\"><img class=\"alignnone wp-image-810\" src=\"https://files.gzpblog.com/wp/2017/03/http2-3-1024x96.png\" alt=\"\" width=\"830\" height=\"78\" /></a></div>\r\n<div>可以看到site.pem:good；说明证书合法。出现一个Response Verify Failure，这是因为我们没有告诉 openssl应该信任哪些证书，openssl 无法验证 OCSP Response 内容而报的错。这个错误可以通过加上 -noverify 参数屏蔽，但更好的做法是通过 -CAfile 指定信任证书，我们可以这样做：\r\n将根证书、全部中间证书按照子证书在上的顺序，保存为 chain.pem。再次执行：</div>\r\n<div>\r\n\r\n[code]\r\nopenssl ocsp -CAfile /usr/local/nginx/cert/chain.pem -issuer /usr/local/nginx/cert/intermediate.pem -cert /usr/local/nginx/cert/site.pem -no_nonce -text -url http://hc.symcd.com\r\n[/code]\r\n\r\n</div>\r\n<div>\r\n<div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-4.png\"><img class=\"size-full wp-image-811 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-4.png\" alt=\"\" width=\"470\" height=\"86\" /></a>Verify OK！搞定了。</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<div>Nginx中加上配置：</div>\r\n<div>\r\n\r\n[code]\r\nssl_stapling               on;\r\nssl_stapling_verify        on;\r\nssl_trusted_certificate    /usr/local/nginx/cert/chain.pem;\r\n[/code]\r\n\r\n</div>\r\n<div>重启Nginx</div>\r\n</div>\r\n<div></div>\r\n<div>再次使用以下命令查看OCSP Stapling是否开启</div>\r\n<div>\r\n\r\n[code]\r\nopenssl s_client -connect www.gzpblog.com:443 -status -tlsextdebug &lt; /dev/null 2&gt;&amp;1 | grep -i &quot;OCSP response&quot;\r\n[/code]\r\n\r\n这时可以看到;\r\nOCSP response:\r\nOCSP Response Data:\r\nOCSP Response Status: successful (0x0)\r\nResponse Type: Basic OCSP Response\r\n说明我们已经成功获取了OCSP Response，OSCP Stapling开启成功。\r\n\r\n</div>\r\n<h3>如果出现：verify error:num=20:unable to get local issuer certificate</h3>\r\n以上的命令，chain.pem等证书部分我都加了路径，这主要是当时不是自己生成证书，openssl的工作路径什么的没有设置。所以我会报错verify error:num=20:unable to get local issuer certificate，这个错误没什么问题，你也可以在命令中加上你的证书： -CAfile /usr/local/nginx/cert/chain.pem\r\n<h2>重新编译Nginx</h2>\r\n按理来说，开启了nginx中的配置中的http2就能生效了。但是我的一直不生效，而且ALPN也没有开启。一直纠结在这里，因为我编译没有设定openssl路径，服务器装的openssl版本是1.1.0的；Nginx版本升级到了1.11.10；然后还是不行。\r\n\r\n最后我发现，问题在于，我虽然没有配置openssl源码路径编译nginx，但是我连--with-openssl都没写，这就导致直接不支持openssl了！犯浑了，于是乎我重新编译了nginx，而且指定了源码进行编译。\r\n\r\n惊讶的发现还是不行。最后发现了原因，是我操作linux系统时的失误，也让我学到一点：\r\n\r\n之前编译过的nginx，加了service的，通过：\r\n\r\n[code]\r\nservice nignx reload\r\n[/code]\r\n\r\n重新启动，新版本不会生效，php-fpm一直监听老版本；然后我通过：\r\n\r\n[code]\r\n/usr/sbin/nginx stop\r\n[/code]\r\n\r\n再\r\n\r\n[code]\r\n/usr/sbin/nginx\r\n[/code]\r\n\r\n然后php-fpm才监听到新版本，之后service nignx reload 就正常了。这个机制我还不太理解是为什么，不过这样操作才可以。\r\n<div>现在确定Nginx是正常的版本之后，重新查看是否支持ALPN，可以看到已经支持h2：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-5.png\"><img class=\"wp-image-812 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-5-1024x77.png\" alt=\"\" width=\"886\" height=\"67\" /></a></div>\r\n<div>\r\n<div>同时网站已经支持http2，确定一开始不行就是因为Nginx没编译好。通过浏览器的请求头我们已经可以看到HTTP/2.0的请求：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-6.png\"><img class=\"size-full wp-image-806 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-6.png\" alt=\"\" width=\"241\" height=\"103\" /></a></div>\r\n<div>同时再看一下google是否已经支持：</div>\r\n<div>可以通过HTTP/2 and SPDY indicator（科学上网获取）这个拓展插件方便查看是否已经启用http2，右上角蓝色闪电标志，说明已启用；或者直接打开chrome://net-internals/#http2查看：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-7.png\"><img class=\" wp-image-807 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-7.png\" alt=\"\" width=\"424\" height=\"286\" /></a></div>\r\n<h2>完成</h2>\r\n<div>HTTP/2升级完毕。其实就是各软件版本要对得上，Nginx编译正确就可以。在完成HTTP/2的升级之后，发现在 <a href=\"https://www.ssllabs.com/ssltest/index.html\" target=\"_blank\">SSL Labs </a>上的评分也由B变成了A+：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-8.png\"><img class=\"size-medium wp-image-813 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-8-300x126.png\" alt=\"\" width=\"300\" height=\"126\" /></a></div>\r\n<div>\r\n<div>虽然达到了A+，不过在https上还有很多优化没做，有时间继续搞。</div>\r\n</div>\r\n</div>', '升级到HTTP/2，性能大提升', 'Nginx的HTTP升级到HTTP2；设置支持ALPN；开启OCSP Stapling；获取证书 OCSP Response', 'publish', 'open', 'closed', '', '%e5%8d%87%e7%ba%a7%e5%88%b0http2', '', '', '2017-03-16 15:33:25', '2017-03-16 07:33:25', '', 0, 'https://www.gzpblog.com/?p=804', 0, 'post', '', 1),
(818, 1, '2017-03-16 15:26:45', '2017-03-16 07:26:45', '', 'http2', '', 'inherit', 'open', 'closed', '', 'http2', '', '', '2017-03-16 15:26:45', '2017-03-16 07:26:45', '', 804, 'https://www.gzpblog.com/wp-content/uploads/2017/03/http2.jpg', 0, 'attachment', 'image/jpeg', 0),
(806, 1, '2017-03-16 14:52:10', '2017-03-16 06:52:10', '', 'http2-6', '', 'inherit', 'open', 'closed', '', 'http2-6', '', '', '2017-03-16 14:52:10', '2017-03-16 06:52:10', '', 804, 'https://www.gzpblog.com/wp-content/uploads/2017/03/http2-6.png', 0, 'attachment', 'image/png', 0),
(807, 1, '2017-03-16 14:52:11', '2017-03-16 06:52:11', '', 'http2-7', '', 'inherit', 'open', 'closed', '', 'http2-7', '', '', '2017-03-16 14:52:11', '2017-03-16 06:52:11', '', 804, 'https://www.gzpblog.com/wp-content/uploads/2017/03/http2-7.png', 0, 'attachment', 'image/png', 0),
(808, 1, '2017-03-16 14:52:12', '2017-03-16 06:52:12', '', 'http2-1', '', 'inherit', 'open', 'closed', '', 'http2-1', '', '', '2017-03-16 14:52:12', '2017-03-16 06:52:12', '', 804, 'https://www.gzpblog.com/wp-content/uploads/2017/03/http2-1.png', 0, 'attachment', 'image/png', 0),
(809, 1, '2017-03-16 14:52:14', '2017-03-16 06:52:14', '', 'http2-2', '', 'inherit', 'open', 'closed', '', 'http2-2', '', '', '2017-03-16 14:52:14', '2017-03-16 06:52:14', '', 804, 'https://www.gzpblog.com/wp-content/uploads/2017/03/http2-2.png', 0, 'attachment', 'image/png', 0),
(810, 1, '2017-03-16 14:52:16', '2017-03-16 06:52:16', '', 'http2-3', '', 'inherit', 'open', 'closed', '', 'http2-3', '', '', '2017-03-16 14:52:16', '2017-03-16 06:52:16', '', 804, 'https://www.gzpblog.com/wp-content/uploads/2017/03/http2-3.png', 0, 'attachment', 'image/png', 0),
(811, 1, '2017-03-16 14:52:17', '2017-03-16 06:52:17', '', 'http2-4', '', 'inherit', 'open', 'closed', '', 'http2-4', '', '', '2017-03-16 14:52:17', '2017-03-16 06:52:17', '', 804, 'https://www.gzpblog.com/wp-content/uploads/2017/03/http2-4.png', 0, 'attachment', 'image/png', 0),
(812, 1, '2017-03-16 14:52:18', '2017-03-16 06:52:18', '', 'http2-5', '', 'inherit', 'open', 'closed', '', 'http2-5', '', '', '2017-03-16 14:52:18', '2017-03-16 06:52:18', '', 804, 'https://www.gzpblog.com/wp-content/uploads/2017/03/http2-5.png', 0, 'attachment', 'image/png', 0),
(813, 1, '2017-03-16 14:52:27', '2017-03-16 06:52:27', '', 'http2-8', '', 'inherit', 'open', 'closed', '', 'http2-8', '', '', '2017-03-16 14:52:27', '2017-03-16 06:52:27', '', 804, 'https://www.gzpblog.com/wp-content/uploads/2017/03/http2-8.png', 0, 'attachment', 'image/png', 0),
(814, 1, '2017-03-16 15:14:38', '2017-03-16 07:14:38', '<div>既然上了HTTPS，就肯定得上HTTP2了，HTTP2的速度上升了不止一个档次，让网站飞起来吧。</div>\r\n<div>升级到HTTP/2其实很简单，我们只需要注意这几点：</div>\r\n<ol>\r\n 	<li>HTTP2现在需要HTTPS</li>\r\n 	<li>HTTP2要求Nginx版本是1.9.5以上</li>\r\n 	<li>openssl版本要求1.0.2</li>\r\n 	<li>修改Nginx的配置：在listen 443 ssl 后面加上http2 default_server就行了</li>\r\n</ol>\r\n理论上，这样就可以了。但是配置之后通过浏览器请求头看到http的请求还是http1.1的。\r\n\r\n于是开启了我的HTTP2折腾之旅。\r\n<h2>什么是NPN和ALPN?</h2>\r\n通过测试发现ALPN没开启。NPN开启了，但是ALPN没开启。\r\n\r\nNPN，是一个 TLS 扩展，由 Google 在开发 SPDY 协议时提出。随着 SPDY 被 HTTP/2 取代，NPN 也被修订为 ALPN。NPN 是服务端发送所支持的 HTTP 协议列表，由客户端选择；而 ALPN 是客户端发送所支持的 HTTP 协议列表，由服务端选择；是否支持 NPN 或 ALPN 完全取决于使用的 OpenSSL 版本。在Chrome51之后必须ALPN访问http2。\r\n<div>理论上没有支持ALPN，我们还是可以通过其它浏览器支持http2，但是我发现现在还是不行的。为了排除某些不知道的因素，还是先看一下怎么支持ALPN。</div>\r\n<div>\r\n<h2>是否支持ALPN</h2>\r\n<div>执行命令：</div>\r\n<div>openssl s_client -alpn h2 -servername www.gzpblog.com -connect www.gzpblog.com:443 &lt; /dev/null | grep \'ALPN\'</div>\r\n<div>No ALPN negotiated</div>\r\n<div>显然不支持。查了资料发现需要开启OCSP Stapling。</div>\r\n</div>\r\n<div>\r\n<h2>查看OCSP Stapling是否开启</h2>\r\n</div>\r\n<div>\r\n<div>执行命令：</div>\r\n<div>openssl s_client -connect www.gzpblog.com:443 -status -tlsextdebug &lt; /dev/null 2&gt;&amp;1 | grep -i \"OCSP response\"</div>\r\n<div>获得的信息是：OCSP response: no response sent</div>\r\n<div>就是OCSP Stapling还没开启。接下来开启，我们需要获取证书OCSP Response。</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h2>获取证书 OCSP Response</h2>\r\n<div>这部分参考自取屈大神的一篇：<a href=\"https://imququ.com/post/why-can-not-turn-on-ocsp-stapling.html\">从无法开启 OCSP Stapling 说起</a>，所以我们要做的就是准备好待验证网站证书链上的所有证书。证书链一般由根证书、一个或多个中间证书、站点证书组成。整理好这三个证书。</div>\r\n<h3>获取根证书</h3>\r\n根证书因为SSL证书提供商的不同而不同，我的是Symantec的证书。\r\n\r\n可以直接通过google浏览器F12-&gt;Security-&gt;View certificate看到根证书：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/http2-1.png\"><img class=\"wp-image-808 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-1.png\" alt=\"\" width=\"550\" height=\"465\" /></a>\r\n<div>查到根证书是哪张了，可以通过火狐浏览器导出这张证书：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-2.png\"><img class=\"wp-image-809 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-2-1024x516.png\" alt=\"\" width=\"831\" height=\"419\" /></a>将导出的证书重命名为：root.pem</div>\r\n<div>\r\n<h3>获取中间证书和站点证书</h3>\r\n有两种情况吧：第一种如果你是通过阿里云等第三方帮你直接生成的证书，比如阿里云的免费证书，下载的证书中public.pem是站点证书，chain.pem是中间证书。第二种情况，就是不管怎么样，你就是找不到你的证书了，那，我们可以这样来弄：\r\n<div>通过命令：</div>\r\n<div>openssl s_client -connect www.gzpblog.com:443 -showcerts &lt; /dev/null 2&gt;&amp;1</div>\r\n<div>获取到的内容中 Certificate Chain 这一节，编号为 0 的证书是站点证书；编号为 1 的证书是中间证书。比如我的证书链一共是三级，服务端只需要发送两个证书；四级证书链服务端发送三个证书，根证书无需发送。</div>\r\n<div>将站点证书保存为 site.pem；中间证书保存为 intermediate.pem（如果有多个中间证书，按照子证书在上的顺序保存）</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<div>验证一下每个证书的 Common Name：</div>\r\n<div># openssl x509 -in /usr/local/nginx/cert/site.pem -noout -subject</div>\r\n<div>subject= /CN=www.gzpblog.com</div>\r\n<div># openssl x509 -in /usr/local/nginx/cert/intermediate.pem -noout -subject</div>\r\n<div>subject= /C=US/O=Symantec Corporation/OU=Symantec Trust Network/OU=Domain Validated SSL/CN=Symantec Basic DV SSL CA - G1</div>\r\n<div># openssl x509 -in /usr/local/nginx/cert/root.pem -noout -subject</div>\r\n<div>subject= /C=US/O=VeriSign, Inc./OU=VeriSign Trust Network/OU=(c) 2006 VeriSign, Inc. - For authorized use only/CN=VeriSign Class 3 Public Primary Certification Authority - G5</div>\r\n<div></div>\r\n<div>获取站点证书的 OCSP 服务地址：</div>\r\n</div>\r\n<div>\r\n<div># openssl x509 -in /usr/local/nginx/cert/site.pem -noout -ocsp_uri</div>\r\n<div>http://hc.symcd.com</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<div>使用以下命令获得站点证书的 OCSP Response：</div>\r\n<div>openssl ocsp -issuer /usr/local/nginx/cert/intermediate.pem -cert /usr/local/nginx/cert/site.pem -no_nonce -text -url http://hc.symcd.com</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-3.png\"><img class=\"alignnone  wp-image-810\" src=\"https://files.gzpblog.com/wp/2017/03/http2-3-1024x96.png\" alt=\"\" width=\"830\" height=\"78\" /></a></div>\r\n<div>可以看到site.pem:good；说明证书合法。出现一个Response Verify Failure，这是因为我们没有告诉 openssl应该信任哪些证书，openssl 无法验证 OCSP Response 内容而报的错。这个错误可以通过加上 -noverify 参数屏蔽，但更好的做法是通过 -CAfile 指定信任证书，我们可以这样做：\r\n将根证书、全部中间证书按照子证书在上的顺序，保存为 chain.pem。再次执行：\r\nopenssl ocsp -CAfile /usr/local/nginx/cert/chain.pem -issuer /usr/local/nginx/cert/intermediate.pem -cert /usr/local/nginx/cert/site.pem -no_nonce -text -url http://hc.symcd.com\r\n<div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-4.png\"><img class=\"size-full wp-image-811 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-4.png\" alt=\"\" width=\"470\" height=\"86\" /></a>Verify OK！搞定了。</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<div>Nginx中加上配置：</div>\r\n<div>ssl_stapling on;</div>\r\n<div>ssl_stapling_verify on;</div>\r\n<div>ssl_trusted_certificate /usr/local/nginx/cert/chain.pem;</div>\r\n<div>重启Nginx</div>\r\n</div>\r\n<div></div>\r\n<div>再次使用以下命令查看OCSP Stapling是否开启\r\nopenssl s_client -connect www.gzpblog.com:443 -status -tlsextdebug &lt; /dev/null 2&gt;&amp;1 | grep -i \"OCSP response\"\r\n这时可以看到;\r\nOCSP response:\r\nOCSP Response Data:\r\nOCSP Response Status: successful (0x0)\r\nResponse Type: Basic OCSP Response\r\n说明我们已经成功获取了OCSP Response，OSCP Stapling开启成功。</div>\r\n<h3>如果出现：verify error:num=20:unable to get local issuer certificate</h3>\r\n以上的命令，chain.pem等证书部分我都加了路径，这主要是当时不是自己生成证书，openssl的工作路径什么的没有设置。所以我会报错verify error:num=20:unable to get local issuer certificate，这个错误没什么问题，你也可以在命令中加上你的证书： -CAfile /usr/local/nginx/cert/chain.pem\r\n<h2>重新编译Nginx</h2>\r\n按理来说，开启了nginx中的配置中的http2就能生效了。但是我的一直不生效，而且ALPN也没有开启。一直纠结在这里，因为我编译没有设定openssl路径，服务器装的openssl版本是1.1.0的；Nginx版本升级到了1.11.10；然后还是不行。\r\n\r\n最后我发现，问题在于，我虽然没有配置openssl源码路径编译nginx，但是我连--with-openssl都没写，这就导致直接不支持openssl了！犯浑了，于是乎我重新编译了nginx，而且指定了源码进行编译。\r\n\r\n惊讶的发现还是不行。最后发现了原因，是我操作linux系统时的失误，也让我学到一点：\r\n\r\n之前编译过的nginx，加了service的，通过：\r\n\r\nservice nignx reload\r\n\r\n重新启动，新版本不会生效，php-fpm一直监听老版本；然后我通过：\r\n\r\n/usr/sbin/nginx stop\r\n\r\n再\r\n\r\n/usr/sbin/nginx\r\n\r\n然后php-fpm才监听到新版本，之后service nignx reload 就正常了。这个机制我还不太理解是为什么，不过这样操作才可以。\r\n<div>现在确定Nginx是正常的版本之后，重新查看是否支持ALPN，可以看到已经支持h2：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-5.png\"><img class=\"wp-image-812 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-5-1024x77.png\" alt=\"\" width=\"886\" height=\"67\" /></a></div>\r\n<div>\r\n<div>同时网站已经支持http2，确定一开始不行就是因为Nginx没编译好。通过浏览器的请求头我们已经可以看到HTTP/2.0的请求：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-6.png\"><img class=\"size-full wp-image-806 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-6.png\" alt=\"\" width=\"241\" height=\"103\" /></a></div>\r\n<div>同时再看一下google是否已经支持：</div>\r\n<div>可以通过HTTP/2 and SPDY indicator（科学上网获取）这个拓展插件方便查看是否已经启用http2，右上角蓝色闪电标志，说明已启用；或者直接打开chrome://net-internals/#http2查看：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-7.png\"><img class=\" wp-image-807 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-7.png\" alt=\"\" width=\"424\" height=\"286\" /></a></div>\r\n<h2>完成</h2>\r\n<div>HTTP/2升级完毕。其实就是各软件版本要对得上，Nginx编译正确就可以。在完成HTTP/2的升级之后，发现在 <a href=\"https://www.ssllabs.com/ssltest/index.html\" target=\"_blank\">SSL Labs </a>上的评分也由B变成了A+：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-8.png\"><img class=\"size-medium wp-image-813 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-8-300x126.png\" alt=\"\" width=\"300\" height=\"126\" /></a></div>\r\n<div>\r\n<div>虽然达到了A+，不过在https上还有很多优化没做，有时间继续搞。</div>\r\n</div>\r\n</div>', '升级到HTTP/2', 'Nginx的HTTP升级到HTTP2；设置支持ALPN；开启OCSP Stapling；获取证书 OCSP Response', 'inherit', 'closed', 'closed', '', '804-revision-v1', '', '', '2017-03-16 15:14:38', '2017-03-16 07:14:38', '', 804, 'https://www.gzpblog.com/20170316/814.html', 0, 'revision', '', 0),
(815, 1, '2017-03-16 15:24:42', '2017-03-16 07:24:42', '<div>既然上了HTTPS，就肯定得上HTTP2了，HTTP2的速度上升了不止一个档次，让网站飞起来吧。</div>\r\n<div>升级到HTTP/2其实很简单，我们只需要注意这几点：</div>\r\n<ol>\r\n 	<li>HTTP2现在需要HTTPS</li>\r\n 	<li>HTTP2要求Nginx版本是1.9.5以上</li>\r\n 	<li>openssl版本要求1.0.2</li>\r\n 	<li>修改Nginx的配置：在listen 443 ssl 后面加上http2 default_server就行了</li>\r\n</ol>\r\n理论上，这样就可以了。但是配置之后通过浏览器请求头看到http的请求还是http1.1的。\r\n\r\n于是开启了我的HTTP2折腾之旅。\r\n<h2>什么是NPN和ALPN?</h2>\r\n通过测试发现ALPN没开启。NPN开启了，但是ALPN没开启。\r\n\r\nNPN，是一个 TLS 扩展，由 Google 在开发 SPDY 协议时提出。随着 SPDY 被 HTTP/2 取代，NPN 也被修订为 ALPN。NPN 是服务端发送所支持的 HTTP 协议列表，由客户端选择；而 ALPN 是客户端发送所支持的 HTTP 协议列表，由服务端选择；是否支持 NPN 或 ALPN 完全取决于使用的 OpenSSL 版本。在Chrome51之后必须ALPN访问http2。\r\n<div>理论上没有支持ALPN，我们还是可以通过其它浏览器支持http2，但是我发现现在还是不行的。为了排除某些不知道的因素，还是先看一下怎么支持ALPN。</div>\r\n<div>\r\n<h2>是否支持ALPN</h2>\r\n<div>执行命令：</div>\r\n\r\n[code]\r\nopenssl s_client -alpn h2 -servername www.gzpblog.com -connect www.gzpblog.com:443 &lt; /dev/null | grep \'ALPN\'\r\nNo ALPN negotiated\r\n[/code]\r\n\r\n<div>显然不支持。查了资料发现需要开启OCSP Stapling。</div>\r\n</div>\r\n<div>\r\n<h2>查看OCSP Stapling是否开启</h2>\r\n</div>\r\n<div>\r\n<div>执行命令：</div>\r\n<div>\r\n\r\n[code]\r\nopenssl s_client -connect www.gzpblog.com:443 -status -tlsextdebug &lt; /dev/null 2&gt;&amp;1 | grep -i &quot;OCSP response&quot;\r\n[/code]\r\n\r\n</div>\r\n<div>获得的信息是：OCSP response: no response sent</div>\r\n<div>就是OCSP Stapling还没开启。接下来开启，我们需要获取证书OCSP Response。</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h2>获取证书 OCSP Response</h2>\r\n<div>这部分参考自取屈大神的一篇：<a href=\"https://imququ.com/post/why-can-not-turn-on-ocsp-stapling.html\">从无法开启 OCSP Stapling 说起</a>，所以我们要做的就是准备好待验证网站证书链上的所有证书。证书链一般由根证书、一个或多个中间证书、站点证书组成。整理好这三个证书。</div>\r\n<h3>获取根证书</h3>\r\n根证书因为SSL证书提供商的不同而不同，我的是Symantec的证书。\r\n\r\n可以直接通过google浏览器F12-&gt;Security-&gt;View certificate看到根证书：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/http2-1.png\"><img class=\"wp-image-808 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-1.png\" alt=\"\" width=\"550\" height=\"465\" /></a>\r\n<div>查到根证书是哪张了，可以通过火狐浏览器导出这张证书：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-2.png\"><img class=\"wp-image-809 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-2-1024x516.png\" alt=\"\" width=\"831\" height=\"419\" /></a>将导出的证书重命名为：root.pem</div>\r\n<div>\r\n<h3>获取中间证书和站点证书</h3>\r\n有两种情况吧：第一种如果你是通过阿里云等第三方帮你直接生成的证书，比如阿里云的免费证书，下载的证书中public.pem是站点证书，chain.pem是中间证书。第二种情况，就是不管怎么样，你就是找不到你的证书了，那，我们可以这样来弄：\r\n<div>通过命令：</div>\r\n\r\n[code]\r\nopenssl s_client -connect www.gzpblog.com:443 -showcerts &lt; /dev/null 2&gt;&amp;1\r\n[/code]\r\n\r\n<div>获取到的内容中 Certificate Chain 这一节，编号为 0 的证书是站点证书；编号为 1 的证书是中间证书。比如我的证书链一共是三级，服务端只需要发送两个证书；四级证书链服务端发送三个证书，根证书无需发送。</div>\r\n<div>将站点证书保存为 site.pem；中间证书保存为 intermediate.pem（如果有多个中间证书，按照子证书在上的顺序保存）</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<div>验证一下每个证书的 Common Name：</div>\r\n<div>\r\n\r\n[code]\r\n# openssl x509 -in /usr/local/nginx/cert/site.pem -noout -subject\r\nsubject= /CN=www.gzpblog.com\r\n# openssl x509 -in /usr/local/nginx/cert/intermediate.pem -noout -subject\r\nsubject= /C=US/O=Symantec Corporation/OU=Symantec Trust Network/OU=Domain Validated SSL/CN=Symantec Basic DV SSL CA - G1\r\n# openssl x509 -in /usr/local/nginx/cert/root.pem -noout -subject\r\nsubject= /C=US/O=VeriSign, Inc./OU=VeriSign Trust Network/OU=(c) 2006 VeriSign, Inc. - For authorized use only/CN=VeriSign Class 3 Public Primary Certification Authority - G5\r\n[/code]\r\n\r\n</div>\r\n<div></div>\r\n<div>获取站点证书的 OCSP 服务地址：</div>\r\n<div>\r\n\r\n[code]\r\n# openssl x509 -in /usr/local/nginx/cert/site.pem -noout -ocsp_uri\r\nhttp://hc.symcd.com\r\n[/code]\r\n\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<div>使用以下命令获得站点证书的 OCSP Response：</div>\r\n<div>\r\n\r\n[code]\r\nopenssl ocsp -issuer /usr/local/nginx/cert/intermediate.pem -cert /usr/local/nginx/cert/site.pem -no_nonce -text -url http://hc.symcd.com\r\n[/code]\r\n\r\n</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-3.png\"><img class=\"alignnone wp-image-810\" src=\"https://files.gzpblog.com/wp/2017/03/http2-3-1024x96.png\" alt=\"\" width=\"830\" height=\"78\" /></a></div>\r\n<div>可以看到site.pem:good；说明证书合法。出现一个Response Verify Failure，这是因为我们没有告诉 openssl应该信任哪些证书，openssl 无法验证 OCSP Response 内容而报的错。这个错误可以通过加上 -noverify 参数屏蔽，但更好的做法是通过 -CAfile 指定信任证书，我们可以这样做：\r\n将根证书、全部中间证书按照子证书在上的顺序，保存为 chain.pem。再次执行：</div>\r\n<div>\r\n\r\n[code]\r\nopenssl ocsp -CAfile /usr/local/nginx/cert/chain.pem -issuer /usr/local/nginx/cert/intermediate.pem -cert /usr/local/nginx/cert/site.pem -no_nonce -text -url http://hc.symcd.com\r\n[/code]\r\n\r\n</div>\r\n<div>\r\n<div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-4.png\"><img class=\"size-full wp-image-811 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-4.png\" alt=\"\" width=\"470\" height=\"86\" /></a>Verify OK！搞定了。</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<div>Nginx中加上配置：</div>\r\n<div>\r\n\r\n[code]\r\nssl_stapling               on;\r\nssl_stapling_verify        on;\r\nssl_trusted_certificate    /usr/local/nginx/cert/chain.pem;\r\n[/code]\r\n\r\n</div>\r\n<div>重启Nginx</div>\r\n</div>\r\n<div></div>\r\n<div>再次使用以下命令查看OCSP Stapling是否开启</div>\r\n<div>\r\n\r\n[code]\r\nopenssl s_client -connect www.gzpblog.com:443 -status -tlsextdebug &lt; /dev/null 2&gt;&amp;1 | grep -i &quot;OCSP response&quot;\r\n[/code]\r\n\r\n这时可以看到;\r\nOCSP response:\r\nOCSP Response Data:\r\nOCSP Response Status: successful (0x0)\r\nResponse Type: Basic OCSP Response\r\n说明我们已经成功获取了OCSP Response，OSCP Stapling开启成功。\r\n\r\n</div>\r\n<h3>如果出现：verify error:num=20:unable to get local issuer certificate</h3>\r\n以上的命令，chain.pem等证书部分我都加了路径，这主要是当时不是自己生成证书，openssl的工作路径什么的没有设置。所以我会报错verify error:num=20:unable to get local issuer certificate，这个错误没什么问题，你也可以在命令中加上你的证书： -CAfile /usr/local/nginx/cert/chain.pem\r\n<h2>重新编译Nginx</h2>\r\n按理来说，开启了nginx中的配置中的http2就能生效了。但是我的一直不生效，而且ALPN也没有开启。一直纠结在这里，因为我编译没有设定openssl路径，服务器装的openssl版本是1.1.0的；Nginx版本升级到了1.11.10；然后还是不行。\r\n\r\n最后我发现，问题在于，我虽然没有配置openssl源码路径编译nginx，但是我连--with-openssl都没写，这就导致直接不支持openssl了！犯浑了，于是乎我重新编译了nginx，而且指定了源码进行编译。\r\n\r\n惊讶的发现还是不行。最后发现了原因，是我操作linux系统时的失误，也让我学到一点：\r\n\r\n之前编译过的nginx，加了service的，通过：\r\n\r\n[code]\r\nservice nignx reload\r\n[/code]\r\n\r\n重新启动，新版本不会生效，php-fpm一直监听老版本；然后我通过：\r\n\r\n[code]\r\n/usr/sbin/nginx stop\r\n[/code]\r\n\r\n再\r\n\r\n[code]\r\n/usr/sbin/nginx\r\n[/code]\r\n\r\n然后php-fpm才监听到新版本，之后service nignx reload 就正常了。这个机制我还不太理解是为什么，不过这样操作才可以。\r\n<div>现在确定Nginx是正常的版本之后，重新查看是否支持ALPN，可以看到已经支持h2：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-5.png\"><img class=\"wp-image-812 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-5-1024x77.png\" alt=\"\" width=\"886\" height=\"67\" /></a></div>\r\n<div>\r\n<div>同时网站已经支持http2，确定一开始不行就是因为Nginx没编译好。通过浏览器的请求头我们已经可以看到HTTP/2.0的请求：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-6.png\"><img class=\"size-full wp-image-806 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-6.png\" alt=\"\" width=\"241\" height=\"103\" /></a></div>\r\n<div>同时再看一下google是否已经支持：</div>\r\n<div>可以通过HTTP/2 and SPDY indicator（科学上网获取）这个拓展插件方便查看是否已经启用http2，右上角蓝色闪电标志，说明已启用；或者直接打开chrome://net-internals/#http2查看：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-7.png\"><img class=\" wp-image-807 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-7.png\" alt=\"\" width=\"424\" height=\"286\" /></a></div>\r\n<h2>完成</h2>\r\n<div>HTTP/2升级完毕。其实就是各软件版本要对得上，Nginx编译正确就可以。在完成HTTP/2的升级之后，发现在 <a href=\"https://www.ssllabs.com/ssltest/index.html\" target=\"_blank\">SSL Labs </a>上的评分也由B变成了A+：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-8.png\"><img class=\"size-medium wp-image-813 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-8-300x126.png\" alt=\"\" width=\"300\" height=\"126\" /></a></div>\r\n<div>\r\n<div>虽然达到了A+，不过在https上还有很多优化没做，有时间继续搞。</div>\r\n</div>\r\n</div>', '升级到HTTP/2', 'Nginx的HTTP升级到HTTP2；设置支持ALPN；开启OCSP Stapling；获取证书 OCSP Response', 'inherit', 'closed', 'closed', '', '804-revision-v1', '', '', '2017-03-16 15:24:42', '2017-03-16 07:24:42', '', 804, 'https://www.gzpblog.com/20170316/815.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(816, 1, '2017-03-16 15:25:15', '2017-03-16 07:25:15', '<div>既然上了HTTPS，就肯定得上HTTP2了，HTTP2的速度上升了不止一个档次，让网站飞起来吧。</div>\r\n<div>升级到HTTP/2其实很简单，我们只需要注意这几点：</div>\r\n<ol>\r\n 	<li>HTTP2现在需要HTTPS</li>\r\n 	<li>HTTP2要求Nginx版本是1.9.5以上</li>\r\n 	<li>openssl版本要求1.0.2</li>\r\n 	<li>修改Nginx的配置：在listen 443 ssl 后面加上http2 default_server就行了</li>\r\n</ol>\r\n理论上，这样就可以了。但是配置之后通过浏览器请求头看到http的请求还是http1.1的。\r\n\r\n于是开启了我的HTTP2折腾之旅。\r\n<h2>什么是NPN和ALPN?</h2>\r\n通过测试发现ALPN没开启。NPN开启了，但是ALPN没开启。\r\n\r\nNPN，是一个 TLS 扩展，由 Google 在开发 SPDY 协议时提出。随着 SPDY 被 HTTP/2 取代，NPN 也被修订为 ALPN。NPN 是服务端发送所支持的 HTTP 协议列表，由客户端选择；而 ALPN 是客户端发送所支持的 HTTP 协议列表，由服务端选择；是否支持 NPN 或 ALPN 完全取决于使用的 OpenSSL 版本。在Chrome51之后必须ALPN访问http2。\r\n<div>理论上没有支持ALPN，我们还是可以通过其它浏览器支持http2，但是我发现现在还是不行的。为了排除某些不知道的因素，还是先看一下怎么支持ALPN。</div>\r\n<div>\r\n<h2>是否支持ALPN</h2>\r\n<div>执行命令：</div>\r\n\r\n[code]\r\nopenssl s_client -alpn h2 -servername www.gzpblog.com -connect www.gzpblog.com:443 &lt; /dev/null | grep \'ALPN\'\r\nNo ALPN negotiated\r\n[/code]\r\n\r\n<div>显然不支持。查了资料发现需要开启OCSP Stapling。</div>\r\n</div>\r\n<div>\r\n<h2>查看OCSP Stapling是否开启</h2>\r\n</div>\r\n<div>\r\n<div>执行命令：</div>\r\n<div>\r\n\r\n[code]\r\nopenssl s_client -connect www.gzpblog.com:443 -status -tlsextdebug &lt; /dev/null 2&gt;&amp;1 | grep -i &quot;OCSP response&quot;\r\n[/code]\r\n\r\n</div>\r\n<div>获得的信息是：OCSP response: no response sent</div>\r\n<div>就是OCSP Stapling还没开启。接下来开启，我们需要获取证书OCSP Response。</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h2>获取证书 OCSP Response</h2>\r\n<div>这部分参考自取屈大神的一篇：<a href=\"https://imququ.com/post/why-can-not-turn-on-ocsp-stapling.html\">从无法开启 OCSP Stapling 说起</a>，所以我们要做的就是准备好待验证网站证书链上的所有证书。证书链一般由根证书、一个或多个中间证书、站点证书组成。整理好这三个证书。</div>\r\n<h3>获取根证书</h3>\r\n根证书因为SSL证书提供商的不同而不同，我的是Symantec的证书。\r\n\r\n可以直接通过google浏览器F12-&gt;Security-&gt;View certificate看到根证书：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/http2-1.png\"><img class=\"wp-image-808 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-1.png\" alt=\"\" width=\"550\" height=\"465\" /></a>\r\n<div>查到根证书是哪张了，可以通过火狐浏览器导出这张证书：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-2.png\"><img class=\"wp-image-809 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-2-1024x516.png\" alt=\"\" width=\"831\" height=\"419\" /></a>将导出的证书重命名为：root.pem</div>\r\n<div>\r\n<h3>获取中间证书和站点证书</h3>\r\n有两种情况吧：第一种如果你是通过阿里云等第三方帮你直接生成的证书，比如阿里云的免费证书，下载的证书中public.pem是站点证书，chain.pem是中间证书。第二种情况，就是不管怎么样，你就是找不到你的证书了，那，我们可以这样来弄：\r\n<div>通过命令：</div>\r\n\r\n[code]\r\nopenssl s_client -connect www.gzpblog.com:443 -showcerts &lt; /dev/null 2&gt;&amp;1\r\n[/code]\r\n\r\n<div>获取到的内容中 Certificate Chain 这一节，编号为 0 的证书是站点证书；编号为 1 的证书是中间证书。比如我的证书链一共是三级，服务端只需要发送两个证书；四级证书链服务端发送三个证书，根证书无需发送。</div>\r\n<div>将站点证书保存为 site.pem；中间证书保存为 intermediate.pem（如果有多个中间证书，按照子证书在上的顺序保存）</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<div>验证一下每个证书的 Common Name：</div>\r\n<div>\r\n\r\n[code]\r\n# openssl x509 -in /usr/local/nginx/cert/site.pem -noout -subject\r\nsubject= /CN=www.gzpblog.com\r\n# openssl x509 -in /usr/local/nginx/cert/intermediate.pem -noout -subject\r\nsubject= /C=US/O=Symantec Corporation/OU=Symantec Trust Network/OU=Domain Validated SSL/CN=Symantec Basic DV SSL CA - G1\r\n# openssl x509 -in /usr/local/nginx/cert/root.pem -noout -subject\r\nsubject= /C=US/O=VeriSign, Inc./OU=VeriSign Trust Network/OU=(c) 2006 VeriSign, Inc. - For authorized use only/CN=VeriSign Class 3 Public Primary Certification Authority - G5\r\n[/code]\r\n\r\n</div>\r\n<div></div>\r\n<div>获取站点证书的 OCSP 服务地址：</div>\r\n<div>\r\n\r\n[code]\r\n# openssl x509 -in /usr/local/nginx/cert/site.pem -noout -ocsp_uri\r\nhttp://hc.symcd.com\r\n[/code]\r\n\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<div>使用以下命令获得站点证书的 OCSP Response：</div>\r\n<div>\r\n\r\n[code]\r\nopenssl ocsp -issuer /usr/local/nginx/cert/intermediate.pem -cert /usr/local/nginx/cert/site.pem -no_nonce -text -url http://hc.symcd.com\r\n[/code]\r\n\r\n</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-3.png\"><img class=\"alignnone wp-image-810\" src=\"https://files.gzpblog.com/wp/2017/03/http2-3-1024x96.png\" alt=\"\" width=\"830\" height=\"78\" /></a></div>\r\n<div>可以看到site.pem:good；说明证书合法。出现一个Response Verify Failure，这是因为我们没有告诉 openssl应该信任哪些证书，openssl 无法验证 OCSP Response 内容而报的错。这个错误可以通过加上 -noverify 参数屏蔽，但更好的做法是通过 -CAfile 指定信任证书，我们可以这样做：\r\n将根证书、全部中间证书按照子证书在上的顺序，保存为 chain.pem。再次执行：</div>\r\n<div>\r\n\r\n[code]\r\nopenssl ocsp -CAfile /usr/local/nginx/cert/chain.pem -issuer /usr/local/nginx/cert/intermediate.pem -cert /usr/local/nginx/cert/site.pem -no_nonce -text -url http://hc.symcd.com\r\n[/code]\r\n\r\n</div>\r\n<div>\r\n<div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-4.png\"><img class=\"size-full wp-image-811 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-4.png\" alt=\"\" width=\"470\" height=\"86\" /></a>Verify OK！搞定了。</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<div>Nginx中加上配置：</div>\r\n<div>\r\n\r\n[code]\r\nssl_stapling               on;\r\nssl_stapling_verify        on;\r\nssl_trusted_certificate    /usr/local/nginx/cert/chain.pem;\r\n[/code]\r\n\r\n</div>\r\n<div>重启Nginx</div>\r\n</div>\r\n<div></div>\r\n<div>再次使用以下命令查看OCSP Stapling是否开启</div>\r\n<div>\r\n\r\n[code]\r\nopenssl s_client -connect www.gzpblog.com:443 -status -tlsextdebug &lt; /dev/null 2&gt;&amp;1 | grep -i &quot;OCSP response&quot;\r\n[/code]\r\n\r\n这时可以看到;\r\nOCSP response:\r\nOCSP Response Data:\r\nOCSP Response Status: successful (0x0)\r\nResponse Type: Basic OCSP Response\r\n说明我们已经成功获取了OCSP Response，OSCP Stapling开启成功。\r\n\r\n</div>\r\n<h3>如果出现：verify error:num=20:unable to get local issuer certificate</h3>\r\n以上的命令，chain.pem等证书部分我都加了路径，这主要是当时不是自己生成证书，openssl的工作路径什么的没有设置。所以我会报错verify error:num=20:unable to get local issuer certificate，这个错误没什么问题，你也可以在命令中加上你的证书： -CAfile /usr/local/nginx/cert/chain.pem\r\n<h2>重新编译Nginx</h2>\r\n按理来说，开启了nginx中的配置中的http2就能生效了。但是我的一直不生效，而且ALPN也没有开启。一直纠结在这里，因为我编译没有设定openssl路径，服务器装的openssl版本是1.1.0的；Nginx版本升级到了1.11.10；然后还是不行。\r\n\r\n最后我发现，问题在于，我虽然没有配置openssl源码路径编译nginx，但是我连--with-openssl都没写，这就导致直接不支持openssl了！犯浑了，于是乎我重新编译了nginx，而且指定了源码进行编译。\r\n\r\n惊讶的发现还是不行。最后发现了原因，是我操作linux系统时的失误，也让我学到一点：\r\n\r\n之前编译过的nginx，加了service的，通过：\r\n\r\n[code]\r\nservice nignx reload\r\n[/code]\r\n\r\n重新启动，新版本不会生效，php-fpm一直监听老版本；然后我通过：\r\n\r\n[code]\r\n/usr/sbin/nginx stop\r\n[/code]\r\n\r\n再\r\n\r\n[code]\r\n/usr/sbin/nginx\r\n[/code]\r\n\r\n然后php-fpm才监听到新版本，之后service nignx reload 就正常了。这个机制我还不太理解是为什么，不过这样操作才可以。\r\n<div>现在确定Nginx是正常的版本之后，重新查看是否支持ALPN，可以看到已经支持h2：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-5.png\"><img class=\"wp-image-812 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-5-1024x77.png\" alt=\"\" width=\"886\" height=\"67\" /></a></div>\r\n<div>\r\n<div>同时网站已经支持http2，确定一开始不行就是因为Nginx没编译好。通过浏览器的请求头我们已经可以看到HTTP/2.0的请求：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-6.png\"><img class=\"size-full wp-image-806 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-6.png\" alt=\"\" width=\"241\" height=\"103\" /></a></div>\r\n<div>同时再看一下google是否已经支持：</div>\r\n<div>可以通过HTTP/2 and SPDY indicator（科学上网获取）这个拓展插件方便查看是否已经启用http2，右上角蓝色闪电标志，说明已启用；或者直接打开chrome://net-internals/#http2查看：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-7.png\"><img class=\" wp-image-807 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-7.png\" alt=\"\" width=\"424\" height=\"286\" /></a></div>\r\n<h2>完成</h2>\r\n<div>HTTP/2升级完毕。其实就是各软件版本要对得上，Nginx编译正确就可以。在完成HTTP/2的升级之后，发现在 <a href=\"https://www.ssllabs.com/ssltest/index.html\" target=\"_blank\">SSL Labs </a>上的评分也由B变成了A+：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-8.png\"><img class=\"size-medium wp-image-813 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-8-300x126.png\" alt=\"\" width=\"300\" height=\"126\" /></a></div>\r\n<div>\r\n<div>虽然达到了A+，不过在https上还有很多优化没做，有时间继续搞。</div>\r\n</div>\r\n</div>', '升级到HTTP/2，性能大提升', 'Nginx的HTTP升级到HTTP2；设置支持ALPN；开启OCSP Stapling；获取证书 OCSP Response', 'inherit', 'closed', 'closed', '', '804-revision-v1', '', '', '2017-03-16 15:25:15', '2017-03-16 07:25:15', '', 804, 'https://www.gzpblog.com/20170316/816.html', 0, 'revision', '', 0),
(819, 1, '2017-03-16 15:30:14', '2017-03-16 07:30:14', '<div>既然上了HTTPS，就肯定得上HTTP2了，HTTP2的速度上升了不止一个档次，让网站飞起来吧。</div>\n<div>升级到HTTP/2其实很简单，我们只需要注意这几点：</div>\n<ol>\n 	<li>HTTP2现在需要HTTPS</li>\n 	<li>HTTP2要求Nginx版本是1.9.5以上</li>\n 	<li>openssl版本要求1.0.2</li>\n 	<li>修改Nginx的配置：在listen 443 ssl 后面加上http2 default_server就行了</li>\n</ol>\n理论上，这样就可以了。但是配置之后通过浏览器请求头看到http的请求还是http1.1的。\n\n于是开启了我的HTTP2折腾之旅。\n<h2>什么是NPN和ALPN?</h2>\n通过测试发现ALPN没开启。NPN开启了，但是ALPN没开启。\n\nNPN，是一个 TLS 扩展，由 Google 在开发 SPDY 协议时提出。随着 SPDY 被 HTTP/2 取代，NPN 也被修订为 ALPN。NPN 是服务端发送所支持的 HTTP 协议列表，由客户端选择；而 ALPN 是客户端发送所支持的 HTTP 协议列表，由服务端选择；是否支持 NPN 或 ALPN 完全取决于使用的 OpenSSL 版本。在Chrome51之后必须ALPN访问http2。\n<div>理论上没有支持ALPN，我们还是可以通过其它浏览器支持http2，但是我发现现在还是不行的。为了排除某些不知道的因素，还是先看一下怎么支持ALPN。</div>\n<div>\n<h2>是否支持ALPN</h2>\n<div>执行命令：</div>\n\n[code]\nopenssl s_client -alpn h2 -servername www.gzpblog.com -connect www.gzpblog.com:443 &lt; /dev/null | grep \'ALPN\'\nNo ALPN negotiated\n[/code]\n\n<div>显然不支持。查了资料发现需要开启OCSP Stapling。</div>\n</div>\n<div>\n<h2>查看OCSP Stapling是否开启</h2>\n</div>\n<div>\n<div>执行命令：</div>\n<div>\n\n[code]\nopenssl s_client -connect www.gzpblog.com:443 -status -tlsextdebug &lt; /dev/null 2&gt;&amp;1 | grep -i &quot;OCSP response&quot;\n[/code]\n\n</div>\n<div>获得的信息是：OCSP response: no response sent</div>\n<div>就是OCSP Stapling还没开启。接下来开启，我们需要获取证书OCSP Response。</div>\n</div>\n<div></div>\n<div>\n<h2>获取证书 OCSP Response</h2>\n<div>这部分参考自取屈大神的一篇：<a href=\"https://imququ.com/post/why-can-not-turn-on-ocsp-stapling.html\" target=\"_blank\">从无法开启 OCSP Stapling 说起</a>，所以我们要做的就是准备好待验证网站证书链上的所有证书。证书链一般由根证书、一个或多个中间证书、站点证书组成。整理好这三个证书。</div>\n<h3>获取根证书</h3>\n根证书因为SSL证书提供商的不同而不同，我的是Symantec的证书。\n\n可以直接通过google浏览器F12-&gt;Security-&gt;View certificate看到根证书：\n\n<a href=\"https://files.gzpblog.com/wp/2017/03/http2-1.png\"><img class=\"wp-image-808 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-1.png\" alt=\"\" width=\"550\" height=\"465\" /></a>\n<div>查到根证书是哪张了，可以通过火狐浏览器导出这张证书：</div>\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-2.png\"><img class=\"wp-image-809 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-2-1024x516.png\" alt=\"\" width=\"831\" height=\"419\" /></a>将导出的证书重命名为：root.pem</div>\n<div>\n<h3>获取中间证书和站点证书</h3>\n有两种情况吧：第一种如果你是通过阿里云等第三方帮你直接生成的证书，比如阿里云的免费证书，下载的证书中public.pem是站点证书，chain.pem是中间证书。第二种情况，就是不管怎么样，你就是找不到你的证书了，那，我们可以这样来弄：\n<div>通过命令：</div>\n\n[code]\nopenssl s_client -connect www.gzpblog.com:443 -showcerts &lt; /dev/null 2&gt;&amp;1\n[/code]\n\n<div>获取到的内容中 Certificate Chain 这一节，编号为 0 的证书是站点证书；编号为 1 的证书是中间证书。比如我的证书链一共是三级，服务端只需要发送两个证书；四级证书链服务端发送三个证书，根证书无需发送。</div>\n<div>将站点证书保存为 site.pem；中间证书保存为 intermediate.pem（如果有多个中间证书，按照子证书在上的顺序保存）</div>\n</div>\n</div>\n<div></div>\n<div>\n<div>验证一下每个证书的 Common Name：</div>\n<div>\n\n[code]\n# openssl x509 -in /usr/local/nginx/cert/site.pem -noout -subject\nsubject= /CN=www.gzpblog.com\n# openssl x509 -in /usr/local/nginx/cert/intermediate.pem -noout -subject\nsubject= /C=US/O=Symantec Corporation/OU=Symantec Trust Network/OU=Domain Validated SSL/CN=Symantec Basic DV SSL CA - G1\n# openssl x509 -in /usr/local/nginx/cert/root.pem -noout -subject\nsubject= /C=US/O=VeriSign, Inc./OU=VeriSign Trust Network/OU=(c) 2006 VeriSign, Inc. - For authorized use only/CN=VeriSign Class 3 Public Primary Certification Authority - G5\n[/code]\n\n</div>\n<div></div>\n<div>获取站点证书的 OCSP 服务地址：</div>\n<div>\n\n[code]\n# openssl x509 -in /usr/local/nginx/cert/site.pem -noout -ocsp_uri\nhttp://hc.symcd.com\n[/code]\n\n</div>\n</div>\n<div></div>\n<div>\n<div>使用以下命令获得站点证书的 OCSP Response：</div>\n<div>\n\n[code]\nopenssl ocsp -issuer /usr/local/nginx/cert/intermediate.pem -cert /usr/local/nginx/cert/site.pem -no_nonce -text -url http://hc.symcd.com\n[/code]\n\n</div>\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-3.png\"><img class=\"alignnone wp-image-810\" src=\"https://files.gzpblog.com/wp/2017/03/http2-3-1024x96.png\" alt=\"\" width=\"830\" height=\"78\" /></a></div>\n<div>可以看到site.pem:good；说明证书合法。出现一个Response Verify Failure，这是因为我们没有告诉 openssl应该信任哪些证书，openssl 无法验证 OCSP Response 内容而报的错。这个错误可以通过加上 -noverify 参数屏蔽，但更好的做法是通过 -CAfile 指定信任证书，我们可以这样做：\n将根证书、全部中间证书按照子证书在上的顺序，保存为 chain.pem。再次执行：</div>\n<div>\n\n[code]\nopenssl ocsp -CAfile /usr/local/nginx/cert/chain.pem -issuer /usr/local/nginx/cert/intermediate.pem -cert /usr/local/nginx/cert/site.pem -no_nonce -text -url http://hc.symcd.com\n[/code]\n\n</div>\n<div>\n<div>\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-4.png\"><img class=\"size-full wp-image-811 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-4.png\" alt=\"\" width=\"470\" height=\"86\" /></a>Verify OK！搞定了。</div>\n</div>\n</div>\n</div>\n<div></div>\n<div>\n<div>Nginx中加上配置：</div>\n<div>\n\n[code]\nssl_stapling               on;\nssl_stapling_verify        on;\nssl_trusted_certificate    /usr/local/nginx/cert/chain.pem;\n[/code]\n\n</div>\n<div>重启Nginx</div>\n</div>\n<div></div>\n<div>再次使用以下命令查看OCSP Stapling是否开启</div>\n<div>\n\n[code]\nopenssl s_client -connect www.gzpblog.com:443 -status -tlsextdebug &lt; /dev/null 2&gt;&amp;1 | grep -i &quot;OCSP response&quot;\n[/code]\n\n这时可以看到;\nOCSP response:\nOCSP Response Data:\nOCSP Response Status: successful (0x0)\nResponse Type: Basic OCSP Response\n说明我们已经成功获取了OCSP Response，OSCP Stapling开启成功。\n\n</div>\n<h3>如果出现：verify error:num=20:unable to get local issuer certificate</h3>\n以上的命令，chain.pem等证书部分我都加了路径，这主要是当时不是自己生成证书，openssl的工作路径什么的没有设置。所以我会报错verify error:num=20:unable to get local issuer certificate，这个错误没什么问题，你也可以在命令中加上你的证书： -CAfile /usr/local/nginx/cert/chain.pem\n<h2>重新编译Nginx</h2>\n按理来说，开启了nginx中的配置中的http2就能生效了。但是我的一直不生效，而且ALPN也没有开启。一直纠结在这里，因为我编译没有设定openssl路径，服务器装的openssl版本是1.1.0的；Nginx版本升级到了1.11.10；然后还是不行。\n\n最后我发现，问题在于，我虽然没有配置openssl源码路径编译nginx，但是我连--with-openssl都没写，这就导致直接不支持openssl了！犯浑了，于是乎我重新编译了nginx，而且指定了源码进行编译。\n\n惊讶的发现还是不行。最后发现了原因，是我操作linux系统时的失误，也让我学到一点：\n\n之前编译过的nginx，加了service的，通过：\n\n[code]\nservice nignx reload\n[/code]\n\n重新启动，新版本不会生效，php-fpm一直监听老版本；然后我通过：\n\n[code]\n/usr/sbin/nginx stop\n[/code]\n\n再\n\n[code]\n/usr/sbin/nginx\n[/code]\n\n然后php-fpm才监听到新版本，之后service nignx reload 就正常了。这个机制我还不太理解是为什么，不过这样操作才可以。\n<div>现在确定Nginx是正常的版本之后，重新查看是否支持ALPN，可以看到已经支持h2：</div>\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-5.png\"><img class=\"wp-image-812 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-5-1024x77.png\" alt=\"\" width=\"886\" height=\"67\" /></a></div>\n<div>\n<div>同时网站已经支持http2，确定一开始不行就是因为Nginx没编译好。通过浏览器的请求头我们已经可以看到HTTP/2.0的请求：</div>\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-6.png\"><img class=\"size-full wp-image-806 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-6.png\" alt=\"\" width=\"241\" height=\"103\" /></a></div>\n<div>同时再看一下google是否已经支持：</div>\n<div>可以通过HTTP/2 and SPDY indicator（科学上网获取）这个拓展插件方便查看是否已经启用http2，右上角蓝色闪电标志，说明已启用；或者直接打开chrome://net-internals/#http2查看：</div>\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-7.png\"><img class=\" wp-image-807 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-7.png\" alt=\"\" width=\"424\" height=\"286\" /></a></div>\n<h2>完成</h2>\n<div>HTTP/2升级完毕。其实就是各软件版本要对得上，Nginx编译正确就可以。在完成HTTP/2的升级之后，发现在 <a href=\"https://www.ssllabs.com/ssltest/index.html\" target=\"_blank\">SSL Labs </a>上的评分也由B变成了A+：</div>\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-8.png\"><img class=\"size-medium wp-image-813 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-8-300x126.png\" alt=\"\" width=\"300\" height=\"126\" /></a></div>\n<div>\n<div>虽然达到了A+，不过在https上还有很多优化没做，有时间继续搞。</div>\n</div>\n</div>', '升级到HTTP/2，性能大提升', 'Nginx的HTTP升级到HTTP2；设置支持ALPN；开启OCSP Stapling；获取证书 OCSP Response', 'inherit', 'closed', 'closed', '', '804-autosave-v1', '', '', '2017-03-16 15:30:14', '2017-03-16 07:30:14', '', 804, 'https://www.gzpblog.com/20170316/819.html', 0, 'revision', '', 0),
(820, 1, '2017-03-16 15:33:25', '2017-03-16 07:33:25', '<div>既然上了HTTPS，就肯定得上HTTP2了，HTTP2的速度上升了不止一个档次，让网站飞起来吧。</div>\r\n<div>升级到HTTP/2其实很简单，我们只需要注意这几点：</div>\r\n<ol>\r\n 	<li>HTTP2现在需要HTTPS</li>\r\n 	<li>HTTP2要求Nginx版本是1.9.5以上</li>\r\n 	<li>openssl版本要求1.0.2</li>\r\n 	<li>修改Nginx的配置：在listen 443 ssl 后面加上http2 default_server就行了</li>\r\n</ol>\r\n理论上，这样就可以了。但是配置之后通过浏览器请求头看到http的请求还是http1.1的。\r\n\r\n于是开启了我的HTTP2折腾之旅。\r\n<h2>什么是NPN和ALPN?</h2>\r\n通过测试发现ALPN没开启。NPN开启了，但是ALPN没开启。\r\n\r\nNPN，是一个 TLS 扩展，由 Google 在开发 SPDY 协议时提出。随着 SPDY 被 HTTP/2 取代，NPN 也被修订为 ALPN。NPN 是服务端发送所支持的 HTTP 协议列表，由客户端选择；而 ALPN 是客户端发送所支持的 HTTP 协议列表，由服务端选择；是否支持 NPN 或 ALPN 完全取决于使用的 OpenSSL 版本。在Chrome51之后必须ALPN访问http2。\r\n<div>理论上没有支持ALPN，我们还是可以通过其它浏览器支持http2，但是我发现现在还是不行的。为了排除某些不知道的因素，还是先看一下怎么支持ALPN。</div>\r\n<div>\r\n<h2>是否支持ALPN</h2>\r\n<div>执行命令：</div>\r\n\r\n[code]\r\nopenssl s_client -alpn h2 -servername www.gzpblog.com -connect www.gzpblog.com:443 &lt; /dev/null | grep \'ALPN\'\r\nNo ALPN negotiated\r\n[/code]\r\n\r\n<div>显然不支持。查了资料发现需要开启OCSP Stapling。</div>\r\n</div>\r\n<div>\r\n<h2>查看OCSP Stapling是否开启</h2>\r\n</div>\r\n<div>\r\n<div>执行命令：</div>\r\n<div>\r\n\r\n[code]\r\nopenssl s_client -connect www.gzpblog.com:443 -status -tlsextdebug &lt; /dev/null 2&gt;&amp;1 | grep -i &quot;OCSP response&quot;\r\n[/code]\r\n\r\n</div>\r\n<div>获得的信息是：OCSP response: no response sent</div>\r\n<div>就是OCSP Stapling还没开启。接下来开启，我们需要获取证书OCSP Response。</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h2>获取证书 OCSP Response</h2>\r\n<div>这部分参考自取屈大神的一篇：<a href=\"https://imququ.com/post/why-can-not-turn-on-ocsp-stapling.html\" target=\"_blank\">从无法开启 OCSP Stapling 说起</a>，所以我们要做的就是准备好待验证网站证书链上的所有证书。证书链一般由根证书、一个或多个中间证书、站点证书组成。整理好这三个证书。</div>\r\n<h3>获取根证书</h3>\r\n根证书因为SSL证书提供商的不同而不同，我的是Symantec的证书。\r\n\r\n可以直接通过google浏览器F12-&gt;Security-&gt;View certificate看到根证书：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/http2-1.png\"><img class=\"wp-image-808 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-1.png\" alt=\"\" width=\"550\" height=\"465\" /></a>\r\n<div>查到根证书是哪张了，可以通过火狐浏览器导出这张证书：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-2.png\"><img class=\"wp-image-809 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-2-1024x516.png\" alt=\"\" width=\"831\" height=\"419\" /></a>将导出的证书重命名为：root.pem</div>\r\n<div>\r\n<h3>获取中间证书和站点证书</h3>\r\n有两种情况吧：第一种如果你是通过阿里云等第三方帮你直接生成的证书，比如阿里云的免费证书，下载的证书中public.pem是站点证书，chain.pem是中间证书。第二种情况，就是不管怎么样，你就是找不到你的证书了，那，我们可以这样来弄：\r\n<div>通过命令：</div>\r\n\r\n[code]\r\nopenssl s_client -connect www.gzpblog.com:443 -showcerts &lt; /dev/null 2&gt;&amp;1\r\n[/code]\r\n\r\n<div>获取到的内容中 Certificate Chain 这一节，编号为 0 的证书是站点证书；编号为 1 的证书是中间证书。比如我的证书链一共是三级，服务端只需要发送两个证书；四级证书链服务端发送三个证书，根证书无需发送。</div>\r\n<div>将站点证书保存为 site.pem；中间证书保存为 intermediate.pem（如果有多个中间证书，按照子证书在上的顺序保存）</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<div>验证一下每个证书的 Common Name：</div>\r\n<div>\r\n\r\n[code]\r\n# openssl x509 -in /usr/local/nginx/cert/site.pem -noout -subject\r\nsubject= /CN=www.gzpblog.com\r\n# openssl x509 -in /usr/local/nginx/cert/intermediate.pem -noout -subject\r\nsubject= /C=US/O=Symantec Corporation/OU=Symantec Trust Network/OU=Domain Validated SSL/CN=Symantec Basic DV SSL CA - G1\r\n# openssl x509 -in /usr/local/nginx/cert/root.pem -noout -subject\r\nsubject= /C=US/O=VeriSign, Inc./OU=VeriSign Trust Network/OU=(c) 2006 VeriSign, Inc. - For authorized use only/CN=VeriSign Class 3 Public Primary Certification Authority - G5\r\n[/code]\r\n\r\n</div>\r\n<div></div>\r\n<div>获取站点证书的 OCSP 服务地址：</div>\r\n<div>\r\n\r\n[code]\r\n# openssl x509 -in /usr/local/nginx/cert/site.pem -noout -ocsp_uri\r\nhttp://hc.symcd.com\r\n[/code]\r\n\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<div>使用以下命令获得站点证书的 OCSP Response：</div>\r\n<div>\r\n\r\n[code]\r\nopenssl ocsp -issuer /usr/local/nginx/cert/intermediate.pem -cert /usr/local/nginx/cert/site.pem -no_nonce -text -url http://hc.symcd.com\r\n[/code]\r\n\r\n</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-3.png\"><img class=\"alignnone wp-image-810\" src=\"https://files.gzpblog.com/wp/2017/03/http2-3-1024x96.png\" alt=\"\" width=\"830\" height=\"78\" /></a></div>\r\n<div>可以看到site.pem:good；说明证书合法。出现一个Response Verify Failure，这是因为我们没有告诉 openssl应该信任哪些证书，openssl 无法验证 OCSP Response 内容而报的错。这个错误可以通过加上 -noverify 参数屏蔽，但更好的做法是通过 -CAfile 指定信任证书，我们可以这样做：\r\n将根证书、全部中间证书按照子证书在上的顺序，保存为 chain.pem。再次执行：</div>\r\n<div>\r\n\r\n[code]\r\nopenssl ocsp -CAfile /usr/local/nginx/cert/chain.pem -issuer /usr/local/nginx/cert/intermediate.pem -cert /usr/local/nginx/cert/site.pem -no_nonce -text -url http://hc.symcd.com\r\n[/code]\r\n\r\n</div>\r\n<div>\r\n<div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-4.png\"><img class=\"size-full wp-image-811 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-4.png\" alt=\"\" width=\"470\" height=\"86\" /></a>Verify OK！搞定了。</div>\r\n</div>\r\n</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<div>Nginx中加上配置：</div>\r\n<div>\r\n\r\n[code]\r\nssl_stapling               on;\r\nssl_stapling_verify        on;\r\nssl_trusted_certificate    /usr/local/nginx/cert/chain.pem;\r\n[/code]\r\n\r\n</div>\r\n<div>重启Nginx</div>\r\n</div>\r\n<div></div>\r\n<div>再次使用以下命令查看OCSP Stapling是否开启</div>\r\n<div>\r\n\r\n[code]\r\nopenssl s_client -connect www.gzpblog.com:443 -status -tlsextdebug &lt; /dev/null 2&gt;&amp;1 | grep -i &quot;OCSP response&quot;\r\n[/code]\r\n\r\n这时可以看到;\r\nOCSP response:\r\nOCSP Response Data:\r\nOCSP Response Status: successful (0x0)\r\nResponse Type: Basic OCSP Response\r\n说明我们已经成功获取了OCSP Response，OSCP Stapling开启成功。\r\n\r\n</div>\r\n<h3>如果出现：verify error:num=20:unable to get local issuer certificate</h3>\r\n以上的命令，chain.pem等证书部分我都加了路径，这主要是当时不是自己生成证书，openssl的工作路径什么的没有设置。所以我会报错verify error:num=20:unable to get local issuer certificate，这个错误没什么问题，你也可以在命令中加上你的证书： -CAfile /usr/local/nginx/cert/chain.pem\r\n<h2>重新编译Nginx</h2>\r\n按理来说，开启了nginx中的配置中的http2就能生效了。但是我的一直不生效，而且ALPN也没有开启。一直纠结在这里，因为我编译没有设定openssl路径，服务器装的openssl版本是1.1.0的；Nginx版本升级到了1.11.10；然后还是不行。\r\n\r\n最后我发现，问题在于，我虽然没有配置openssl源码路径编译nginx，但是我连--with-openssl都没写，这就导致直接不支持openssl了！犯浑了，于是乎我重新编译了nginx，而且指定了源码进行编译。\r\n\r\n惊讶的发现还是不行。最后发现了原因，是我操作linux系统时的失误，也让我学到一点：\r\n\r\n之前编译过的nginx，加了service的，通过：\r\n\r\n[code]\r\nservice nignx reload\r\n[/code]\r\n\r\n重新启动，新版本不会生效，php-fpm一直监听老版本；然后我通过：\r\n\r\n[code]\r\n/usr/sbin/nginx stop\r\n[/code]\r\n\r\n再\r\n\r\n[code]\r\n/usr/sbin/nginx\r\n[/code]\r\n\r\n然后php-fpm才监听到新版本，之后service nignx reload 就正常了。这个机制我还不太理解是为什么，不过这样操作才可以。\r\n<div>现在确定Nginx是正常的版本之后，重新查看是否支持ALPN，可以看到已经支持h2：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-5.png\"><img class=\"wp-image-812 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-5-1024x77.png\" alt=\"\" width=\"886\" height=\"67\" /></a></div>\r\n<div>\r\n<div>同时网站已经支持http2，确定一开始不行就是因为Nginx没编译好。通过浏览器的请求头我们已经可以看到HTTP/2.0的请求：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-6.png\"><img class=\"size-full wp-image-806 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-6.png\" alt=\"\" width=\"241\" height=\"103\" /></a></div>\r\n<div>同时再看一下google是否已经支持：</div>\r\n<div>可以通过HTTP/2 and SPDY indicator（科学上网获取）这个拓展插件方便查看是否已经启用http2，右上角蓝色闪电标志，说明已启用；或者直接打开chrome://net-internals/#http2查看：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-7.png\"><img class=\" wp-image-807 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-7.png\" alt=\"\" width=\"424\" height=\"286\" /></a></div>\r\n<h2>完成</h2>\r\n<div>HTTP/2升级完毕。其实就是各软件版本要对得上，Nginx编译正确就可以。在完成HTTP/2的升级之后，发现在 <a href=\"https://www.ssllabs.com/ssltest/index.html\" target=\"_blank\">SSL Labs </a>上的评分也由B变成了A+：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/http2-8.png\"><img class=\"size-medium wp-image-813 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/http2-8-300x126.png\" alt=\"\" width=\"300\" height=\"126\" /></a></div>\r\n<div>\r\n<div>虽然达到了A+，不过在https上还有很多优化没做，有时间继续搞。</div>\r\n</div>\r\n</div>', '升级到HTTP/2，性能大提升', 'Nginx的HTTP升级到HTTP2；设置支持ALPN；开启OCSP Stapling；获取证书 OCSP Response', 'inherit', 'closed', 'closed', '', '804-revision-v1', '', '', '2017-03-16 15:33:25', '2017-03-16 07:33:25', '', 804, 'https://www.gzpblog.com/20170316/820.html', 0, 'revision', '', 0),
(822, 1, '2017-03-18 02:00:41', '2017-03-17 18:00:41', '此时我的心里简直千万只草泥马在奔腾啊。\r\n\r\n今天八点半加完班，然后吃晚饭去剪头发。楼下就有一家美容美发，兴高采烈地进去了。洗头时，问我，要98的首席，150的啥啥，还是250的总监剪头发。我一听，卧槽这么贵，我剪头发最贵也就剪40多！然后一想，可能这家比较高端，“不用那么贵的！”“可以啊！那就98的吧？”\r\n\r\n坐下来剪了。那小伙子就问我想怎么怎么剪，然后还说想不想有点改变啊，换个造型怎么样怎么样的。还拿了照片给我看，我头一热，就说好了。然后那货就稍微两边一弄，“看这型就出来了吧！”搞得似乎很专业！“你看这地方，做个定型吧。这样塌着不好看。”我看着，似乎好像有道理，是不好看，因为之前也烫过头发，感觉应该不会贵到哪去，而且他说“不是烫，就是做个定型！”我估摸着顶个型会有多贵，就准了。刚说完旁边另一个小哥那个液体就往我头上滴了。\r\n\r\n然后剪头发那货拿着本本来了。上面380,680,980,1280！说：“看一下我们的价格哦，38，68，98，128，我觉得我们不用做那么好，68的就好了，之前烫过头发吗？”“烫过”“那就98的吧，滋润修复一点，原价980，现在打折只要98”。\r\n\r\n我心里虎躯一震，这折这么夸张？“平时没有的哦，我们现在十周年庆，才有这么便宜。”“这效果能有多久啊。”“这个，一年是有的！”\r\n\r\n真（ciao）的（ni）吗（m）！你当我傻的啊，能有一年！不过我一想，以前烫头发说半年效果最后两个月效果就没了，我就算了不跟他说了，感觉美发店都是这个德性吧！我就让他做了。“会员打一折，我去给你申请一下会员。”然后拿着一张纸过来了，“来签个字吧，一折98，以后剪头发都是29块了，这次消费就是118，没错的这里签个字。”\r\n\r\n那货去前台的瞬间，我就想。雾草？会员卡？我有不好的预感！雾草，是不是分分钟几千啊！果然，我看到了4位数4位数的本本拿过来了，最夸张那个100000的终极会员卡。“要这么贵？”“因为我们不仅是美发，还有美容护肤等等，你要是平时只剪头发的话，只要2000的就可以了。”“2000花不完啊！”“我们是全国连锁的，我们总部在北京，你看我就是北京调过来的，你应该听得出来吧。我这人很直接，不会骗你。你在其它地方都能用，也可以给朋友用啊！这个没规定的。”我听着确实一口北方口音，就问：“深圳还有其它店啊？”“深圳五十多家呢，我们连锁的。”虽然感觉2000有点夸张，但是这种钱相当于充进去的还能用的，这次还打折，也未尝不可。\r\n\r\n<strong>然后我就跟脑袋被驴了一样的，办了一张会员卡！</strong>\r\n\r\n办完会员卡，一个妹子服务员就给端上来水果和一碗汤，这服务，可以啊。\r\n\r\n那货对着一旁的小哥说，“等一下好了去冲一下，送的1100多的保养给弄上！”哎哟喂，还送这玩意？就在我躺下来给他冲水的水货，我一贯警觉的神经突然抽了一下！我突然！意识到了！什么！洗完头，剪头发那货还不见了，就刚才给我打药水那货帮我稍微修了两下头发就完事了！\r\n\r\n然后我查了一下“范斯哲”这个牌子，查出来是意大利知名的奢侈品牌范思哲，我再搜一下“范思哲美容美发”！竟（wo）然（cao）深圳只有三四家店！北京没有店！卧槽那位北京调过来的经理你去哪了？难怪我冲完头发回来人就不见了！我看了一下我刷卡的交易商户，竟然是深圳市宝安区利成超市，一个美容美发的，竟然刷到超市去了！我再查了一下网上其它评价，也有人吐槽被骗，捆绑消费，强制消费，这个公司三个品牌，全部超级低分，全部都是被骗的议论。\r\n\r\n然后我就知道我被骗了。想不到！聪明一世，糊涂一时啊！我平时那么注意的一个人，竟然也被坑了！我当时是脑子进啥了啊还是加班加傻了啊。\r\n\r\n回家洗了个头，望着塌下来的头发，心在滴血。', '无良商家啊！把我给骗了。', '', 'inherit', 'closed', 'closed', '', '821-revision-v1', '', '', '2017-03-18 02:00:41', '2017-03-17 18:00:41', '', 821, 'https://www.gzpblog.com/20170318/822.html', 0, 'revision', '', 0),
(823, 1, '2017-03-18 02:05:24', '2017-03-17 18:05:24', '此时我的心里简直千万只草泥马在奔腾啊。\r\n\r\n今天八点半加完班，然后吃晚饭去剪头发。楼下就有一家美容美发，兴高采烈地进去了。洗头时，问我，要98的首席，150的啥啥，还是250的总监剪头发。我一听，卧槽这么贵，我剪头发最贵也就剪40多！然后一想，可能这家比较高端，“不用那么贵的！”“可以啊！那就98的吧？”\r\n\r\n坐下来剪了。那小伙子就问我想怎么怎么剪，然后还说想不想有点改变啊，换个造型怎么样怎么样的。还拿了照片给我看，我头一热，就说好了。然后那货就稍微两边一弄，“看这型就出来了吧！”搞得似乎很专业！“你看这地方，做个定型吧。这样塌着不好看。”我看着，似乎好像有道理，是不好看，因为之前也烫过头发，感觉应该不会贵到哪去，而且他说“不是烫，就是做个定型！”我估摸着定个型会有多贵，就准了。刚说完旁边另一个小哥那个液体就往我头上滴了。\r\n\r\n然后剪头发那货拿着本本来了。上面380,680,980,1280！说：“看一下我们的价格哦，38，68，98，128，我觉得我们不用做那么好，68的就好了，之前烫过头发吗？”“烫过”“那就98的吧，滋润修复一点，原价980，现在打折只要98”。\r\n\r\n我心里虎躯一震，这折这么夸张？“平时没有的哦，我们现在十周年庆，才有这么便宜。”“这效果能有多久啊。”“这个，一年是有的！”\r\n\r\n真（ciao）的（ni）吗（m）！你当我傻的啊，能有一年！不过我一想，以前烫头发说半年效果最后两个月效果就没了，我就算了不跟他说了，感觉美发店都是这个德性吧！我就让他做了。“会员打一折，我去给你申请一下会员。”然后拿着一张纸过来了，“来签个字吧，一折98，办了会员以后剪头发都是20块了，这次消费就是118，没错的这里签个字。”\r\n\r\n那货去前台的瞬间，我就想。雾草？会员卡？我有不好的预感！雾草，是不是分分钟几千啊！果然，我看到了4位数4位数的本本拿过来了，最夸张那个100000的终极会员卡。“要这么贵？”“因为我们不仅是美发，还有美容护肤等等，你要是平时只剪头发的话，只要2000的就可以了。”“2000花不完啊！”“我们是全国连锁的，我们总部在北京，你看我就是北京调过来的，你应该听得出来吧。我这人很直接，不会骗你。你在其它地方都能用，也可以给朋友用啊！这个没规定的。”我听着确实一口北方口音，就问：“深圳还有其它店啊？”“深圳五十多家呢，我们连锁的。”虽然感觉2000有点夸张，但是这种钱相当于充进去的还能用的，这次还打折，也未尝不可。\r\n\r\n<strong>然后我就跟脑袋被驴了一样的，办了一张会员卡！</strong>\r\n\r\n办完会员卡，一个妹子服务员就给端上来水果和一碗汤，这服务，可以啊。\r\n\r\n那货对着一旁的小哥说，“等一下好了去冲一下，送的1100多的保养给弄上！”哎哟喂，还送这玩意？就在我躺下来给他冲水的时候，我一贯警觉的神经突然抽了一下！我突然！意识到了！什么！洗完头，剪头发那货还不见了，就刚才给我打药水那货帮我稍微修了两下头发就完事了！\r\n\r\n然后我查了一下“范斯哲”这个牌子，查出来是意大利知名的奢侈品牌范思哲，我再搜一下“范思哲美容美发”！竟（wo）然（cao）深圳只有三四家店！北京没有店！卧槽那位北京调过来的经理你去哪了？难怪我冲完头发回来人就不见了！我看了一下我刷卡的交易商户，竟然是深圳市宝安区利成超市，一个美容美发的，竟然刷到超市去了！我再查了一下网上其它评价，也有人吐槽被骗，捆绑消费，强制消费，这个公司三个品牌，全部超级低分，全部都是被骗的议论。\r\n\r\n然后我就知道我被骗了。想不到！聪明一世，糊涂一时啊！我平时那么注意的一个人，竟然也被坑了！我当时是脑子进啥了啊还是加班加傻了啊。\r\n\r\n<strong>回家洗了个头，望着塌下来的头发，心在滴血。</strong>', '无良商家啊！把我给骗了。', '', 'inherit', 'closed', 'closed', '', '821-revision-v1', '', '', '2017-03-18 02:05:24', '2017-03-17 18:05:24', '', 821, 'https://www.gzpblog.com/20170318/823.html', 0, 'revision', '', 0),
(850, 1, '2017-03-30 22:25:45', '2017-03-30 14:25:45', '最近接触阿里云的对象存储OSS有点多，不管是个人使用，还是公司使用，使用的频率还是很高的。为了方便下次要用时直接套进去，整了一个资源包：阿里云oss-php-sdk，plupload的web直传，JqueryUI样式等的合集，扔进了Thinkphp5里。\r\n\r\ngithub地址：<a href=\"https://github.com/ZpGuo/aliyun-oss-for-thinkphp5\" target=\"_blank\"> ZpGuo/aliyun-oss-for-thinkphp5</a>\r\n<h3>与阿里云官方SDK的区别：</h3>\r\n<ul>\r\n 	<li>样式升级；阿里云Oss-Web直传最佳实践（可回调）升级版，载入Plupload提供的JqueryUI样式。</li>\r\n 	<li>结合引入oss-php-sdk，可以直接拓展使用oss-php-sdk功能。</li>\r\n 	<li>修改config.php中的配置就可以使用。</li>\r\n</ul>\r\n<h3>版本说明：</h3>\r\n<ul>\r\n 	<li>JQuery 版本1.12.4</li>\r\n 	<li>JQuery UI版本1.12.1，主题Cupertino</li>\r\n 	<li>Thinkphp 版本5.0.2</li>\r\n 	<li>Plupload.js 版本2.1.X</li>\r\n 	<li>阿里云Oss官方SDK 版本2.2.2</li>\r\n</ul>\r\n<h3>预览：</h3>\r\nweb值传的界面：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/aliyun-tp5-look-like.png\"><img class=\"size-full wp-image-851 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/aliyun-tp5-look-like.png\" alt=\"\" width=\"693\" height=\"316\" /></a>\r\n<h3>其它说明：</h3>\r\n<ul>\r\n 	<li>保留了引入拓展的后续升级的可能</li>\r\n 	<li>可以更换JqueryUI的样式主题，前往官网Jquery UI定制下载：<a href=\"http://jqueryui.com/download/\" target=\"_blank\">Jquery UI </a></li>\r\n 	<li>目前就是一个打包，功能不多，之后看看公司项目需求，完善一下功能，或者把Controller功能补完</li>\r\n 	<li>跨域时记得在阿里云OSS跨域设置中设置Cors规则</li>\r\n</ul>\r\n<h3>更多文档：</h3>\r\n<ol>\r\n 	<li>Plupload官网：<a href=\"http://www.plupload.com/\" target=\"_blank\">Plupload: Multi-runtime File-Uploader</a></li>\r\n 	<li>阿里云Oss：<a href=\"https://help.aliyun.com/document_detail/32099.html?spm=5176.product31815.6.744.SAFZWk\" target=\"_blank\">PHP-SDK</a></li>\r\n 	<li>阿里云Oss最佳实践Web端直传：<a href=\"https://help.aliyun.com/document_detail/31927.html?spm=5176.doc32099.6.625.la8OMv\" target=\"_blank\">服务端签名直传并设置上传回调</a></li>\r\n</ol>\r\n&nbsp;', '阿里云Oss+Thinkphp5，Web一站式可拓展包', '', 'publish', 'open', 'closed', '', '%e9%98%bf%e9%87%8c%e4%ba%91ossthinkphp5%ef%bc%8cweb%e4%b8%80%e7%ab%99%e5%bc%8f%e5%8f%af%e6%8b%93%e5%b1%95%e5%8c%85', '', '', '2017-03-30 22:35:29', '2017-03-30 14:35:29', '', 0, 'https://www.gzpblog.com/?p=850', 0, 'post', '', 6),
(828, 1, '2017-03-21 14:51:57', '2017-03-21 06:51:57', '', 'https_youhua5', '', 'inherit', 'open', 'closed', '', 'https_youhua5', '', '', '2017-03-21 14:51:57', '2017-03-21 06:51:57', '', 0, 'https://www.gzpblog.com/wp-content/uploads/2017/03/https_youhua5.png', 0, 'attachment', 'image/png', 0),
(829, 1, '2017-03-21 14:51:58', '2017-03-21 06:51:58', '', 'https_youhua6', '', 'inherit', 'open', 'closed', '', 'https_youhua6', '', '', '2017-03-21 14:51:58', '2017-03-21 06:51:58', '', 0, 'https://www.gzpblog.com/wp-content/uploads/2017/03/https_youhua6.png', 0, 'attachment', 'image/png', 0),
(830, 1, '2017-03-21 14:52:00', '2017-03-21 06:52:00', '', 'https_youhua7', '', 'inherit', 'open', 'closed', '', 'https_youhua7', '', '', '2017-03-21 14:52:00', '2017-03-21 06:52:00', '', 0, 'https://www.gzpblog.com/wp-content/uploads/2017/03/https_youhua7.png', 0, 'attachment', 'image/png', 0),
(831, 1, '2017-03-21 14:52:02', '2017-03-21 06:52:02', '', 'https_youhua1', '', 'inherit', 'open', 'closed', '', 'https_youhua1', '', '', '2017-03-21 14:52:02', '2017-03-21 06:52:02', '', 0, 'https://www.gzpblog.com/wp-content/uploads/2017/03/https_youhua1.png', 0, 'attachment', 'image/png', 0),
(832, 1, '2017-03-21 14:52:04', '2017-03-21 06:52:04', '', 'https_youhua2', '', 'inherit', 'open', 'closed', '', 'https_youhua2', '', '', '2017-03-21 14:52:04', '2017-03-21 06:52:04', '', 0, 'https://www.gzpblog.com/wp-content/uploads/2017/03/https_youhua2.png', 0, 'attachment', 'image/png', 0),
(833, 1, '2017-03-21 14:52:06', '2017-03-21 06:52:06', '', 'https_youhua3', '', 'inherit', 'open', 'closed', '', 'https_youhua3', '', '', '2017-03-21 14:52:06', '2017-03-21 06:52:06', '', 0, 'https://www.gzpblog.com/wp-content/uploads/2017/03/https_youhua3.png', 0, 'attachment', 'image/png', 0),
(834, 1, '2017-03-21 14:52:07', '2017-03-21 06:52:07', '', 'https_youhua4', '', 'inherit', 'open', 'closed', '', 'https_youhua4', '', '', '2017-03-21 14:52:07', '2017-03-21 06:52:07', '', 0, 'https://www.gzpblog.com/wp-content/uploads/2017/03/https_youhua4.png', 0, 'attachment', 'image/png', 0),
(835, 1, '2017-03-21 15:15:42', '2017-03-21 07:15:42', '又拍云有一篇文章<a href=\"https://mp.weixin.qq.com/s/s-se0oeiuiF9UM7PiF-QCw\" target=\"_blank\">突破这5个技术难点，HTTPS会好用到飞起来~ </a>，总结的五个技术难点，HSTS、HTTP/2、OSCP stapling、Session ID、SNI技术。现在基本我都解决了。\r\n<div>目前在<a href=\"https://www.ssllabs.com/ssltest/\" target=\"_blank\">ssllabs</a>上的评分：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua1.png\"><img class=\"size-medium wp-image-831 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua1-300x146.png\" alt=\"\" width=\"300\" height=\"146\" /></a></div>\r\n<div>sslbals上的评分已经达到A+，不过还有一点东西需要处理。然而在<a href=\"https://httpsecurityreport.com/\" target=\"_blank\">HTTP Security Report</a>上测出来，问题还很多：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua2.png\"><img class=\"wp-image-832 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua2-1024x729.png\" alt=\"\" width=\"562\" height=\"400\" /></a></div>\r\n<div>\r\n<div>现在开始一块块地优化细节。</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h2>DNS CAA</h2>\r\n<div>sslbals测试出来Server Key and Certificate这一块DNS CAA是NO。</div>\r\n<div>关于CAA的介绍这里有个链接<a href=\"https://sslmate.com/labs/caa/\" target=\"_blank\">https://sslmate.com/labs/caa/</a>；大概就是说CAA是一种DNS记录类型，可以让你控制哪些证书颁发机构可以为您的域颁发证书。这个应该是跟CA方的支持有关系的：</div>\r\n</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua3.png\"><img class=\"wp-image-833 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua3.png\" alt=\"\" width=\"531\" height=\"404\" /></a></div>\r\n<div>\r\n<div>我的证书CA是Symantec，从这里看确实是不支持，而且还是unknown policy。那这个可以不管了。</div>\r\n</div>\r\n<div>\r\n<h2>Session resumption</h2>\r\nsslbals测试出来Protocol Details这里，Session resumption (caching)是No (IDs assigned but not accepted)。\r\n这个是ssl_session配置的问题，主要是这两个配置：\r\n\r\n<strong>ssl_session_cache</strong> 设置储存SSL会话的缓存类型和大小。\r\n默认值：ssl_session_cache off\r\noff为关闭，还有一些其它的缓存类型，不过这里建议使用shared共享缓存类型，这种方法更为有效。\r\n\r\n<strong>ssl_session_timeout</strong> 客户端能够反复使用储存在缓存中的会话参数时间\r\n\r\n看了一下session这一部分我的配置：\r\n\r\nssl_session_timeout 5m;\r\n\r\n我把它改为：\r\n\r\nssl_session_cache shared:SSL:50m;\r\nssl_session_timeout 1d;\r\n\r\n共享缓存，缓存大小为50m，缓存时间1天。\r\n修改后这一项就没问题了。现在ssllabs上测试出来，该绿的都绿了。剩下一些SNI，比如XP系统下的IE6IE8什么的，可能无法支持ssl，不过我觉得这个可以忽略了。现在用xp的ie的估计不多了，然后用这玩意访问我的博客的，估计可以忽略了。\r\n\r\n</div>\r\n<h2>X-Frame-Options 响应头</h2>\r\nX-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 &lt;frame&gt;, &lt;iframe&gt; 或者 &lt;object&gt; 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。\r\nX-Frame-Options 有三个值:\r\n\r\n<strong>DENY</strong>\r\n表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。\r\n\r\n<strong>SAMEORIGIN</strong>\r\n表示该页面可以在相同域名页面的 frame 中展示。\r\n\r\n<strong>ALLOW-FROM uri</strong>\r\n表示该页面可以在指定来源的 frame 中展示。\r\n就是说，如果设置为 DENY，不光在别人的网站 frame 嵌入时会无法加载，在同域名页面中同样会无法加载；如果设置为 SAMEORIGIN，那么页面就可以在同域名页面的 frame 中嵌套。我们只需要设置为 SAMEORIGIN 就好。\r\n\r\n<strong>配置 Apache</strong>\r\n配置 Apache 在所有页面上发送 X-Frame-Options 响应头，需要把下面这行添加到 \'site\' 的配置中：\r\nHeader always append X-Frame-Options SAMEORIGIN\r\n\r\n<strong>配置 nginx</strong>\r\n配置 nginx 发送 X-Frame-Options 响应头，把下面这行添加到 \'http\', \'server\' 或者 \'location\' 的配置中：\r\nadd_header X-Frame-Options SAMEORIGIN;\r\n\r\n<strong>CSP Level 2 规范中的 frame-ancestors 指令会替代这个非标准的 header。</strong>CSP 的 frame-ancestors 会在 Gecko 4.0 中支持，但是并不会被所有浏览器支持。然而 X-Frame-Options 是个已广泛支持的非官方标准，可以和 CSP 结合使用。\r\n<h2>X-Content-Type-Options</h2>\r\nX-Content-Type-Options响应HTTP头是服务器用来指示MIME类型Content-type头部不能被改变的标记。这允许不参加MIME类型探查法，换句话说就是网站管理员知道他们在说什么。\r\nNginx中配置：\r\n\r\nadd_header X-Content-Type-Options nosniff;\r\n<h2>Public Key Pins</h2>\r\n公钥固定（Public Key Pinning）是指一个证书链中必须包含一个白名单中的公钥，也就是说只有被列入白名单的证书签发机构（CA）才能为某个域名*.example.com签发证书，而不是你的浏览器中所存储的任何 CA 都可以为之签发。\r\n\r\n<strong>从已知的密钥对（*.key）生成 pin-sha256：</strong>\r\nopenssl rsa -in /usr/local/nginx/cert/gzpblog.key -outform der -pubout | openssl dgst -sha256 -binary | openssl enc -base64\r\n\r\n<strong>从EC 私钥文件生成 pin-sha256：</strong>\r\nopenssl ec -in my-ecc-key-file.key -outform der -pubout | openssl dgst -sha256 -binary | openssl enc -base64\r\n\r\n<strong>从已知的证书申请文件（*.csr）生成 pin-sha256：</strong>\r\nopenssl req -in my-signing-request.csr -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64\r\n\r\n<strong>从已知的证书（*.crt）生成 pin-sha256：</strong>\r\nopenssl x509 -in my-certificate.crt -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64\r\n\r\n<strong>生成域名的 pin-sha256：</strong>\r\nopenssl s_client -servername www.gzpblog.com -connect www.gzpblog.com:443 | openssl x509 -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64\r\n\r\n<strong>nginx配置：</strong>\r\nadd_header Public-Key-Pins \'pin-sha256=\"第一个base64\"; pin-sha256=\"备用base64\"; max-age=时长; includeSubDomains\';\r\n<h2>Server Banner</h2>\r\n<div>服务器版本号不应该存在在响应头中。</div>\r\n<div>Nginx增加以下配置</div>\r\n<div>server_tokens off;</div>\r\n<div>就会去除版本号，比如nginx/1.10.3就变成了ningx</div>\r\n<h2>Web framework Information头部框架信息</h2>\r\n移除一些头部信息，比如X-Powered-By, X-Runtime, X-Version and X-AspNet-Version等。\r\n\r\nNginx中加配置：\r\n\r\nproxy_hide_header X-Powered-By;\r\n\r\nPHP移除版本号，php.ini中设置expose_php：\r\n\r\nexpose_php = off\r\n<h2>加入HSTS preload列表</h2>\r\n<a href=\"https://hstspreload.org/\" target=\"_blank\">HSTS preload预加载列表</a>，这个列表之前也提过了，需要科学上网才能访问。\r\n\r\n需要提交根域名：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua4.png\"><img class=\"size-full wp-image-834 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua4.png\" alt=\"\" width=\"483\" height=\"252\" /></a>\r\n\r\n注意一下提交之后,所有的子域名都会生效：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua5.png\"><img class=\" wp-image-828 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua5.png\" alt=\"\" width=\"369\" height=\"320\" /></a>\r\n\r\n如果不符合要求会提示你，按提示修改就行；提交成功：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua6.png\"><img class=\"size-full wp-image-829 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua6.png\" alt=\"\" width=\"470\" height=\"215\" /></a>\r\n<h2>优化完成</h2>\r\nHTTP Security Report上的评分：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua7.png\"><img class=\" wp-image-830 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua7-1024x683.png\" alt=\"\" width=\"487\" height=\"325\" /></a>现在就差HSTS预加载列表生效了，这个一般不会那么快，我们需要等一断时间。其它的基本都搞定了。', 'HTTPS进阶优化（一）', '', 'publish', 'open', 'closed', '', 'https%e8%bf%9b%e9%98%b6%e4%bc%98%e5%8c%96%ef%bc%88%e4%b8%80%ef%bc%89', '', '', '2017-03-21 15:19:21', '2017-03-21 07:19:21', '', 0, 'https://www.gzpblog.com/?p=835', 0, 'post', '', 2),
(836, 1, '2017-03-21 15:15:42', '2017-03-21 07:15:42', '又拍云有一篇文章<a href=\"https://mp.weixin.qq.com/s/s-se0oeiuiF9UM7PiF-QCw\" target=\"_blank\">突破这5个技术难点，HTTPS会好用到飞起来~ </a>，总结的五个技术难点，HSTS、HTTP/2、OSCP stapling、Session ID、SNI技术。现在基本我都解决了。\r\n<div>目前在<a href=\"https://www.ssllabs.com/ssltest/\" target=\"_blank\">ssllabs</a>上的评分：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua1.png\"><img class=\"size-medium wp-image-831 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua1-300x146.png\" alt=\"\" width=\"300\" height=\"146\" /></a></div>\r\n<div>sslbals上的评分已经达到A+，不过还有一点东西需要处理。然而在<a href=\"https://httpsecurityreport.com/\" target=\"_blank\">HTTP Security Report</a>上测出来，问题还很多：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua2.png\"><img class=\"wp-image-832 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua2-1024x729.png\" alt=\"\" width=\"562\" height=\"400\" /></a></div>\r\n<div>\r\n<div>现在开始一块块地优化细节。</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h2>DNS CAA</h2>\r\n<div>sslbals测试出来Server Key and Certificate这一块DNS CAA是NO。</div>\r\n<div>关于CAA的介绍这里有个链接<a href=\"https://sslmate.com/labs/caa/\" target=\"_blank\">https://sslmate.com/labs/caa/</a>；大概就是说CAA是一种DNS记录类型，可以让你控制哪些证书颁发机构可以为您的域颁发证书。这个应该是跟CA方的支持有关系的：</div>\r\n</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua3.png\"><img class=\"wp-image-833 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua3.png\" alt=\"\" width=\"531\" height=\"404\" /></a></div>\r\n<div>\r\n<div>我的证书CA是Symantec，从这里看确实是不支持，而且还是unknown policy。那这个可以不管了。</div>\r\n</div>\r\n<div>\r\n<h2>Session resumption</h2>\r\nsslbals测试出来Protocol Details这里，Session resumption (caching)是No (IDs assigned but not accepted)。\r\n这个是ssl_session配置的问题，主要是这两个配置：\r\n\r\n<strong>ssl_session_cache</strong> 设置储存SSL会话的缓存类型和大小。\r\n默认值：ssl_session_cache off\r\noff为关闭，还有一些其它的缓存类型，不过这里建议使用shared共享缓存类型，这种方法更为有效。\r\n\r\n<strong>ssl_session_timeout</strong> 客户端能够反复使用储存在缓存中的会话参数时间\r\n\r\n看了一下session这一部分我的配置：\r\n\r\nssl_session_timeout 5m;\r\n\r\n我把它改为：\r\n\r\nssl_session_cache shared:SSL:50m;\r\nssl_session_timeout 1d;\r\n\r\n共享缓存，缓存大小为50m，缓存时间1天。\r\n修改后这一项就没问题了。现在ssllabs上测试出来，该绿的都绿了。剩下一些SNI，比如XP系统下的IE6IE8什么的，可能无法支持ssl，不过我觉得这个可以忽略了。现在用xp的ie的估计不多了，然后用这玩意访问我的博客的，估计可以忽略了。\r\n\r\n</div>\r\n<h2>X-Frame-Options 响应头</h2>\r\nX-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 &lt;frame&gt;, &lt;iframe&gt; 或者 &lt;object&gt; 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。\r\nX-Frame-Options 有三个值:\r\n\r\n<strong>DENY</strong>\r\n表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。\r\n\r\n<strong>SAMEORIGIN</strong>\r\n表示该页面可以在相同域名页面的 frame 中展示。\r\n\r\n<strong>ALLOW-FROM uri</strong>\r\n表示该页面可以在指定来源的 frame 中展示。\r\n就是说，如果设置为 DENY，不光在别人的网站 frame 嵌入时会无法加载，在同域名页面中同样会无法加载；如果设置为 SAMEORIGIN，那么页面就可以在同域名页面的 frame 中嵌套。我们只需要设置为 SAMEORIGIN 就好。\r\n\r\n<strong>配置 Apache</strong>\r\n配置 Apache 在所有页面上发送 X-Frame-Options 响应头，需要把下面这行添加到 \'site\' 的配置中：\r\nHeader always append X-Frame-Options SAMEORIGIN\r\n\r\n<strong>配置 nginx</strong>\r\n配置 nginx 发送 X-Frame-Options 响应头，把下面这行添加到 \'http\', \'server\' 或者 \'location\' 的配置中：\r\nadd_header X-Frame-Options SAMEORIGIN;\r\n\r\n<strong>CSP Level 2 规范中的 frame-ancestors 指令会替代这个非标准的 header。</strong>CSP 的 frame-ancestors 会在 Gecko 4.0 中支持，但是并不会被所有浏览器支持。然而 X-Frame-Options 是个已广泛支持的非官方标准，可以和 CSP 结合使用。\r\n<h2>X-Content-Type-Options</h2>\r\nX-Content-Type-Options响应HTTP头是服务器用来指示MIME类型Content-type头部不能被改变的标记。这允许不参加MIME类型探查法，换句话说就是网站管理员知道他们在说什么。\r\nNginx中配置：\r\n\r\nadd_header X-Content-Type-Options nosniff;\r\n<h2>Public Key Pins</h2>\r\n公钥固定（Public Key Pinning）是指一个证书链中必须包含一个白名单中的公钥，也就是说只有被列入白名单的证书签发机构（CA）才能为某个域名*.example.com签发证书，而不是你的浏览器中所存储的任何 CA 都可以为之签发。\r\n\r\n<strong>从已知的密钥对（*.key）生成 pin-sha256：</strong>\r\nopenssl rsa -in /usr/local/nginx/cert/gzpblog.key -outform der -pubout | openssl dgst -sha256 -binary | openssl enc -base64\r\n\r\n<strong>从EC 私钥文件生成 pin-sha256：</strong>\r\nopenssl ec -in my-ecc-key-file.key -outform der -pubout | openssl dgst -sha256 -binary | openssl enc -base64\r\n\r\n<strong>从已知的证书申请文件（*.csr）生成 pin-sha256：</strong>\r\nopenssl req -in my-signing-request.csr -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64\r\n\r\n<strong>从已知的证书（*.crt）生成 pin-sha256：</strong>\r\nopenssl x509 -in my-certificate.crt -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64\r\n\r\n<strong>生成域名的 pin-sha256：</strong>\r\nopenssl s_client -servername www.gzpblog.com -connect www.gzpblog.com:443 | openssl x509 -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64\r\n\r\n<strong>nginx配置：</strong>\r\nadd_header Public-Key-Pins \'pin-sha256=\"第一个base64\"; pin-sha256=\"备用base64\"; max-age=时长; includeSubDomains\';\r\n<h2>Server Banner</h2>\r\n<div>服务器版本号不应该存在在响应头中。</div>\r\n<div>Nginx增加以下配置</div>\r\n<div>server_tokens off;</div>\r\n<div>就会去除版本号，比如nginx/1.10.3就变成了ningx</div>\r\n<h2>Web framework Information头部框架信息</h2>\r\n移除一些头部信息，比如X-Powered-By, X-Runtime, X-Version and X-AspNet-Version等。\r\n\r\nNginx中加配置：\r\n\r\nproxy_hide_header X-Powered-By;\r\n\r\nPHP移除版本号，php.ini中设置expose_php：\r\n\r\nexpose_php = off\r\n<h2>加入HSTS preload列表</h2>\r\n<a href=\"https://hstspreload.org/\" target=\"_blank\">HSTS preload预加载列表</a>，这个列表之前也提过了，需要科学上网才能访问。\r\n\r\n需要提交跟域名：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua4.png\"><img class=\"size-full wp-image-834 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua4.png\" alt=\"\" width=\"483\" height=\"252\" /></a>\r\n\r\n注意一下提交之后,所有的子域名都会生效：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua5.png\"><img class=\" wp-image-828 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua5.png\" alt=\"\" width=\"369\" height=\"320\" /></a>\r\n\r\n如果不符合要求会提示你，按提示修改就行；提交成功：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua6.png\"><img class=\"size-full wp-image-829 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua6.png\" alt=\"\" width=\"470\" height=\"215\" /></a>\r\n<h2>优化完成</h2>\r\nHTTP Security Report上的评分：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua7.png\"><img class=\" wp-image-830 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua7-1024x683.png\" alt=\"\" width=\"487\" height=\"325\" /></a>现在就差HSTS预加载列表生效了，这个一般不会那么快，我们需要等一断时间。其它的基本都搞定了。', 'HTTPS进阶优化（一）', '', 'inherit', 'closed', 'closed', '', '835-revision-v1', '', '', '2017-03-21 15:15:42', '2017-03-21 07:15:42', '', 835, 'https://www.gzpblog.com/20170321/836.html', 0, 'revision', '', 0),
(837, 1, '2017-03-21 15:16:49', '2017-03-21 07:16:49', '', 'https_youhua8', '', 'inherit', 'open', 'closed', '', 'https_youhua8', '', '', '2017-03-21 15:16:49', '2017-03-21 07:16:49', '', 835, 'https://www.gzpblog.com/wp-content/uploads/2017/03/https_youhua8.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(838, 1, '2017-03-21 15:19:21', '2017-03-21 07:19:21', '又拍云有一篇文章<a href=\"https://mp.weixin.qq.com/s/s-se0oeiuiF9UM7PiF-QCw\" target=\"_blank\">突破这5个技术难点，HTTPS会好用到飞起来~ </a>，总结的五个技术难点，HSTS、HTTP/2、OSCP stapling、Session ID、SNI技术。现在基本我都解决了。\r\n<div>目前在<a href=\"https://www.ssllabs.com/ssltest/\" target=\"_blank\">ssllabs</a>上的评分：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua1.png\"><img class=\"size-medium wp-image-831 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua1-300x146.png\" alt=\"\" width=\"300\" height=\"146\" /></a></div>\r\n<div>sslbals上的评分已经达到A+，不过还有一点东西需要处理。然而在<a href=\"https://httpsecurityreport.com/\" target=\"_blank\">HTTP Security Report</a>上测出来，问题还很多：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua2.png\"><img class=\"wp-image-832 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua2-1024x729.png\" alt=\"\" width=\"562\" height=\"400\" /></a></div>\r\n<div>\r\n<div>现在开始一块块地优化细节。</div>\r\n</div>\r\n<div></div>\r\n<div>\r\n<h2>DNS CAA</h2>\r\n<div>sslbals测试出来Server Key and Certificate这一块DNS CAA是NO。</div>\r\n<div>关于CAA的介绍这里有个链接<a href=\"https://sslmate.com/labs/caa/\" target=\"_blank\">https://sslmate.com/labs/caa/</a>；大概就是说CAA是一种DNS记录类型，可以让你控制哪些证书颁发机构可以为您的域颁发证书。这个应该是跟CA方的支持有关系的：</div>\r\n</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua3.png\"><img class=\"wp-image-833 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua3.png\" alt=\"\" width=\"531\" height=\"404\" /></a></div>\r\n<div>\r\n<div>我的证书CA是Symantec，从这里看确实是不支持，而且还是unknown policy。那这个可以不管了。</div>\r\n</div>\r\n<div>\r\n<h2>Session resumption</h2>\r\nsslbals测试出来Protocol Details这里，Session resumption (caching)是No (IDs assigned but not accepted)。\r\n这个是ssl_session配置的问题，主要是这两个配置：\r\n\r\n<strong>ssl_session_cache</strong> 设置储存SSL会话的缓存类型和大小。\r\n默认值：ssl_session_cache off\r\noff为关闭，还有一些其它的缓存类型，不过这里建议使用shared共享缓存类型，这种方法更为有效。\r\n\r\n<strong>ssl_session_timeout</strong> 客户端能够反复使用储存在缓存中的会话参数时间\r\n\r\n看了一下session这一部分我的配置：\r\n\r\nssl_session_timeout 5m;\r\n\r\n我把它改为：\r\n\r\nssl_session_cache shared:SSL:50m;\r\nssl_session_timeout 1d;\r\n\r\n共享缓存，缓存大小为50m，缓存时间1天。\r\n修改后这一项就没问题了。现在ssllabs上测试出来，该绿的都绿了。剩下一些SNI，比如XP系统下的IE6IE8什么的，可能无法支持ssl，不过我觉得这个可以忽略了。现在用xp的ie的估计不多了，然后用这玩意访问我的博客的，估计可以忽略了。\r\n\r\n</div>\r\n<h2>X-Frame-Options 响应头</h2>\r\nX-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 &lt;frame&gt;, &lt;iframe&gt; 或者 &lt;object&gt; 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。\r\nX-Frame-Options 有三个值:\r\n\r\n<strong>DENY</strong>\r\n表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。\r\n\r\n<strong>SAMEORIGIN</strong>\r\n表示该页面可以在相同域名页面的 frame 中展示。\r\n\r\n<strong>ALLOW-FROM uri</strong>\r\n表示该页面可以在指定来源的 frame 中展示。\r\n就是说，如果设置为 DENY，不光在别人的网站 frame 嵌入时会无法加载，在同域名页面中同样会无法加载；如果设置为 SAMEORIGIN，那么页面就可以在同域名页面的 frame 中嵌套。我们只需要设置为 SAMEORIGIN 就好。\r\n\r\n<strong>配置 Apache</strong>\r\n配置 Apache 在所有页面上发送 X-Frame-Options 响应头，需要把下面这行添加到 \'site\' 的配置中：\r\nHeader always append X-Frame-Options SAMEORIGIN\r\n\r\n<strong>配置 nginx</strong>\r\n配置 nginx 发送 X-Frame-Options 响应头，把下面这行添加到 \'http\', \'server\' 或者 \'location\' 的配置中：\r\nadd_header X-Frame-Options SAMEORIGIN;\r\n\r\n<strong>CSP Level 2 规范中的 frame-ancestors 指令会替代这个非标准的 header。</strong>CSP 的 frame-ancestors 会在 Gecko 4.0 中支持，但是并不会被所有浏览器支持。然而 X-Frame-Options 是个已广泛支持的非官方标准，可以和 CSP 结合使用。\r\n<h2>X-Content-Type-Options</h2>\r\nX-Content-Type-Options响应HTTP头是服务器用来指示MIME类型Content-type头部不能被改变的标记。这允许不参加MIME类型探查法，换句话说就是网站管理员知道他们在说什么。\r\nNginx中配置：\r\n\r\nadd_header X-Content-Type-Options nosniff;\r\n<h2>Public Key Pins</h2>\r\n公钥固定（Public Key Pinning）是指一个证书链中必须包含一个白名单中的公钥，也就是说只有被列入白名单的证书签发机构（CA）才能为某个域名*.example.com签发证书，而不是你的浏览器中所存储的任何 CA 都可以为之签发。\r\n\r\n<strong>从已知的密钥对（*.key）生成 pin-sha256：</strong>\r\nopenssl rsa -in /usr/local/nginx/cert/gzpblog.key -outform der -pubout | openssl dgst -sha256 -binary | openssl enc -base64\r\n\r\n<strong>从EC 私钥文件生成 pin-sha256：</strong>\r\nopenssl ec -in my-ecc-key-file.key -outform der -pubout | openssl dgst -sha256 -binary | openssl enc -base64\r\n\r\n<strong>从已知的证书申请文件（*.csr）生成 pin-sha256：</strong>\r\nopenssl req -in my-signing-request.csr -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64\r\n\r\n<strong>从已知的证书（*.crt）生成 pin-sha256：</strong>\r\nopenssl x509 -in my-certificate.crt -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64\r\n\r\n<strong>生成域名的 pin-sha256：</strong>\r\nopenssl s_client -servername www.gzpblog.com -connect www.gzpblog.com:443 | openssl x509 -pubkey -noout | openssl rsa -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64\r\n\r\n<strong>nginx配置：</strong>\r\nadd_header Public-Key-Pins \'pin-sha256=\"第一个base64\"; pin-sha256=\"备用base64\"; max-age=时长; includeSubDomains\';\r\n<h2>Server Banner</h2>\r\n<div>服务器版本号不应该存在在响应头中。</div>\r\n<div>Nginx增加以下配置</div>\r\n<div>server_tokens off;</div>\r\n<div>就会去除版本号，比如nginx/1.10.3就变成了ningx</div>\r\n<h2>Web framework Information头部框架信息</h2>\r\n移除一些头部信息，比如X-Powered-By, X-Runtime, X-Version and X-AspNet-Version等。\r\n\r\nNginx中加配置：\r\n\r\nproxy_hide_header X-Powered-By;\r\n\r\nPHP移除版本号，php.ini中设置expose_php：\r\n\r\nexpose_php = off\r\n<h2>加入HSTS preload列表</h2>\r\n<a href=\"https://hstspreload.org/\" target=\"_blank\">HSTS preload预加载列表</a>，这个列表之前也提过了，需要科学上网才能访问。\r\n\r\n需要提交根域名：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua4.png\"><img class=\"size-full wp-image-834 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua4.png\" alt=\"\" width=\"483\" height=\"252\" /></a>\r\n\r\n注意一下提交之后,所有的子域名都会生效：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua5.png\"><img class=\" wp-image-828 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua5.png\" alt=\"\" width=\"369\" height=\"320\" /></a>\r\n\r\n如果不符合要求会提示你，按提示修改就行；提交成功：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua6.png\"><img class=\"size-full wp-image-829 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua6.png\" alt=\"\" width=\"470\" height=\"215\" /></a>\r\n<h2>优化完成</h2>\r\nHTTP Security Report上的评分：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/https_youhua7.png\"><img class=\" wp-image-830 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/https_youhua7-1024x683.png\" alt=\"\" width=\"487\" height=\"325\" /></a>现在就差HSTS预加载列表生效了，这个一般不会那么快，我们需要等一断时间。其它的基本都搞定了。', 'HTTPS进阶优化（一）', '', 'inherit', 'closed', 'closed', '', '835-revision-v1', '', '', '2017-03-21 15:19:21', '2017-03-21 07:19:21', '', 835, 'https://www.gzpblog.com/20170321/838.html', 0, 'revision', '', 0),
(840, 1, '2017-03-22 20:19:22', '2017-03-22 12:19:22', '', 'duoshuo', '', 'inherit', 'open', 'closed', '', 'duoshuo', '', '', '2017-03-22 20:19:22', '2017-03-22 12:19:22', '', 839, 'https://www.gzpblog.com/wp-content/uploads/2017/03/duoshuo.png', 0, 'attachment', 'image/png', 0),
(841, 1, '2017-03-22 20:19:25', '2017-03-22 12:19:25', '', 'duoshuo1', '', 'inherit', 'open', 'closed', '', 'duoshuo1', '', '', '2017-03-22 20:19:25', '2017-03-22 12:19:25', '', 839, 'https://www.gzpblog.com/wp-content/uploads/2017/03/duoshuo1.png', 0, 'attachment', 'image/png', 0),
(858, 1, '2017-04-06 11:57:21', '2017-04-06 03:57:21', '在OSS调试的时候，经常会出现一个400 (Bad Request)的错误，但是一开始一直找不到原因。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/04/oss_400.png\"><img class=\"size-full wp-image-859 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/04/oss_400.png\" alt=\"\" width=\"458\" height=\"17\" /></a>后来终于找到了。在生成签名的时候有这么一段：\r\n\r\n\r\n<pre>$dir = $resourceName.\'/\';\r\n\r\n//表示用户上传的数据,必须是以$dir开始, 不然上传会失败,这一步不是必须项,只是为了安全起见,防止用户通过policy上传到别人的目录\r\n$start = array(0=&gt;\'starts-with\', 1=&gt;\'$key\', 2=&gt;$dir);\r\n$conditions[] = $start;</pre>\r\n\r\n\r\n在获取policy验证的时候，policy中定义了dir名称，而这个$dir是我通过ajax传值自己自动分配的，不是写死的，然而在获取这个名称的时候出了问题，导致这个名称为空。根据policy的定义没有dir开头，上传就无法完成，导致阿里云返回400 Bad Request的错误。\r\n\r\n&nbsp;\r\n\r\n&nbsp;', '记一处阿里云OSS的400 (Bad Request)错误', '', 'publish', 'open', 'closed', '', '%e8%ae%b0%e4%b8%80%e5%a4%84%e9%98%bf%e9%87%8c%e4%ba%91oss%e7%9a%84400-bad-request%e9%94%99%e8%af%af', '', '', '2017-04-06 12:17:32', '2017-04-06 04:17:32', '', 0, 'https://www.gzpblog.com/?p=858', 0, 'post', '', 5),
(848, 1, '2017-03-29 00:03:19', '2017-03-28 16:03:19', '垃圾评论真的是，常客啊！以前的垃圾评论都是乱码的那种，最近的垃圾评论反而比较正常，不会超过一个链接，而且还是可以看得懂的英文。大部分垃圾评论都是在那么一两篇文章下。\r\n\r\n之前有试过屏蔽代码，但是发现没什么用，最近垃圾评论变机智了，有点受不了，还是开了评论首次审核看看吧。\r\n\r\n顺便最近开始开发自己的第二款主题了，看来有必要内置一下过滤垃圾评论功能。现在用的这个主题，开发得比较简单，因为当时想的是越简洁越好，但是我发现一个问题，这个博客，实际是为我自己服务的，有时候我想到博客里翻一篇笔记，却发现要找一下，没法直接有这个入口，这个对我自己来说非常不合理，需要改进。第二款主题可能要做得比现在这个完善一点，好好怼一怼。', 'Wordpess的垃圾评论真的是很烦人耶', '', 'publish', 'open', 'closed', '', 'wordpess%e7%9a%84%e5%9e%83%e5%9c%be%e8%af%84%e8%ae%ba%e7%9c%9f%e7%9a%84%e6%98%af%e5%be%88%e7%83%a6%e4%ba%ba%e8%80%b6', '', '', '2017-03-29 00:03:19', '2017-03-28 16:03:19', '', 0, 'https://www.gzpblog.com/?p=848', 0, 'post', '', 11),
(849, 1, '2017-03-29 00:03:19', '2017-03-28 16:03:19', '垃圾评论真的是，常客啊！以前的垃圾评论都是乱码的那种，最近的垃圾评论反而比较正常，不会超过一个链接，而且还是可以看得懂的英文。大部分垃圾评论都是在那么一两篇文章下。\r\n\r\n之前有试过屏蔽代码，但是发现没什么用，最近垃圾评论变机智了，有点受不了，还是开了评论首次审核看看吧。\r\n\r\n顺便最近开始开发自己的第二款主题了，看来有必要内置一下过滤垃圾评论功能。现在用的这个主题，开发得比较简单，因为当时想的是越简洁越好，但是我发现一个问题，这个博客，实际是为我自己服务的，有时候我想到博客里翻一篇笔记，却发现要找一下，没法直接有这个入口，这个对我自己来说非常不合理，需要改进。第二款主题可能要做得比现在这个完善一点，好好怼一怼。', 'Wordpess的垃圾评论真的是很烦人耶', '', 'inherit', 'closed', 'closed', '', '848-revision-v1', '', '', '2017-03-29 00:03:19', '2017-03-28 16:03:19', '', 848, 'https://www.gzpblog.com/20170329/849.html', 0, 'revision', '', 0),
(842, 1, '2017-03-22 22:14:23', '2017-03-22 14:14:23', '今天收到了一封邮件，感到有点惊讶，内容是这样的：\r\n<blockquote>\r\n<h3>你好！</h3>\r\n因公司业务调整，非常遗憾的向大家宣布多说项目即将关闭。\r\n\r\n我们将于2017年6月1日正式关停服务，在此之前您可以通过后台的数据导出功能导出自己站点的评论数据。\r\n\r\n对此给您造成的不便，我们深表歉意，感谢您的一路相伴。</blockquote>\r\n多说要关闭了！这确实是有点惊讶啊，多说在社会化评论做得是不错的了。看了一下多说的官网：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/duoshuo.png\"><img class=\"size-full wp-image-840 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/duoshuo.png\" alt=\"\" width=\"855\" height=\"268\" /></a>\r\n\r\n我去看了一下Jiathis的有言和搜狐的畅言，目前似乎没有要关闭的迹象。\r\n\r\n不过转念一想，这么多年来多说做的事情比较专注，只专注于社会化评论。而我们看一下有言，Jiathis、有言、有荐是Jiathis公司的三大板块，有荐这一块就类似于百度推广了，这里是可以做一些文章的；而畅言就不用说了，搜狐公司旗下的。返回来看多说，多说的压力就很大了，而且，其实会用到社会话评论的用户真的不多，还是免费使用。\r\n\r\n有人建议既然选择放弃了这个项目，不如把这个项目开源出去。其实这一点，我个人是觉得还是不开源的好，毕竟现在还有活着的社会化评论。\r\n\r\n其实就是感慨一下，当初我刚接触独立博客的时候，就了解了社会化评论这种东西，但是那时候我就有一些顾虑，比如采用第三方插件如果有一天第三方不提供服务了，那过往数据要处理就很麻烦，再一个引入第三方还要考虑第三方的稳定性，接入的效率，调用的速度等等。所以最终还是采取古老的email方式。\r\n\r\n很多程序猿都有一个创业的心，但是创业真心是不容易的，首先资金就是一个问题。如何保持公司稳定的资金链，没有利润来源肯定是不行的，多说这么久以来也是不容易，可见寻找赢利点是一件必须要做的事情，否则不管什么公司都活不下去，多元化发展确实是一条路，但是具体怎么做，好不好做，只有真正去做了才会有所体会。', '从多说关闭联想到创业资金链', '', 'inherit', 'closed', 'closed', '', '839-revision-v1', '', '', '2017-03-22 22:14:23', '2017-03-22 14:14:23', '', 839, 'https://www.gzpblog.com/20170322/842.html', 0, 'revision', '', 0),
(843, 1, '2017-03-22 22:16:12', '2017-03-22 14:16:12', '今天收到了一封邮件，感到有点惊讶，内容是这样的：\r\n<blockquote>\r\n<h3>你好！</h3>\r\n因公司业务调整，非常遗憾的向大家宣布多说项目即将关闭。\r\n\r\n我们将于2017年6月1日正式关停服务，在此之前您可以通过后台的数据导出功能导出自己站点的评论数据。\r\n\r\n对此给您造成的不便，我们深表歉意，感谢您的一路相伴。</blockquote>\r\n多说要关闭了！这确实是有点惊讶啊，多说在社会化评论做得是不错的了。看了一下多说的官网：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/03/duoshuo.png\"><img class=\"size-full wp-image-840 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/03/duoshuo.png\" alt=\"\" width=\"855\" height=\"268\" /></a>\r\n\r\n我去看了一下Jiathis的有言和搜狐的畅言，目前似乎没有要关闭的迹象。\r\n\r\n不过转念一想，这么多年来多说做的事情比较专注，只专注于社会化评论。而我们看一下有言，Jiathis、有言、有荐是Jiathis公司的三大板块，有荐这一块就类似于百度推广了，这里是可以做一些文章的；而畅言就不用说了，搜狐公司旗下的。返回来看多说，多说的压力就很大了，而且，其实会用到社会话评论的用户真的不多，还是免费使用。\r\n\r\n有人建议既然选择放弃了这个项目，不如把这个项目开源出去。其实这一点，我个人是觉得还是不开源的好，毕竟现在还有活着的社会化评论。\r\n\r\n其实就是感慨一下，当初我刚接触独立博客的时候，就了解了社会化评论这种东西，但是那时候我就有一些顾虑，比如采用第三方插件如果有一天第三方不提供服务了，那过往数据要处理就很麻烦，再一个引入第三方还要考虑第三方的稳定性，接入的效率，调用的速度等等。所以最终还是采取古老的email方式。\r\n\r\n很多程序猿都有一个创业的心，但是创业真心是不容易的，首先资金就是一个问题。如何保持公司稳定的资金链，没有利润来源肯定是不行的，多说这么久以来也是不容易，可见寻找赢利点是一件必须要做的事情，否则不管什么公司都活不下去，多元化发展确实是一条路，但是具体怎么做，好不好做，只有真正去做了才会有所体会。', '多说即将关闭，企业资金链该如何维持？', '', 'inherit', 'closed', 'closed', '', '839-revision-v1', '', '', '2017-03-22 22:16:12', '2017-03-22 14:16:12', '', 839, 'https://www.gzpblog.com/20170322/843.html', 0, 'revision', '', 0),
(860, 1, '2017-04-06 11:57:21', '2017-04-06 03:57:21', '在OSS调试的时候，经常会出现一个400 (Bad Request)的错误，但是一开始一直找不到原因。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/04/oss_400.png\"><img class=\"size-full wp-image-859 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/04/oss_400.png\" alt=\"\" width=\"458\" height=\"17\" /></a>后来终于找到了。在生成签名的时候有这么一段：\r\n\r\n&lt;pre&gt;\r\n<pre>$dir = $resourceName.\'/\';\r\n\r\n//表示用户上传的数据,必须是以$dir开始, 不然上传会失败,这一步不是必须项,只是为了安全起见,防止用户通过policy上传到别人的目录\r\n$start = array(0=&gt;\'starts-with\', 1=&gt;\'$key\', 2=&gt;$dir);\r\n$conditions[] = $start;</pre>\r\n&lt;/pre&gt;\r\n\r\n在获取policy验证的时候，policy中定义了dir名称，而这个$dir是我通过ajax传值自己自动分配的，不是写死的，然而在获取这个名称的时候出了问题，导致这个名称为空。根据policy的定义没有dir开头，上传就无法完成，导致阿里云返回400 Bad Request的错误。\r\n\r\n&nbsp;\r\n\r\n&nbsp;', '记一处阿里云OSS的400 (Bad Request)错误', '', 'inherit', 'closed', 'closed', '', '858-revision-v1', '', '', '2017-04-06 11:57:21', '2017-04-06 03:57:21', '', 858, 'https://www.gzpblog.com/20170406/860.html', 0, 'revision', '', 0),
(861, 1, '2017-04-06 12:17:32', '2017-04-06 04:17:32', '在OSS调试的时候，经常会出现一个400 (Bad Request)的错误，但是一开始一直找不到原因。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/04/oss_400.png\"><img class=\"size-full wp-image-859 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/04/oss_400.png\" alt=\"\" width=\"458\" height=\"17\" /></a>后来终于找到了。在生成签名的时候有这么一段：\r\n\r\n\r\n<pre>$dir = $resourceName.\'/\';\r\n\r\n//表示用户上传的数据,必须是以$dir开始, 不然上传会失败,这一步不是必须项,只是为了安全起见,防止用户通过policy上传到别人的目录\r\n$start = array(0=&gt;\'starts-with\', 1=&gt;\'$key\', 2=&gt;$dir);\r\n$conditions[] = $start;</pre>\r\n\r\n\r\n在获取policy验证的时候，policy中定义了dir名称，而这个$dir是我通过ajax传值自己自动分配的，不是写死的，然而在获取这个名称的时候出了问题，导致这个名称为空。根据policy的定义没有dir开头，上传就无法完成，导致阿里云返回400 Bad Request的错误。\r\n\r\n&nbsp;\r\n\r\n&nbsp;', '记一处阿里云OSS的400 (Bad Request)错误', '', 'inherit', 'closed', 'closed', '', '858-revision-v1', '', '', '2017-04-06 12:17:32', '2017-04-06 04:17:32', '', 858, 'https://www.gzpblog.com/20170406/861.html', 0, 'revision', '', 0),
(862, 1, '2017-04-13 00:14:39', '0000-00-00 00:00:00', '', '大兄弟，你是要引起圣战啊！', '', 'draft', 'open', 'closed', '', '', '', '', '2017-04-13 00:14:39', '2017-04-12 16:14:39', '', 0, 'https://www.gzpblog.com/?p=862', 0, 'post', '', 0),
(864, 1, '2017-04-13 15:42:47', '2017-04-13 07:42:47', '<blockquote>从没有Git的环境中安装，配置，生成SSH等操作到可以开始工作，我们需要做这些就好。</blockquote>\r\n<h3>安装Git</h3>\r\n<div>目前为止我的日常工作都是在windows下，安装：Git for windows</div>\r\n<div>官网下载很慢，安装比较无脑。</div>\r\n<h3>修改用户信息</h3>\r\n$ git config --global user.name \"guo\"\r\n$ git config --global user.email guo@example.com\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/04/git_start1.png\"><img class=\"size-full wp-image-865 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/04/git_start1.png\" alt=\"\" width=\"353\" height=\"74\" /></a>\r\n\r\n（如果使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置。）\r\n<h3>检查配置信息</h3>\r\n<div>git config --list：列出所有 Git 当时能找到的配置</div>\r\n<div>git config &lt;key&gt;：来检查 Git 的某一项配置</div>\r\n<h3>生成SSH Key</h3>\r\n<h4>查看是否已经有了SSH密钥：</h4>\r\ncd ~/.ssh\r\n\r\n如果没有密钥则不会有此文件夹\r\n<h4>生成SSH密钥：</h4>\r\n$ ssh-keygen -t rsa -C “abc@example.com”\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/04/git_start2.png\"><img class=\"size-full wp-image-866 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/04/git_start2.png\" alt=\"\" width=\"561\" height=\"291\" /></a>\r\n<h4>执行查看公钥的命令</h4>\r\n<div>cat ~/.ssh/id_rsa.pub</div>\r\n<div>获取到的那一大串密码就是公钥，在类似Github这样的线上代码托管工具的设置中（SSH），把这个公钥扔上去，就能往线上推代码了。</div>\r\n<div></div>\r\n<div>\r\n<h3>获取Git仓库</h3>\r\n<h4>在现有目录中初始化仓库</h4>\r\n<ol>\r\n 	<li>进入项目目录</li>\r\n 	<li>输入$ git init （初始化，该命令创建一个.git的子目录）</li>\r\n 	<li>如果是已经有文件的文件夹中初始化，应该开始跟踪这些文件并提交，例：\r\n$ git add *.c\r\n$ git add LICENSE\r\n$ git commit -m \'initial project version\'</li>\r\n</ol>\r\n<h4>克隆现有的仓库（获得一份已经存在了的 Git 仓库的拷贝）</h4>\r\n<ol>\r\n 	<li>\r\n<div>克隆仓库的命令格式是 git clone [url]，执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。例如：$ git clone https://github.com/libgit2/libgit2</div></li>\r\n 	<li>\r\n<div>克隆后会在当前目录下创建一个名为”libgit2“的目录，并在这个目录下初始化一个 .git 文件夹，从远程仓库拉取下所有数据放入 .git 文件夹，然后从中读取最新版本的文件的拷贝。如果要自定义本地仓库名字：$ git clone https://github.com/libgit2/libgit2 mylibgit</div>\r\n<div>（Git 支持多种数据传输协议。 上面的例子使用的是 https:// 协议，不过你也可以使用 git:// 协议或者使用 SSH 传输协议，比如 user@server:path/to/repo.git 。）</div></li>\r\n</ol>\r\n</div>', 'Git基础之从安装配置到开始工作', '从没有Git的环境中安装，配置，生成SSH等操作到可以开始使用，我们需要做这些就好。', 'publish', 'open', 'closed', '', 'git%e5%9f%ba%e7%a1%80%e4%b9%8b%e4%bb%8e%e5%ae%89%e8%a3%85%e9%85%8d%e7%bd%ae%e5%88%b0%e5%bc%80%e5%a7%8b%e5%b7%a5%e4%bd%9c', '', '', '2017-04-13 15:44:49', '2017-04-13 07:44:49', '', 0, 'https://www.gzpblog.com/?p=864', 0, 'post', '', 6),
(865, 1, '2017-04-13 15:07:38', '2017-04-13 07:07:38', '', 'git_start1', '', 'inherit', 'open', 'closed', '', 'git_start1', '', '', '2017-04-13 15:07:38', '2017-04-13 07:07:38', '', 864, 'https://www.gzpblog.com/wp-content/uploads/2017/04/git_start1.png', 0, 'attachment', 'image/png', 0),
(866, 1, '2017-04-13 15:29:53', '2017-04-13 07:29:53', '', 'git_start2', '', 'inherit', 'open', 'closed', '', 'git_start2', '', '', '2017-04-13 15:29:53', '2017-04-13 07:29:53', '', 864, 'https://www.gzpblog.com/wp-content/uploads/2017/04/git_start2.png', 0, 'attachment', 'image/png', 0),
(867, 1, '2017-04-13 15:42:47', '2017-04-13 07:42:47', '<blockquote>从没有Git的环境中安装，配置，生成SSH等操作到可以开始工作，我们需要做这些就好。</blockquote>\r\n<h3>安装Git</h3>\r\n<div>目前为止我的日常工作都是在windows下，安装：Git for windows</div>\r\n<div>官网下载很慢，安装比较无脑。</div>\r\n<h3>修改用户信息</h3>\r\n$ git config --global user.name \"guo\"\r\n$ git config --global user.email guo@example.com\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/04/git_start1.png\"><img class=\"size-full wp-image-865 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/04/git_start1.png\" alt=\"\" width=\"353\" height=\"74\" /></a>\r\n\r\n（如果使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置。）\r\n<h3>检查配置信息</h3>\r\n<div>git config --list：列出所有 Git 当时能找到的配置</div>\r\n<div>git config &lt;key&gt;：来检查 Git 的某一项配置</div>\r\n<h3>生成SSH Key</h3>\r\n<h4>查看是否已经有了SSH密钥：</h4>\r\ncd ~/.ssh\r\n\r\n如果没有密钥则不会有此文件夹\r\n<h4>生成SSH密钥：</h4>\r\n$ ssh-keygen -t rsa -C “abc@example.com”\r\n<h4><a href=\"https://files.gzpblog.com/wp/2017/04/git_start2.png\"><img class=\"size-full wp-image-866 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/04/git_start2.png\" alt=\"\" width=\"561\" height=\"291\" /></a>执行查看公钥的命令</h4>\r\n<div>cat ~/.ssh/id_rsa.pub</div>\r\n<div>获取到的那一大串密码就是公钥，在类似Github这样的线上代码托管工具的设置中（SSH），把这个公钥扔上去，就能往线上推代码了。</div>\r\n<div></div>\r\n<div>\r\n<h3>获取Git仓库</h3>\r\n<h4>在现有目录中初始化仓库</h4>\r\n<ol>\r\n 	<li>进入项目目录</li>\r\n 	<li>输入$ git init （初始化，该命令创建一个.git的子目录）</li>\r\n 	<li>如果是已经有文件的文件夹中初始化，应该开始跟踪这些文件并提交，例：\r\n$ git add *.c\r\n$ git add LICENSE\r\n$ git commit -m \'initial project version\'</li>\r\n</ol>\r\n<h4>克隆现有的仓库（获得一份已经存在了的 Git 仓库的拷贝）</h4>\r\n<ol>\r\n 	<li>\r\n<div>克隆仓库的命令格式是 git clone [url]，执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。例如：$ git clone https://github.com/libgit2/libgit2</div></li>\r\n 	<li>\r\n<div>克隆后会在当前目录下创建一个名为”libgit2“的目录，并在这个目录下初始化一个 .git 文件夹，从远程仓库拉取下所有数据放入 .git 文件夹，然后从中读取最新版本的文件的拷贝。如果要自定义本地仓库名字：$ git clone https://github.com/libgit2/libgit2 mylibgit</div>\r\n<div>（Git 支持多种数据传输协议。 上面的例子使用的是 https:// 协议，不过你也可以使用 git:// 协议或者使用 SSH 传输协议，比如 user@server:path/to/repo.git 。）</div></li>\r\n</ol>\r\n</div>', 'Git基础之从安装配置到开始工作', '从没有Git的环境中安装，配置，生成SSH等操作到可以开始使用，我们需要做这些就好。', 'inherit', 'closed', 'closed', '', '864-revision-v1', '', '', '2017-04-13 15:42:47', '2017-04-13 07:42:47', '', 864, 'https://www.gzpblog.com/20170413/867.html', 0, 'revision', '', 0),
(868, 1, '2017-04-13 15:44:08', '2017-04-13 07:44:08', '<blockquote>从没有Git的环境中安装，配置，生成SSH等操作到可以开始工作，我们需要做这些就好。</blockquote>\r\n<h3>安装Git</h3>\r\n<div>目前为止我的日常工作都是在windows下，安装：Git for windows</div>\r\n<div>官网下载很慢，安装比较无脑。</div>\r\n<h3>修改用户信息</h3>\r\n$ git config --global user.name \"guo\"\r\n$ git config --global user.email guo@example.com\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/04/git_start1.png\"><img class=\"size-full wp-image-865 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/04/git_start1.png\" alt=\"\" width=\"353\" height=\"74\" /></a>\r\n\r\n（如果使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置。）\r\n<h3>检查配置信息</h3>\r\n<div>git config --list：列出所有 Git 当时能找到的配置</div>\r\n<div>git config &lt;key&gt;：来检查 Git 的某一项配置</div>\r\n<h3>生成SSH Key</h3>\r\n<h4>查看是否已经有了SSH密钥：</h4>\r\ncd ~/.ssh\r\n\r\n如果没有密钥则不会有此文件夹\r\n<h4>生成SSH密钥：</h4>\r\n$ ssh-keygen -t rsa -C “abc@example.com”\r\n<h4><a href=\"https://files.gzpblog.com/wp/2017/04/git_start2.png\"><img class=\"size-full wp-image-866 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/04/git_start2.png\" alt=\"\" width=\"561\" height=\"291\" /></a></h4>\r\n<h4>执行查看公钥的命令</h4>\r\n<div>cat ~/.ssh/id_rsa.pub</div>\r\n<div>获取到的那一大串密码就是公钥，在类似Github这样的线上代码托管工具的设置中（SSH），把这个公钥扔上去，就能往线上推代码了。</div>\r\n<div></div>\r\n<div>\r\n<h3>获取Git仓库</h3>\r\n<h4>在现有目录中初始化仓库</h4>\r\n<ol>\r\n 	<li>进入项目目录</li>\r\n 	<li>输入$ git init （初始化，该命令创建一个.git的子目录）</li>\r\n 	<li>如果是已经有文件的文件夹中初始化，应该开始跟踪这些文件并提交，例：\r\n$ git add *.c\r\n$ git add LICENSE\r\n$ git commit -m \'initial project version\'</li>\r\n</ol>\r\n<h4>克隆现有的仓库（获得一份已经存在了的 Git 仓库的拷贝）</h4>\r\n<ol>\r\n 	<li>\r\n<div>克隆仓库的命令格式是 git clone [url]，执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。例如：$ git clone https://github.com/libgit2/libgit2</div></li>\r\n 	<li>\r\n<div>克隆后会在当前目录下创建一个名为”libgit2“的目录，并在这个目录下初始化一个 .git 文件夹，从远程仓库拉取下所有数据放入 .git 文件夹，然后从中读取最新版本的文件的拷贝。如果要自定义本地仓库名字：$ git clone https://github.com/libgit2/libgit2 mylibgit</div>\r\n<div>（Git 支持多种数据传输协议。 上面的例子使用的是 https:// 协议，不过你也可以使用 git:// 协议或者使用 SSH 传输协议，比如 user@server:path/to/repo.git 。）</div></li>\r\n</ol>\r\n</div>', 'Git基础之从安装配置到开始工作', '从没有Git的环境中安装，配置，生成SSH等操作到可以开始使用，我们需要做这些就好。', 'inherit', 'closed', 'closed', '', '864-revision-v1', '', '', '2017-04-13 15:44:08', '2017-04-13 07:44:08', '', 864, 'https://www.gzpblog.com/20170413/868.html', 0, 'revision', '', 0),
(869, 1, '2017-04-13 15:44:49', '2017-04-13 07:44:49', '<blockquote>从没有Git的环境中安装，配置，生成SSH等操作到可以开始工作，我们需要做这些就好。</blockquote>\r\n<h3>安装Git</h3>\r\n<div>目前为止我的日常工作都是在windows下，安装：Git for windows</div>\r\n<div>官网下载很慢，安装比较无脑。</div>\r\n<h3>修改用户信息</h3>\r\n$ git config --global user.name \"guo\"\r\n$ git config --global user.email guo@example.com\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/04/git_start1.png\"><img class=\"size-full wp-image-865 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/04/git_start1.png\" alt=\"\" width=\"353\" height=\"74\" /></a>\r\n\r\n（如果使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置。）\r\n<h3>检查配置信息</h3>\r\n<div>git config --list：列出所有 Git 当时能找到的配置</div>\r\n<div>git config &lt;key&gt;：来检查 Git 的某一项配置</div>\r\n<h3>生成SSH Key</h3>\r\n<h4>查看是否已经有了SSH密钥：</h4>\r\ncd ~/.ssh\r\n\r\n如果没有密钥则不会有此文件夹\r\n<h4>生成SSH密钥：</h4>\r\n$ ssh-keygen -t rsa -C “abc@example.com”\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/04/git_start2.png\"><img class=\"size-full wp-image-866 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/04/git_start2.png\" alt=\"\" width=\"561\" height=\"291\" /></a>\r\n<h4>执行查看公钥的命令</h4>\r\n<div>cat ~/.ssh/id_rsa.pub</div>\r\n<div>获取到的那一大串密码就是公钥，在类似Github这样的线上代码托管工具的设置中（SSH），把这个公钥扔上去，就能往线上推代码了。</div>\r\n<div></div>\r\n<div>\r\n<h3>获取Git仓库</h3>\r\n<h4>在现有目录中初始化仓库</h4>\r\n<ol>\r\n 	<li>进入项目目录</li>\r\n 	<li>输入$ git init （初始化，该命令创建一个.git的子目录）</li>\r\n 	<li>如果是已经有文件的文件夹中初始化，应该开始跟踪这些文件并提交，例：\r\n$ git add *.c\r\n$ git add LICENSE\r\n$ git commit -m \'initial project version\'</li>\r\n</ol>\r\n<h4>克隆现有的仓库（获得一份已经存在了的 Git 仓库的拷贝）</h4>\r\n<ol>\r\n 	<li>\r\n<div>克隆仓库的命令格式是 git clone [url]，执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。例如：$ git clone https://github.com/libgit2/libgit2</div></li>\r\n 	<li>\r\n<div>克隆后会在当前目录下创建一个名为”libgit2“的目录，并在这个目录下初始化一个 .git 文件夹，从远程仓库拉取下所有数据放入 .git 文件夹，然后从中读取最新版本的文件的拷贝。如果要自定义本地仓库名字：$ git clone https://github.com/libgit2/libgit2 mylibgit</div>\r\n<div>（Git 支持多种数据传输协议。 上面的例子使用的是 https:// 协议，不过你也可以使用 git:// 协议或者使用 SSH 传输协议，比如 user@server:path/to/repo.git 。）</div></li>\r\n</ol>\r\n</div>', 'Git基础之从安装配置到开始工作', '从没有Git的环境中安装，配置，生成SSH等操作到可以开始使用，我们需要做这些就好。', 'inherit', 'closed', 'closed', '', '864-revision-v1', '', '', '2017-04-13 15:44:49', '2017-04-13 07:44:49', '', 864, 'https://www.gzpblog.com/20170413/869.html', 0, 'revision', '', 0),
(870, 1, '2017-04-17 17:46:14', '0000-00-00 00:00:00', '', 'jQuery为DOM动态元素追加事件', '', 'draft', 'open', 'closed', '', '', '', '', '2017-04-17 17:46:14', '2017-04-17 09:46:14', '', 0, 'https://www.gzpblog.com/?p=870', 0, 'post', '', 0),
(871, 1, '2017-04-18 23:04:41', '2017-04-18 15:04:41', '<blockquote>本文原创作者：VillanCh，发表于FreeBuf.COM；原文链接：<a href=\"http://www.freebuf.com/articles/rookie/119969.html\" target=\"_blank\">PHP Trick 总结与探讨（一） </a></blockquote>\r\n本文不是 PHP 教程，本文只针对 PHP 的各种奇淫技巧进行整理和证明，在进行渗透测试（WEB 安全）的学习中，经常需要涉及到 PHP 编程，或者 PHP 编写 Webshell 或者一句话木马，一般的 PHP 马经常被各种软件发现被杀。与此同时，网络经常流传一些免杀马（当然免杀一句话很有可能藏后门大家都是知道的），那么那些免杀是怎么做出来的？打开看，可能就是非常难看难以阅读的 PHP 代码（为了混淆各种杀软的侦察）。\r\n\r\n当然，怎么样写出那种奇奇怪怪的东西呢？这就取决于你对 PHP 这门语言的了解程度：你是一个 PHP 开发者，通过 PHP 培训获得一定的技能？还是一个渗透测试人员，通过平时在渗透测试过程中接触 PHP，查看 PHP 官方手册学习 PHP。\r\n\r\n嗯……不管你是怎么样的契机接触了 PHP，并且看到了这篇文章，我都希望你看到这篇文章的时候，能够知道一些之前不知道的东西；或者你都对这些技巧了然于胸，能够帮助你回忆这些很有趣的 PHP Trick。\r\n<h2>PHP 中的大小写</h2>\r\n当然这个东西对于开发者来说，其实是没什么太大的作用：没有哪个 Boss 允许你把 PHP 中的关键字写的参差不齐，大小写不一；作为对比，一个渗透测试人员和安全研究者通常需要使用 PHP 大小写来绕过一些限制策略，想这个大家都是渗透体会的，不光 PHP，在 XSS 和 SQLinject 中，大小写的随机组合有时候能达到出其不意的效果对吧？\r\n那么具体来说 PHP 中可以忽略大小写的东西有什么呢？\r\n<blockquote>\r\n<ul>\r\n 	<li>用户定义类</li>\r\n 	<li>用户定义函数</li>\r\n 	<li>内置结构</li>\r\n 	<li>关键字</li>\r\n</ul>\r\n</blockquote>\r\n那么剩下的基本都要大小写敏感了哦，当然，一定要记住 <strong>变量是区分大小写的！</strong>\r\n\r\n下面举一些例子，当然这个例子没有实际的意义，但是尽量包含了上面说到的几个点（当然还包含了我们下面要讲的东西）：\r\n\r\n[php]\r\n&lt;?pHp\r\nfUnCtIoN test(){\r\n?&gt;\r\n&lt;?phP echo \'First!\'; }\r\n\r\ntest(); ?&gt;\r\n&lt;br&gt;\r\n&lt;? teSt() ?&gt;\r\n&lt;br&gt;\r\n&lt;?Php tEst() ?&gt;\r\n&lt;br&gt;\r\n&lt;?PhP TeSt() ?&gt;\r\n&lt;br&gt;\r\n[/php]\r\n\r\n执行结果：\r\n\r\n[php]\r\nFirst!\r\nFirst!\r\nFirst!\r\nFirst!\r\n[/php]\r\n\r\n嗯，不知道大家有没有觉得惊奇呢？上面的代码居然是可以运行的！没错啊，这是不是我们经常在 webshell 和“一句话木马”中见到的一种写法？原理是什么？当然，我们发现上面的写法其实前四行很奇怪。当然我们后面再讨论这个问题吧，至少，我们现在发现了 PHP 中的大小写实在是松散。\r\n<h2>PHP 标签</h2>\r\n<h3>PHP 标签类型：</h3>\r\n<b>1. XML 型标签</b>\r\n\r\n对于这种标签类型，我觉得没有必要解释太多：\r\n\r\n[php]\r\n&lt;?php echo &quot;In PHP Tag~&quot;?&gt; \r\n[/php]\r\n\r\n大家需要知道的也就是：这个标签中的 php 的声明不是大小写敏感的，你可以 &lt;?PhP ... ?&gt; 也是完全可行的。\r\n\r\n<b>2. 短标签 （SGML 型标签）</b>\r\n\r\n对于这种标签，我个人把他们分成两类：\r\n<ul>\r\n 	<li>需要 PHP 配置支持的</li>\r\n 	<li>不需要 PHP 配置支持的</li>\r\n</ul>\r\n下面具体来介绍：\r\n\r\n需要配置支持：&lt;? echo “In Tag!” ?&gt;\r\n\r\n这种标签其实是非常常见的，对不对？\r\n\r\n[php]&lt;? echo &quot;In Tag!&quot; ?&gt;[/php]\r\n\r\n当然这种标签发挥作用，要取决于你的 PHP 配置是否开启了 short_open_tag。\r\n需要说明的是，一旦使用关闭了 short_open_tag 的话，<code>&lt;? ... ?&gt;</code> 的内容是不会显示在用户界面上的，也就是这些东西直接不见了，也不会执行，就当是被 DROP 掉了吧~\r\n\r\n不需要配置支持：&lt;?=”In Tag!”?&gt;\r\n\r\n这个标签其实也是非常厉害，并不需要开启 short_open_tag 就可以起作用，但是，缺点就是这个标签相当于一个 echo, 所以用法也相当受到限制：\r\n\r\n[php]输出一个字符串\r\n&lt;?=\'This short Tag just for echo~\'?&gt;\r\n函数调用\r\n&lt;?=test()?&gt;[/php]\r\n\r\n当然可以函数调用还不够么？能怎么样玩耍就需要大家的智慧了。\r\n\r\n<b>3. ASP 风格标签</b>\r\n\r\n其实这个也不用多说，大家一看便知：\r\n\r\n[php]&lt;% echo \'IN TAG!\' %&gt;[/php]\r\n\r\n如果想要使用这种风格的标签，需要确保 <code>asp_tags</code> 打开，并且一定要注意的是，这个和短标签的区别是：当短标签配置是关闭的时候，短标签（包括短标签内部）的东西是不会让用户看到的！然而如果 asp_tags 关闭时，你使用这种标签就会造成他的内容被用户看到，包括 ASP 风格标签和标签内部的内容。\r\n\r\n<b>4. Script 风格标签</b>\r\n\r\n这个标签类型大家可能之前也还是见过的:\r\n\r\n[php]&lt;script language=PhP&gt;Echo \'In Tags\'&lt;/script&gt;[/php]\r\n\r\n没错，这个可以使用，而且 <code>script</code> <code>language</code> <code>php</code> 的大小写随意转换，拿去做混淆自然挺不错的。\r\n<h3>标签的 Trick</h3>\r\n那么我稍微做一下整理：证明一下上面讲的都是正确的，大家可以看一下这个有趣的例子：\r\n\r\n[php]\r\n&lt;?php\r\nFuNcTiON test(){\r\n?&gt;\r\n&lt;?php echo \'This is in the test function\'?&gt;\r\n&lt;? Echo \'&lt;br&gt;Short Tag may be useful\' ;?&gt;\r\n\r\n &lt;script language=Php&gt;echo \'&lt;br&gt; Now in script style !\';};&lt;/script&gt;\r\n\r\n&lt;br&gt;\r\n\r\n&lt;?=test()?&gt;\r\n[/php]\r\n\r\n很有趣的是，我把一个 test 函数肢解在了三种标签中，最后使用 &lt;?=?&gt; 短标签来调用，发现函数的定义并没有被破坏，而且，最后成功调用了，这难道不是非常的振奋人心么？嗯，当然我尝试了很多种奇奇怪怪的玩法，但是就只有这种是可以的，如果读者有神奇的玩法，可以分享。\r\n<h2>流程控制的另一种写法</h2>\r\n其实我并不是一个 PHPer 而是一个 Pythoner， PHP 的大括号让我非常难受，非常生气，然后我就很开心的使用了另外一种写法：\r\n\r\n[php]\r\n&lt;?php if (33&gt;4)\r\n &gt;\r\n&lt;?php echo TRUE;?&gt;\r\n&lt;br&gt;\r\n&lt;?php echo \'This IF have been seperated!\';?&gt;\r\n&lt;?php else: echo \'Impossible??\'?&gt;\r\n&lt;?php endif;?&gt;\r\n[/php]\r\n\r\n执行结果是\r\n\r\n[php]\r\n1\r\nThis IF have been seperated!\r\n[/php]\r\n\r\n怎么说呢，这样的话我就不用再写丑陋的大括号了，但是好像有需要写标签？嗨呀，反正这样也算是一种新的姿势吧！\r\n同样的不仅仅是 if elseif else 可以使用这种写法，switch 对应 endswitch； for 对应的 endfor；while 对应 endwhile；foreach 对应 endforeach …\r\n<h2>PHP 类型问题（弱类型）</h2>\r\nPHP 的弱类型问题由来已久吧，当然我们先用一个例子来开始我们这一部分的话题：\r\n\r\n<strong>浮点型比较</strong>： 两个浮点型数据比较，实际只会比较前几位（解释器是假定 PHP 浮点型不可能完全精确的），这样就造成很奇怪的现象，我们这里就举两个例子来说吧！\r\n\r\n[php]\r\n&lt;?php\r\necho \'This page is for float_trick! &lt;br&gt;\';\r\n\r\n\r\n$fill = \'0.\';\r\nfor ($i = 0; $i &lt; 20; $i ++ ):\r\n $fill = $fill.\'0\';\r\n $val1 = floatval($fill.\'1\');\r\n $val2 = floatval($fill.\'2\');\r\n\r\n echo $val1,\'==\',$val2, \' result: \', $val1 == $val2, \'&lt;br&gt;\';\r\n\r\n\r\nendfor;\r\n\r\necho \'----------------------------------------------------------------------&lt;br&gt;\';\r\n\r\n$fill = \'2.\';\r\nfor ($i = 0; $i &lt; 20; $i ++ ):\r\n $fill = $fill.\'0\';\r\n $val1 = floatval($fill.\'1\');\r\n $val2 = floatval($fill.\'2\');\r\n\r\necho $val1,\'==\',$val2, \' result: \', $val1 == $val2, \'&lt;br&gt;\';\r\n\r\n\r\nendfor;\r\n\r\necho \'----------------------------------------------------------------------&lt;br&gt;\';\r\n\r\n$fill = \'2.\';\r\nfor ($i = 0; $i &lt; 20; $i ++ ):\r\n$fill = $fill.\'3\';\r\n$val1 = floatval($fill.\'1\');\r\n$val2 = floatval($fill.\'2\');\r\n\r\necho $val1,\'==\',$val2, \' result: \', $val1 == $val2, \'&lt;br&gt;\';\r\n\r\n\r\nendfor;\r\n?&gt; \r\n[/php]\r\n\r\n执行的结果为：\r\n\r\n[php]\r\n\r\nThis page is for float_trick!\r\n0.01==0.02 result:\r\n0.001==0.002 result:\r\n0.0001==0.0002 result:\r\n1.0E-5==2.0E-5 result:\r\n1.0E-6==2.0E-6 result:\r\n1.0E-7==2.0E-7 result:\r\n1.0E-8==2.0E-8 result:\r\n1.0E-9==2.0E-9 result:\r\n1.0E-10==2.0E-10 result:\r\n1.0E-11==2.0E-11 result:\r\n1.0E-12==2.0E-12 result:\r\n1.0E-13==2.0E-13 result:\r\n1.0E-14==2.0E-14 result:\r\n1.0E-15==2.0E-15 result:\r\n1.0E-16==2.0E-16 result:\r\n1.0E-17==2.0E-17 result:\r\n1.0E-18==2.0E-18 result:\r\n1.0E-19==2.0E-19 result:\r\n1.0E-20==2.0E-20 result:\r\n1.0E-21==2.0E-21 result:\r\n----------------------------------------------------------------------\r\n2.01==2.02 result:\r\n2.001==2.002 result:\r\n2.0001==2.0002 result:\r\n2.00001==2.00002 result:\r\n2.000001==2.000002 result:\r\n2.0000001==2.0000002 result:\r\n2.00000001==2.00000002 result:\r\n2.000000001==2.000000002 result:\r\n2.0000000001==2.0000000002 result:\r\n2.00000000001==2.00000000002 result:\r\n2.000000000001==2.000000000002 result:\r\n2.0000000000001==2.0000000000002 result:\r\n2==2 result:\r\n2==2 result:\r\n2==2 result: 1\r\n2==2 result: 1\r\n2==2 result: 1\r\n2==2 result: 1\r\n2==2 result: 1\r\n2==2 result: 1\r\n----------------------------------------------------------------------\r\n2.31==2.32 result:\r\n2.331==2.332 result:\r\n2.3331==2.3332 result:\r\n2.33331==2.33332 result:\r\n2.333331==2.333332 result:\r\n2.3333331==2.3333332 result:\r\n2.33333331==2.33333332 result:\r\n2.333333331==2.333333332 result:\r\n2.3333333331==2.3333333332 result:\r\n2.33333333331==2.33333333332 result:\r\n2.333333333331==2.333333333332 result:\r\n2.3333333333331==2.3333333333332 result:\r\n2.3333333333333==2.3333333333333 result:\r\n2.3333333333333==2.3333333333333 result:\r\n2.3333333333333==2.3333333333333 result: 1\r\n2.3333333333333==2.3333333333333 result: 1\r\n2.3333333333333==2.3333333333333 result: 1\r\n2.3333333333333==2.3333333333333 result: 1\r\n2.3333333333333==2.3333333333333 result: 1\r\n2.3333333333333==2.3333333333333 result: 1\r\n\r\n[/php]\r\n\r\n当然我们发现 0.00000000000X 会默认被记成科学计数法，进行比较不会丢失精度。\r\n但是对于我们发现转换来转换去，PHP 的 Float 类型也顶多能存储 16 位数的浮点型。\r\n我们看完上面的小实验，我觉得大家应该就已经明白了 Float 在 PHP 中是如何被处理的，以及 floatval 这个函数的结果。\r\n<ul>\r\n 	<li>最多存储 16 位小数。</li>\r\n 	<li>会把 1.00000000000000000000000000000000001 自动去掉后面多余的（16位之外的数），如果16位之内都为 0，则自动转为 int。</li>\r\n 	<li>0.0000000000xxx 开头会视情况自动转为科学记数法，而且不会造成精度丢失。</li>\r\n</ul>\r\n<h3>谈一谈其他的类型问题</h3>\r\nintval 与 floatval 对于某些特殊情况的类型转换。\r\n\r\n<b>intval</b>\r\n\r\n这一串代码，大致我们来看一下，str 转换成 int 的下面情况\r\n\r\n[php]\r\n&lt;?php\r\necho \'$ret is a str\';\r\necho \'&lt;br&gt;\';\r\n$ret = \'123.12.123\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'123Saaf\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'adf123Saaf\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'12.3Saaf\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'ads1.23Saaf\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'123.789\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = 123.789;\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n?&gt;\r\n[/php]\r\n\r\n执行结果为：\r\n\r\n[php]\r\n$ret is a str\r\n123.12.123 intval=&gt; 123\r\n123Saaf intval=&gt; 123\r\nadf123Saaf intval=&gt; 0\r\n12.3Saaf intval=&gt; 12\r\nads1.23Saaf intval=&gt; 0\r\n123.789 intval=&gt; 123\r\n123.789 intval=&gt; 123\r\n[/php]\r\n\r\n前面为等待转换的 string，后面为经过 intval 函数以后的值。我们现在来简单总结一下：\r\n\r\n一个 String 被 intval 转换从前到后取一个 int。\r\n如果开头不是 int 的话，那么就是 0。\r\n转换一个浮点型数，直接去掉小数部分（不是四舍五入）\r\nfloatval\r\n\r\nfloatval 和 intval 有点类似，大家看一下下面的例子就知道了，我就不浪费时间讨论总结了。\r\n\r\n[php]\r\n&lt;?php\r\n$ret = \'123.456.76\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'123.456.76asd\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'123.456adf\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'.123.456\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'qerqer123.456adf\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'456adf\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'123\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'asd76\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n?&gt;\r\n[/php]\r\n\r\n执行结果为\r\n\r\n[php]\r\n123.456.76 floatval=&gt; 123.456\r\n123.456.76asd floatval=&gt; 123.456\r\n123.456adf floatval=&gt; 123.456\r\n.123.456 floatval=&gt; 0.123\r\nqerqer123.456adf floatval=&gt; 0\r\n456adf floatval=&gt; 456\r\n123 floatval=&gt; 123\r\nasd76 floatval=&gt; 0 \r\n[/php]\r\n\r\n<h3>松散比较问题</h3>\r\n盗用 drops 的一个图吧，私以为这个图就可以基本说明一切了。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/04/php_trick.jpg\"><img class=\"alignnone size-full wp-image-872\" src=\"https://files.gzpblog.com/wp/2017/04/php_trick.jpg\" alt=\"\" width=\"690\" height=\"351\" /></a>\r\n\r\n松散比较可以出现在 ‘==’ 中，还可以出现在函数传值和 switch 中。\r\n<h3>strcmp</h3>\r\n接下来我照着上面的图做了一个 strcmp 的各种类型比较的表格。\r\n<table style=\"height: 376px;\" width=\"713\">\r\n<thead>\r\n<tr>\r\n<th></th>\r\n<th>true</th>\r\n<th>false</th>\r\n<th>1</th>\r\n<th>0</th>\r\n<th>-1</th>\r\n<th>’1′</th>\r\n<th>’0′</th>\r\n<th>‘-1′</th>\r\n<th>NULL</th>\r\n<th>array()</th>\r\n<th>‘php’</th>\r\n<th>”</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>true</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>false</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>-2</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-2</td>\r\n<td>0</td>\r\n<td></td>\r\n<td>-3</td>\r\n<td>0</td>\r\n</tr>\r\n<tr>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>1</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>-1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>2</td>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>2</td>\r\n<td>0</td>\r\n<td>2</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td>’1′</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>’0′</td>\r\n<td>-1</td>\r\n<td>1</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>-1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>‘-1′</td>\r\n<td>-1</td>\r\n<td>2</td>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>2</td>\r\n<td>0</td>\r\n<td>2</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td>NULL</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>-2</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-2</td>\r\n<td>0</td>\r\n<td></td>\r\n<td>-3</td>\r\n<td>0</td>\r\n</tr>\r\n<tr>\r\n<td>array()</td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>‘php’</td>\r\n<td>1</td>\r\n<td>3</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>3</td>\r\n<td>1</td>\r\n<td>3</td>\r\n<td></td>\r\n<td>0</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td>”</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>-2</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-2</td>\r\n<td>0</td>\r\n<td></td>\r\n<td>-3</td>\r\n<td>0</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n方便大家对这个东西有更深的理解。\r\n\r\n出现这些问题的，具体原因其实有很多，除了 intval 之类的类型转换，也有其他的（关于 strcmp 内部实现的分析不在讨论范围）。\r\n\r\n上面的表格的源代码在这里：当然 wooyun drops 的表格你也可以在下面的代码中稍微改一下就可以验证了。\r\n\r\n[php]\r\n&lt;?php\r\n $items[0] = True;\r\n $items[1] = False;\r\n $items[2] = 1;\r\n $items[3] = 0;\r\n $items[4] = -1;\r\n $items[5] = &quot;1&quot;;\r\n $itmes[6] = \'0\';\r\n $items[7] = \'-1\';\r\n $items[8] = NULL;\r\n $items[9] = array();\r\n $items[10] = \'php\';\r\n $items[11] = \'\';\r\n\r\n ?&gt;\r\n\r\n &lt;table border=1&gt;\r\n &lt;tr&gt;\r\n    &lt;th&gt;&lt;/th&gt;\r\n    &lt;th&gt;true&lt;/th&gt;\r\n    &lt;th&gt;false&lt;/th&gt;\r\n    &lt;th&gt;1&lt;/th&gt;\r\n    &lt;th&gt;0&lt;/th&gt;\r\n    &lt;th&gt;-1&lt;/th&gt;\r\n    &lt;th&gt;\'1\'&lt;/th&gt;\r\n    &lt;th&gt;\'0\'&lt;/th&gt;\r\n    &lt;th&gt;\'-1\'&lt;/th&gt;\r\n    &lt;th&gt;NULL&lt;/th&gt;\r\n    &lt;th&gt;array()&lt;/th&gt;\r\n    &lt;th&gt;\'php\'&lt;/th&gt;\r\n    &lt;th&gt;\'\'&lt;/th&gt;\r\n &lt;/tr&gt; \r\n &lt;tr&gt;\r\n    &lt;td&gt;true&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(true, $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt;false&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(false, $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n   &lt;tr&gt;\r\n    &lt;td&gt;1&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(1, $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n   &lt;tr&gt;\r\n    &lt;td&gt;0&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(0, $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n   &lt;tr&gt;\r\n    &lt;td&gt;-1&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(-1, $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n   &lt;tr&gt;\r\n    &lt;td&gt;\'1\'&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(\'1\', $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n   &lt;tr&gt;\r\n    &lt;td&gt;\'0\'&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(\'0\', $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n   &lt;tr&gt;\r\n    &lt;td&gt;\'-1\'&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(\'-1\', $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n    &lt;tr&gt;\r\n    &lt;td&gt;NULL&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(NULL, $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n    &lt;tr&gt;\r\n    &lt;td&gt;array()&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(array(), $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n    &lt;tr&gt;\r\n    &lt;td&gt;\'php\'&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(\'php\', $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n    &lt;tr&gt;\r\n    &lt;td&gt;\'\'&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(\'\', $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n\r\n &lt;/table&gt;\r\n[/php]\r\n\r\n当然上面代码的输出结果大家可能会看到一大堆的 Warning 和 Notice，但是我们使用 @ 来忽略。当然忽略并不是说我们不关心，在网站中如果出现了这种情况，一个正常的程序员是不会让用户看到异常的，这样很容易让用户感到“恐慌”，同时也可以避免一些敏感的信息泄露。当然并不是说异常不重要，实际上如果有了这些 Warning 和 Notice。\r\n<h2>本篇结语</h2>\r\n由于篇幅的原因，私以为总结全部堆在一起看起来并不是特别舒服。\r\n当然我也只能把我自己懂的这点东西总结出来希望和大家分享，但是总是感觉意犹未尽吧，因为还有很多东西我们都没有写出来。\r\n那么，之后吧，之后我们再来详细讨论一下 PHP 的其他的奇怪的东西：\r\n<blockquote>\r\n<ul>\r\n 	<li>HPP — HTTP Parameter Pollution</li>\r\n 	<li>截断</li>\r\n 	<li>协议封装</li>\r\n 	<li>…</li>\r\n</ul>\r\n</blockquote>\r\n水平有限，如果上面有什么不正确的，希望读者不吝指出。', 'PHP Trick 总结与探讨（一）', '', 'publish', 'open', 'closed', '', 'php-trick-%e6%80%bb%e7%bb%93%e4%b8%8e%e6%8e%a2%e8%ae%a8%ef%bc%88%e4%b8%80%ef%bc%89', '', '', '2017-04-18 23:08:05', '2017-04-18 15:08:05', '', 0, 'https://www.gzpblog.com/?p=871', 0, 'post', '', 2),
(872, 1, '2017-04-18 22:55:35', '2017-04-18 14:55:35', '', 'php_trick', '', 'inherit', 'open', 'closed', '', 'php_trick', '', '', '2017-04-18 22:55:35', '2017-04-18 14:55:35', '', 871, 'https://www.gzpblog.com/wp-content/uploads/2017/04/php_trick.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(875, 1, '2017-04-18 23:08:05', '2017-04-18 15:08:05', '<blockquote>本文原创作者：VillanCh，发表于FreeBuf.COM；原文链接：<a href=\"http://www.freebuf.com/articles/rookie/119969.html\" target=\"_blank\">PHP Trick 总结与探讨（一） </a></blockquote>\r\n本文不是 PHP 教程，本文只针对 PHP 的各种奇淫技巧进行整理和证明，在进行渗透测试（WEB 安全）的学习中，经常需要涉及到 PHP 编程，或者 PHP 编写 Webshell 或者一句话木马，一般的 PHP 马经常被各种软件发现被杀。与此同时，网络经常流传一些免杀马（当然免杀一句话很有可能藏后门大家都是知道的），那么那些免杀是怎么做出来的？打开看，可能就是非常难看难以阅读的 PHP 代码（为了混淆各种杀软的侦察）。\r\n\r\n当然，怎么样写出那种奇奇怪怪的东西呢？这就取决于你对 PHP 这门语言的了解程度：你是一个 PHP 开发者，通过 PHP 培训获得一定的技能？还是一个渗透测试人员，通过平时在渗透测试过程中接触 PHP，查看 PHP 官方手册学习 PHP。\r\n\r\n嗯……不管你是怎么样的契机接触了 PHP，并且看到了这篇文章，我都希望你看到这篇文章的时候，能够知道一些之前不知道的东西；或者你都对这些技巧了然于胸，能够帮助你回忆这些很有趣的 PHP Trick。\r\n<h2>PHP 中的大小写</h2>\r\n当然这个东西对于开发者来说，其实是没什么太大的作用：没有哪个 Boss 允许你把 PHP 中的关键字写的参差不齐，大小写不一；作为对比，一个渗透测试人员和安全研究者通常需要使用 PHP 大小写来绕过一些限制策略，想这个大家都是渗透体会的，不光 PHP，在 XSS 和 SQLinject 中，大小写的随机组合有时候能达到出其不意的效果对吧？\r\n那么具体来说 PHP 中可以忽略大小写的东西有什么呢？\r\n<blockquote>\r\n<ul>\r\n 	<li>用户定义类</li>\r\n 	<li>用户定义函数</li>\r\n 	<li>内置结构</li>\r\n 	<li>关键字</li>\r\n</ul>\r\n</blockquote>\r\n那么剩下的基本都要大小写敏感了哦，当然，一定要记住 <strong>变量是区分大小写的！</strong>\r\n\r\n下面举一些例子，当然这个例子没有实际的意义，但是尽量包含了上面说到的几个点（当然还包含了我们下面要讲的东西）：\r\n\r\n[php]\r\n&lt;?pHp\r\nfUnCtIoN test(){\r\n?&gt;\r\n&lt;?phP echo \'First!\'; }\r\n\r\ntest(); ?&gt;\r\n&lt;br&gt;\r\n&lt;? teSt() ?&gt;\r\n&lt;br&gt;\r\n&lt;?Php tEst() ?&gt;\r\n&lt;br&gt;\r\n&lt;?PhP TeSt() ?&gt;\r\n&lt;br&gt;\r\n[/php]\r\n\r\n执行结果：\r\n\r\n[php]\r\nFirst!\r\nFirst!\r\nFirst!\r\nFirst!\r\n[/php]\r\n\r\n嗯，不知道大家有没有觉得惊奇呢？上面的代码居然是可以运行的！没错啊，这是不是我们经常在 webshell 和“一句话木马”中见到的一种写法？原理是什么？当然，我们发现上面的写法其实前四行很奇怪。当然我们后面再讨论这个问题吧，至少，我们现在发现了 PHP 中的大小写实在是松散。\r\n<h2>PHP 标签</h2>\r\n<h3>PHP 标签类型：</h3>\r\n<b>1. XML 型标签</b>\r\n\r\n对于这种标签类型，我觉得没有必要解释太多：\r\n\r\n[php]\r\n&lt;?php echo &quot;In PHP Tag~&quot;?&gt; \r\n[/php]\r\n\r\n大家需要知道的也就是：这个标签中的 php 的声明不是大小写敏感的，你可以 &lt;?PhP ... ?&gt; 也是完全可行的。\r\n\r\n<b>2. 短标签 （SGML 型标签）</b>\r\n\r\n对于这种标签，我个人把他们分成两类：\r\n<ul>\r\n 	<li>需要 PHP 配置支持的</li>\r\n 	<li>不需要 PHP 配置支持的</li>\r\n</ul>\r\n下面具体来介绍：\r\n\r\n需要配置支持：&lt;? echo “In Tag!” ?&gt;\r\n\r\n这种标签其实是非常常见的，对不对？\r\n\r\n[php]&lt;? echo &quot;In Tag!&quot; ?&gt;[/php]\r\n\r\n当然这种标签发挥作用，要取决于你的 PHP 配置是否开启了 short_open_tag。\r\n需要说明的是，一旦使用关闭了 short_open_tag 的话，<code>&lt;? ... ?&gt;</code> 的内容是不会显示在用户界面上的，也就是这些东西直接不见了，也不会执行，就当是被 DROP 掉了吧~\r\n\r\n不需要配置支持：&lt;?=”In Tag!”?&gt;\r\n\r\n这个标签其实也是非常厉害，并不需要开启 short_open_tag 就可以起作用，但是，缺点就是这个标签相当于一个 echo, 所以用法也相当受到限制：\r\n\r\n[php]输出一个字符串\r\n&lt;?=\'This short Tag just for echo~\'?&gt;\r\n函数调用\r\n&lt;?=test()?&gt;[/php]\r\n\r\n当然可以函数调用还不够么？能怎么样玩耍就需要大家的智慧了。\r\n\r\n<b>3. ASP 风格标签</b>\r\n\r\n其实这个也不用多说，大家一看便知：\r\n\r\n[php]&lt;% echo \'IN TAG!\' %&gt;[/php]\r\n\r\n如果想要使用这种风格的标签，需要确保 <code>asp_tags</code> 打开，并且一定要注意的是，这个和短标签的区别是：当短标签配置是关闭的时候，短标签（包括短标签内部）的东西是不会让用户看到的！然而如果 asp_tags 关闭时，你使用这种标签就会造成他的内容被用户看到，包括 ASP 风格标签和标签内部的内容。\r\n\r\n<b>4. Script 风格标签</b>\r\n\r\n这个标签类型大家可能之前也还是见过的:\r\n\r\n[php]&lt;script language=PhP&gt;Echo \'In Tags\'&lt;/script&gt;[/php]\r\n\r\n没错，这个可以使用，而且 <code>script</code> <code>language</code> <code>php</code> 的大小写随意转换，拿去做混淆自然挺不错的。\r\n<h3>标签的 Trick</h3>\r\n那么我稍微做一下整理：证明一下上面讲的都是正确的，大家可以看一下这个有趣的例子：\r\n\r\n[php]\r\n&lt;?php\r\nFuNcTiON test(){\r\n?&gt;\r\n&lt;?php echo \'This is in the test function\'?&gt;\r\n&lt;? Echo \'&lt;br&gt;Short Tag may be useful\' ;?&gt;\r\n\r\n &lt;script language=Php&gt;echo \'&lt;br&gt; Now in script style !\';};&lt;/script&gt;\r\n\r\n&lt;br&gt;\r\n\r\n&lt;?=test()?&gt;\r\n[/php]\r\n\r\n很有趣的是，我把一个 test 函数肢解在了三种标签中，最后使用 &lt;?=?&gt; 短标签来调用，发现函数的定义并没有被破坏，而且，最后成功调用了，这难道不是非常的振奋人心么？嗯，当然我尝试了很多种奇奇怪怪的玩法，但是就只有这种是可以的，如果读者有神奇的玩法，可以分享。\r\n<h2>流程控制的另一种写法</h2>\r\n其实我并不是一个 PHPer 而是一个 Pythoner， PHP 的大括号让我非常难受，非常生气，然后我就很开心的使用了另外一种写法：\r\n\r\n[php]\r\n&lt;?php if (33&gt;4)\r\n &gt;\r\n&lt;?php echo TRUE;?&gt;\r\n&lt;br&gt;\r\n&lt;?php echo \'This IF have been seperated!\';?&gt;\r\n&lt;?php else: echo \'Impossible??\'?&gt;\r\n&lt;?php endif;?&gt;\r\n[/php]\r\n\r\n执行结果是\r\n\r\n[php]\r\n1\r\nThis IF have been seperated!\r\n[/php]\r\n\r\n怎么说呢，这样的话我就不用再写丑陋的大括号了，但是好像有需要写标签？嗨呀，反正这样也算是一种新的姿势吧！\r\n同样的不仅仅是 if elseif else 可以使用这种写法，switch 对应 endswitch； for 对应的 endfor；while 对应 endwhile；foreach 对应 endforeach …\r\n<h2>PHP 类型问题（弱类型）</h2>\r\nPHP 的弱类型问题由来已久吧，当然我们先用一个例子来开始我们这一部分的话题：\r\n\r\n<strong>浮点型比较</strong>： 两个浮点型数据比较，实际只会比较前几位（解释器是假定 PHP 浮点型不可能完全精确的），这样就造成很奇怪的现象，我们这里就举两个例子来说吧！\r\n\r\n[php]\r\n&lt;?php\r\necho \'This page is for float_trick! &lt;br&gt;\';\r\n\r\n\r\n$fill = \'0.\';\r\nfor ($i = 0; $i &lt; 20; $i ++ ):\r\n $fill = $fill.\'0\';\r\n $val1 = floatval($fill.\'1\');\r\n $val2 = floatval($fill.\'2\');\r\n\r\n echo $val1,\'==\',$val2, \' result: \', $val1 == $val2, \'&lt;br&gt;\';\r\n\r\n\r\nendfor;\r\n\r\necho \'----------------------------------------------------------------------&lt;br&gt;\';\r\n\r\n$fill = \'2.\';\r\nfor ($i = 0; $i &lt; 20; $i ++ ):\r\n $fill = $fill.\'0\';\r\n $val1 = floatval($fill.\'1\');\r\n $val2 = floatval($fill.\'2\');\r\n\r\necho $val1,\'==\',$val2, \' result: \', $val1 == $val2, \'&lt;br&gt;\';\r\n\r\n\r\nendfor;\r\n\r\necho \'----------------------------------------------------------------------&lt;br&gt;\';\r\n\r\n$fill = \'2.\';\r\nfor ($i = 0; $i &lt; 20; $i ++ ):\r\n$fill = $fill.\'3\';\r\n$val1 = floatval($fill.\'1\');\r\n$val2 = floatval($fill.\'2\');\r\n\r\necho $val1,\'==\',$val2, \' result: \', $val1 == $val2, \'&lt;br&gt;\';\r\n\r\n\r\nendfor;\r\n?&gt; \r\n[/php]\r\n\r\n执行的结果为：\r\n\r\n[php]\r\n\r\nThis page is for float_trick!\r\n0.01==0.02 result:\r\n0.001==0.002 result:\r\n0.0001==0.0002 result:\r\n1.0E-5==2.0E-5 result:\r\n1.0E-6==2.0E-6 result:\r\n1.0E-7==2.0E-7 result:\r\n1.0E-8==2.0E-8 result:\r\n1.0E-9==2.0E-9 result:\r\n1.0E-10==2.0E-10 result:\r\n1.0E-11==2.0E-11 result:\r\n1.0E-12==2.0E-12 result:\r\n1.0E-13==2.0E-13 result:\r\n1.0E-14==2.0E-14 result:\r\n1.0E-15==2.0E-15 result:\r\n1.0E-16==2.0E-16 result:\r\n1.0E-17==2.0E-17 result:\r\n1.0E-18==2.0E-18 result:\r\n1.0E-19==2.0E-19 result:\r\n1.0E-20==2.0E-20 result:\r\n1.0E-21==2.0E-21 result:\r\n----------------------------------------------------------------------\r\n2.01==2.02 result:\r\n2.001==2.002 result:\r\n2.0001==2.0002 result:\r\n2.00001==2.00002 result:\r\n2.000001==2.000002 result:\r\n2.0000001==2.0000002 result:\r\n2.00000001==2.00000002 result:\r\n2.000000001==2.000000002 result:\r\n2.0000000001==2.0000000002 result:\r\n2.00000000001==2.00000000002 result:\r\n2.000000000001==2.000000000002 result:\r\n2.0000000000001==2.0000000000002 result:\r\n2==2 result:\r\n2==2 result:\r\n2==2 result: 1\r\n2==2 result: 1\r\n2==2 result: 1\r\n2==2 result: 1\r\n2==2 result: 1\r\n2==2 result: 1\r\n----------------------------------------------------------------------\r\n2.31==2.32 result:\r\n2.331==2.332 result:\r\n2.3331==2.3332 result:\r\n2.33331==2.33332 result:\r\n2.333331==2.333332 result:\r\n2.3333331==2.3333332 result:\r\n2.33333331==2.33333332 result:\r\n2.333333331==2.333333332 result:\r\n2.3333333331==2.3333333332 result:\r\n2.33333333331==2.33333333332 result:\r\n2.333333333331==2.333333333332 result:\r\n2.3333333333331==2.3333333333332 result:\r\n2.3333333333333==2.3333333333333 result:\r\n2.3333333333333==2.3333333333333 result:\r\n2.3333333333333==2.3333333333333 result: 1\r\n2.3333333333333==2.3333333333333 result: 1\r\n2.3333333333333==2.3333333333333 result: 1\r\n2.3333333333333==2.3333333333333 result: 1\r\n2.3333333333333==2.3333333333333 result: 1\r\n2.3333333333333==2.3333333333333 result: 1\r\n\r\n[/php]\r\n\r\n当然我们发现 0.00000000000X 会默认被记成科学计数法，进行比较不会丢失精度。\r\n但是对于我们发现转换来转换去，PHP 的 Float 类型也顶多能存储 16 位数的浮点型。\r\n我们看完上面的小实验，我觉得大家应该就已经明白了 Float 在 PHP 中是如何被处理的，以及 floatval 这个函数的结果。\r\n<ul>\r\n 	<li>最多存储 16 位小数。</li>\r\n 	<li>会把 1.00000000000000000000000000000000001 自动去掉后面多余的（16位之外的数），如果16位之内都为 0，则自动转为 int。</li>\r\n 	<li>0.0000000000xxx 开头会视情况自动转为科学记数法，而且不会造成精度丢失。</li>\r\n</ul>\r\n<h3>谈一谈其他的类型问题</h3>\r\nintval 与 floatval 对于某些特殊情况的类型转换。\r\n\r\n<b>intval</b>\r\n\r\n这一串代码，大致我们来看一下，str 转换成 int 的下面情况\r\n\r\n[php]\r\n&lt;?php\r\necho \'$ret is a str\';\r\necho \'&lt;br&gt;\';\r\n$ret = \'123.12.123\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'123Saaf\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'adf123Saaf\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'12.3Saaf\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'ads1.23Saaf\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'123.789\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = 123.789;\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n?&gt;\r\n[/php]\r\n\r\n执行结果为：\r\n\r\n[php]\r\n$ret is a str\r\n123.12.123 intval=&gt; 123\r\n123Saaf intval=&gt; 123\r\nadf123Saaf intval=&gt; 0\r\n12.3Saaf intval=&gt; 12\r\nads1.23Saaf intval=&gt; 0\r\n123.789 intval=&gt; 123\r\n123.789 intval=&gt; 123\r\n[/php]\r\n\r\n前面为等待转换的 string，后面为经过 intval 函数以后的值。我们现在来简单总结一下：\r\n\r\n一个 String 被 intval 转换从前到后取一个 int。\r\n如果开头不是 int 的话，那么就是 0。\r\n转换一个浮点型数，直接去掉小数部分（不是四舍五入）\r\nfloatval\r\n\r\nfloatval 和 intval 有点类似，大家看一下下面的例子就知道了，我就不浪费时间讨论总结了。\r\n\r\n[php]\r\n&lt;?php\r\n$ret = \'123.456.76\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'123.456.76asd\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'123.456adf\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'.123.456\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'qerqer123.456adf\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'456adf\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'123\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'asd76\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n?&gt;\r\n[/php]\r\n\r\n执行结果为\r\n\r\n[php]\r\n123.456.76 floatval=&gt; 123.456\r\n123.456.76asd floatval=&gt; 123.456\r\n123.456adf floatval=&gt; 123.456\r\n.123.456 floatval=&gt; 0.123\r\nqerqer123.456adf floatval=&gt; 0\r\n456adf floatval=&gt; 456\r\n123 floatval=&gt; 123\r\nasd76 floatval=&gt; 0 \r\n[/php]\r\n\r\n<h3>松散比较问题</h3>\r\n盗用 drops 的一个图吧，私以为这个图就可以基本说明一切了。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/04/php_trick.jpg\"><img class=\"alignnone size-full wp-image-872\" src=\"https://files.gzpblog.com/wp/2017/04/php_trick.jpg\" alt=\"\" width=\"690\" height=\"351\" /></a>\r\n\r\n松散比较可以出现在 ‘==’ 中，还可以出现在函数传值和 switch 中。\r\n<h3>strcmp</h3>\r\n接下来我照着上面的图做了一个 strcmp 的各种类型比较的表格。\r\n<table style=\"height: 376px;\" width=\"713\">\r\n<thead>\r\n<tr>\r\n<th></th>\r\n<th>true</th>\r\n<th>false</th>\r\n<th>1</th>\r\n<th>0</th>\r\n<th>-1</th>\r\n<th>’1′</th>\r\n<th>’0′</th>\r\n<th>‘-1′</th>\r\n<th>NULL</th>\r\n<th>array()</th>\r\n<th>‘php’</th>\r\n<th>”</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>true</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>false</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>-2</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-2</td>\r\n<td>0</td>\r\n<td></td>\r\n<td>-3</td>\r\n<td>0</td>\r\n</tr>\r\n<tr>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>1</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>-1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>2</td>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>2</td>\r\n<td>0</td>\r\n<td>2</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td>’1′</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>’0′</td>\r\n<td>-1</td>\r\n<td>1</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>-1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>‘-1′</td>\r\n<td>-1</td>\r\n<td>2</td>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>2</td>\r\n<td>0</td>\r\n<td>2</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td>NULL</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>-2</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-2</td>\r\n<td>0</td>\r\n<td></td>\r\n<td>-3</td>\r\n<td>0</td>\r\n</tr>\r\n<tr>\r\n<td>array()</td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>‘php’</td>\r\n<td>1</td>\r\n<td>3</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>3</td>\r\n<td>1</td>\r\n<td>3</td>\r\n<td></td>\r\n<td>0</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td>”</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>-2</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-2</td>\r\n<td>0</td>\r\n<td></td>\r\n<td>-3</td>\r\n<td>0</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n方便大家对这个东西有更深的理解。\r\n\r\n出现这些问题的，具体原因其实有很多，除了 intval 之类的类型转换，也有其他的（关于 strcmp 内部实现的分析不在讨论范围）。\r\n\r\n上面的表格的源代码在这里：当然 wooyun drops 的表格你也可以在下面的代码中稍微改一下就可以验证了。\r\n\r\n[php]\r\n&lt;?php\r\n $items[0] = True;\r\n $items[1] = False;\r\n $items[2] = 1;\r\n $items[3] = 0;\r\n $items[4] = -1;\r\n $items[5] = &quot;1&quot;;\r\n $itmes[6] = \'0\';\r\n $items[7] = \'-1\';\r\n $items[8] = NULL;\r\n $items[9] = array();\r\n $items[10] = \'php\';\r\n $items[11] = \'\';\r\n\r\n ?&gt;\r\n\r\n &lt;table border=1&gt;\r\n &lt;tr&gt;\r\n    &lt;th&gt;&lt;/th&gt;\r\n    &lt;th&gt;true&lt;/th&gt;\r\n    &lt;th&gt;false&lt;/th&gt;\r\n    &lt;th&gt;1&lt;/th&gt;\r\n    &lt;th&gt;0&lt;/th&gt;\r\n    &lt;th&gt;-1&lt;/th&gt;\r\n    &lt;th&gt;\'1\'&lt;/th&gt;\r\n    &lt;th&gt;\'0\'&lt;/th&gt;\r\n    &lt;th&gt;\'-1\'&lt;/th&gt;\r\n    &lt;th&gt;NULL&lt;/th&gt;\r\n    &lt;th&gt;array()&lt;/th&gt;\r\n    &lt;th&gt;\'php\'&lt;/th&gt;\r\n    &lt;th&gt;\'\'&lt;/th&gt;\r\n &lt;/tr&gt; \r\n &lt;tr&gt;\r\n    &lt;td&gt;true&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(true, $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt;false&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(false, $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n   &lt;tr&gt;\r\n    &lt;td&gt;1&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(1, $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n   &lt;tr&gt;\r\n    &lt;td&gt;0&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(0, $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n   &lt;tr&gt;\r\n    &lt;td&gt;-1&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(-1, $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n   &lt;tr&gt;\r\n    &lt;td&gt;\'1\'&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(\'1\', $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n   &lt;tr&gt;\r\n    &lt;td&gt;\'0\'&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(\'0\', $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n   &lt;tr&gt;\r\n    &lt;td&gt;\'-1\'&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(\'-1\', $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n    &lt;tr&gt;\r\n    &lt;td&gt;NULL&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(NULL, $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n    &lt;tr&gt;\r\n    &lt;td&gt;array()&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(array(), $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n    &lt;tr&gt;\r\n    &lt;td&gt;\'php\'&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(\'php\', $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n    &lt;tr&gt;\r\n    &lt;td&gt;\'\'&lt;/td&gt;\r\n    &lt;?php \r\n    for($i=0; $i&lt;12; $i++){\r\n        $result = @strcmp(\'\', $items[$i]);\r\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\r\n &lt;/tr&gt;\r\n\r\n &lt;/table&gt;\r\n[/php]\r\n\r\n当然上面代码的输出结果大家可能会看到一大堆的 Warning 和 Notice，但是我们使用 @ 来忽略。当然忽略并不是说我们不关心，在网站中如果出现了这种情况，一个正常的程序员是不会让用户看到异常的，这样很容易让用户感到“恐慌”，同时也可以避免一些敏感的信息泄露。当然并不是说异常不重要，实际上如果有了这些 Warning 和 Notice。\r\n<h2>本篇结语</h2>\r\n由于篇幅的原因，私以为总结全部堆在一起看起来并不是特别舒服。\r\n当然我也只能把我自己懂的这点东西总结出来希望和大家分享，但是总是感觉意犹未尽吧，因为还有很多东西我们都没有写出来。\r\n那么，之后吧，之后我们再来详细讨论一下 PHP 的其他的奇怪的东西：\r\n<blockquote>\r\n<ul>\r\n 	<li>HPP — HTTP Parameter Pollution</li>\r\n 	<li>截断</li>\r\n 	<li>协议封装</li>\r\n 	<li>…</li>\r\n</ul>\r\n</blockquote>\r\n水平有限，如果上面有什么不正确的，希望读者不吝指出。', 'PHP Trick 总结与探讨（一）', '', 'inherit', 'closed', 'closed', '', '871-revision-v1', '', '', '2017-04-18 23:08:05', '2017-04-18 15:08:05', '', 871, 'https://www.gzpblog.com/20170418/875.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(873, 1, '2017-04-18 23:04:41', '2017-04-18 15:04:41', '<blockquote>本文原创作者：VillanCh，发表于FreeBuf.COM；原文链接：<a href=\"http://www.freebuf.com/articles/rookie/119969.html\" target=\"_blank\">PHP Trick 总结与探讨（一） </a></blockquote>\r\n本文不是 PHP 教程，本文只针对 PHP 的各种奇淫技巧进行整理和证明，在进行渗透测试（WEB 安全）的学习中，经常需要涉及到 PHP 编程，或者 PHP 编写 Webshell 或者一句话木马，一般的 PHP 马经常被各种软件发现被杀。与此同时，网络经常流传一些免杀马（当然免杀一句话很有可能藏后门大家都是知道的），那么那些免杀是怎么做出来的？打开看，可能就是非常难看难以阅读的 PHP 代码（为了混淆各种杀软的侦察）。\r\n\r\n当然，怎么样写出那种奇奇怪怪的东西呢？这就取决于你对 PHP 这门语言的了解程度：你是一个 PHP 开发者，通过 PHP 培训获得一定的技能？还是一个渗透测试人员，通过平时在渗透测试过程中接触 PHP，查看 PHP 官方手册学习 PHP。\r\n\r\n嗯……不管你是怎么样的契机接触了 PHP，并且看到了这篇文章，我都希望你看到这篇文章的时候，能够知道一些之前不知道的东西；或者你都对这些技巧了然于胸，能够帮助你回忆这些很有趣的 PHP Trick。\r\n<h2>PHP 中的大小写</h2>\r\n当然这个东西对于开发者来说，其实是没什么太大的作用：没有哪个 Boss 允许你把 PHP 中的关键字写的参差不齐，大小写不一；作为对比，一个渗透测试人员和安全研究者通常需要使用 PHP 大小写来绕过一些限制策略，想这个大家都是渗透体会的，不光 PHP，在 XSS 和 SQLinject 中，大小写的随机组合有时候能达到出其不意的效果对吧？\r\n那么具体来说 PHP 中可以忽略大小写的东西有什么呢？\r\n<blockquote>\r\n<ul>\r\n 	<li>用户定义类</li>\r\n 	<li>用户定义函数</li>\r\n 	<li>内置结构</li>\r\n 	<li>关键字</li>\r\n</ul>\r\n</blockquote>\r\n那么剩下的基本都要大小写敏感了哦，当然，一定要记住 <strong>变量是区分大小写的！</strong>\r\n\r\n下面举一些例子，当然这个例子没有实际的意义，但是尽量包含了上面说到的几个点（当然还包含了我们下面要讲的东西）：\r\n\r\n[php]\r\n&lt;?pHp\r\nfUnCtIoN test(){\r\n?&gt;\r\n&lt;?phP echo \'First!\'; }\r\n\r\ntest(); ?&gt;\r\n&lt;br&gt;\r\n&lt;? teSt() ?&gt;\r\n&lt;br&gt;\r\n&lt;?Php tEst() ?&gt;\r\n&lt;br&gt;\r\n&lt;?PhP TeSt() ?&gt;\r\n&lt;br&gt;\r\n[/php]\r\n\r\n执行结果：\r\n\r\n[php]\r\nFirst!\r\nFirst!\r\nFirst!\r\nFirst!\r\n[/php]\r\n\r\n嗯，不知道大家有没有觉得惊奇呢？上面的代码居然是可以运行的！没错啊，这是不是我们经常在 webshell 和“一句话木马”中见到的一种写法？原理是什么？当然，我们发现上面的写法其实前四行很奇怪。当然我们后面再讨论这个问题吧，至少，我们现在发现了 PHP 中的大小写实在是松散。\r\n<h2>PHP 标签</h2>\r\n<h3>PHP 标签类型：</h3>\r\n<b>1. XML 型标签</b>\r\n\r\n对于这种标签类型，我觉得没有必要解释太多：\r\n\r\n[php]\r\n&lt;?php echo &quot;In PHP Tag~&quot;?&gt; \r\n[/php]\r\n\r\n大家需要知道的也就是：这个标签中的 php 的声明不是大小写敏感的，你可以 &lt;?PhP ... ?&gt; 也是完全可行的。\r\n\r\n<b>2. 短标签 （SGML 型标签）</b>\r\n\r\n对于这种标签，我个人把他们分成两类：\r\n<ul>\r\n 	<li>需要 PHP 配置支持的</li>\r\n 	<li>不需要 PHP 配置支持的</li>\r\n</ul>\r\n下面具体来介绍：\r\n\r\n需要配置支持：&lt;? echo “In Tag!” ?&gt;\r\n\r\n这种标签其实是非常常见的，对不对？\r\n\r\n[php]&lt;? echo &quot;In Tag!&quot; ?&gt;[/php]\r\n\r\n当然这种标签发挥作用，要取决于你的 PHP 配置是否开启了 short_open_tag。\r\n需要说明的是，一旦使用关闭了 short_open_tag 的话，<code>&lt;? ... ?&gt;</code> 的内容是不会显示在用户界面上的，也就是这些东西直接不见了，也不会执行，就当是被 DROP 掉了吧~\r\n\r\n不需要配置支持：&lt;?=”In Tag!”?&gt;\r\n\r\n这个标签其实也是非常厉害，并不需要开启 short_open_tag 就可以起作用，但是，缺点就是这个标签相当于一个 echo, 所以用法也相当受到限制：\r\n\r\n[php]输出一个字符串\r\n&lt;?=\'This short Tag just for echo~\'?&gt;\r\n函数调用\r\n&lt;?=test()?&gt;[/php]\r\n\r\n当然可以函数调用还不够么？能怎么样玩耍就需要大家的智慧了。\r\n\r\n<b>3. ASP 风格标签</b>\r\n\r\n其实这个也不用多说，大家一看便知：\r\n\r\n[php]&lt;% echo \'IN TAG!\' %&gt;[/php]\r\n\r\n如果想要使用这种风格的标签，需要确保 <code>asp_tags</code> 打开，并且一定要注意的是，这个和短标签的区别是：当短标签配置是关闭的时候，短标签（包括短标签内部）的东西是不会让用户看到的！然而如果 asp_tags 关闭时，你使用这种标签就会造成他的内容被用户看到，包括 ASP 风格标签和标签内部的内容。\r\n\r\n<b>4. Script 风格标签</b>\r\n\r\n这个标签类型大家可能之前也还是见过的:\r\n\r\n[php]&lt;script language=PhP&gt;Echo \'In Tags\'&lt;/script&gt;[/php]\r\n\r\n没错，这个可以使用，而且 <code>script</code> <code>language</code> <code>php</code> 的大小写随意转换，拿去做混淆自然挺不错的。\r\n<h3>标签的 Trick</h3>\r\n那么我稍微做一下整理：证明一下上面讲的都是正确的，大家可以看一下这个有趣的例子：\r\n\r\n[php]\r\n&lt;?php\r\nFuNcTiON test(){\r\n?&gt;\r\n&lt;?php echo \'This is in the test function\'?&gt;\r\n&lt;? Echo \'&lt;br&gt;Short Tag may be useful\' ;?&gt;\r\n\r\n &lt;script language=Php&gt;echo \'&lt;br&gt; Now in script style !\';};&lt;/script&gt;\r\n\r\n&lt;br&gt;\r\n\r\n&lt;?=test()?&gt;\r\n[/php]\r\n\r\n很有趣的是，我把一个 test 函数肢解在了三种标签中，最后使用 &lt;?=?&gt; 短标签来调用，发现函数的定义并没有被破坏，而且，最后成功调用了，这难道不是非常的振奋人心么？嗯，当然我尝试了很多种奇奇怪怪的玩法，但是就只有这种是可以的，如果读者有神奇的玩法，可以分享。\r\n<h2>流程控制的另一种写法</h2>\r\n其实我并不是一个 PHPer 而是一个 Pythoner， PHP 的大括号让我非常难受，非常生气，然后我就很开心的使用了另外一种写法：\r\n\r\n[php]\r\n&lt;?php if (33&gt;4) :?\r\n &gt;\r\n&lt;?php echo TRUE;?&gt;\r\n&lt;br&gt;\r\n&lt;?php echo \'This IF have been seperated!\';?&gt;\r\n&lt;?php else: echo \'Impossible??\'?&gt;\r\n&lt;?php endif;?&gt;\r\n[/php]\r\n\r\n执行结果是\r\n\r\n[php]\r\n1\r\nThis IF have been seperated!\r\n[/php]\r\n\r\n怎么说呢，这样的话我就不用再写丑陋的大括号了，但是好像有需要写标签？嗨呀，反正这样也算是一种新的姿势吧！\r\n同样的不仅仅是 if elseif else 可以使用这种写法，switch 对应 endswitch； for 对应的 endfor；while 对应 endwhile；foreach 对应 endforeach …\r\n<h2>PHP 类型问题（弱类型）</h2>\r\nPHP 的弱类型问题由来已久吧，当然我们先用一个例子来开始我们这一部分的话题：\r\n\r\n<strong>浮点型比较</strong>： 两个浮点型数据比较，实际只会比较前几位（解释器是假定 PHP 浮点型不可能完全精确的），这样就造成很奇怪的现象，我们这里就举两个例子来说吧！\r\n\r\n[php]\r\n&lt;?php\r\necho \'This page is for float_trick! &lt;br&gt;\';\r\n\r\n\r\n$fill = \'0.\';\r\nfor ($i = 0; $i &lt; 20; $i ++ ):\r\n $fill = $fill.\'0\';\r\n $val1 = floatval($fill.\'1\');\r\n $val2 = floatval($fill.\'2\');\r\n\r\n echo $val1,\'==\',$val2, \' result: \', $val1 == $val2, \'&lt;br&gt;\';\r\n\r\n\r\nendfor;\r\n\r\necho \'----------------------------------------------------------------------&lt;br&gt;\';\r\n\r\n$fill = \'2.\';\r\nfor ($i = 0; $i &lt; 20; $i ++ ):\r\n $fill = $fill.\'0\';\r\n $val1 = floatval($fill.\'1\');\r\n $val2 = floatval($fill.\'2\');\r\n\r\necho $val1,\'==\',$val2, \' result: \', $val1 == $val2, \'&lt;br&gt;\';\r\n\r\n\r\nendfor;\r\n\r\necho \'----------------------------------------------------------------------&lt;br&gt;\';\r\n\r\n$fill = \'2.\';\r\nfor ($i = 0; $i &lt; 20; $i ++ ):\r\n$fill = $fill.\'3\';\r\n$val1 = floatval($fill.\'1\');\r\n$val2 = floatval($fill.\'2\');\r\n\r\necho $val1,\'==\',$val2, \' result: \', $val1 == $val2, \'&lt;br&gt;\';\r\n\r\n\r\nendfor;\r\n?&gt; \r\n[/php]\r\n\r\n执行的结果为：\r\n\r\n[php]\r\n\r\nThis page is for float_trick!\r\n0.01==0.02 result:\r\n0.001==0.002 result:\r\n0.0001==0.0002 result:\r\n1.0E-5==2.0E-5 result:\r\n1.0E-6==2.0E-6 result:\r\n1.0E-7==2.0E-7 result:\r\n1.0E-8==2.0E-8 result:\r\n1.0E-9==2.0E-9 result:\r\n1.0E-10==2.0E-10 result:\r\n1.0E-11==2.0E-11 result:\r\n1.0E-12==2.0E-12 result:\r\n1.0E-13==2.0E-13 result:\r\n1.0E-14==2.0E-14 result:\r\n1.0E-15==2.0E-15 result:\r\n1.0E-16==2.0E-16 result:\r\n1.0E-17==2.0E-17 result:\r\n1.0E-18==2.0E-18 result:\r\n1.0E-19==2.0E-19 result:\r\n1.0E-20==2.0E-20 result:\r\n1.0E-21==2.0E-21 result:\r\n----------------------------------------------------------------------\r\n2.01==2.02 result:\r\n2.001==2.002 result:\r\n2.0001==2.0002 result:\r\n2.00001==2.00002 result:\r\n2.000001==2.000002 result:\r\n2.0000001==2.0000002 result:\r\n2.00000001==2.00000002 result:\r\n2.000000001==2.000000002 result:\r\n2.0000000001==2.0000000002 result:\r\n2.00000000001==2.00000000002 result:\r\n2.000000000001==2.000000000002 result:\r\n2.0000000000001==2.0000000000002 result:\r\n2==2 result:\r\n2==2 result:\r\n2==2 result: 1\r\n2==2 result: 1\r\n2==2 result: 1\r\n2==2 result: 1\r\n2==2 result: 1\r\n2==2 result: 1\r\n----------------------------------------------------------------------\r\n2.31==2.32 result:\r\n2.331==2.332 result:\r\n2.3331==2.3332 result:\r\n2.33331==2.33332 result:\r\n2.333331==2.333332 result:\r\n2.3333331==2.3333332 result:\r\n2.33333331==2.33333332 result:\r\n2.333333331==2.333333332 result:\r\n2.3333333331==2.3333333332 result:\r\n2.33333333331==2.33333333332 result:\r\n2.333333333331==2.333333333332 result:\r\n2.3333333333331==2.3333333333332 result:\r\n2.3333333333333==2.3333333333333 result:\r\n2.3333333333333==2.3333333333333 result:\r\n2.3333333333333==2.3333333333333 result: 1\r\n2.3333333333333==2.3333333333333 result: 1\r\n2.3333333333333==2.3333333333333 result: 1\r\n2.3333333333333==2.3333333333333 result: 1\r\n2.3333333333333==2.3333333333333 result: 1\r\n2.3333333333333==2.3333333333333 result: 1\r\n\r\n[/php]\r\n\r\n当然我们发现 0.00000000000X 会默认被记成科学计数法，进行比较不会丢失精度。\r\n但是对于我们发现转换来转换去，PHP 的 Float 类型也顶多能存储 16 位数的浮点型。\r\n我们看完上面的小实验，我觉得大家应该就已经明白了 Float 在 PHP 中是如何被处理的，以及 floatval 这个函数的结果。\r\n<ul>\r\n 	<li>最多存储 16 位小数。</li>\r\n 	<li>会把 1.00000000000000000000000000000000001 自动去掉后面多余的（16位之外的数），如果16位之内都为 0，则自动转为 int。</li>\r\n 	<li>0.0000000000xxx 开头会视情况自动转为科学记数法，而且不会造成精度丢失。</li>\r\n</ul>\r\n<h3>谈一谈其他的类型问题</h3>\r\nintval 与 floatval 对于某些特殊情况的类型转换。\r\n\r\n<b>intval</b>\r\n\r\n这一串代码，大致我们来看一下，str 转换成 int 的下面情况\r\n\r\n[php]\r\n&lt;?php\r\necho \'$ret is a str\';\r\necho \'&lt;br&gt;\';\r\n$ret = \'123.12.123\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'123Saaf\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'adf123Saaf\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'12.3Saaf\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'ads1.23Saaf\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'123.789\';\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = 123.789;\r\necho $ret, \' intval=&gt; \', intval($ret);\r\necho \'&lt;br&gt;\';\r\n?&gt;\r\n[/php]\r\n\r\n执行结果为：\r\n\r\n[php]\r\n$ret is a str\r\n123.12.123 intval=&gt; 123\r\n123Saaf intval=&gt; 123\r\nadf123Saaf intval=&gt; 0\r\n12.3Saaf intval=&gt; 12\r\nads1.23Saaf intval=&gt; 0\r\n123.789 intval=&gt; 123\r\n123.789 intval=&gt; 123\r\n[/php]\r\n\r\n前面为等待转换的 string，后面为经过 intval 函数以后的值。我们现在来简单总结一下：\r\n\r\n一个 String 被 intval 转换从前到后取一个 int。\r\n如果开头不是 int 的话，那么就是 0。\r\n转换一个浮点型数，直接去掉小数部分（不是四舍五入）\r\nfloatval\r\n\r\nfloatval 和 intval 有点类似，大家看一下下面的例子就知道了，我就不浪费时间讨论总结了。\r\n\r\n[php]\r\n&lt;?php\r\n$ret = \'123.456.76\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'123.456.76asd\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'123.456adf\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'.123.456\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'qerqer123.456adf\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'456adf\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'123\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n$ret = \'asd76\';\r\necho $ret, \' floatval=&gt; \', floatval($ret);\r\necho \'&lt;br&gt;\';\r\n?&gt;\r\n[/php]\r\n\r\n执行结果为\r\n\r\n[php]\r\n123.456.76 floatval=&gt; 123.456\r\n123.456.76asd floatval=&gt; 123.456\r\n123.456adf floatval=&gt; 123.456\r\n.123.456 floatval=&gt; 0.123\r\nqerqer123.456adf floatval=&gt; 0\r\n456adf floatval=&gt; 456\r\n123 floatval=&gt; 123\r\nasd76 floatval=&gt; 0 \r\n[/php]\r\n\r\n<h3>松散比较问题</h3>\r\n盗用 drops 的一个图吧，私以为这个图就可以基本说明一切了。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/04/php_trick.jpg\"><img class=\"alignnone size-full wp-image-872\" src=\"https://files.gzpblog.com/wp/2017/04/php_trick.jpg\" alt=\"\" width=\"690\" height=\"351\" /></a>\r\n\r\n松散比较可以出现在 ‘==’ 中，还可以出现在函数传值和 switch 中。\r\n<h3>strcmp</h3>\r\n接下来我照着上面的图做了一个 strcmp 的各种类型比较的表格。\r\n<table style=\"height: 376px;\" width=\"713\">\r\n<thead>\r\n<tr>\r\n<th></th>\r\n<th>true</th>\r\n<th>false</th>\r\n<th>1</th>\r\n<th>0</th>\r\n<th>-1</th>\r\n<th>’1′</th>\r\n<th>’0′</th>\r\n<th>‘-1′</th>\r\n<th>NULL</th>\r\n<th>array()</th>\r\n<th>‘php’</th>\r\n<th>”</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>true</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>false</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>-2</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-2</td>\r\n<td>0</td>\r\n<td></td>\r\n<td>-3</td>\r\n<td>0</td>\r\n</tr>\r\n<tr>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>1</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>-1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>2</td>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>2</td>\r\n<td>0</td>\r\n<td>2</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td>’1′</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>’0′</td>\r\n<td>-1</td>\r\n<td>1</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>1</td>\r\n<td>-1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>1</td>\r\n</tr>\r\n<tr>\r\n<td>‘-1′</td>\r\n<td>-1</td>\r\n<td>2</td>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>2</td>\r\n<td>0</td>\r\n<td>2</td>\r\n<td></td>\r\n<td>-1</td>\r\n<td>2</td>\r\n</tr>\r\n<tr>\r\n<td>NULL</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>-2</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-2</td>\r\n<td>0</td>\r\n<td></td>\r\n<td>-3</td>\r\n<td>0</td>\r\n</tr>\r\n<tr>\r\n<td>array()</td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>‘php’</td>\r\n<td>1</td>\r\n<td>3</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>1</td>\r\n<td>3</td>\r\n<td>1</td>\r\n<td>3</td>\r\n<td></td>\r\n<td>0</td>\r\n<td>3</td>\r\n</tr>\r\n<tr>\r\n<td>”</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-1</td>\r\n<td>-1</td>\r\n<td>-2</td>\r\n<td>-1</td>\r\n<td>0</td>\r\n<td>-2</td>\r\n<td>0</td>\r\n<td></td>\r\n<td>-3</td>\r\n<td>0</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n方便大家对这个东西有更深的理解。\r\n\r\n出现这些问题的，具体原因其实有很多，除了 intval 之类的类型转换，也有其他的（关于 strcmp 内部实现的分析不在讨论范围）。\r\n\r\n上面的表格的源代码在这里：当然 wooyun drops 的表格你也可以在下面的代码中稍微改一下就可以验证了。\r\n\r\n\r\n[php]\r\n&lt;pre&gt;&lt;code class=&quot;hljs xml&quot;&gt;&lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&lt;?php&lt;/span&gt;\r\n $items[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;True&lt;/span&gt;;\r\n $items[&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;False&lt;/span&gt;;\r\n $items[&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;;\r\n $items[&lt;span class=&quot;hljs-number&quot;&gt;3&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;;\r\n $items[&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;] = &lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;;\r\n $items[&lt;span class=&quot;hljs-number&quot;&gt;5&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;&quot;1&quot;&lt;/span&gt;;\r\n $itmes[&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;\'0\'&lt;/span&gt;;\r\n $items[&lt;span class=&quot;hljs-number&quot;&gt;7&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;\'-1\'&lt;/span&gt;;\r\n $items[&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;;\r\n $items[&lt;span class=&quot;hljs-number&quot;&gt;9&lt;/span&gt;] = &lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;();\r\n $items[&lt;span class=&quot;hljs-number&quot;&gt;10&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;\'php\'&lt;/span&gt;;\r\n $items[&lt;span class=&quot;hljs-number&quot;&gt;11&lt;/span&gt;] = &lt;span class=&quot;hljs-string&quot;&gt;\'\'&lt;/span&gt;;\r\n\r\n &lt;span class=&quot;hljs-meta&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;\r\n\r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;border&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;1&lt;/span&gt;&gt;&lt;/span&gt;\r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;true&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;false&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;1&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;-1&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\'1\'&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\'0\'&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\'-1\'&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;NULL&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;array()&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\'php\'&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\'\'&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;th&lt;/span&gt;&gt;&lt;/span&gt;\r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt; \r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;true&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&lt;?php&lt;/span&gt; \r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;($i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; $i&lt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;; $i++){\r\n        $result = @strcmp(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;, $items[$i]);\r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;td&gt;\'&lt;/span&gt;.$result.&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;/td&gt;\'&lt;/span&gt;;}&lt;span class=&quot;hljs-meta&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;\r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n  &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;false&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&lt;?php&lt;/span&gt; \r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;($i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; $i&lt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;; $i++){\r\n        $result = @strcmp(&lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;, $items[$i]);\r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;td&gt;\'&lt;/span&gt;.$result.&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;/td&gt;\'&lt;/span&gt;;}&lt;span class=&quot;hljs-meta&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;\r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n   &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;1&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&lt;?php&lt;/span&gt; \r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;($i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; $i&lt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;; $i++){\r\n        $result = @strcmp(&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;, $items[$i]);\r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;td&gt;\'&lt;/span&gt;.$result.&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;/td&gt;\'&lt;/span&gt;;}&lt;span class=&quot;hljs-meta&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;\r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n   &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;0&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&lt;?php&lt;/span&gt; \r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;($i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; $i&lt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;; $i++){\r\n        $result = @strcmp(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, $items[$i]);\r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;td&gt;\'&lt;/span&gt;.$result.&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;/td&gt;\'&lt;/span&gt;;}&lt;span class=&quot;hljs-meta&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;\r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n   &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;-1&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&lt;?php&lt;/span&gt; \r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;($i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; $i&lt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;; $i++){\r\n        $result = @strcmp(&lt;span class=&quot;hljs-number&quot;&gt;-1&lt;/span&gt;, $items[$i]);\r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;td&gt;\'&lt;/span&gt;.$result.&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;/td&gt;\'&lt;/span&gt;;}&lt;span class=&quot;hljs-meta&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;\r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n   &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\'1\'&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&lt;?php&lt;/span&gt; \r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;($i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; $i&lt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;; $i++){\r\n        $result = @strcmp(&lt;span class=&quot;hljs-string&quot;&gt;\'1\'&lt;/span&gt;, $items[$i]);\r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;td&gt;\'&lt;/span&gt;.$result.&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;/td&gt;\'&lt;/span&gt;;}&lt;span class=&quot;hljs-meta&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;\r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n   &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\'0\'&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&lt;?php&lt;/span&gt; \r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;($i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; $i&lt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;; $i++){\r\n        $result = @strcmp(&lt;span class=&quot;hljs-string&quot;&gt;\'0\'&lt;/span&gt;, $items[$i]);\r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;td&gt;\'&lt;/span&gt;.$result.&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;/td&gt;\'&lt;/span&gt;;}&lt;span class=&quot;hljs-meta&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;\r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n   &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\'-1\'&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&lt;?php&lt;/span&gt; \r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;($i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; $i&lt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;; $i++){\r\n        $result = @strcmp(&lt;span class=&quot;hljs-string&quot;&gt;\'-1\'&lt;/span&gt;, $items[$i]);\r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;td&gt;\'&lt;/span&gt;.$result.&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;/td&gt;\'&lt;/span&gt;;}&lt;span class=&quot;hljs-meta&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;\r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;NULL&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&lt;?php&lt;/span&gt; \r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;($i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; $i&lt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;; $i++){\r\n        $result = @strcmp(&lt;span class=&quot;hljs-keyword&quot;&gt;NULL&lt;/span&gt;, $items[$i]);\r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;td&gt;\'&lt;/span&gt;.$result.&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;/td&gt;\'&lt;/span&gt;;}&lt;span class=&quot;hljs-meta&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;\r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;array()&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&lt;?php&lt;/span&gt; \r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;($i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; $i&lt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;; $i++){\r\n        $result = @strcmp(&lt;span class=&quot;hljs-keyword&quot;&gt;array&lt;/span&gt;(), $items[$i]);\r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;td&gt;\'&lt;/span&gt;.$result.&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;/td&gt;\'&lt;/span&gt;;}&lt;span class=&quot;hljs-meta&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;\r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\'php\'&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&lt;?php&lt;/span&gt; \r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;($i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; $i&lt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;; $i++){\r\n        $result = @strcmp(&lt;span class=&quot;hljs-string&quot;&gt;\'php\'&lt;/span&gt;, $items[$i]);\r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;td&gt;\'&lt;/span&gt;.$result.&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;/td&gt;\'&lt;/span&gt;;}&lt;span class=&quot;hljs-meta&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;\r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;hljs-tag&quot;&gt;&lt;&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\'\'&lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;td&lt;/span&gt;&gt;&lt;/span&gt;\r\n    &lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&lt;?php&lt;/span&gt; \r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt;($i=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;; $i&lt;&lt;span class=&quot;hljs-number&quot;&gt;12&lt;/span&gt;; $i++){\r\n        $result = @strcmp(&lt;span class=&quot;hljs-string&quot;&gt;\'\'&lt;/span&gt;, $items[$i]);\r\n    &lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;td&gt;\'&lt;/span&gt;.$result.&lt;span class=&quot;hljs-string&quot;&gt;\'&lt;/td&gt;\'&lt;/span&gt;;}&lt;span class=&quot;hljs-meta&quot;&gt;?&gt;&lt;/span&gt;&lt;/span&gt;\r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;tr&lt;/span&gt;&gt;&lt;/span&gt;\r\n\r\n &lt;span class=&quot;hljs-tag&quot;&gt;&lt;/&lt;span class=&quot;hljs-name&quot;&gt;table&lt;/span&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;\r\n[/php]\r\n\r\n\r\n当然上面代码的输出结果大家可能会看到一大堆的 Warning 和 Notice，但是我们使用 @ 来忽略。当然忽略并不是说我们不关心，在网站中如果出现了这种情况，一个正常的程序员是不会让用户看到异常的，这样很容易让用户感到“恐慌”，同时也可以避免一些敏感的信息泄露。当然并不是说异常不重要，实际上如果有了这些 Warning 和 Notice。\r\n<h2>本篇结语</h2>\r\n由于篇幅的原因，私以为总结全部堆在一起看起来并不是特别舒服。\r\n当然我也只能把我自己懂的这点东西总结出来希望和大家分享，但是总是感觉意犹未尽吧，因为还有很多东西我们都没有写出来。\r\n那么，之后吧，之后我们再来详细讨论一下 PHP 的其他的奇怪的东西：\r\n<blockquote>\r\n<ul>\r\n 	<li>HPP — HTTP Parameter Pollution</li>\r\n 	<li>截断</li>\r\n 	<li>协议封装</li>\r\n 	<li>…</li>\r\n</ul>\r\n</blockquote>\r\n水平有限，如果上面有什么不正确的，希望读者不吝指出。', 'PHP Trick 总结与探讨（一）', '', 'inherit', 'closed', 'closed', '', '871-revision-v1', '', '', '2017-04-18 23:04:41', '2017-04-18 15:04:41', '', 871, 'https://www.gzpblog.com/20170418/873.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(874, 1, '2017-04-18 23:06:36', '2017-04-18 15:06:36', '<blockquote>本文原创作者：VillanCh，发表于FreeBuf.COM；原文链接：<a href=\"http://www.freebuf.com/articles/rookie/119969.html\" target=\"_blank\">PHP Trick 总结与探讨（一） </a></blockquote>\n本文不是 PHP 教程，本文只针对 PHP 的各种奇淫技巧进行整理和证明，在进行渗透测试（WEB 安全）的学习中，经常需要涉及到 PHP 编程，或者 PHP 编写 Webshell 或者一句话木马，一般的 PHP 马经常被各种软件发现被杀。与此同时，网络经常流传一些免杀马（当然免杀一句话很有可能藏后门大家都是知道的），那么那些免杀是怎么做出来的？打开看，可能就是非常难看难以阅读的 PHP 代码（为了混淆各种杀软的侦察）。\n\n当然，怎么样写出那种奇奇怪怪的东西呢？这就取决于你对 PHP 这门语言的了解程度：你是一个 PHP 开发者，通过 PHP 培训获得一定的技能？还是一个渗透测试人员，通过平时在渗透测试过程中接触 PHP，查看 PHP 官方手册学习 PHP。\n\n嗯……不管你是怎么样的契机接触了 PHP，并且看到了这篇文章，我都希望你看到这篇文章的时候，能够知道一些之前不知道的东西；或者你都对这些技巧了然于胸，能够帮助你回忆这些很有趣的 PHP Trick。\n<h2>PHP 中的大小写</h2>\n当然这个东西对于开发者来说，其实是没什么太大的作用：没有哪个 Boss 允许你把 PHP 中的关键字写的参差不齐，大小写不一；作为对比，一个渗透测试人员和安全研究者通常需要使用 PHP 大小写来绕过一些限制策略，想这个大家都是渗透体会的，不光 PHP，在 XSS 和 SQLinject 中，大小写的随机组合有时候能达到出其不意的效果对吧？\n那么具体来说 PHP 中可以忽略大小写的东西有什么呢？\n<blockquote>\n<ul>\n 	<li>用户定义类</li>\n 	<li>用户定义函数</li>\n 	<li>内置结构</li>\n 	<li>关键字</li>\n</ul>\n</blockquote>\n那么剩下的基本都要大小写敏感了哦，当然，一定要记住 <strong>变量是区分大小写的！</strong>\n\n下面举一些例子，当然这个例子没有实际的意义，但是尽量包含了上面说到的几个点（当然还包含了我们下面要讲的东西）：\n\n[php]\n&lt;?pHp\nfUnCtIoN test(){\n?&gt;\n&lt;?phP echo \'First!\'; }\n\ntest(); ?&gt;\n&lt;br&gt;\n&lt;? teSt() ?&gt;\n&lt;br&gt;\n&lt;?Php tEst() ?&gt;\n&lt;br&gt;\n&lt;?PhP TeSt() ?&gt;\n&lt;br&gt;\n[/php]\n\n执行结果：\n\n[php]\nFirst!\nFirst!\nFirst!\nFirst!\n[/php]\n\n嗯，不知道大家有没有觉得惊奇呢？上面的代码居然是可以运行的！没错啊，这是不是我们经常在 webshell 和“一句话木马”中见到的一种写法？原理是什么？当然，我们发现上面的写法其实前四行很奇怪。当然我们后面再讨论这个问题吧，至少，我们现在发现了 PHP 中的大小写实在是松散。\n<h2>PHP 标签</h2>\n<h3>PHP 标签类型：</h3>\n<b>1. XML 型标签</b>\n\n对于这种标签类型，我觉得没有必要解释太多：\n\n[php]\n&lt;?php echo &quot;In PHP Tag~&quot;?&gt; \n[/php]\n\n大家需要知道的也就是：这个标签中的 php 的声明不是大小写敏感的，你可以 &lt;?PhP ... ?&gt; 也是完全可行的。\n\n<b>2. 短标签 （SGML 型标签）</b>\n\n对于这种标签，我个人把他们分成两类：\n<ul>\n 	<li>需要 PHP 配置支持的</li>\n 	<li>不需要 PHP 配置支持的</li>\n</ul>\n下面具体来介绍：\n\n需要配置支持：&lt;? echo “In Tag!” ?&gt;\n\n这种标签其实是非常常见的，对不对？\n\n[php]&lt;? echo &quot;In Tag!&quot; ?&gt;[/php]\n\n当然这种标签发挥作用，要取决于你的 PHP 配置是否开启了 short_open_tag。\n需要说明的是，一旦使用关闭了 short_open_tag 的话，<code>&lt;? ... ?&gt;</code> 的内容是不会显示在用户界面上的，也就是这些东西直接不见了，也不会执行，就当是被 DROP 掉了吧~\n\n不需要配置支持：&lt;?=”In Tag!”?&gt;\n\n这个标签其实也是非常厉害，并不需要开启 short_open_tag 就可以起作用，但是，缺点就是这个标签相当于一个 echo, 所以用法也相当受到限制：\n\n[php]输出一个字符串\n&lt;?=\'This short Tag just for echo~\'?&gt;\n函数调用\n&lt;?=test()?&gt;[/php]\n\n当然可以函数调用还不够么？能怎么样玩耍就需要大家的智慧了。\n\n<b>3. ASP 风格标签</b>\n\n其实这个也不用多说，大家一看便知：\n\n[php]&lt;% echo \'IN TAG!\' %&gt;[/php]\n\n如果想要使用这种风格的标签，需要确保 <code>asp_tags</code> 打开，并且一定要注意的是，这个和短标签的区别是：当短标签配置是关闭的时候，短标签（包括短标签内部）的东西是不会让用户看到的！然而如果 asp_tags 关闭时，你使用这种标签就会造成他的内容被用户看到，包括 ASP 风格标签和标签内部的内容。\n\n<b>4. Script 风格标签</b>\n\n这个标签类型大家可能之前也还是见过的:\n\n[php]&lt;script language=PhP&gt;Echo \'In Tags\'&lt;/script&gt;[/php]\n\n没错，这个可以使用，而且 <code>script</code> <code>language</code> <code>php</code> 的大小写随意转换，拿去做混淆自然挺不错的。\n<h3>标签的 Trick</h3>\n那么我稍微做一下整理：证明一下上面讲的都是正确的，大家可以看一下这个有趣的例子：\n\n[php]\n&lt;?php\nFuNcTiON test(){\n?&gt;\n&lt;?php echo \'This is in the test function\'?&gt;\n&lt;? Echo \'&lt;br&gt;Short Tag may be useful\' ;?&gt;\n\n &lt;script language=Php&gt;echo \'&lt;br&gt; Now in script style !\';};&lt;/script&gt;\n\n&lt;br&gt;\n\n&lt;?=test()?&gt;\n[/php]\n\n很有趣的是，我把一个 test 函数肢解在了三种标签中，最后使用 &lt;?=?&gt; 短标签来调用，发现函数的定义并没有被破坏，而且，最后成功调用了，这难道不是非常的振奋人心么？嗯，当然我尝试了很多种奇奇怪怪的玩法，但是就只有这种是可以的，如果读者有神奇的玩法，可以分享。\n<h2>流程控制的另一种写法</h2>\n其实我并不是一个 PHPer 而是一个 Pythoner， PHP 的大括号让我非常难受，非常生气，然后我就很开心的使用了另外一种写法：\n\n[php]\n&lt;?php if (33&gt;4) :?\n &gt;\n&lt;?php echo TRUE;?&gt;\n&lt;br&gt;\n&lt;?php echo \'This IF have been seperated!\';?&gt;\n&lt;?php else: echo \'Impossible??\'?&gt;\n&lt;?php endif;?&gt;\n[/php]\n\n执行结果是\n\n[php]\n1\nThis IF have been seperated!\n[/php]\n\n怎么说呢，这样的话我就不用再写丑陋的大括号了，但是好像有需要写标签？嗨呀，反正这样也算是一种新的姿势吧！\n同样的不仅仅是 if elseif else 可以使用这种写法，switch 对应 endswitch； for 对应的 endfor；while 对应 endwhile；foreach 对应 endforeach …\n<h2>PHP 类型问题（弱类型）</h2>\nPHP 的弱类型问题由来已久吧，当然我们先用一个例子来开始我们这一部分的话题：\n\n<strong>浮点型比较</strong>： 两个浮点型数据比较，实际只会比较前几位（解释器是假定 PHP 浮点型不可能完全精确的），这样就造成很奇怪的现象，我们这里就举两个例子来说吧！\n\n[php]\n&lt;?php\necho \'This page is for float_trick! &lt;br&gt;\';\n\n\n$fill = \'0.\';\nfor ($i = 0; $i &lt; 20; $i ++ ):\n $fill = $fill.\'0\';\n $val1 = floatval($fill.\'1\');\n $val2 = floatval($fill.\'2\');\n\n echo $val1,\'==\',$val2, \' result: \', $val1 == $val2, \'&lt;br&gt;\';\n\n\nendfor;\n\necho \'----------------------------------------------------------------------&lt;br&gt;\';\n\n$fill = \'2.\';\nfor ($i = 0; $i &lt; 20; $i ++ ):\n $fill = $fill.\'0\';\n $val1 = floatval($fill.\'1\');\n $val2 = floatval($fill.\'2\');\n\necho $val1,\'==\',$val2, \' result: \', $val1 == $val2, \'&lt;br&gt;\';\n\n\nendfor;\n\necho \'----------------------------------------------------------------------&lt;br&gt;\';\n\n$fill = \'2.\';\nfor ($i = 0; $i &lt; 20; $i ++ ):\n$fill = $fill.\'3\';\n$val1 = floatval($fill.\'1\');\n$val2 = floatval($fill.\'2\');\n\necho $val1,\'==\',$val2, \' result: \', $val1 == $val2, \'&lt;br&gt;\';\n\n\nendfor;\n?&gt; \n[/php]\n\n执行的结果为：\n\n[php]\n\nThis page is for float_trick!\n0.01==0.02 result:\n0.001==0.002 result:\n0.0001==0.0002 result:\n1.0E-5==2.0E-5 result:\n1.0E-6==2.0E-6 result:\n1.0E-7==2.0E-7 result:\n1.0E-8==2.0E-8 result:\n1.0E-9==2.0E-9 result:\n1.0E-10==2.0E-10 result:\n1.0E-11==2.0E-11 result:\n1.0E-12==2.0E-12 result:\n1.0E-13==2.0E-13 result:\n1.0E-14==2.0E-14 result:\n1.0E-15==2.0E-15 result:\n1.0E-16==2.0E-16 result:\n1.0E-17==2.0E-17 result:\n1.0E-18==2.0E-18 result:\n1.0E-19==2.0E-19 result:\n1.0E-20==2.0E-20 result:\n1.0E-21==2.0E-21 result:\n----------------------------------------------------------------------\n2.01==2.02 result:\n2.001==2.002 result:\n2.0001==2.0002 result:\n2.00001==2.00002 result:\n2.000001==2.000002 result:\n2.0000001==2.0000002 result:\n2.00000001==2.00000002 result:\n2.000000001==2.000000002 result:\n2.0000000001==2.0000000002 result:\n2.00000000001==2.00000000002 result:\n2.000000000001==2.000000000002 result:\n2.0000000000001==2.0000000000002 result:\n2==2 result:\n2==2 result:\n2==2 result: 1\n2==2 result: 1\n2==2 result: 1\n2==2 result: 1\n2==2 result: 1\n2==2 result: 1\n----------------------------------------------------------------------\n2.31==2.32 result:\n2.331==2.332 result:\n2.3331==2.3332 result:\n2.33331==2.33332 result:\n2.333331==2.333332 result:\n2.3333331==2.3333332 result:\n2.33333331==2.33333332 result:\n2.333333331==2.333333332 result:\n2.3333333331==2.3333333332 result:\n2.33333333331==2.33333333332 result:\n2.333333333331==2.333333333332 result:\n2.3333333333331==2.3333333333332 result:\n2.3333333333333==2.3333333333333 result:\n2.3333333333333==2.3333333333333 result:\n2.3333333333333==2.3333333333333 result: 1\n2.3333333333333==2.3333333333333 result: 1\n2.3333333333333==2.3333333333333 result: 1\n2.3333333333333==2.3333333333333 result: 1\n2.3333333333333==2.3333333333333 result: 1\n2.3333333333333==2.3333333333333 result: 1\n\n[/php]\n\n当然我们发现 0.00000000000X 会默认被记成科学计数法，进行比较不会丢失精度。\n但是对于我们发现转换来转换去，PHP 的 Float 类型也顶多能存储 16 位数的浮点型。\n我们看完上面的小实验，我觉得大家应该就已经明白了 Float 在 PHP 中是如何被处理的，以及 floatval 这个函数的结果。\n<ul>\n 	<li>最多存储 16 位小数。</li>\n 	<li>会把 1.00000000000000000000000000000000001 自动去掉后面多余的（16位之外的数），如果16位之内都为 0，则自动转为 int。</li>\n 	<li>0.0000000000xxx 开头会视情况自动转为科学记数法，而且不会造成精度丢失。</li>\n</ul>\n<h3>谈一谈其他的类型问题</h3>\nintval 与 floatval 对于某些特殊情况的类型转换。\n\n<b>intval</b>\n\n这一串代码，大致我们来看一下，str 转换成 int 的下面情况\n\n[php]\n&lt;?php\necho \'$ret is a str\';\necho \'&lt;br&gt;\';\n$ret = \'123.12.123\';\necho $ret, \' intval=&gt; \', intval($ret);\necho \'&lt;br&gt;\';\n$ret = \'123Saaf\';\necho $ret, \' intval=&gt; \', intval($ret);\necho \'&lt;br&gt;\';\n$ret = \'adf123Saaf\';\necho $ret, \' intval=&gt; \', intval($ret);\necho \'&lt;br&gt;\';\n$ret = \'12.3Saaf\';\necho $ret, \' intval=&gt; \', intval($ret);\necho \'&lt;br&gt;\';\n$ret = \'ads1.23Saaf\';\necho $ret, \' intval=&gt; \', intval($ret);\necho \'&lt;br&gt;\';\n$ret = \'123.789\';\necho $ret, \' intval=&gt; \', intval($ret);\necho \'&lt;br&gt;\';\n$ret = 123.789;\necho $ret, \' intval=&gt; \', intval($ret);\necho \'&lt;br&gt;\';\n?&gt;\n[/php]\n\n执行结果为：\n\n[php]\n$ret is a str\n123.12.123 intval=&gt; 123\n123Saaf intval=&gt; 123\nadf123Saaf intval=&gt; 0\n12.3Saaf intval=&gt; 12\nads1.23Saaf intval=&gt; 0\n123.789 intval=&gt; 123\n123.789 intval=&gt; 123\n[/php]\n\n前面为等待转换的 string，后面为经过 intval 函数以后的值。我们现在来简单总结一下：\n\n一个 String 被 intval 转换从前到后取一个 int。\n如果开头不是 int 的话，那么就是 0。\n转换一个浮点型数，直接去掉小数部分（不是四舍五入）\nfloatval\n\nfloatval 和 intval 有点类似，大家看一下下面的例子就知道了，我就不浪费时间讨论总结了。\n\n[php]\n&lt;?php\n$ret = \'123.456.76\';\necho $ret, \' floatval=&gt; \', floatval($ret);\necho \'&lt;br&gt;\';\n$ret = \'123.456.76asd\';\necho $ret, \' floatval=&gt; \', floatval($ret);\necho \'&lt;br&gt;\';\n$ret = \'123.456adf\';\necho $ret, \' floatval=&gt; \', floatval($ret);\necho \'&lt;br&gt;\';\n$ret = \'.123.456\';\necho $ret, \' floatval=&gt; \', floatval($ret);\necho \'&lt;br&gt;\';\n$ret = \'qerqer123.456adf\';\necho $ret, \' floatval=&gt; \', floatval($ret);\necho \'&lt;br&gt;\';\n$ret = \'456adf\';\necho $ret, \' floatval=&gt; \', floatval($ret);\necho \'&lt;br&gt;\';\n$ret = \'123\';\necho $ret, \' floatval=&gt; \', floatval($ret);\necho \'&lt;br&gt;\';\n$ret = \'asd76\';\necho $ret, \' floatval=&gt; \', floatval($ret);\necho \'&lt;br&gt;\';\n?&gt;\n[/php]\n\n执行结果为\n\n[php]\n123.456.76 floatval=&gt; 123.456\n123.456.76asd floatval=&gt; 123.456\n123.456adf floatval=&gt; 123.456\n.123.456 floatval=&gt; 0.123\nqerqer123.456adf floatval=&gt; 0\n456adf floatval=&gt; 456\n123 floatval=&gt; 123\nasd76 floatval=&gt; 0 \n[/php]\n\n<h3>松散比较问题</h3>\n盗用 drops 的一个图吧，私以为这个图就可以基本说明一切了。\n\n<a href=\"https://files.gzpblog.com/wp/2017/04/php_trick.jpg\"><img class=\"alignnone size-full wp-image-872\" src=\"https://files.gzpblog.com/wp/2017/04/php_trick.jpg\" alt=\"\" width=\"690\" height=\"351\" /></a>\n\n松散比较可以出现在 ‘==’ 中，还可以出现在函数传值和 switch 中。\n<h3>strcmp</h3>\n接下来我照着上面的图做了一个 strcmp 的各种类型比较的表格。\n<table style=\"height: 376px;\" width=\"713\">\n<thead>\n<tr>\n<th></th>\n<th>true</th>\n<th>false</th>\n<th>1</th>\n<th>0</th>\n<th>-1</th>\n<th>’1′</th>\n<th>’0′</th>\n<th>‘-1′</th>\n<th>NULL</th>\n<th>array()</th>\n<th>‘php’</th>\n<th>”</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>true</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td></td>\n<td>-1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>false</td>\n<td>-1</td>\n<td>0</td>\n<td>-1</td>\n<td>-1</td>\n<td>-2</td>\n<td>-1</td>\n<td>0</td>\n<td>-2</td>\n<td>0</td>\n<td></td>\n<td>-3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td></td>\n<td>-1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>-1</td>\n<td>1</td>\n<td>-1</td>\n<td>0</td>\n<td>1</td>\n<td>-1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td></td>\n<td>-1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>-1</td>\n<td>-1</td>\n<td>2</td>\n<td>-1</td>\n<td>-1</td>\n<td>0</td>\n<td>-1</td>\n<td>2</td>\n<td>0</td>\n<td>2</td>\n<td></td>\n<td>-1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>’1′</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td></td>\n<td>-1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>’0′</td>\n<td>-1</td>\n<td>1</td>\n<td>-1</td>\n<td>0</td>\n<td>1</td>\n<td>-1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td></td>\n<td>-1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>‘-1′</td>\n<td>-1</td>\n<td>2</td>\n<td>-1</td>\n<td>-1</td>\n<td>0</td>\n<td>-1</td>\n<td>2</td>\n<td>0</td>\n<td>2</td>\n<td></td>\n<td>-1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>-1</td>\n<td>0</td>\n<td>-1</td>\n<td>-1</td>\n<td>-2</td>\n<td>-1</td>\n<td>0</td>\n<td>-2</td>\n<td>0</td>\n<td></td>\n<td>-3</td>\n<td>0</td>\n</tr>\n<tr>\n<td>array()</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>‘php’</td>\n<td>1</td>\n<td>3</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>3</td>\n<td>1</td>\n<td>3</td>\n<td></td>\n<td>0</td>\n<td>3</td>\n</tr>\n<tr>\n<td>”</td>\n<td>-1</td>\n<td>0</td>\n<td>-1</td>\n<td>-1</td>\n<td>-2</td>\n<td>-1</td>\n<td>0</td>\n<td>-2</td>\n<td>0</td>\n<td></td>\n<td>-3</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n方便大家对这个东西有更深的理解。\n\n出现这些问题的，具体原因其实有很多，除了 intval 之类的类型转换，也有其他的（关于 strcmp 内部实现的分析不在讨论范围）。\n\n上面的表格的源代码在这里：当然 wooyun drops 的表格你也可以在下面的代码中稍微改一下就可以验证了。\n\n[php]\n&lt;?php\n $items[0] = True;\n $items[1] = False;\n $items[2] = 1;\n $items[3] = 0;\n $items[4] = -1;\n $items[5] = &quot;1&quot;;\n $itmes[6] = \'0\';\n $items[7] = \'-1\';\n $items[8] = NULL;\n $items[9] = array();\n $items[10] = \'php\';\n $items[11] = \'\';\n\n ?&gt;\n\n &lt;table border=1&gt;\n &lt;tr&gt;\n    &lt;th&gt;&lt;/th&gt;\n    &lt;th&gt;true&lt;/th&gt;\n    &lt;th&gt;false&lt;/th&gt;\n    &lt;th&gt;1&lt;/th&gt;\n    &lt;th&gt;0&lt;/th&gt;\n    &lt;th&gt;-1&lt;/th&gt;\n    &lt;th&gt;\'1\'&lt;/th&gt;\n    &lt;th&gt;\'0\'&lt;/th&gt;\n    &lt;th&gt;\'-1\'&lt;/th&gt;\n    &lt;th&gt;NULL&lt;/th&gt;\n    &lt;th&gt;array()&lt;/th&gt;\n    &lt;th&gt;\'php\'&lt;/th&gt;\n    &lt;th&gt;\'\'&lt;/th&gt;\n &lt;/tr&gt; \n &lt;tr&gt;\n    &lt;td&gt;true&lt;/td&gt;\n    &lt;?php \n    for($i=0; $i&lt;12; $i++){\n        $result = @strcmp(true, $items[$i]);\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\n &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;false&lt;/td&gt;\n    &lt;?php \n    for($i=0; $i&lt;12; $i++){\n        $result = @strcmp(false, $items[$i]);\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\n &lt;/tr&gt;\n   &lt;tr&gt;\n    &lt;td&gt;1&lt;/td&gt;\n    &lt;?php \n    for($i=0; $i&lt;12; $i++){\n        $result = @strcmp(1, $items[$i]);\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\n &lt;/tr&gt;\n   &lt;tr&gt;\n    &lt;td&gt;0&lt;/td&gt;\n    &lt;?php \n    for($i=0; $i&lt;12; $i++){\n        $result = @strcmp(0, $items[$i]);\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\n &lt;/tr&gt;\n   &lt;tr&gt;\n    &lt;td&gt;-1&lt;/td&gt;\n    &lt;?php \n    for($i=0; $i&lt;12; $i++){\n        $result = @strcmp(-1, $items[$i]);\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\n &lt;/tr&gt;\n   &lt;tr&gt;\n    &lt;td&gt;\'1\'&lt;/td&gt;\n    &lt;?php \n    for($i=0; $i&lt;12; $i++){\n        $result = @strcmp(\'1\', $items[$i]);\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\n &lt;/tr&gt;\n   &lt;tr&gt;\n    &lt;td&gt;\'0\'&lt;/td&gt;\n    &lt;?php \n    for($i=0; $i&lt;12; $i++){\n        $result = @strcmp(\'0\', $items[$i]);\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\n &lt;/tr&gt;\n   &lt;tr&gt;\n    &lt;td&gt;\'-1\'&lt;/td&gt;\n    &lt;?php \n    for($i=0; $i&lt;12; $i++){\n        $result = @strcmp(\'-1\', $items[$i]);\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\n &lt;/tr&gt;\n    &lt;tr&gt;\n    &lt;td&gt;NULL&lt;/td&gt;\n    &lt;?php \n    for($i=0; $i&lt;12; $i++){\n        $result = @strcmp(NULL, $items[$i]);\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\n &lt;/tr&gt;\n    &lt;tr&gt;\n    &lt;td&gt;array()&lt;/td&gt;\n    &lt;?php \n    for($i=0; $i&lt;12; $i++){\n        $result = @strcmp(array(), $items[$i]);\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\n &lt;/tr&gt;\n    &lt;tr&gt;\n    &lt;td&gt;\'php\'&lt;/td&gt;\n    &lt;?php \n    for($i=0; $i&lt;12; $i++){\n        $result = @strcmp(\'php\', $items[$i]);\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\n &lt;/tr&gt;\n    &lt;tr&gt;\n    &lt;td&gt;\'\'&lt;/td&gt;\n    &lt;?php \n    for($i=0; $i&lt;12; $i++){\n        $result = @strcmp(\'\', $items[$i]);\n    echo\'&lt;td&gt;\'.$result.\'&lt;/td&gt;\';}?&gt;\n &lt;/tr&gt;\n\n &lt;/table&gt;\n[/php]\n\n当然上面代码的输出结果大家可能会看到一大堆的 Warning 和 Notice，但是我们使用 @ 来忽略。当然忽略并不是说我们不关心，在网站中如果出现了这种情况，一个正常的程序员是不会让用户看到异常的，这样很容易让用户感到“恐慌”，同时也可以避免一些敏感的信息泄露。当然并不是说异常不重要，实际上如果有了这些 Warning 和 Notice。\n<h2>本篇结语</h2>\n由于篇幅的原因，私以为总结全部堆在一起看起来并不是特别舒服。\n当然我也只能把我自己懂的这点东西总结出来希望和大家分享，但是总是感觉意犹未尽吧，因为还有很多东西我们都没有写出来。\n那么，之后吧，之后我们再来详细讨论一下 PHP 的其他的奇怪的东西：\n<blockquote>\n<ul>\n 	<li>HPP — HTTP Parameter Pollution</li>\n 	<li>截断</li>\n 	<li>协议封装</li>\n 	<li>…</li>\n</ul>\n</blockquote>\n水平有限，如果上面有什么不正确的，希望读者不吝指出。', 'PHP Trick 总结与探讨（一）', '', 'inherit', 'closed', 'closed', '', '871-autosave-v1', '', '', '2017-04-18 23:06:36', '2017-04-18 15:06:36', '', 871, 'https://www.gzpblog.com/20170418/874.html', 0, 'revision', '', 0),
(878, 1, '2017-04-30 22:08:16', '2017-04-30 14:08:16', '关于定时任务，之前以前认识了一种最常用的：crontab定时任务。通过linux的定时任务去实现。今天又认识了一下php实现定时方式的其它方式，总结一下。\r\n<h2>一 服务器定时任务</h2>\r\n服务器定时任务，其实就是unix系统下的crontab实现，具体的设置：<a href=\"https://www.gzpblog.com/20161125/516.html\" target=\"_blank\" rel=\"noopener noreferrer\">Linux定时任务crontab</a>；不过除了直接定时读取php脚本的方式，我们还可以用定时调用接口的方式。\r\n<h4>运行脚本时：</h4>\r\n*/1 * * * * php /data/www/cron.php  每分钟执行cron.php\r\n<h4>URL方式调用:</h4>\r\nlynx方式：*/1 * * * *  lynx -dump http://www.gzpblog.com/cron.php（-dump选项来把URL的输出转换来标准输出）\r\n\r\ncurl方式：*/1 * * * *  /usr/bin/curl -o temp.txt http://www.gzpblog.com/cron.php（Curl默认在标准输出显示输出。使用 \"curl -o\" 选项，把脚本的输出转储到临时文件temp.txt）\r\n\r\nwget方式：*/1 * * * * /usr/bin/wget -q -O temp.txt http://www.gzpblog.com/cron.php（q 选项表示安静模式。\"-O temp.txt\" 表示输出会发送到临时文件。）\r\n\r\n以上方式，是将php脚本放在可以用url访问的地址地中，比如http://www.gzpblog.com/cron.php，定时调用触发任务。\r\n<h2>二 ignore_user_abort()方式</h2>\r\nignore_user_abort() 函数设置与客户机断开是否会终止脚本的执行。\r\n\r\n先使用一个cron.php文件来控制脚本的终止，cron.php内容为：\r\n\r\n[php]\r\n\r\n&lt;?php\r\nreturn 1;\r\n?&gt;\r\n\r\n[/php]\r\n\r\n脚本php文件为：\r\n\r\n[php]\r\n\r\n&lt;?php\r\nignore_user_abort();//关掉浏览器，PHP脚本也可以继续执行.\r\nset_time_limit(0);// 通过set_time_limit(0)可以让程序无限制的执行下去\r\n$interval=60*30;// 每隔半小时运行\r\ndo{\r\n$run = include \'config.php\';\r\nif(!$run) die(\'process abort\');  //return 0 时， 终止\r\n//TODO 该干啥干啥\r\nsleep($interval);// 等待5分钟\r\n}\r\nwhile(true);\r\n\r\n[/php]\r\n\r\n通过改变cron.php的return 0 , 来实现停止程序。但是这种方法，不好内存管理。\r\n<h2>三 <code class=\"php plain\"></code>file_get_contents()方式</h2>\r\n\r\n[php]\r\n\r\n&lt;?php\r\n$time=15;\r\n$url=&quot;http://&quot;.$_SERVER[\'HTTP_HOST\'].$_SERVER[\'REQUEST_URI\'];\r\n\r\n//TODO\r\n\r\nsleep($time);\r\nfile_get_contents($url);\r\n?&gt;\r\n\r\n[/php]\r\n\r\nphp脚本sleep 一段时间之后通过访问自身的方式继续执行，这样就能保证每个PHP脚本执行时间不会太长，不受time_out的限制。因为每一次一次循环php文件都是独立执行，所以这种方法，避免了time_out的限制。 但是最好和上边一样 加上控制代码cron.php，以便能够终止进程。', 'PHP实现定时任务的几种方式', '', 'publish', 'open', 'closed', '', 'php%e5%ae%9e%e7%8e%b0%e5%ae%9a%e6%97%b6%e4%bb%bb%e5%8a%a1%e7%9a%84%e5%87%a0%e7%a7%8d%e6%96%b9%e5%bc%8f', '', '', '2017-04-30 22:09:24', '2017-04-30 14:09:24', '', 0, 'https://www.gzpblog.com/?p=878', 0, 'post', '', 2),
(879, 1, '2017-04-30 22:08:16', '2017-04-30 14:08:16', '关于定时任务，之前以前认识了一种最常用的：crontab定时任务。通过linux的定时任务去实现。今天又认识了一下php实现定时方式的其它方式，总结一下。\r\n<h2><strong>一 服务器定时任务</strong></h2>\r\n服务器定时任务，其实就是unix系统下的crontab实现，具体的设置：<a href=\"https://www.gzpblog.com/20161125/516.html\" target=\"_blank\" rel=\"noopener noreferrer\">Linux定时任务crontab</a>；不过除了直接定时读取php脚本的方式，我们还可以用定时调用接口的方式。\r\n<h4>运行脚本时：</h4>\r\n*/1 * * * * php /data/www/cron.php  每分钟执行cron.php\r\n<h4>URL方式调用:</h4>\r\nlynx方式：*/1 * * * *  lynx -dump http://www.gzpblog.com/cron.php（-dump选项来把URL的输出转换来标准输出）\r\n\r\ncurl方式：*/1 * * * *  /usr/bin/curl -o temp.txt http://www.gzpblog.com/cron.php（Curl默认在标准输出显示输出。使用 \"curl -o\" 选项，把脚本的输出转储到临时文件temp.txt）\r\n\r\nwget方式：*/1 * * * * /usr/bin/wget -q -O temp.txt http://www.gzpblog.com/cron.php（q 选项表示安静模式。\"-O temp.txt\" 表示输出会发送到临时文件。）\r\n\r\n以上方式，是将php脚本放在可以用url访问的地址地中，比如http://www.gzpblog.com/cron.php，定时调用触发任务。\r\n<h2>二 ignore_user_abort()方式</h2>\r\nignore_user_abort() 函数设置与客户机断开是否会终止脚本的执行。\r\n\r\n先使用一个cron.php文件来控制脚本的终止，cron.php内容为：\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\nreturn 1;\r\n?&gt;\r\n\r\n[/php]\r\n\r\n\r\n脚本php文件为：\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\nignore_user_abort();//关掉浏览器，PHP脚本也可以继续执行.\r\nset_time_limit(0);// 通过set_time_limit(0)可以让程序无限制的执行下去\r\n$interval=60*30;// 每隔半小时运行\r\ndo{\r\n$run = include \'config.php\';\r\nif(!$run) die(\'process abort\');  //return 0 时， 终止\r\n//TODO 该干啥干啥\r\nsleep($interval);// 等待5分钟\r\n}\r\nwhile(true);\r\n\r\n[/php]\r\n\r\n\r\n通过改变cron.php的return 0 , 来实现停止程序。但是这种方法，不好内存管理。\r\n<h2>三 <code class=\"php plain\"></code>file_get_contents()方式</h2>\r\n\r\n[php]\r\n\r\n&lt;?php\r\n$time=15;\r\n$url=&quot;http://&quot;.$_SERVER[\'HTTP_HOST\'].$_SERVER[\'REQUEST_URI\'];\r\n\r\n//TODO\r\n\r\nsleep($time);\r\nfile_get_contents($url);\r\n?&gt;\r\n\r\n[/php]\r\n\r\n\r\nphp脚本sleep 一段时间之后通过访问自身的方式继续执行，这样就能保证每个PHP脚本执行时间不会太长，不受time_out的限制。因为每一次一次循环php文件都是独立执行，所以这种方法，避免了time_out的限制。 但是最好和上边一样 加上控制代码cron.php，以便能够终止进程。', 'PHP实现定时任务的几种方式', '', 'inherit', 'closed', 'closed', '', '878-revision-v1', '', '', '2017-04-30 22:08:16', '2017-04-30 14:08:16', '', 878, 'https://www.gzpblog.com/20170430/879.html', 0, 'revision', '', 0),
(880, 1, '2017-04-30 22:09:24', '2017-04-30 14:09:24', '关于定时任务，之前以前认识了一种最常用的：crontab定时任务。通过linux的定时任务去实现。今天又认识了一下php实现定时方式的其它方式，总结一下。\r\n<h2>一 服务器定时任务</h2>\r\n服务器定时任务，其实就是unix系统下的crontab实现，具体的设置：<a href=\"https://www.gzpblog.com/20161125/516.html\" target=\"_blank\" rel=\"noopener noreferrer\">Linux定时任务crontab</a>；不过除了直接定时读取php脚本的方式，我们还可以用定时调用接口的方式。\r\n<h4>运行脚本时：</h4>\r\n*/1 * * * * php /data/www/cron.php  每分钟执行cron.php\r\n<h4>URL方式调用:</h4>\r\nlynx方式：*/1 * * * *  lynx -dump http://www.gzpblog.com/cron.php（-dump选项来把URL的输出转换来标准输出）\r\n\r\ncurl方式：*/1 * * * *  /usr/bin/curl -o temp.txt http://www.gzpblog.com/cron.php（Curl默认在标准输出显示输出。使用 \"curl -o\" 选项，把脚本的输出转储到临时文件temp.txt）\r\n\r\nwget方式：*/1 * * * * /usr/bin/wget -q -O temp.txt http://www.gzpblog.com/cron.php（q 选项表示安静模式。\"-O temp.txt\" 表示输出会发送到临时文件。）\r\n\r\n以上方式，是将php脚本放在可以用url访问的地址地中，比如http://www.gzpblog.com/cron.php，定时调用触发任务。\r\n<h2>二 ignore_user_abort()方式</h2>\r\nignore_user_abort() 函数设置与客户机断开是否会终止脚本的执行。\r\n\r\n先使用一个cron.php文件来控制脚本的终止，cron.php内容为：\r\n\r\n[php]\r\n\r\n&lt;?php\r\nreturn 1;\r\n?&gt;\r\n\r\n[/php]\r\n\r\n脚本php文件为：\r\n\r\n[php]\r\n\r\n&lt;?php\r\nignore_user_abort();//关掉浏览器，PHP脚本也可以继续执行.\r\nset_time_limit(0);// 通过set_time_limit(0)可以让程序无限制的执行下去\r\n$interval=60*30;// 每隔半小时运行\r\ndo{\r\n$run = include \'config.php\';\r\nif(!$run) die(\'process abort\');  //return 0 时， 终止\r\n//TODO 该干啥干啥\r\nsleep($interval);// 等待5分钟\r\n}\r\nwhile(true);\r\n\r\n[/php]\r\n\r\n通过改变cron.php的return 0 , 来实现停止程序。但是这种方法，不好内存管理。\r\n<h2>三 <code class=\"php plain\"></code>file_get_contents()方式</h2>\r\n\r\n[php]\r\n\r\n&lt;?php\r\n$time=15;\r\n$url=&quot;http://&quot;.$_SERVER[\'HTTP_HOST\'].$_SERVER[\'REQUEST_URI\'];\r\n\r\n//TODO\r\n\r\nsleep($time);\r\nfile_get_contents($url);\r\n?&gt;\r\n\r\n[/php]\r\n\r\nphp脚本sleep 一段时间之后通过访问自身的方式继续执行，这样就能保证每个PHP脚本执行时间不会太长，不受time_out的限制。因为每一次一次循环php文件都是独立执行，所以这种方法，避免了time_out的限制。 但是最好和上边一样 加上控制代码cron.php，以便能够终止进程。', 'PHP实现定时任务的几种方式', '', 'inherit', 'closed', 'closed', '', '878-revision-v1', '', '', '2017-04-30 22:09:24', '2017-04-30 14:09:24', '', 878, 'https://www.gzpblog.com/20170430/880.html', 0, 'revision', '', 0),
(881, 1, '2017-05-05 11:57:01', '2017-05-05 03:57:01', '网站上线之后很长一段时间，乃至到现在一直都在使用百度云观测这款产品。使用百度云观测，主要是有一些功能确实是比较实用，比如实时监控网站的可用性，监控漏洞，监控加载速度等，对于网站的安全还是有一定作用的。之前网站调试时，一旦出现问题都能及时收到报警，还是比较及时的。\r\n\r\n但是有一天晚上大半夜的2点多，突然手机一震，收到一条报警：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yunguance1.png\"><img class=\"size-full wp-image-882 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yunguance1.png\" alt=\"\" width=\"664\" height=\"323\" /></a>\r\n\r\n服务器异常信息泄露的漏洞，还8个，一开始我是一脸懵比，还不知道这是啥。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yunguance2.png\"><img class=\"wp-image-883 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yunguance2.png\" alt=\"\" width=\"650\" height=\"579\" /></a>\r\n\r\n从描述来看是暴漏了报错或者调试信息，这样会让人从这下手，有机可乘。不过这些地址，我点进去，都是好的，没有任何的报错。仔细翻一下这些地址，发现都跟这篇文章有关<a href=\"https://www.gzpblog.com/20170311/788.html\" target=\"_blank\" rel=\"noopener noreferrer\">Apache间歇性500服务器错误探究</a>。\r\n\r\n我在我这篇文章发现了这样的语句：\r\n\r\nPHP Fatal error: Out of memory (allocated 2097152) (tried to allocate 8192 bytes) in 。。。 on line 390\r\n\r\n这就很尴尬了，这不是程序的报错，而是我文章的内容啊，因为这是一篇调试错误的总结文章。看来这是云观测一个很明显的误报了。\r\n\r\n然后我去提了一个工单：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yunguance3.png\"><img class=\"alignnone size-full wp-image-884\" src=\"https://files.gzpblog.com/wp/2017/05/yunguance3.png\" alt=\"\" width=\"1016\" height=\"268\" /></a>\r\n\r\n10天过去了，一点反应都没有！受理之后就没有任何反应了，我还催过单，也没有任何反应。这漏洞报警也出现半个月了，还一直在那。百度云观测的这个处理问题的效率或者态度，让我很是失望啊，是不是误报，你倒是说一声，处理不处理，也倒是说一声？竟然没有任何反应，虽然说云观测是个免费产品，但是竟然你们做了，该解决的问题还是得解决呀。但是既然是免费产品，我也不能要求它要做到多么好是吧，所以我就寻思着换一个产品了。阿里云很多安全服务都是收费的，而且很贵，不适合我们小站长，而云监控的指标里，没有实时检测程序漏洞啊之类的这些选项。至于其它平台的服务，没有用过，有时间再去看看。\r\n\r\n&nbsp;', '从一次误报处理看百度云观测', '', 'publish', 'open', 'closed', '', '%e4%bb%8e%e4%b8%80%e6%ac%a1%e8%af%af%e6%8a%a5%e5%a4%84%e7%90%86%e7%9c%8b%e7%99%be%e5%ba%a6%e4%ba%91%e8%a7%82%e6%b5%8b', '', '', '2017-05-05 11:59:50', '2017-05-05 03:59:50', '', 0, 'https://www.gzpblog.com/?p=881', 0, 'post', '', 2),
(882, 1, '2017-05-05 10:34:35', '2017-05-05 02:34:35', '', 'yunguance1', '', 'inherit', 'open', 'closed', '', 'yunguance1', '', '', '2017-05-05 10:34:35', '2017-05-05 02:34:35', '', 881, 'https://www.gzpblog.com/wp-content/uploads/2017/05/yunguance1.png', 0, 'attachment', 'image/png', 0),
(883, 1, '2017-05-05 10:34:36', '2017-05-05 02:34:36', '', 'yunguance2', '', 'inherit', 'open', 'closed', '', 'yunguance2', '', '', '2017-05-05 10:34:36', '2017-05-05 02:34:36', '', 881, 'https://www.gzpblog.com/wp-content/uploads/2017/05/yunguance2.png', 0, 'attachment', 'image/png', 0),
(884, 1, '2017-05-05 10:34:38', '2017-05-05 02:34:38', '', 'yunguance3', '', 'inherit', 'open', 'closed', '', 'yunguance3', '', '', '2017-05-05 10:34:38', '2017-05-05 02:34:38', '', 881, 'https://www.gzpblog.com/wp-content/uploads/2017/05/yunguance3.png', 0, 'attachment', 'image/png', 0),
(885, 1, '2017-05-05 11:56:46', '2017-05-05 03:56:46', '', 'yunguance4', '', 'inherit', 'open', 'closed', '', 'yunguance4', '', '', '2017-05-05 11:56:46', '2017-05-05 03:56:46', '', 881, 'https://www.gzpblog.com/wp-content/uploads/2017/05/yunguance4.png', 0, 'attachment', 'image/png', 0),
(886, 1, '2017-05-05 11:57:01', '2017-05-05 03:57:01', '网站上线之后很长一段时间，乃至到现在一直都在使用百度云观测这款产品。使用百度云观测，主要是有一些功能确实是比较实用，比如实时监控网站的可用性，监控漏洞，监控加载速度等，对于网站的安全还是有一定作用的。之前网站调试时，一旦出现问题都能及时收到报警，还是比较及时的。\r\n\r\n但是有一天晚上大半夜的2点多，突然手机一震，收到一条报警：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yunguance1.png\"><img class=\"size-full wp-image-882 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yunguance1.png\" alt=\"\" width=\"664\" height=\"323\" /></a>\r\n\r\n服务器异常信息泄露的漏洞，还8个，一开始我是一脸懵比，还不知道这是啥。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yunguance2.png\"><img class=\"wp-image-883 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yunguance2.png\" alt=\"\" width=\"650\" height=\"579\" /></a>\r\n\r\n从描述来看是暴漏了报错或者调试信息，这样会让从这下手，有机可乘。不过这些地址，我点进去，都是好的，没有任何的报错。仔细翻一下这些地址，发现都跟这篇文章有关<a href=\"https://www.gzpblog.com/20170311/788.html\" target=\"_blank\" rel=\"noopener noreferrer\">Apache间歇性500服务器错误探究</a>。\r\n\r\n我在我这篇文章发现了这样的语句：\r\n\r\nPHP Fatal error: Out of memory (allocated 2097152) (tried to allocate 8192 bytes) in 。。。 on line 390\r\n\r\n这就很尴尬了，这不是程序的报错，而是我文章的内容啊，因为这是一篇调试错误的总结文章。看来这是云观测一个很明显的误报了。\r\n\r\n然后我去提了一个工单：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yunguance3.png\"><img class=\"alignnone size-full wp-image-884\" src=\"https://files.gzpblog.com/wp/2017/05/yunguance3.png\" alt=\"\" width=\"1016\" height=\"268\" /></a>\r\n\r\n10天过去了，一点反应都没有！受理之后就没有任何反应了，我还催过单，也没有任何反应。这漏洞报警也出现半个月了，还一直在那。百度云观测的这个处理问题的效率或者态度，让我很是失望啊，是不是误报，你倒是说一声，处理不处理，也倒是说一声？竟然没有任何反应，虽然说云观测是个免费产品，但是竟然你们做了，该解决的问题还是得解决呀。但是既然是免费产品，我也不能要求它要做到多么好是吧，所以我就寻思着换一个产品了。阿里云很多安全服务都是收费的，而且很贵，不适合我们小站长，而云监控的指标里，没有实时检测程序漏洞啊之类的这些选项。至于其它平台的服务，没有用过，有时间再去看看。\r\n\r\n&nbsp;', '从一次误报处理看百度云观测', '', 'inherit', 'closed', 'closed', '', '881-revision-v1', '', '', '2017-05-05 11:57:01', '2017-05-05 03:57:01', '', 881, 'https://www.gzpblog.com/20170505/886.html', 0, 'revision', '', 0),
(887, 1, '2017-05-05 11:59:50', '2017-05-05 03:59:50', '网站上线之后很长一段时间，乃至到现在一直都在使用百度云观测这款产品。使用百度云观测，主要是有一些功能确实是比较实用，比如实时监控网站的可用性，监控漏洞，监控加载速度等，对于网站的安全还是有一定作用的。之前网站调试时，一旦出现问题都能及时收到报警，还是比较及时的。\r\n\r\n但是有一天晚上大半夜的2点多，突然手机一震，收到一条报警：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yunguance1.png\"><img class=\"size-full wp-image-882 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yunguance1.png\" alt=\"\" width=\"664\" height=\"323\" /></a>\r\n\r\n服务器异常信息泄露的漏洞，还8个，一开始我是一脸懵比，还不知道这是啥。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yunguance2.png\"><img class=\"wp-image-883 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yunguance2.png\" alt=\"\" width=\"650\" height=\"579\" /></a>\r\n\r\n从描述来看是暴漏了报错或者调试信息，这样会让人从这下手，有机可乘。不过这些地址，我点进去，都是好的，没有任何的报错。仔细翻一下这些地址，发现都跟这篇文章有关<a href=\"https://www.gzpblog.com/20170311/788.html\" target=\"_blank\" rel=\"noopener noreferrer\">Apache间歇性500服务器错误探究</a>。\r\n\r\n我在我这篇文章发现了这样的语句：\r\n\r\nPHP Fatal error: Out of memory (allocated 2097152) (tried to allocate 8192 bytes) in 。。。 on line 390\r\n\r\n这就很尴尬了，这不是程序的报错，而是我文章的内容啊，因为这是一篇调试错误的总结文章。看来这是云观测一个很明显的误报了。\r\n\r\n然后我去提了一个工单：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yunguance3.png\"><img class=\"alignnone size-full wp-image-884\" src=\"https://files.gzpblog.com/wp/2017/05/yunguance3.png\" alt=\"\" width=\"1016\" height=\"268\" /></a>\r\n\r\n10天过去了，一点反应都没有！受理之后就没有任何反应了，我还催过单，也没有任何反应。这漏洞报警也出现半个月了，还一直在那。百度云观测的这个处理问题的效率或者态度，让我很是失望啊，是不是误报，你倒是说一声，处理不处理，也倒是说一声？竟然没有任何反应，虽然说云观测是个免费产品，但是竟然你们做了，该解决的问题还是得解决呀。但是既然是免费产品，我也不能要求它要做到多么好是吧，所以我就寻思着换一个产品了。阿里云很多安全服务都是收费的，而且很贵，不适合我们小站长，而云监控的指标里，没有实时检测程序漏洞啊之类的这些选项。至于其它平台的服务，没有用过，有时间再去看看。\r\n\r\n&nbsp;', '从一次误报处理看百度云观测', '', 'inherit', 'closed', 'closed', '', '881-revision-v1', '', '', '2017-05-05 11:59:50', '2017-05-05 03:59:50', '', 881, 'https://www.gzpblog.com/20170505/887.html', 0, 'revision', '', 0),
(888, 1, '2017-05-07 23:41:38', '2017-05-07 15:41:38', '最近折腾wordpress碰到一个问题，回复评论时，想让评论表单框动态显示到要回复的评论下，但是这个效果一直出不来。我看了其它的主题，没发现什么特别的地方。回复这里的代码看起来是对的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply3.png\"><img class=\"size-full wp-image-891 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply3.png\" alt=\"\" width=\"412\" height=\"71\" /></a>\r\n\r\n那问题是出在哪里呢？最后发现主要是这一段js效果，加上这段js就行：\r\n\r\n[javascript]\r\nvar addComment={moveForm:function(a,b,c,d){var e,f=this,g=f.I(a),h=f.I(c),i=f.I(&quot;cancel-comment-reply-link&quot;),j=f.I(&quot;comment_parent&quot;),k=f.I(&quot;comment_post_ID&quot;);if(g&amp;&amp;h&amp;&amp;i&amp;&amp;j){f.respondId=c,d=d||!1,f.I(&quot;wp-temp-form-div&quot;)||(e=document.createElement(&quot;div&quot;),e.id=&quot;wp-temp-form-div&quot;,e.style.display=&quot;none&quot;,h.parentNode.insertBefore(e,h)),g.parentNode.insertBefore(h,g.nextSibling),$(\'body,html\').animate( { scrollTop: $(\'#respond\').offset().top - 150 }, 400);k&amp;&amp;d&amp;&amp;(k.value=d),j.value=b,i.style.display=&quot;&quot;,i.onclick=function(){var a=addComment,b=a.I(&quot;wp-temp-form-div&quot;),c=a.I(a.respondId);if(b&amp;&amp;c)return a.I(&quot;comment_parent&quot;).value=&quot;0&quot;,b.parentNode.insertBefore(c,b),b.parentNode.removeChild(b),this.style.display=&quot;none&quot;,this.onclick=null,!1};try{f.I(&quot;comment&quot;).focus()}catch(l){}return!1}},I:function(a){return document.getElementById(a)}};\r\n[/javascript]\r\n\r\n不过，这之中还是有一个坑，这点要注意，就是表单的内容要完整，主要是这两个：\r\n\r\n[php]\r\n&lt;?php comment_id_fields(); ?&gt;\r\n[/php]\r\n\r\n获取评论id，放在提交表单form标签里面，一般放在提交按钮后面。\r\n\r\n[php]\r\n&lt;?php cancel_comment_reply_link(\'点击取消回复\') ?&gt;\r\n[/php]\r\n\r\n这个是取消回复按钮，也是必须要，没有了这个js也是没效果的。\r\n\r\n基本上，这样子，这个效果就出来了，大概是这样的：\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\"><img class=\"size-full wp-image-889 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\" alt=\"\" width=\"825\" height=\"253\" /></a>\r\n点击回复按钮：<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\">\r\n</a><a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply2.png\"><img class=\"size-full wp-image-890 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply2.png\" alt=\"\" width=\"820\" height=\"620\" /></a>\r\n\r\n&nbsp;', 'Wordpress评论表单动态移动到回复评论下的效果', '', 'publish', 'open', 'closed', '', 'wordpress%e8%af%84%e8%ae%ba%e8%a1%a8%e5%8d%95', '', '', '2017-05-07 23:42:37', '2017-05-07 15:42:37', '', 0, 'https://www.gzpblog.com/?p=888', 0, 'post', '', 0),
(889, 1, '2017-05-07 23:23:51', '2017-05-07 15:23:51', '', 'wordpress_reply1', '', 'inherit', 'open', 'closed', '', 'wordpress_reply1', '', '', '2017-05-07 23:23:51', '2017-05-07 15:23:51', '', 888, 'https://www.gzpblog.com/wp-content/uploads/2017/05/wordpress_reply1.png', 0, 'attachment', 'image/png', 0),
(890, 1, '2017-05-07 23:23:52', '2017-05-07 15:23:52', '', 'wordpress_reply2', '', 'inherit', 'open', 'closed', '', 'wordpress_reply2', '', '', '2017-05-07 23:23:52', '2017-05-07 15:23:52', '', 888, 'https://www.gzpblog.com/wp-content/uploads/2017/05/wordpress_reply2.png', 0, 'attachment', 'image/png', 0),
(891, 1, '2017-05-07 23:23:54', '2017-05-07 15:23:54', '', 'wordpress_reply3', '', 'inherit', 'open', 'closed', '', 'wordpress_reply3', '', '', '2017-05-07 23:23:54', '2017-05-07 15:23:54', '', 888, 'https://www.gzpblog.com/wp-content/uploads/2017/05/wordpress_reply3.png', 0, 'attachment', 'image/png', 0),
(892, 1, '2017-05-07 23:39:35', '2017-05-07 15:39:35', '最近折腾wordpress碰到一个问题，回复评论时，想让评论表单框动态显示到要回复的评论下，但是这个效果一直出不来。我看了其它的主题，没发现什么特别的地方。回复这里的代码看起来是对的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply3.png\"><img class=\"size-full wp-image-891 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply3.png\" alt=\"\" width=\"412\" height=\"71\" /></a>\r\n\r\n那问题是出在哪里呢？最后发现主要是这一段js效果，加上这段js就行：\r\n\r\n[javascript]\r\nvar addComment={moveForm:function(a,b,c,d){var e,f=this,g=f.I(a),h=f.I(c),i=f.I(&quot;cancel-comment-reply-link&quot;),j=f.I(&quot;comment_parent&quot;),k=f.I(&quot;comment_post_ID&quot;);if(g&amp;&amp;h&amp;&amp;i&amp;&amp;j){f.respondId=c,d=d||!1,f.I(&quot;wp-temp-form-div&quot;)||(e=document.createElement(&quot;div&quot;),e.id=&quot;wp-temp-form-div&quot;,e.style.display=&quot;none&quot;,h.parentNode.insertBefore(e,h)),g.parentNode.insertBefore(h,g.nextSibling),$(\'body,html\').animate( { scrollTop: $(\'#respond\').offset().top - 150 }, 400);k&amp;&amp;d&amp;&amp;(k.value=d),j.value=b,i.style.display=&quot;&quot;,i.onclick=function(){var a=addComment,b=a.I(&quot;wp-temp-form-div&quot;),c=a.I(a.respondId);if(b&amp;&amp;c)return a.I(&quot;comment_parent&quot;).value=&quot;0&quot;,b.parentNode.insertBefore(c,b),b.parentNode.removeChild(b),this.style.display=&quot;none&quot;,this.onclick=null,!1};try{f.I(&quot;comment&quot;).focus()}catch(l){}return!1}},I:function(a){return document.getElementById(a)}};\r\n[/javascript]\r\n\r\n\r\n不过，这之中还是有一个坑，这点要注意，就是表单的内容要完整，主要是这两个：\r\n\r\n[php]\r\n&lt;?php comment_id_fields(); ?&gt;\r\n[/php]\r\n\r\n<pre>获取评论id，放在提交表单form标签里面，一般放在提交按钮后面。\r\n\r\n\r\n[php]\r\n&lt;?php cancel_comment_reply_link(\'点击取消回复\') ?&gt;\r\n[/php]\r\n\r\n这个是取消回复按钮，也是必须要，没有了这个js也是没效果的。\r\n\r\n基本上，这样子，这个效果就出来了，大概是这样的：\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\"><img class=\"size-full wp-image-889 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\" alt=\"\" width=\"825\" height=\"253\" /></a>\r\n点击回复按钮：<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\">\r\n</a><a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply2.png\"><img class=\"size-full wp-image-890 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply2.png\" alt=\"\" width=\"820\" height=\"620\" /></a></pre>\r\n<pre>\r\n\r\n</pre>\r\n&nbsp;', 'Wordpress评论表单', '', 'inherit', 'closed', 'closed', '', '888-revision-v1', '', '', '2017-05-07 23:39:35', '2017-05-07 15:39:35', '', 888, 'https://www.gzpblog.com/20170507/892.html', 0, 'revision', '', 0),
(893, 1, '2017-05-07 23:39:57', '2017-05-07 15:39:57', '最近折腾wordpress碰到一个问题，回复评论时，想让评论表单框动态显示到要回复的评论下，但是这个效果一直出不来。我看了其它的主题，没发现什么特别的地方。回复这里的代码看起来是对的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply3.png\"><img class=\"size-full wp-image-891 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply3.png\" alt=\"\" width=\"412\" height=\"71\" /></a>\r\n\r\n那问题是出在哪里呢？最后发现主要是这一段js效果，加上这段js就行：\r\n\r\n[javascript]\r\nvar addComment={moveForm:function(a,b,c,d){var e,f=this,g=f.I(a),h=f.I(c),i=f.I(&quot;cancel-comment-reply-link&quot;),j=f.I(&quot;comment_parent&quot;),k=f.I(&quot;comment_post_ID&quot;);if(g&amp;&amp;h&amp;&amp;i&amp;&amp;j){f.respondId=c,d=d||!1,f.I(&quot;wp-temp-form-div&quot;)||(e=document.createElement(&quot;div&quot;),e.id=&quot;wp-temp-form-div&quot;,e.style.display=&quot;none&quot;,h.parentNode.insertBefore(e,h)),g.parentNode.insertBefore(h,g.nextSibling),$(\'body,html\').animate( { scrollTop: $(\'#respond\').offset().top - 150 }, 400);k&amp;&amp;d&amp;&amp;(k.value=d),j.value=b,i.style.display=&quot;&quot;,i.onclick=function(){var a=addComment,b=a.I(&quot;wp-temp-form-div&quot;),c=a.I(a.respondId);if(b&amp;&amp;c)return a.I(&quot;comment_parent&quot;).value=&quot;0&quot;,b.parentNode.insertBefore(c,b),b.parentNode.removeChild(b),this.style.display=&quot;none&quot;,this.onclick=null,!1};try{f.I(&quot;comment&quot;).focus()}catch(l){}return!1}},I:function(a){return document.getElementById(a)}};\r\n[/javascript]\r\n\r\n\r\n不过，这之中还是有一个坑，这点要注意，就是表单的内容要完整，主要是这两个：\r\n\r\n[php]\r\n&lt;?php comment_id_fields(); ?&gt;\r\n[/php]\r\n\r\n获取评论id，放在提交表单form标签里面，一般放在提交按钮后面。\r\n\r\n[php]\r\n&lt;?php cancel_comment_reply_link(\'点击取消回复\') ?&gt;\r\n[/php]\r\n\r\n这个是取消回复按钮，也是必须要，没有了这个js也是没效果的。\r\n\r\n基本上，这样子，这个效果就出来了，大概是这样的：\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\"><img class=\"size-full wp-image-889 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\" alt=\"\" width=\"825\" height=\"253\" /></a>\r\n点击回复按钮：<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\">\r\n</a><a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply2.png\"><img class=\"size-full wp-image-890 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply2.png\" alt=\"\" width=\"820\" height=\"620\" /></a></pre>\r\n<pre>\r\n\r\n</pre>\r\n&nbsp;', 'Wordpress评论表单', '', 'inherit', 'closed', 'closed', '', '888-revision-v1', '', '', '2017-05-07 23:39:57', '2017-05-07 15:39:57', '', 888, 'https://www.gzpblog.com/20170507/893.html', 0, 'revision', '', 0),
(894, 1, '2017-05-07 23:40:09', '2017-05-07 15:40:09', '最近折腾wordpress碰到一个问题，回复评论时，想让评论表单框动态显示到要回复的评论下，但是这个效果一直出不来。我看了其它的主题，没发现什么特别的地方。回复这里的代码看起来是对的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply3.png\"><img class=\"size-full wp-image-891 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply3.png\" alt=\"\" width=\"412\" height=\"71\" /></a>\r\n\r\n那问题是出在哪里呢？最后发现主要是这一段js效果，加上这段js就行：\r\n\r\n[javascript]\r\nvar addComment={moveForm:function(a,b,c,d){var e,f=this,g=f.I(a),h=f.I(c),i=f.I(&quot;cancel-comment-reply-link&quot;),j=f.I(&quot;comment_parent&quot;),k=f.I(&quot;comment_post_ID&quot;);if(g&amp;&amp;h&amp;&amp;i&amp;&amp;j){f.respondId=c,d=d||!1,f.I(&quot;wp-temp-form-div&quot;)||(e=document.createElement(&quot;div&quot;),e.id=&quot;wp-temp-form-div&quot;,e.style.display=&quot;none&quot;,h.parentNode.insertBefore(e,h)),g.parentNode.insertBefore(h,g.nextSibling),$(\'body,html\').animate( { scrollTop: $(\'#respond\').offset().top - 150 }, 400);k&amp;&amp;d&amp;&amp;(k.value=d),j.value=b,i.style.display=&quot;&quot;,i.onclick=function(){var a=addComment,b=a.I(&quot;wp-temp-form-div&quot;),c=a.I(a.respondId);if(b&amp;&amp;c)return a.I(&quot;comment_parent&quot;).value=&quot;0&quot;,b.parentNode.insertBefore(c,b),b.parentNode.removeChild(b),this.style.display=&quot;none&quot;,this.onclick=null,!1};try{f.I(&quot;comment&quot;).focus()}catch(l){}return!1}},I:function(a){return document.getElementById(a)}};\r\n[/javascript]\r\n\r\n\r\n不过，这之中还是有一个坑，这点要注意，就是表单的内容要完整，主要是这两个：\r\n\r\n[php]\r\n&lt;?php comment_id_fields(); ?&gt;\r\n[/php]\r\n\r\n获取评论id，放在提交表单form标签里面，一般放在提交按钮后面。\r\n\r\n[php]\r\n&lt;?php cancel_comment_reply_link(\'点击取消回复\') ?&gt;\r\n[/php]\r\n\r\n这个是取消回复按钮，也是必须要，没有了这个js也是没效果的。\r\n\r\n基本上，这样子，这个效果就出来了，大概是这样的：\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\"><img class=\"size-full wp-image-889 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\" alt=\"\" width=\"825\" height=\"253\" /></a>\r\n点击回复按钮：<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\">\r\n</a><a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply2.png\"><img class=\"size-full wp-image-890 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply2.png\" alt=\"\" width=\"820\" height=\"620\" /></a></pre>\r\n<pre></pre>\r\n&nbsp;', 'Wordpress评论表单', '', 'inherit', 'closed', 'closed', '', '888-revision-v1', '', '', '2017-05-07 23:40:09', '2017-05-07 15:40:09', '', 888, 'https://www.gzpblog.com/20170507/894.html', 0, 'revision', '', 0),
(895, 1, '2017-05-07 23:40:22', '2017-05-07 15:40:22', '最近折腾wordpress碰到一个问题，回复评论时，想让评论表单框动态显示到要回复的评论下，但是这个效果一直出不来。我看了其它的主题，没发现什么特别的地方。回复这里的代码看起来是对的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply3.png\"><img class=\"size-full wp-image-891 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply3.png\" alt=\"\" width=\"412\" height=\"71\" /></a>\r\n\r\n那问题是出在哪里呢？最后发现主要是这一段js效果，加上这段js就行：\r\n\r\n[javascript]\r\nvar addComment={moveForm:function(a,b,c,d){var e,f=this,g=f.I(a),h=f.I(c),i=f.I(&quot;cancel-comment-reply-link&quot;),j=f.I(&quot;comment_parent&quot;),k=f.I(&quot;comment_post_ID&quot;);if(g&amp;&amp;h&amp;&amp;i&amp;&amp;j){f.respondId=c,d=d||!1,f.I(&quot;wp-temp-form-div&quot;)||(e=document.createElement(&quot;div&quot;),e.id=&quot;wp-temp-form-div&quot;,e.style.display=&quot;none&quot;,h.parentNode.insertBefore(e,h)),g.parentNode.insertBefore(h,g.nextSibling),$(\'body,html\').animate( { scrollTop: $(\'#respond\').offset().top - 150 }, 400);k&amp;&amp;d&amp;&amp;(k.value=d),j.value=b,i.style.display=&quot;&quot;,i.onclick=function(){var a=addComment,b=a.I(&quot;wp-temp-form-div&quot;),c=a.I(a.respondId);if(b&amp;&amp;c)return a.I(&quot;comment_parent&quot;).value=&quot;0&quot;,b.parentNode.insertBefore(c,b),b.parentNode.removeChild(b),this.style.display=&quot;none&quot;,this.onclick=null,!1};try{f.I(&quot;comment&quot;).focus()}catch(l){}return!1}},I:function(a){return document.getElementById(a)}};\r\n[/javascript]\r\n\r\n\r\n不过，这之中还是有一个坑，这点要注意，就是表单的内容要完整，主要是这两个：\r\n\r\n[php]\r\n&lt;?php comment_id_fields(); ?&gt;\r\n[/php]\r\n\r\n获取评论id，放在提交表单form标签里面，一般放在提交按钮后面。\r\n\r\n[php]\r\n&lt;?php cancel_comment_reply_link(\'点击取消回复\') ?&gt;\r\n[/php]\r\n\r\n这个是取消回复按钮，也是必须要，没有了这个js也是没效果的。\r\n\r\n基本上，这样子，这个效果就出来了，大概是这样的：\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\"><img class=\"size-full wp-image-889 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\" alt=\"\" width=\"825\" height=\"253\" /></a>\r\n点击回复按钮：<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\">\r\n</a><a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply2.png\"><img class=\"size-full wp-image-890 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply2.png\" alt=\"\" width=\"820\" height=\"620\" /></a></pre>\r\n&nbsp;', 'Wordpress评论表单', '', 'inherit', 'closed', 'closed', '', '888-revision-v1', '', '', '2017-05-07 23:40:22', '2017-05-07 15:40:22', '', 888, 'https://www.gzpblog.com/20170507/895.html', 0, 'revision', '', 0),
(896, 1, '2017-05-07 23:42:37', '2017-05-07 15:42:37', '最近折腾wordpress碰到一个问题，回复评论时，想让评论表单框动态显示到要回复的评论下，但是这个效果一直出不来。我看了其它的主题，没发现什么特别的地方。回复这里的代码看起来是对的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply3.png\"><img class=\"size-full wp-image-891 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply3.png\" alt=\"\" width=\"412\" height=\"71\" /></a>\r\n\r\n那问题是出在哪里呢？最后发现主要是这一段js效果，加上这段js就行：\r\n\r\n[javascript]\r\nvar addComment={moveForm:function(a,b,c,d){var e,f=this,g=f.I(a),h=f.I(c),i=f.I(&quot;cancel-comment-reply-link&quot;),j=f.I(&quot;comment_parent&quot;),k=f.I(&quot;comment_post_ID&quot;);if(g&amp;&amp;h&amp;&amp;i&amp;&amp;j){f.respondId=c,d=d||!1,f.I(&quot;wp-temp-form-div&quot;)||(e=document.createElement(&quot;div&quot;),e.id=&quot;wp-temp-form-div&quot;,e.style.display=&quot;none&quot;,h.parentNode.insertBefore(e,h)),g.parentNode.insertBefore(h,g.nextSibling),$(\'body,html\').animate( { scrollTop: $(\'#respond\').offset().top - 150 }, 400);k&amp;&amp;d&amp;&amp;(k.value=d),j.value=b,i.style.display=&quot;&quot;,i.onclick=function(){var a=addComment,b=a.I(&quot;wp-temp-form-div&quot;),c=a.I(a.respondId);if(b&amp;&amp;c)return a.I(&quot;comment_parent&quot;).value=&quot;0&quot;,b.parentNode.insertBefore(c,b),b.parentNode.removeChild(b),this.style.display=&quot;none&quot;,this.onclick=null,!1};try{f.I(&quot;comment&quot;).focus()}catch(l){}return!1}},I:function(a){return document.getElementById(a)}};\r\n[/javascript]\r\n\r\n不过，这之中还是有一个坑，这点要注意，就是表单的内容要完整，主要是这两个：\r\n\r\n[php]\r\n&lt;?php comment_id_fields(); ?&gt;\r\n[/php]\r\n\r\n获取评论id，放在提交表单form标签里面，一般放在提交按钮后面。\r\n\r\n[php]\r\n&lt;?php cancel_comment_reply_link(\'点击取消回复\') ?&gt;\r\n[/php]\r\n\r\n这个是取消回复按钮，也是必须要，没有了这个js也是没效果的。\r\n\r\n基本上，这样子，这个效果就出来了，大概是这样的：\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\"><img class=\"size-full wp-image-889 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\" alt=\"\" width=\"825\" height=\"253\" /></a>\r\n点击回复按钮：<a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply1.png\">\r\n</a><a href=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply2.png\"><img class=\"size-full wp-image-890 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/wordpress_reply2.png\" alt=\"\" width=\"820\" height=\"620\" /></a>\r\n\r\n&nbsp;', 'Wordpress评论表单动态移动到回复评论下的效果', '', 'inherit', 'closed', 'closed', '', '888-revision-v1', '', '', '2017-05-07 23:42:37', '2017-05-07 15:42:37', '', 888, 'https://www.gzpblog.com/20170507/896.html', 0, 'revision', '', 0),
(898, 1, '2017-05-11 23:06:03', '2017-05-11 15:06:03', '从HTTP转HTTPS已经有两个半月多了，HTTPS的好处这里就不再重申了，今天我们来关注一下HTTPS对于SEO的影响，SEO也是很多站长对HTTPS的顾虑之一。首先说一下，本站虽然已经建了一年多了，但是并不是每天都有时间来写文章，所以文章并不多，所以搜索引擎的收录并不多。\r\n\r\n先来看一下转HTTPS后的变化吧：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/https_seo_304.png\"><img class=\"wp-image-899 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/https_seo_304.png\" alt=\"\" width=\"1066\" height=\"550\" /></a>\r\n\r\n大概是在2月末的时候转的HTTPS，很明显百度收录和360收录都有一些降低，搜狗没什么动作，反链没什么变化。虽然收录降了，不过我猜这时候，风暴还没来临。\r\n\r\n大概过了一个月左右，真正的暴风雨来领了。3月底开始，索引出现大幅度的下降，持续了半个月：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/https_seo_418.png\"><img class=\"wp-image-900 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/https_seo_418.png\" alt=\"\" width=\"606\" height=\"689\" /></a>\r\n\r\n大概砍掉了三分之一，百度的走势大概是：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/https_seo_418_2.png\"><img class=\"size-full wp-image-901 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/https_seo_418_2.png\" alt=\"\" width=\"718\" height=\"288\" /></a>\r\n\r\n再来看看详细一点的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/https_seo_418_3.png\"><img class=\"wp-image-902 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/https_seo_418_3.png\" alt=\"\" width=\"1040\" height=\"546\" /></a>\r\n\r\n百度索引是持续走低的，那从这张图来看，百度收录是先增后减的一个情况，这个时候大概回到了一个之前差不多的状态，但是反链则影响很大；让我比较惊讶的是，360收录暴增；几十年没变化的搜狗也是突然坐过山车增了又减，但是效果也比之前好；所以目前来看，只有反链和索引影响比较大。\r\n\r\n再来看看最近的情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/https_seo_511_1.png\"><img class=\"size-full wp-image-903 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/https_seo_511_1.png\" alt=\"\" width=\"722\" height=\"300\" /></a>\r\n\r\n走势图走出了一个凹字型，在暴跌之后逐渐恢复，现在还在持续一点点上升。详情：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/https_seo_511_2.png\"><img class=\"wp-image-904 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/https_seo_511_2.png\" alt=\"\" width=\"1049\" height=\"554\" /></a>\r\n\r\n百度方面，看得出来虽然索引在升，但是收录波动还是比较大（其实百度的收录波动一直挺大）；360的收录是比较稳定的，最近的状况也是，在一段时间的发疯之后现在趋于稳定了；搜狗依然几十年不动；百度反链恢复了一些。\r\n\r\n从这段时间的观察来看，百度表现出来有点反应迟钝，然后就打鸡血一样上串下跳，但是有一点可以肯定的是，百度官方所说的<strong>HTTPS相比HTTP排名将更加靠前这个是对的</strong>，我可以感受到我的流量和关键词比以前好了很多；360对于HTTPS的反应出乎我的意料，依旧十分稳定；而搜狗有了一点点的变化之后依然是几十年不变。\r\n\r\n综合来看，HTTPS对于SEO的影响，除了反链的影响外，个人觉得反而是更加有利的；而chrome 62版本浏览器即将把要输入数据的HTTP页面标志为“不安全”，google强推HTTPS意图很明显，HTTPS是大势所趋，这种情形下，从长远考虑，早点升级HTTPS是非常明智的选择。', 'HTTP转HTTPS后SEO分析', '', 'publish', 'open', 'closed', '', 'http%e8%bd%achttps%e5%90%8eseo%e5%88%86%e6%9e%90', '', '', '2017-05-11 23:06:03', '2017-05-11 15:06:03', '', 0, 'https://www.gzpblog.com/?p=898', 0, 'post', '', 4),
(899, 1, '2017-05-11 22:26:41', '2017-05-11 14:26:41', '', 'https_seo_304', '', 'inherit', 'open', 'closed', '', 'https_seo_304', '', '', '2017-05-11 22:26:41', '2017-05-11 14:26:41', '', 898, 'https://www.gzpblog.com/wp-content/uploads/2017/05/https_seo_304.png', 0, 'attachment', 'image/png', 0),
(900, 1, '2017-05-11 22:26:43', '2017-05-11 14:26:43', '', 'https_seo_418', '', 'inherit', 'open', 'closed', '', 'https_seo_418', '', '', '2017-05-11 22:26:43', '2017-05-11 14:26:43', '', 898, 'https://www.gzpblog.com/wp-content/uploads/2017/05/https_seo_418.png', 0, 'attachment', 'image/png', 0),
(901, 1, '2017-05-11 22:26:44', '2017-05-11 14:26:44', '', 'https_seo_418_2', '', 'inherit', 'open', 'closed', '', 'https_seo_418_2', '', '', '2017-05-11 22:26:44', '2017-05-11 14:26:44', '', 898, 'https://www.gzpblog.com/wp-content/uploads/2017/05/https_seo_418_2.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(902, 1, '2017-05-11 22:26:45', '2017-05-11 14:26:45', '', 'https_seo_418_3', '', 'inherit', 'open', 'closed', '', 'https_seo_418_3', '', '', '2017-05-11 22:26:45', '2017-05-11 14:26:45', '', 898, 'https://www.gzpblog.com/wp-content/uploads/2017/05/https_seo_418_3.png', 0, 'attachment', 'image/png', 0),
(903, 1, '2017-05-11 22:26:47', '2017-05-11 14:26:47', '', 'https_seo_511_1', '', 'inherit', 'open', 'closed', '', 'https_seo_511_1', '', '', '2017-05-11 22:26:47', '2017-05-11 14:26:47', '', 898, 'https://www.gzpblog.com/wp-content/uploads/2017/05/https_seo_511_1.png', 0, 'attachment', 'image/png', 0),
(904, 1, '2017-05-11 22:26:48', '2017-05-11 14:26:48', '', 'https_seo_511_2', '', 'inherit', 'open', 'closed', '', 'https_seo_511_2', '', '', '2017-05-11 22:26:48', '2017-05-11 14:26:48', '', 898, 'https://www.gzpblog.com/wp-content/uploads/2017/05/https_seo_511_2.png', 0, 'attachment', 'image/png', 0),
(905, 1, '2017-05-11 22:31:43', '2017-05-11 14:31:43', '', 'httpsGreen', '', 'inherit', 'open', 'closed', '', 'httpsgreen', '', '', '2017-05-11 22:31:43', '2017-05-11 14:31:43', '', 898, 'https://www.gzpblog.com/wp-content/uploads/2017/05/httpsGreen.jpg', 0, 'attachment', 'image/jpeg', 0),
(906, 1, '2017-05-11 23:06:03', '2017-05-11 15:06:03', '从HTTP转HTTPS已经有两个半月多了，HTTPS的好处这里就不再重申了，今天我们来关注一下HTTPS对于SEO的影响，SEO也是很多站长对HTTPS的顾虑之一。首先说一下，本站虽然已经建了一年多了，但是并不是每天都有时间来写文章，所以文章并不多，所以搜索引擎的收录并不多。\r\n\r\n先来看一下转HTTPS后的变化吧：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/https_seo_304.png\"><img class=\"wp-image-899 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/https_seo_304.png\" alt=\"\" width=\"1066\" height=\"550\" /></a>\r\n\r\n大概是在2月末的时候转的HTTPS，很明显百度收录和360收录都有一些降低，搜狗没什么动作，反链没什么变化。虽然收录降了，不过我猜这时候，风暴还没来临。\r\n\r\n大概过了一个月左右，真正的暴风雨来领了。3月底开始，索引出现大幅度的下降，持续了半个月：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/https_seo_418.png\"><img class=\"wp-image-900 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/https_seo_418.png\" alt=\"\" width=\"606\" height=\"689\" /></a>\r\n\r\n大概砍掉了三分之一，百度的走势大概是：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/https_seo_418_2.png\"><img class=\"size-full wp-image-901 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/https_seo_418_2.png\" alt=\"\" width=\"718\" height=\"288\" /></a>\r\n\r\n再来看看详细一点的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/https_seo_418_3.png\"><img class=\"wp-image-902 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/https_seo_418_3.png\" alt=\"\" width=\"1040\" height=\"546\" /></a>\r\n\r\n百度索引是持续走低的，那从这张图来看，百度收录是先增后减的一个情况，这个时候大概回到了一个之前差不多的状态，但是反链则影响很大；让我比较惊讶的是，360收录暴增；几十年没变化的搜狗也是突然坐过山车增了又减，但是效果也比之前好；所以目前来看，只有反链和索引影响比较大。\r\n\r\n再来看看最近的情况：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/https_seo_511_1.png\"><img class=\"size-full wp-image-903 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/https_seo_511_1.png\" alt=\"\" width=\"722\" height=\"300\" /></a>\r\n\r\n走势图走出了一个凹字型，在暴跌之后逐渐恢复，现在还在持续一点点上升。详情：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/https_seo_511_2.png\"><img class=\"wp-image-904 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/https_seo_511_2.png\" alt=\"\" width=\"1049\" height=\"554\" /></a>\r\n\r\n百度方面，看得出来虽然索引在升，但是收录波动还是比较大（其实百度的收录波动一直挺大）；360的收录是比较稳定的，最近的状况也是，在一段时间的发疯之后现在趋于稳定了；搜狗依然几十年不动；百度反链恢复了一些。\r\n\r\n从这段时间的观察来看，百度表现出来有点反应迟钝，然后就打鸡血一样上串下跳，但是有一点可以肯定的是，百度官方所说的<strong>HTTPS相比HTTP排名将更加靠前这个是对的</strong>，我可以感受到我的流量和关键词比以前好了很多；360对于HTTPS的反应出乎我的意料，依旧十分稳定；而搜狗有了一点点的变化之后依然是几十年不变。\r\n\r\n综合来看，HTTPS对于SEO的影响，除了反链的影响外，个人觉得反而是更加有利的；而chrome 62版本浏览器即将把要输入数据的HTTP页面标志为“不安全”，google强推HTTPS意图很明显，HTTPS是大势所趋，这种情形下，从长远考虑，早点升级HTTPS是非常明智的选择。', 'HTTP转HTTPS后SEO分析', '', 'inherit', 'closed', 'closed', '', '898-revision-v1', '', '', '2017-05-11 23:06:03', '2017-05-11 15:06:03', '', 898, 'https://www.gzpblog.com/20170511/906.html', 0, 'revision', '', 0),
(909, 1, '2017-05-17 16:57:16', '2017-05-17 08:57:16', '', 'yishigongji_1', '', 'inherit', 'open', 'closed', '', 'yishigongji_1', '', '', '2017-05-19 16:22:35', '2017-05-19 08:22:35', '', 910, 'https://www.gzpblog.com/wp-content/uploads/2017/05/yishigongji_1.png', 0, 'attachment', 'image/png', 0),
(910, 1, '2017-05-19 17:50:22', '2017-05-19 09:50:22', '虽然说服务器迁移之后，其实还挺忙，没有时间折腾服务器之类的，所以也没过多优化，但是博客跑起来感觉也还行，速度可以。不过前段时间点开却发现，博客进不去了！\r\n\r\n情况就是，网站速度奇慢，甚至没反应，完全进不去。而出现这个问题之后自己突然又好了，然后隔一段时间又出现这个情况。我一开始关注到的情况是CPU爆高，有时候甚至达到100%，网站直接卡死：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yishigongji_2.png\"><img class=\"size-full wp-image-911 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yishigongji_2.png\" alt=\"\" width=\"404\" height=\"306\" /></a>\r\n\r\n而且带宽也是很神奇：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yishigongji_3.png\"><img class=\"size-full wp-image-912 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yishigongji_3.png\" alt=\"\" width=\"825\" height=\"316\" /></a>\r\n\r\n大概是5月7还是8号的时候，第一次出现这个情况，那时候就发现，网站死活打不开，或者N久才打开，整整持续了半天，到了晚上恢复正常；我一开始通过查看服务器的记录，怀疑是阿里云云盾在升级，导致服务异常，因为看到了阿里云盾的扫描；但是隔了一天又出现了，感觉就不对劲，向阿里云提交了工单，阿里云的反馈是，<strong>阿里云盾的扫描不会影响使用，查看记录没有看到有暴力破解迹象</strong>。\r\n\r\n这就奇怪了，因为持续了半天，网站又恢复正常，我也是觉得很奇怪；然后隔了一天，第三波又来了，这个时候感觉完全没有头绪，因为没有系统运维方面的经验，也没有网络安全攻防方面的积淀，自己排查不出原因。但是神奇的是，这个情况停了，好久都没出现过，不过隔了一周，又来了！\r\n\r\n不过这个时候发现一个有趣的事情：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yishigongji_1.png\"><img class=\"wp-image-909 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yishigongji_1-1024x214.png\" alt=\"\" width=\"822\" height=\"172\" /></a>\r\n\r\n好像每次出问题都有这个angelina什么鬼的垃圾评论出现，依稀感觉是有人在搞事情了？查了一下，这段垃圾评论的代码很有可能在利用struts2 Xwork在搞事情，不过不确定。\r\n\r\n于是乎，我屏蔽了这个评论的一些ip段，然后神奇的发现：\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yishigongji_4.png\"><img class=\"size-full wp-image-913 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yishigongji_4.png\" alt=\"\" width=\"93\" height=\"160\" /></a>\r\nCPU一下子就降下来了，不过还是处于比正常值高的状态，后来才恢复正常，看来确实是有东西在搞事情了，而且ip没屏蔽全。这里推荐一下阿里云的<strong>态势感知</strong>，刚发现的新功能。上了一天就检测到一些奇妙的东西：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yishigongji_5.png\"><img class=\"wp-image-914 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yishigongji_5-1024x688.png\" alt=\"\" width=\"797\" height=\"535\" /></a>\r\n\r\n之前吐槽过百度云观测，而且弃用了，现在这一板块拟补了漏洞之类的检测，而且比百度云观测功能更加全面（不是一点两点）；现在基本上阿里云一条龙服务了。\r\n\r\n现在网站挺正常，后续再继续观察是否又出现异常，研究一下如何解决网站的异常。', '一波未平一波又起——疑似被攻击导致网站有时候奇慢甚至奔溃', '', 'publish', 'open', 'closed', '', '%e4%b8%80%e6%b3%a2%e6%9c%aa%e5%b9%b3%e4%b8%80%e6%b3%a2%e5%8f%88%e8%b5%b7-%e7%96%91%e4%bc%bc%e8%a2%ab%e6%94%bb%e5%87%bb%e5%af%bc%e8%87%b4%e7%bd%91%e7%ab%99%e6%9c%89%e6%97%b6%e5%80%99', '', '', '2017-05-19 17:58:17', '2017-05-19 09:58:17', '', 0, 'https://www.gzpblog.com/?p=910', 0, 'post', '', 1),
(911, 1, '2017-05-19 16:06:19', '2017-05-19 08:06:19', '', 'yishigongji_2', '', 'inherit', 'open', 'closed', '', 'yishigongji_2', '', '', '2017-05-19 16:06:19', '2017-05-19 08:06:19', '', 910, 'https://www.gzpblog.com/wp-content/uploads/2017/05/yishigongji_2.png', 0, 'attachment', 'image/png', 0),
(912, 1, '2017-05-19 16:06:20', '2017-05-19 08:06:20', '', 'yishigongji_3', '', 'inherit', 'open', 'closed', '', 'yishigongji_3', '', '', '2017-05-19 16:06:20', '2017-05-19 08:06:20', '', 910, 'https://www.gzpblog.com/wp-content/uploads/2017/05/yishigongji_3.png', 0, 'attachment', 'image/png', 0),
(913, 1, '2017-05-19 17:32:29', '2017-05-19 09:32:29', '', 'yishigongji_4', '', 'inherit', 'open', 'closed', '', 'yishigongji_4', '', '', '2017-05-19 17:32:29', '2017-05-19 09:32:29', '', 910, 'https://www.gzpblog.com/wp-content/uploads/2017/05/yishigongji_4.png', 0, 'attachment', 'image/png', 0),
(914, 1, '2017-05-19 17:44:30', '2017-05-19 09:44:30', '', 'yishigongji_5', '', 'inherit', 'open', 'closed', '', 'yishigongji_5', '', '', '2017-05-19 17:44:30', '2017-05-19 09:44:30', '', 910, 'https://www.gzpblog.com/wp-content/uploads/2017/05/yishigongji_5.png', 0, 'attachment', 'image/png', 0),
(915, 1, '2017-05-19 17:50:22', '2017-05-19 09:50:22', '虽然说迁移到阿里云之后，其实还挺忙，没有时间折腾服务器之类的，所以也没过多优化，不过博客跑起来感觉也还行，速度可以。但是前段时间点开却发现，博客进不去了！\r\n\r\n情况就是，网站速度奇慢，甚至没反应，完全进不去。而出现这个问题之后自己突然又好了，然后隔一段时间又出现这个情况。我一开始关注到的情况是CPU爆高，有时候甚至达到100%，网站直接卡死：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yishigongji_2.png\"><img class=\"size-full wp-image-911 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yishigongji_2.png\" alt=\"\" width=\"404\" height=\"306\" /></a>\r\n\r\n而且带宽也是很神奇：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yishigongji_3.png\"><img class=\"size-full wp-image-912 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yishigongji_3.png\" alt=\"\" width=\"825\" height=\"316\" /></a>\r\n\r\n大概是5月7还是8号的时候，第一次出现这个情况，那时候就发现，网站死活打不开，或者N久才打开，整整持续了半天，到了晚上恢复正常；我一开始通过查看服务器的记录，怀疑是阿里云云盾在升级，导致服务异常，因为看到了阿里云盾的扫描；但是隔了一天又出现了，感觉就不对劲，向阿里云提交了工单，阿里云的反馈是，<strong>阿里云盾的扫描不会影响使用，查看记录没有看到有暴力破解迹象</strong>。\r\n\r\n这就奇怪了，因为持续了半天，网站又恢复正常，我也是觉得很奇怪；然后隔了一天，第三波又来了，这个时候感觉完全没有头绪，因为没有系统运维方面的经验，也没有网络安全攻防方面的积淀，自己排查不出原因。但是神奇的是，这个情况停了，好久都没出现过，不过打怪隔了一周，又来了！\r\n\r\n不过这个时候发现一个有趣的事情：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yishigongji_1.png\"><img class=\"wp-image-909 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yishigongji_1-1024x214.png\" alt=\"\" width=\"822\" height=\"172\" /></a>\r\n\r\n好像每次出问题都有这个angelina什么鬼的垃圾评论出现，依稀感觉是有人在搞事情了？查了一下，这段垃圾评论的代码很有可能在利用struts2 Xwork在搞事情，不过不确定。\r\n\r\n于是乎，我屏蔽了这个评论的一些ip段，然后神奇的发现：\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yishigongji_4.png\"><img class=\"size-full wp-image-913 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yishigongji_4.png\" alt=\"\" width=\"93\" height=\"160\" /></a>\r\nCPU一下子就降下来了，不过还是处于比正常值高的状态，后来才恢复正常，看来确实是有东西在搞事情了，而且ip没屏蔽全。这里推荐一下阿里云的<strong>态势感知</strong>，刚发现的新功能。上了一天就检测到一些奇妙的东西：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yishigongji_5.png\"><img class=\"wp-image-914 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yishigongji_5-1024x688.png\" alt=\"\" width=\"797\" height=\"535\" /></a>\r\n\r\n之前吐槽过百度云观测，而且弃用了，现在这一板块拟补了漏洞之类的检测，而且比百度云观测功能更加全面（不是一点两点）；现在基本上阿里云一条龙服务了。\r\n\r\n现在网站挺正常，后续再继续观察是否又出现异常，研究一下如何解决网站的异常。', '一波未平一波又起——疑似被攻击导致网站有时候奇慢甚至奔溃', '', 'inherit', 'closed', 'closed', '', '910-revision-v1', '', '', '2017-05-19 17:50:22', '2017-05-19 09:50:22', '', 910, 'https://www.gzpblog.com/20170519/915.html', 0, 'revision', '', 0),
(916, 1, '2017-05-19 17:58:17', '2017-05-19 09:58:17', '虽然说服务器迁移之后，其实还挺忙，没有时间折腾服务器之类的，所以也没过多优化，但是博客跑起来感觉也还行，速度可以。不过前段时间点开却发现，博客进不去了！\r\n\r\n情况就是，网站速度奇慢，甚至没反应，完全进不去。而出现这个问题之后自己突然又好了，然后隔一段时间又出现这个情况。我一开始关注到的情况是CPU爆高，有时候甚至达到100%，网站直接卡死：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yishigongji_2.png\"><img class=\"size-full wp-image-911 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yishigongji_2.png\" alt=\"\" width=\"404\" height=\"306\" /></a>\r\n\r\n而且带宽也是很神奇：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yishigongji_3.png\"><img class=\"size-full wp-image-912 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yishigongji_3.png\" alt=\"\" width=\"825\" height=\"316\" /></a>\r\n\r\n大概是5月7还是8号的时候，第一次出现这个情况，那时候就发现，网站死活打不开，或者N久才打开，整整持续了半天，到了晚上恢复正常；我一开始通过查看服务器的记录，怀疑是阿里云云盾在升级，导致服务异常，因为看到了阿里云盾的扫描；但是隔了一天又出现了，感觉就不对劲，向阿里云提交了工单，阿里云的反馈是，<strong>阿里云盾的扫描不会影响使用，查看记录没有看到有暴力破解迹象</strong>。\r\n\r\n这就奇怪了，因为持续了半天，网站又恢复正常，我也是觉得很奇怪；然后隔了一天，第三波又来了，这个时候感觉完全没有头绪，因为没有系统运维方面的经验，也没有网络安全攻防方面的积淀，自己排查不出原因。但是神奇的是，这个情况停了，好久都没出现过，不过隔了一周，又来了！\r\n\r\n不过这个时候发现一个有趣的事情：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yishigongji_1.png\"><img class=\"wp-image-909 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yishigongji_1-1024x214.png\" alt=\"\" width=\"822\" height=\"172\" /></a>\r\n\r\n好像每次出问题都有这个angelina什么鬼的垃圾评论出现，依稀感觉是有人在搞事情了？查了一下，这段垃圾评论的代码很有可能在利用struts2 Xwork在搞事情，不过不确定。\r\n\r\n于是乎，我屏蔽了这个评论的一些ip段，然后神奇的发现：\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yishigongji_4.png\"><img class=\"size-full wp-image-913 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yishigongji_4.png\" alt=\"\" width=\"93\" height=\"160\" /></a>\r\nCPU一下子就降下来了，不过还是处于比正常值高的状态，后来才恢复正常，看来确实是有东西在搞事情了，而且ip没屏蔽全。这里推荐一下阿里云的<strong>态势感知</strong>，刚发现的新功能。上了一天就检测到一些奇妙的东西：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/yishigongji_5.png\"><img class=\"wp-image-914 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/yishigongji_5-1024x688.png\" alt=\"\" width=\"797\" height=\"535\" /></a>\r\n\r\n之前吐槽过百度云观测，而且弃用了，现在这一板块拟补了漏洞之类的检测，而且比百度云观测功能更加全面（不是一点两点）；现在基本上阿里云一条龙服务了。\r\n\r\n现在网站挺正常，后续再继续观察是否又出现异常，研究一下如何解决网站的异常。', '一波未平一波又起——疑似被攻击导致网站有时候奇慢甚至奔溃', '', 'inherit', 'closed', 'closed', '', '910-revision-v1', '', '', '2017-05-19 17:58:17', '2017-05-19 09:58:17', '', 910, 'https://www.gzpblog.com/20170519/916.html', 0, 'revision', '', 0),
(1196, 1, '2017-08-08 18:02:57', '0000-00-00 00:00:00', '', '自动草稿', '', 'auto-draft', 'open', 'closed', '', '', '', '', '2017-08-08 18:02:57', '0000-00-00 00:00:00', '', 0, 'https://www.gzpblog.com/?p=1196', 0, 'post', '', 0),
(925, 1, '2017-05-24 12:01:21', '2017-05-24 04:01:21', '', '测试中文', '', 'inherit', 'open', 'closed', '', '%e6%b5%8b%e8%af%95%e4%b8%ad%e6%96%87', '', '', '2017-05-24 12:09:33', '2017-05-24 04:09:33', '', 926, 'https://www.gzpblog.com/wp-content/uploads/2017/05/测试中文.png', 0, 'attachment', 'image/png', 0),
(924, 1, '2017-05-24 11:58:54', '2017-05-24 03:58:54', '', 'laruance_word', '', 'inherit', 'open', 'closed', '', 'laruance_word', '', '', '2017-05-24 11:58:54', '2017-05-24 03:58:54', '', 0, 'https://www.gzpblog.com/wp-content/uploads/2017/05/laruance_word.jpg', 0, 'attachment', 'image/jpeg', 0),
(922, 1, '2017-05-24 11:58:51', '2017-05-24 03:58:51', '', 'laruance_1', '', 'inherit', 'open', 'closed', '', 'laruance_1', '', '', '2017-05-24 11:58:51', '2017-05-24 03:58:51', '', 0, 'https://www.gzpblog.com/wp-content/uploads/2017/05/laruance_1.png', 0, 'attachment', 'image/png', 0),
(923, 1, '2017-05-24 11:58:53', '2017-05-24 03:58:53', '', 'laruance_2', '', 'inherit', 'open', 'closed', '', 'laruance_2', '', '', '2017-05-24 11:58:53', '2017-05-24 03:58:53', '', 0, 'https://www.gzpblog.com/wp-content/uploads/2017/05/laruance_2.png', 0, 'attachment', 'image/png', 0),
(926, 1, '2017-05-24 12:14:43', '2017-05-24 04:14:43', '今天早上，看到一个神清气爽的东西：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/laruance_2.png\"><img class=\"size-full wp-image-923 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/laruance_2.png\" alt=\"\" width=\"342\" height=\"230\" /></a>\r\n\r\n鸟哥发了个微博，点开图看看：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/laruance_1.png\"><img class=\"wp-image-922 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/laruance_1-1024x609.png\" alt=\"\" width=\"654\" height=\"389\" /></a>\r\n\r\n卧槽，虎躯一震！PHP7出了有一段时间了，现在基本上我都用7了，这张图，还未放出的PHP7.2，又比PHP7快了不少；而重点在后面的，PHP-JIT，加入JIT的PHP，又要有几倍的提升啊！虽然PHP-JIT版本不知道什么时候能出，具体项目中的效果也不知道如何，但是这个已经够振奋人心了啊！坐等今年的PHP大会，看看会放出什么新闻！\r\n\r\n我大PHP不可能这么弱！不说了，怼代码了。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/laruance_word.jpg\"><img class=\"size-full wp-image-924 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/laruance_word.jpg\" alt=\"\" width=\"346\" height=\"495\" /></a>\r\n\r\n&nbsp;', '我的内心毫无波动，甚至还有点想怼代码', '', 'publish', 'open', 'closed', '', '%e6%88%91%e7%9a%84%e5%86%85%e5%bf%83%e6%af%ab%e6%97%a0%e6%b3%a2%e5%8a%a8%ef%bc%8c%e7%94%9a%e8%87%b3%e8%bf%98%e6%9c%89%e7%82%b9%e6%83%b3%e6%80%bc%e4%bb%a3%e7%a0%81', '', '', '2017-05-24 12:16:43', '2017-05-24 04:16:43', '', 0, 'https://www.gzpblog.com/?p=926', 0, 'post', '', 2),
(927, 1, '2017-05-24 12:14:36', '2017-05-24 04:14:36', '', 'PHP', '', 'inherit', 'open', 'closed', '', 'php', '', '', '2017-05-24 12:14:36', '2017-05-24 04:14:36', '', 926, 'https://www.gzpblog.com/wp-content/uploads/2017/05/PHP.jpg', 0, 'attachment', 'image/jpeg', 0),
(929, 1, '2017-05-24 12:16:43', '2017-05-24 04:16:43', '今天早上，看到一个神清气爽的东西：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/laruance_2.png\"><img class=\"size-full wp-image-923 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/laruance_2.png\" alt=\"\" width=\"342\" height=\"230\" /></a>\r\n\r\n鸟哥发了个微博，点开图看看：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/laruance_1.png\"><img class=\"wp-image-922 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/laruance_1-1024x609.png\" alt=\"\" width=\"654\" height=\"389\" /></a>\r\n\r\n卧槽，虎躯一震！PHP7出了有一段时间了，现在基本上我都用7了，这张图，还未放出的PHP7.2，又比PHP7快了不少；而重点在后面的，PHP-JIT，加入JIT的PHP，又要有几倍的提升啊！虽然PHP-JIT版本不知道什么时候能出，具体项目中的效果也不知道如何，但是这个已经够振奋人心了啊！坐等今年的PHP大会，看看会放出什么新闻！\r\n\r\n我大PHP不可能这么弱！不说了，怼代码了。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/laruance_word.jpg\"><img class=\"size-full wp-image-924 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/laruance_word.jpg\" alt=\"\" width=\"346\" height=\"495\" /></a>\r\n\r\n&nbsp;', '我的内心毫无波动，甚至还有点想怼代码', '', 'inherit', 'closed', 'closed', '', '926-revision-v1', '', '', '2017-05-24 12:16:43', '2017-05-24 04:16:43', '', 926, 'https://www.gzpblog.com/20170524/929.html', 0, 'revision', '', 0),
(928, 1, '2017-05-24 12:14:43', '2017-05-24 04:14:43', '今天早上，看到一个神清气爽的东西：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/laruance_2.png\"><img class=\"size-full wp-image-923 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/laruance_2.png\" alt=\"\" width=\"342\" height=\"230\" /></a>\r\n\r\n鸟哥发了个微博，点开图看看：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/laruance_1.png\"><img class=\"wp-image-922 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/laruance_1-1024x609.png\" alt=\"\" width=\"654\" height=\"389\" /></a>\r\n\r\n卧槽，虎躯一震！PHP7出了有一段时间了，现在基本上我都用7了，这张图，还未放出的PHP7.2，又比PHP7快了不少；而重点在后面的，PHP-JIT，加入JIT的PHP，又要有几倍的提升啊！虽然PHP-JIT版本不知道什么时候能出，具体项目中的效果也不知道如何，但是这个已经够振奋人心了啊！\r\n\r\n我大PHP不可能这么弱！不说了，怼代码了。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/laruance_word.jpg\"><img class=\"size-full wp-image-924 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/laruance_word.jpg\" alt=\"\" width=\"346\" height=\"495\" /></a>\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/测试中文.png\"><img class=\" wp-image-925 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/测试中文.png\" alt=\"\" width=\"493\" height=\"768\" /></a>', '我的内心毫无波动，甚至还有点想怼代码', '', 'inherit', 'closed', 'closed', '', '926-revision-v1', '', '', '2017-05-24 12:14:43', '2017-05-24 04:14:43', '', 926, 'https://www.gzpblog.com/20170524/928.html', 0, 'revision', '', 0),
(930, 1, '2017-05-25 10:54:21', '2017-05-25 02:54:21', '<h2>什么是ab</h2>\r\n<div>ab（Apache HTTP server benchmarking tool）是Apache的HTTP服务器基准测试工具。ab命令会创建很多的并发访问线程，模拟多个访问者同时对某一URL地址进行访问。ab的测试目标是基于URL的，因此，既可以用来测试Apache的负载压力，也可以测试nginx、lighthttp、tomcat、IIS等其它Web服务器的压力。</div>\r\n<h2>基本使用</h2>\r\n不管是linux还是windows使用方法都差不多，简单粗暴，如下两条：\r\n<ul>\r\n 	<li>首先进入Apache的bin目录，然后命令行操作</li>\r\n 	<li>命令行执行；例如：ab -n 100 -c 100 http://127.0.0.1/</li>\r\n</ul>\r\n<strong>常用参数</strong>：“-n” 数值：总请求数。“-c” 数值：并发用户数。\r\n<div><strong>注</strong>：url必须在后方加上“/”，或指定相应文件，否则报错。更多参数查看ab工具文档: <a href=\"http://httpd.apache.org/docs/\" target=\"_blank\" rel=\"noopener noreferrer\">http://httpd.apache.org/docs/</a></div>\r\n<h2>测试报告</h2>\r\n执行完命令后，如果测试完成，会有一些这样的信息：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/ab测试.png\"><img class=\"size-full wp-image-931 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/ab测试.png\" alt=\"\" width=\"613\" height=\"652\" /></a>\r\n\r\n大概的什么意思已经标明，在实际测试中会经常关注的指标有三个：\r\n<ol>\r\n 	<li>\r\n<div><strong>Requests per second</strong></div>\r\n<div>平均每秒请求数，即<strong>吞吐率</strong>；指的是<strong>某个并发用户数下单位时间内处理的请求数</strong>。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。</div>\r\n<div>计算公式：总请求数 / 处理完成这些请求数所花费的时间，即：</div>\r\n<div>Request per second = Complete requests / Time taken for tests</div></li>\r\n 	<li>\r\n<div><strong>Time per request</strong></div>\r\n<div>每次并发请求平均耗时，即<strong>用户平均请求等待时间</strong>。</div>\r\n<div>计算公式：处理完成所有请求数所花费的时间/ （总请求数 / 并发用户数），即：</div>\r\n<div>Time per request = Time taken for tests /（ Complete requests / Concurrency Level）</div></li>\r\n 	<li>\r\n<div><strong>Time per request（across all concurrent requests）</strong></div>\r\n<div>平均每个请求的耗时，即<strong>服务器平均请求等待时间</strong>。</div>\r\n<div>计算公式：处理完成所有请求数所花费的时间 / 总请求数，即：</div>\r\n<div>Time per request（across all concurrent requests）= Time taken for tests / Complete requests</div>\r\n<div>可以看到，它是吞吐率的倒数；同时，它也=用户平均请求等待时间/并发用户数，即：Time per request / Concurrency Level</div></li>\r\n</ol>\r\n<h2>常见问题</h2>\r\n<h4>登录问题</h4>\r\n<div>进行压力测试时URL需要登录时请求无法成功，怎么办？可以：</div>\r\n<ol>\r\n 	<li>\r\n<div>先用账户和密码登录</div></li>\r\n 	<li>\r\n<div>用开发者工具找到标识这个会话的Cookie值（Session ID）记下来</div></li>\r\n 	<li>\r\n<div>执行命令：</div>\r\n<div>一个Cookie情况时：ab －n 100 －C key＝value http://test.com/</div>\r\n<div>多个Cookie情况时，设置Header：ab -n 100 -H “Cookie: Key1=Value1; Key2=Value2” http://test.com/</div></li>\r\n</ol>\r\n<h4>报错:apr_pollset_poll:The timeout specified has expired (70007)</h4>\r\n原因是响应超负荷了，从两个点解决：\r\n\r\n一个是查看请求的url是否正常，还有是看看是否服务器已经扛不住这个测试；\r\n\r\n加-k参数可以直接杀死卡住的进程以不报错', '用ab（ApacheBench）进行HTTP压力测试', '', 'publish', 'open', 'closed', '', '%e7%94%a8ab%ef%bc%88apachebench%ef%bc%89%e8%bf%9b%e8%a1%8chttp%e5%8e%8b%e5%8a%9b%e6%b5%8b%e8%af%95', '', '', '2017-05-25 10:57:06', '2017-05-25 02:57:06', '', 0, 'https://www.gzpblog.com/?p=930', 0, 'post', '', 1),
(931, 1, '2017-05-25 10:11:56', '2017-05-25 02:11:56', '', 'ab测试', '', 'inherit', 'open', 'closed', '', 'ab%e6%b5%8b%e8%af%95', '', '', '2017-05-25 10:11:56', '2017-05-25 02:11:56', '', 930, 'https://www.gzpblog.com/wp-content/uploads/2017/05/ab测试.png', 0, 'attachment', 'image/png', 0),
(932, 1, '2017-05-25 10:54:14', '2017-05-25 02:54:14', '', 'SupportApache-small', '', 'inherit', 'open', 'closed', '', 'supportapache-small', '', '', '2017-05-25 10:54:14', '2017-05-25 02:54:14', '', 930, 'https://www.gzpblog.com/wp-content/uploads/2017/05/SupportApache-small.png', 0, 'attachment', 'image/png', 0),
(933, 1, '2017-05-25 10:54:21', '2017-05-25 02:54:21', '<h2>什么是ab</h2>\r\n<div>ab（Apache HTTP server benchmarking tool）是Apache的HTTP服务器基准测试工具。ab命令会创建很多的并发访问线程，模拟多个访问者同时对某一URL地址进行访问。ab的测试目标是基于URL的，因此，既可以用来测试Apache的负载压力，也可以测试nginx、lighthttp、tomcat、IIS等其它Web服务器的压力。</div>\r\n<h2>基本使用</h2>\r\n不管是linux还是windows使用方法都差不多，简单粗暴，如下两条：\r\n<ul>\r\n 	<li>首先进入Apache的bin目录，然后命令行操作</li>\r\n 	<li>命令行执行；例如：ab -n 100 -c 100 http://127.0.0.1/</li>\r\n</ul>\r\n<strong>常用参数</strong>：“-n” 数值：总请求数。“-c” 数值：并发用户数，即每次请求数。\r\n<div><strong>注</strong>：url必须在后方加上“/”，或指定相应文件，否则报错。更多参数查看ab工具文档: <a href=\"http://httpd.apache.org/docs/\" target=\"_blank\" rel=\"noopener noreferrer\">http://httpd.apache.org/docs/</a></div>\r\n<h2>测试报告</h2>\r\n执行完命令后，如果测试完成，会有一些这样的信息：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/ab测试.png\"><img class=\"size-full wp-image-931 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/ab测试.png\" alt=\"\" width=\"613\" height=\"652\" /></a>\r\n\r\n大概的什么意思已经标明，在实际测试中会经常关注的指标有三个：\r\n<ol>\r\n 	<li>\r\n<div><strong>Requests per second</strong></div>\r\n<div>平均每秒请求数，即<strong>吞吐率</strong>；指的是<strong>某个并发用户数下单位时间内处理的请求数</strong>。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。</div>\r\n<div>计算公式：总请求数 / 处理完成这些请求数所花费的时间，即：</div>\r\n<div>Request per second = Complete requests / Time taken for tests</div></li>\r\n 	<li>\r\n<div><strong>Time per request</strong></div>\r\n<div>每次并发请求平均耗时，即<strong>用户平均请求等待时间</strong>。</div>\r\n<div>计算公式：处理完成所有请求数所花费的时间/ （总请求数 / 并发用户数），即：</div>\r\n<div>Time per request = Time taken for tests /（ Complete requests / Concurrency Level）</div></li>\r\n 	<li>\r\n<div><strong>Time per request（across all concurrent requests）</strong></div>\r\n<div>平均每个请求的耗时，即<strong>服务器平均请求等待时间</strong>。</div>\r\n<div>计算公式：处理完成所有请求数所花费的时间 / 总请求数，即：</div>\r\n<div>Time per request（across all concurrent requests）= Time taken for tests / Complete requests</div>\r\n<div>可以看到，它是吞吐率的倒数；同时，它也=用户平均请求等待时间/并发用户数，即：Time per request / Concurrency Level</div></li>\r\n</ol>\r\n<h2>常见问题</h2>\r\n<h4>登录问题</h4>\r\n<div>进行压力测试时URL需要登录时请求无法成功，怎么办？可以：</div>\r\n<ol>\r\n 	<li>\r\n<div>先用账户和密码登录</div></li>\r\n 	<li>\r\n<div>用开发者工具找到标识这个会话的Cookie值（Session ID）记下来</div></li>\r\n 	<li>\r\n<div>执行命令：</div>\r\n<div>一个Cookie情况时：ab －n 100 －C key＝value http://test.com/</div>\r\n<div>多个Cookie情况时，设置Header：ab -n 100 -H “Cookie: Key1=Value1; Key2=Value2” http://test.com/</div></li>\r\n</ol>\r\n<h4>报错:apr_pollset_poll:The timeout specified has expired (70007)</h4>\r\n原因是响应超负荷了，从两个点解决：\r\n\r\n一个是查看请求的url是否正常，还有是看看是否服务器已经扛不住这个测试；\r\n\r\n加-k参数可以直接杀死卡住的进程以不报错', '用ab（ApacheBench）进行HTTP压力测试', '', 'inherit', 'closed', 'closed', '', '930-revision-v1', '', '', '2017-05-25 10:54:21', '2017-05-25 02:54:21', '', 930, 'https://www.gzpblog.com/20170525/933.html', 0, 'revision', '', 0),
(934, 1, '2017-05-25 10:57:06', '2017-05-25 02:57:06', '<h2>什么是ab</h2>\r\n<div>ab（Apache HTTP server benchmarking tool）是Apache的HTTP服务器基准测试工具。ab命令会创建很多的并发访问线程，模拟多个访问者同时对某一URL地址进行访问。ab的测试目标是基于URL的，因此，既可以用来测试Apache的负载压力，也可以测试nginx、lighthttp、tomcat、IIS等其它Web服务器的压力。</div>\r\n<h2>基本使用</h2>\r\n不管是linux还是windows使用方法都差不多，简单粗暴，如下两条：\r\n<ul>\r\n 	<li>首先进入Apache的bin目录，然后命令行操作</li>\r\n 	<li>命令行执行；例如：ab -n 100 -c 100 http://127.0.0.1/</li>\r\n</ul>\r\n<strong>常用参数</strong>：“-n” 数值：总请求数。“-c” 数值：并发用户数。\r\n<div><strong>注</strong>：url必须在后方加上“/”，或指定相应文件，否则报错。更多参数查看ab工具文档: <a href=\"http://httpd.apache.org/docs/\" target=\"_blank\" rel=\"noopener noreferrer\">http://httpd.apache.org/docs/</a></div>\r\n<h2>测试报告</h2>\r\n执行完命令后，如果测试完成，会有一些这样的信息：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/05/ab测试.png\"><img class=\"size-full wp-image-931 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/05/ab测试.png\" alt=\"\" width=\"613\" height=\"652\" /></a>\r\n\r\n大概的什么意思已经标明，在实际测试中会经常关注的指标有三个：\r\n<ol>\r\n 	<li>\r\n<div><strong>Requests per second</strong></div>\r\n<div>平均每秒请求数，即<strong>吞吐率</strong>；指的是<strong>某个并发用户数下单位时间内处理的请求数</strong>。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。</div>\r\n<div>计算公式：总请求数 / 处理完成这些请求数所花费的时间，即：</div>\r\n<div>Request per second = Complete requests / Time taken for tests</div></li>\r\n 	<li>\r\n<div><strong>Time per request</strong></div>\r\n<div>每次并发请求平均耗时，即<strong>用户平均请求等待时间</strong>。</div>\r\n<div>计算公式：处理完成所有请求数所花费的时间/ （总请求数 / 并发用户数），即：</div>\r\n<div>Time per request = Time taken for tests /（ Complete requests / Concurrency Level）</div></li>\r\n 	<li>\r\n<div><strong>Time per request（across all concurrent requests）</strong></div>\r\n<div>平均每个请求的耗时，即<strong>服务器平均请求等待时间</strong>。</div>\r\n<div>计算公式：处理完成所有请求数所花费的时间 / 总请求数，即：</div>\r\n<div>Time per request（across all concurrent requests）= Time taken for tests / Complete requests</div>\r\n<div>可以看到，它是吞吐率的倒数；同时，它也=用户平均请求等待时间/并发用户数，即：Time per request / Concurrency Level</div></li>\r\n</ol>\r\n<h2>常见问题</h2>\r\n<h4>登录问题</h4>\r\n<div>进行压力测试时URL需要登录时请求无法成功，怎么办？可以：</div>\r\n<ol>\r\n 	<li>\r\n<div>先用账户和密码登录</div></li>\r\n 	<li>\r\n<div>用开发者工具找到标识这个会话的Cookie值（Session ID）记下来</div></li>\r\n 	<li>\r\n<div>执行命令：</div>\r\n<div>一个Cookie情况时：ab －n 100 －C key＝value http://test.com/</div>\r\n<div>多个Cookie情况时，设置Header：ab -n 100 -H “Cookie: Key1=Value1; Key2=Value2” http://test.com/</div></li>\r\n</ol>\r\n<h4>报错:apr_pollset_poll:The timeout specified has expired (70007)</h4>\r\n原因是响应超负荷了，从两个点解决：\r\n\r\n一个是查看请求的url是否正常，还有是看看是否服务器已经扛不住这个测试；\r\n\r\n加-k参数可以直接杀死卡住的进程以不报错', '用ab（ApacheBench）进行HTTP压力测试', '', 'inherit', 'closed', 'closed', '', '930-revision-v1', '', '', '2017-05-25 10:57:06', '2017-05-25 02:57:06', '', 930, 'https://www.gzpblog.com/20170525/934.html', 0, 'revision', '', 0),
(935, 1, '2017-05-26 23:20:45', '2017-05-26 15:20:45', '', '首页', '', 'publish', 'closed', 'closed', '', '%e9%a6%96%e9%a1%b5-2', '', '', '2017-06-04 00:57:35', '2017-06-03 16:57:35', '', 0, 'https://www.gzpblog.com/?p=935', 1, 'nav_menu_item', '', 0),
(936, 1, '2017-05-26 23:20:45', '2017-05-26 15:20:45', '', '关于 <span class=\"caret\"></span>', '', 'publish', 'closed', 'closed', '', '%e5%85%b3%e4%ba%8e', '', '', '2017-06-04 00:57:35', '2017-06-03 16:57:35', '', 0, 'https://www.gzpblog.com/?p=936', 4, 'nav_menu_item', '', 0),
(937, 1, '2017-05-26 23:20:45', '2017-05-26 15:20:45', ' ', '', '', 'publish', 'closed', 'closed', '', '937', '', '', '2017-06-04 00:57:35', '2017-06-03 16:57:35', '', 0, 'https://www.gzpblog.com/?p=937', 6, 'nav_menu_item', '', 0),
(938, 1, '2017-05-26 23:20:45', '2017-05-26 15:20:45', ' ', '', '', 'publish', 'closed', 'closed', '', '938', '', '', '2017-06-04 00:57:35', '2017-06-03 16:57:35', '', 0, 'https://www.gzpblog.com/?p=938', 2, 'nav_menu_item', '', 0),
(939, 1, '2017-05-26 23:20:45', '2017-05-26 15:20:45', ' ', '', '', 'publish', 'closed', 'closed', '', '939', '', '', '2017-06-04 00:57:35', '2017-06-03 16:57:35', '', 0, 'https://www.gzpblog.com/?p=939', 5, 'nav_menu_item', '', 0),
(944, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '944', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 3, 'https://www.gzpblog.com/?p=944', 1, 'nav_menu_item', '', 0),
(945, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '945', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 3, 'https://www.gzpblog.com/?p=945', 2, 'nav_menu_item', '', 0),
(946, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '946', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 3, 'https://www.gzpblog.com/?p=946', 3, 'nav_menu_item', '', 0),
(947, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '947', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 10, 'https://www.gzpblog.com/?p=947', 4, 'nav_menu_item', '', 0),
(948, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '948', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 10, 'https://www.gzpblog.com/?p=948', 13, 'nav_menu_item', '', 0),
(949, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '949', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 10, 'https://www.gzpblog.com/?p=949', 18, 'nav_menu_item', '', 0),
(951, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '951', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 69, 'https://www.gzpblog.com/?p=951', 21, 'nav_menu_item', '', 0),
(952, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '952', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 69, 'https://www.gzpblog.com/?p=952', 19, 'nav_menu_item', '', 0),
(953, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '953', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 69, 'https://www.gzpblog.com/?p=953', 22, 'nav_menu_item', '', 0),
(954, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '954', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 18, 'https://www.gzpblog.com/?p=954', 23, 'nav_menu_item', '', 0),
(955, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '955', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 18, 'https://www.gzpblog.com/?p=955', 25, 'nav_menu_item', '', 0),
(956, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '956', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 70, 'https://www.gzpblog.com/?p=956', 14, 'nav_menu_item', '', 0),
(957, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '957', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 70, 'https://www.gzpblog.com/?p=957', 24, 'nav_menu_item', '', 0),
(958, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '958', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 71, 'https://www.gzpblog.com/?p=958', 16, 'nav_menu_item', '', 0),
(959, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', 'PHP轻量级开源接口框架', '', '', 'publish', 'closed', 'closed', '', '959', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 66, 'https://www.gzpblog.com/?p=959', 11, 'nav_menu_item', '', 0),
(960, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '960', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 66, 'https://www.gzpblog.com/?p=960', 8, 'nav_menu_item', '', 0),
(962, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', '渐进式javascript框架', '', '', 'publish', 'closed', 'closed', '', '962', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 66, 'https://www.gzpblog.com/?p=962', 15, 'nav_menu_item', '', 0),
(963, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '963', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 11, 'https://www.gzpblog.com/?p=963', 10, 'nav_menu_item', '', 0),
(964, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '964', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 11, 'https://www.gzpblog.com/?p=964', 12, 'nav_menu_item', '', 0),
(965, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '965', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 11, 'https://www.gzpblog.com/?p=965', 9, 'nav_menu_item', '', 0),
(966, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '966', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 4, 'https://www.gzpblog.com/?p=966', 26, 'nav_menu_item', '', 0),
(967, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '967', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 4, 'https://www.gzpblog.com/?p=967', 27, 'nav_menu_item', '', 0),
(968, 1, '2017-06-01 01:40:46', '2017-05-31 17:40:46', ' ', '', '', 'publish', 'closed', 'closed', '', '968', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 4, 'https://www.gzpblog.com/?p=968', 28, 'nav_menu_item', '', 0),
(969, 1, '2017-06-01 01:46:49', '2017-05-31 17:46:49', '', '友链', '', 'publish', 'open', 'closed', '', 'friendlink', '', '', '2017-06-01 12:31:28', '2017-06-01 04:31:28', '', 0, 'https://www.gzpblog.com/?page_id=969', 0, 'page', '', 2),
(970, 1, '2017-06-01 01:46:49', '2017-05-31 17:46:49', '', '友链', '', 'inherit', 'closed', 'closed', '', '969-revision-v1', '', '', '2017-06-01 01:46:49', '2017-05-31 17:46:49', '', 969, 'https://www.gzpblog.com/20170601/970.html', 0, 'revision', '', 0),
(971, 1, '2017-06-01 01:47:19', '2017-05-31 17:47:19', ' ', '', '', 'publish', 'closed', 'closed', '', '971', '', '', '2017-06-04 00:57:35', '2017-06-03 16:57:35', '', 0, 'https://www.gzpblog.com/?p=971', 3, 'nav_menu_item', '', 0),
(1014, 1, '2017-06-08 17:05:20', '2017-06-08 09:05:20', ' ', '', '', 'publish', 'closed', 'closed', '', '1014', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 10, 'https://www.gzpblog.com/?p=1014', 17, 'nav_menu_item', '', 0),
(975, 1, '2017-06-01 10:02:56', '2017-06-01 02:02:56', '', '链接收藏', '', 'inherit', 'closed', 'closed', '', '974-revision-v1', '', '', '2017-06-01 10:02:56', '2017-06-01 02:02:56', '', 974, 'https://www.gzpblog.com/20170601/975.html', 0, 'revision', '', 0),
(976, 1, '2017-06-01 10:54:54', '2017-06-01 02:54:54', '<h2>服务器</h2>\r\n<h3>性能优化</h3>\r\n<a href=\"https://www.gzpblog.com/20170304/751.html\" target=\"_blank\" rel=\"noopener noreferrer\">服务器由阿里云虚拟主机转云服务器ECS实践（二）性能优化</a>\r\n<h3>疑难杂症</h3>\r\n<a href=\"https://www.gzpblog.com/20170311/788.html\" target=\"_blank\" rel=\"noopener noreferrer\">Apache间歇性500服务器错误探究</a>\r\n\r\n&nbsp;\r\n<h2>WebServer</h2>\r\n<h3>Nginx</h3>\r\n<a href=\"https://www.gzpblog.com/20161230/563.html\" target=\"_blank\" rel=\"noopener noreferrer\">windows下解决Nginx+php-cgi线程并发问题</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170209/619.html\" target=\"_blank\" rel=\"noopener noreferrer\">解决windows下php-cgi进程经常自动关闭</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20161215/542.html\" target=\"_blank\" rel=\"noopener noreferrer\">支持Pathinfo模式的Nginx配置</a>\r\n\r\n&nbsp;\r\n<h2>HTTP相关</h2>\r\n<h3>HTTPS</h3>\r\n<a href=\"https://www.gzpblog.com/20170305/785.html\" target=\"_blank\" rel=\"noopener noreferrer\">全站HTTP转HTTPS实践（WordPress+阿里云）</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170321/835.html\" target=\"_blank\" rel=\"noopener noreferrer\">HTTPS进阶优化（一）</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170316/804.html\" target=\"_blank\" rel=\"noopener noreferrer\">升级到HTTP/2，性能大提升</a>\r\n\r\n&nbsp;\r\n<h2>容器技术</h2>\r\n<h3>Docker</h3>\r\n<a href=\"https://www.gzpblog.com/20170612/1020.html\" target=\"_blank\" rel=\"noopener noreferrer\">认识Docker</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170705/1126.html\" target=\"_blank\" rel=\"noopener noreferrer\">Win10安装使用Docker for Windows</a>\r\n\r\n&nbsp;\r\n<h2>主机环境</h2>\r\n<h3>Linux</h3>\r\n<a href=\"https://www.gzpblog.com/20170303/731.html\" target=\"_blank\" rel=\"noopener noreferrer\">Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）</a>\r\n<h3>Windows</h3>\r\n<a href=\"https://www.gzpblog.com/20160118/6.html\" target=\"_blank\" rel=\"noopener noreferrer\">Windows下搭建PHP开发环境：Apache2.4+PHP5.6+MySQL5.6</a>\r\n\r\n&nbsp;', '建站技术', '', 'publish', 'closed', 'closed', '', 'networktech', '', '', '2017-07-05 15:24:11', '2017-07-05 07:24:11', '', 0, 'https://www.gzpblog.com/?page_id=976', 0, 'page', '', 0),
(977, 1, '2017-06-01 10:54:54', '2017-06-01 02:54:54', '<h2>主机环境</h2>\r\n<h3>Linux</h3>\r\n<a href=\"https://www.gzpblog.com/20170303/731.html\" target=\"_blank\" rel=\"noopener noreferrer\">Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）</a>\r\n<h3>Windows</h3>\r\n<a href=\"https://www.gzpblog.com/20160118/6.html\" target=\"_blank\" rel=\"noopener noreferrer\">Windows下搭建PHP开发环境：Apache2.4+PHP5.6+MySQL5.6</a>\r\n\r\n&nbsp;', '建站技术', '', 'inherit', 'closed', 'closed', '', '976-revision-v1', '', '', '2017-06-01 10:54:54', '2017-06-01 02:54:54', '', 976, 'https://www.gzpblog.com/20170601/977.html', 0, 'revision', '', 0),
(978, 1, '2017-06-01 11:10:08', '2017-06-01 03:10:08', '<h2>PHP</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170718/1161.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」关于PHP标准规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-1 基础编码规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170620/1034.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-2 编码风格规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170707/1133.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-3 日志接口规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170711/1138.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-4 自动加载规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170714/1147.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-6 缓存接口规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170713/1141.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP正则表达式</a>\r\n<h3>应用</h3>\r\n<a href=\"https://www.gzpblog.com/20170718/1151.html\" target=\"_blank\" rel=\"noopener noreferrer\">消息队列及PHP中的简单实现与应用</a>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20160421/26.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPExcel：PHP导出Excel文件</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1041.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPMailer：PHP的邮件发送类库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1045.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code：生成二维码</a>\r\n<h3>Thinkphp</h3>\r\n<a href=\"https://www.gzpblog.com/20161230/561.html\" target=\"_blank\" rel=\"noopener noreferrer\">基于Thinkphp5的cURL封装类</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170330/850.html\" target=\"_blank\" rel=\"noopener noreferrer\">阿里云Oss+Thinkphp5，Web一站式可拓展包</a>\r\n<h3>Workerman</h3>\r\n<a href=\"https://www.gzpblog.com/20170720/1166.html\" target=\"_blank\" rel=\"noopener noreferrer\">用Workerman快速实现Socket服务</a>\r\n\r\n&nbsp;\r\n<h2>Javascript</h2>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20170622/1053.html\" target=\"_blank\" rel=\"noopener noreferrer\">QRCode.js：基于JQuery的生成二维码JS库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170623/1059.html\" target=\"_blank\" rel=\"noopener noreferrer\">PACE：页面自动加载进度插件</a>\r\n\r\n&nbsp;\r\n<h2>前端综合</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170623/1062.html\" target=\"_blank\" rel=\"noopener noreferrer\">客户端实现WebSocket</a>\r\n\r\n&nbsp;\r\n<h2>数据库</h2>\r\n<h3>MySQL</h3>\r\n<a href=\"https://www.gzpblog.com/20161115/503.html\" target=\"_blank\" rel=\"noopener noreferrer\">高性能MySQL——MySQL架构</a>\r\n\r\n&nbsp;\r\n<h2>工具</h2>\r\n<h3>版本控制</h3>\r\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\r\n<h3>代码管理</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\r\n<h3>测试相关</h3>\r\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170627/1081.html\" target=\"_blank\" rel=\"noopener noreferrer\">Wireshark基础用法：用Wireshark抓包分析网络通讯</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170629/1104.html\" target=\"_blank\" rel=\"noopener noreferrer\">用 Fiddler 进行HTTP请求调试</a>\r\n<h3>其它</h3>\r\n<a href=\"https://www.gzpblog.com/20170607/1000.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Gitbook编写书籍文档</a>', '编程学习', '', 'publish', 'closed', 'closed', '', 'learningprogram', '', '', '2017-07-20 16:40:35', '2017-07-20 08:40:35', '', 0, 'https://www.gzpblog.com/?page_id=978', 0, 'page', '', 0),
(979, 1, '2017-06-01 11:10:08', '2017-06-01 03:10:08', '<h2>其它</h2>\r\n<h3>工具</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-revision-v1', '', '', '2017-06-01 11:10:08', '2017-06-01 03:10:08', '', 978, 'https://www.gzpblog.com/20170601/979.html', 0, 'revision', '', 0),
(980, 1, '2017-07-05 15:23:16', '2017-07-05 07:23:16', '<h2>服务器</h2>\n<h3>性能优化</h3>\n<a href=\"https://www.gzpblog.com/20170304/751.html\" target=\"_blank\" rel=\"noopener noreferrer\">服务器由阿里云虚拟主机转云服务器ECS实践（二）性能优化</a>\n<h3>疑难杂症</h3>\n<a href=\"https://www.gzpblog.com/20170311/788.html\" target=\"_blank\" rel=\"noopener noreferrer\">Apache间歇性500服务器错误探究</a>\n\n&nbsp;\n<h2>WebServer</h2>\n<h3>Nginx</h3>\n<a href=\"https://www.gzpblog.com/20161230/563.html\" target=\"_blank\" rel=\"noopener noreferrer\">windows下解决Nginx+php-cgi线程并发问题</a>\n\n<a href=\"https://www.gzpblog.com/20170209/619.html\" target=\"_blank\" rel=\"noopener noreferrer\">解决windows下php-cgi进程经常自动关闭</a>\n\n<a href=\"https://www.gzpblog.com/20161215/542.html\" target=\"_blank\" rel=\"noopener noreferrer\">支持Pathinfo模式的Nginx配置</a>\n\n&nbsp;\n<h2>HTTP相关</h2>\n<h3>HTTPS</h3>\n<a href=\"https://www.gzpblog.com/20170305/785.html\" target=\"_blank\" rel=\"noopener noreferrer\">全站HTTP转HTTPS实践（WordPress+阿里云）</a>\n\n<a href=\"https://www.gzpblog.com/20170321/835.html\" target=\"_blank\" rel=\"noopener noreferrer\">HTTPS进阶优化（一）</a>\n\n<a href=\"https://www.gzpblog.com/20170316/804.html\" target=\"_blank\" rel=\"noopener noreferrer\">升级到HTTP/2，性能大提升</a>\n\n&nbsp;\n<h2>容器技术</h2>\n<h3>Docker</h3>\n&nbsp;\n\n&nbsp;\n<h2>主机环境</h2>\n<h3>Linux</h3>\n<a href=\"https://www.gzpblog.com/20170303/731.html\" target=\"_blank\" rel=\"noopener noreferrer\">Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）</a>\n<h3>Windows</h3>\n<a href=\"https://www.gzpblog.com/20160118/6.html\" target=\"_blank\" rel=\"noopener noreferrer\">Windows下搭建PHP开发环境：Apache2.4+PHP5.6+MySQL5.6</a>\n\n&nbsp;', '建站技术', '', 'inherit', 'closed', 'closed', '', '976-autosave-v1', '', '', '2017-07-05 15:23:16', '2017-07-05 07:23:16', '', 976, 'https://www.gzpblog.com/20170601/980.html', 0, 'revision', '', 0),
(981, 1, '2017-06-01 11:42:40', '2017-06-01 03:42:40', '<h2>服务器</h2>\r\n<h3>性能优化</h3>\r\n<a href=\"https://www.gzpblog.com/20170304/751.html\" target=\"_blank\" rel=\"noopener noreferrer\">服务器由阿里云虚拟主机转云服务器ECS实践（二）性能优化</a>\r\n\r\n&nbsp;\r\n<h2>HTTP相关</h2>\r\n<h3>HTTPS</h3>\r\n<a href=\"https://www.gzpblog.com/20170305/785.html\" target=\"_blank\" rel=\"noopener noreferrer\">全站HTTP转HTTPS实践（WordPress+阿里云）</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170321/835.html\" target=\"_blank\" rel=\"noopener noreferrer\">HTTPS进阶优化（一）</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170316/804.html\" target=\"_blank\" rel=\"noopener noreferrer\">升级到HTTP/2，性能大提升</a>\r\n\r\n&nbsp;\r\n<h2>主机环境</h2>\r\n<h3>Linux</h3>\r\n<a href=\"https://www.gzpblog.com/20170303/731.html\" target=\"_blank\" rel=\"noopener noreferrer\">Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）</a>\r\n<h3>Windows</h3>\r\n<a href=\"https://www.gzpblog.com/20160118/6.html\" target=\"_blank\" rel=\"noopener noreferrer\">Windows下搭建PHP开发环境：Apache2.4+PHP5.6+MySQL5.6</a>\r\n\r\n&nbsp;', '建站技术', '', 'inherit', 'closed', 'closed', '', '976-revision-v1', '', '', '2017-06-01 11:42:40', '2017-06-01 03:42:40', '', 976, 'https://www.gzpblog.com/20170601/981.html', 0, 'revision', '', 0),
(982, 1, '2017-06-01 11:49:57', '2017-06-01 03:49:57', '<h2>服务器</h2>\r\n<h3>性能优化</h3>\r\n<a href=\"https://www.gzpblog.com/20170304/751.html\" target=\"_blank\" rel=\"noopener noreferrer\">服务器由阿里云虚拟主机转云服务器ECS实践（二）性能优化</a>\r\n<h3>疑难杂症</h3>\r\n&nbsp;\r\n<h2>WebServer</h2>\r\n<h3>Nginx</h3>\r\n<a href=\"https://www.gzpblog.com/20161230/563.html\" target=\"_blank\" rel=\"noopener noreferrer\">windows下解决Nginx+php-cgi线程并发问题</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170209/619.html\" target=\"_blank\" rel=\"noopener noreferrer\">解决windows下php-cgi进程经常自动关闭</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20161215/542.html\" target=\"_blank\" rel=\"noopener noreferrer\">支持Pathinfo模式的Nginx配置</a>\r\n\r\n&nbsp;\r\n<h2>HTTP相关</h2>\r\n<h3>HTTPS</h3>\r\n<a href=\"https://www.gzpblog.com/20170305/785.html\" target=\"_blank\" rel=\"noopener noreferrer\">全站HTTP转HTTPS实践（WordPress+阿里云）</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170321/835.html\" target=\"_blank\" rel=\"noopener noreferrer\">HTTPS进阶优化（一）</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170316/804.html\" target=\"_blank\" rel=\"noopener noreferrer\">升级到HTTP/2，性能大提升</a>\r\n\r\n&nbsp;\r\n<h2>主机环境</h2>\r\n<h3>Linux</h3>\r\n<a href=\"https://www.gzpblog.com/20170303/731.html\" target=\"_blank\" rel=\"noopener noreferrer\">Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）</a>\r\n<h3>Windows</h3>\r\n<a href=\"https://www.gzpblog.com/20160118/6.html\" target=\"_blank\" rel=\"noopener noreferrer\">Windows下搭建PHP开发环境：Apache2.4+PHP5.6+MySQL5.6</a>\r\n\r\n&nbsp;', '建站技术', '', 'inherit', 'closed', 'closed', '', '976-revision-v1', '', '', '2017-06-01 11:49:57', '2017-06-01 03:49:57', '', 976, 'https://www.gzpblog.com/20170601/982.html', 0, 'revision', '', 0),
(983, 1, '2017-06-01 11:52:29', '2017-06-01 03:52:29', '<h2>服务器</h2>\r\n<h3>性能优化</h3>\r\n<a href=\"https://www.gzpblog.com/20170304/751.html\" target=\"_blank\" rel=\"noopener noreferrer\">服务器由阿里云虚拟主机转云服务器ECS实践（二）性能优化</a>\r\n<h3>疑难杂症</h3>\r\n<a href=\"https://www.gzpblog.com/20170311/788.html\" target=\"_blank\" rel=\"noopener noreferrer\">Apache间歇性500服务器错误探究</a>\r\n\r\n&nbsp;\r\n<h2>WebServer</h2>\r\n<h3>Nginx</h3>\r\n<a href=\"https://www.gzpblog.com/20161230/563.html\" target=\"_blank\" rel=\"noopener noreferrer\">windows下解决Nginx+php-cgi线程并发问题</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170209/619.html\" target=\"_blank\" rel=\"noopener noreferrer\">解决windows下php-cgi进程经常自动关闭</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20161215/542.html\" target=\"_blank\" rel=\"noopener noreferrer\">支持Pathinfo模式的Nginx配置</a>\r\n\r\n&nbsp;\r\n<h2>HTTP相关</h2>\r\n<h3>HTTPS</h3>\r\n<a href=\"https://www.gzpblog.com/20170305/785.html\" target=\"_blank\" rel=\"noopener noreferrer\">全站HTTP转HTTPS实践（WordPress+阿里云）</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170321/835.html\" target=\"_blank\" rel=\"noopener noreferrer\">HTTPS进阶优化（一）</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170316/804.html\" target=\"_blank\" rel=\"noopener noreferrer\">升级到HTTP/2，性能大提升</a>\r\n\r\n&nbsp;\r\n<h2>主机环境</h2>\r\n<h3>Linux</h3>\r\n<a href=\"https://www.gzpblog.com/20170303/731.html\" target=\"_blank\" rel=\"noopener noreferrer\">Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）</a>\r\n<h3>Windows</h3>\r\n<a href=\"https://www.gzpblog.com/20160118/6.html\" target=\"_blank\" rel=\"noopener noreferrer\">Windows下搭建PHP开发环境：Apache2.4+PHP5.6+MySQL5.6</a>\r\n\r\n&nbsp;', '建站技术', '', 'inherit', 'closed', 'closed', '', '976-revision-v1', '', '', '2017-06-01 11:52:29', '2017-06-01 03:52:29', '', 976, 'https://www.gzpblog.com/20170601/983.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(984, 1, '2017-07-18 15:25:36', '2017-07-18 07:25:36', '<h2>PHP</h2>\n<h3>基础</h3>\n<a href=\"https://www.gzpblog.com/20170718/1161.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」关于PHP标准规范</a>\n\n<a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-1 基础编码规范</a>\n\n<a href=\"https://www.gzpblog.com/20170620/1034.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-2 编码风格规范</a>\n\n<a href=\"https://www.gzpblog.com/20170707/1133.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-3 日志接口规范</a>\n\n<a href=\"https://www.gzpblog.com/20170711/1138.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-4 自动加载规范</a>\n\n<a href=\"https://www.gzpblog.com/20170714/1147.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-6 缓存接口规范</a>\n\n<a href=\"https://www.gzpblog.com/20170713/1141.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP正则表达式</a>\n<h3>应用</h3>\n<a href=\"https://www.gzpblog.com/20170718/1151.html\" target=\"_blank\" rel=\"noopener noreferrer\">消息队列及PHP中的简单实现与应用</a>\n<h3>插件和拓展</h3>\n<a href=\"https://www.gzpblog.com/20160421/26.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPExcel：PHP导出Excel文件</a>\n\n<a href=\"https://www.gzpblog.com/20170621/1041.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPMailer：PHP的邮件发送类库</a>\n\n<a href=\"https://www.gzpblog.com/20170621/1045.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code：生成二维码</a>\n<h3>Thinkphp</h3>\n<a href=\"https://www.gzpblog.com/20161230/561.html\" target=\"_blank\" rel=\"noopener noreferrer\">基于Thinkphp5的cURL封装类</a>\n\n<a href=\"https://www.gzpblog.com/20170330/850.html\" target=\"_blank\" rel=\"noopener noreferrer\">阿里云Oss+Thinkphp5，Web一站式可拓展包</a>\n\n&nbsp;\n<h2>Javascript</h2>\n<h3>插件和拓展</h3>\n<a href=\"https://www.gzpblog.com/20170622/1053.html\" target=\"_blank\" rel=\"noopener noreferrer\">QRCode.js：基于JQuery的生成二维码JS库</a>\n\n<a href=\"https://www.gzpblog.com/20170623/1059.html\" target=\"_blank\" rel=\"noopener noreferrer\">PACE：页面自动加载进度插件</a>\n\n&nbsp;\n<h2>前端综合</h2>\n<h3>基础</h3>\n<a href=\"https://www.gzpblog.com/20170623/1062.html\" target=\"_blank\" rel=\"noopener noreferrer\">客户端实现WebSocket</a>\n\n&nbsp;\n<h2>工具</h2>\n<h3>版本控制</h3>\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\n\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\n<h3>代码管理</h3>\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\n<h3>测试相关</h3>\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>\n\n<a href=\"https://www.gzpblog.com/20170627/1081.html\" target=\"_blank\" rel=\"noopener noreferrer\">Wireshark基础用法：用Wireshark抓包分析网络通讯</a>\n\n<a href=\"https://www.gzpblog.com/20170629/1104.html\" target=\"_blank\" rel=\"noopener noreferrer\">用 Fiddler 进行HTTP请求调试</a>\n<h3>其它</h3>\n<a href=\"https://www.gzpblog.com/20170607/1000.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Gitbook编写书籍文档</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-autosave-v1', '', '', '2017-07-18 15:25:36', '2017-07-18 07:25:36', '', 978, 'https://www.gzpblog.com/20170601/984.html', 0, 'revision', '', 0),
(985, 1, '2017-06-01 11:59:41', '2017-06-01 03:59:41', '<h2>工具</h2>\r\n<h3>版本控制</h3>\r\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\r\n\r\n&nbsp;\r\n<h3>代码管理</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\r\n\r\n&nbsp;\r\n<h3>测试相关</h3>\r\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-revision-v1', '', '', '2017-06-01 11:59:41', '2017-06-01 03:59:41', '', 978, 'https://www.gzpblog.com/20170601/985.html', 0, 'revision', '', 0),
(986, 1, '2017-06-01 15:47:32', '2017-06-01 07:47:32', '最近终于把新的主题换上了，拖了很久，不过现在看来还挺满意，有一些问题需要处理一下，以及修改一下样式，不过问题不大。之前一直用的<a href=\"https://www.gzpblog.com/20170214/638.html\" target=\"_blank\" rel=\"noopener noreferrer\">Jumping</a>，在搞jumping时就想着越简洁越好，最后发现太简洁了，用着不趁手。\r\n\r\n之前太过于崇尚简洁，因为个人博客嘛，而且偏向于技术类的话，文章的展示是首要的，太花哨不好。 而之前制作的主题在使用中有一个很明显的问题，当有时候想要来查一篇曾经发表的笔记时，没有一个快速的入口，需要去把它翻出来，这个体验非常不好。 因为本人使用博客，与一些追求流量的自媒体不同，首先是为自己服务，比如记录笔记，分享技术，找到志同道合的道友等；也跟一些技术大牛的博客不同，技术大牛一般都是超节俭的风格里面满满都是干货。所以SaltedFish的理念，就是 首页的所见即所得，需要什么，快速找到，打通一切入口。于是乎，我在Jumping整体风格的基础上，在首页打通了一些专栏入口，工具入口，优化友链等。这样一来，比较方便我整理笔记，查找笔记，快速定位。\r\n\r\n现在整体看起来个人还比较满意，其实对于配色一直很纠结，不太懂色彩：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/SaltedFish_1.png\"><img class=\"wp-image-987 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/SaltedFish_1-1024x786.png\" alt=\"\" width=\"535\" height=\"411\" /></a> <a href=\"https://files.gzpblog.com/wp/2017/06/SaltedFish_2.png\"><img class=\"wp-image-988 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/SaltedFish_2-1024x820.png\" alt=\"\" width=\"533\" height=\"427\" /></a>\r\n\r\n同样的，<strong>支持自适应</strong>，移动端展示：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/SaltedFish_3.png\"><img class=\"wp-image-989 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/SaltedFish_3.png\" alt=\"\" width=\"274\" height=\"490\" /></a>\r\n\r\n稍微优化了一下后台设置的页面，好看一点点：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/SaltedFish_4.png\"><img class=\"wp-image-990 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/SaltedFish_4-1024x568.png\" alt=\"\" width=\"575\" height=\"319\" /></a>\r\n\r\n这个主题还是采用bootstrap构建；支持自适应，适配移动端设备；去除了加载Google Fonts，emoji表情等以优化速度；优化了Wordpress默认输出的 head 加载等。内置了一些功能，比如：发送邮件（采用PHPMailer）；文章图片放大灯箱效果（采用了Highslide JS，版本5.0）。\r\n\r\n因为刚上线，估计还有些问题，就不放地址了，慢慢优化先，估计也是以后很长一段时间的自用主题了。\r\n\r\n&nbsp;', '扁平化风格WordPress主题SaltedFish', '', 'publish', 'open', 'closed', '', '%e6%89%81%e5%b9%b3%e5%8c%96%e9%a3%8e%e6%a0%bcwordpress%e4%b8%bb%e9%a2%98saltedfish', '', '', '2017-06-01 15:47:32', '2017-06-01 07:47:32', '', 0, 'https://www.gzpblog.com/?p=986', 0, 'post', '', 3),
(987, 1, '2017-06-01 14:42:52', '2017-06-01 06:42:52', '', 'SaltedFish_1', '', 'inherit', 'open', 'closed', '', 'saltedfish_1', '', '', '2017-06-01 14:42:52', '2017-06-01 06:42:52', '', 986, 'https://www.gzpblog.com/wp-content/uploads/2017/06/SaltedFish_1.png', 0, 'attachment', 'image/png', 0),
(988, 1, '2017-06-01 14:42:55', '2017-06-01 06:42:55', '', 'SaltedFish_2', '', 'inherit', 'open', 'closed', '', 'saltedfish_2', '', '', '2017-06-01 14:42:55', '2017-06-01 06:42:55', '', 986, 'https://www.gzpblog.com/wp-content/uploads/2017/06/SaltedFish_2.png', 0, 'attachment', 'image/png', 0),
(989, 1, '2017-06-01 14:42:58', '2017-06-01 06:42:58', '', 'SaltedFish_3', '', 'inherit', 'open', 'closed', '', 'saltedfish_3', '', '', '2017-06-01 14:42:58', '2017-06-01 06:42:58', '', 986, 'https://www.gzpblog.com/wp-content/uploads/2017/06/SaltedFish_3.png', 0, 'attachment', 'image/png', 0),
(990, 1, '2017-06-01 14:42:59', '2017-06-01 06:42:59', '', 'SaltedFish_4', '', 'inherit', 'open', 'closed', '', 'saltedfish_4', '', '', '2017-06-01 14:42:59', '2017-06-01 06:42:59', '', 986, 'https://www.gzpblog.com/wp-content/uploads/2017/06/SaltedFish_4.png', 0, 'attachment', 'image/png', 0),
(991, 1, '2017-06-01 15:46:39', '2017-06-01 07:46:39', '', 'SaltedFish_logo', '', 'inherit', 'open', 'closed', '', 'saltedfish_logo', '', '', '2017-06-01 15:46:39', '2017-06-01 07:46:39', '', 986, 'https://www.gzpblog.com/wp-content/uploads/2017/06/SaltedFish_logo.png', 0, 'attachment', 'image/png', 0),
(992, 1, '2017-06-01 15:47:32', '2017-06-01 07:47:32', '最近终于把新的主题换上了，拖了很久，不过现在看来还挺满意，有一些问题需要处理一下，以及修改一下样式，不过问题不大。之前一直用的<a href=\"https://www.gzpblog.com/20170214/638.html\" target=\"_blank\" rel=\"noopener noreferrer\">Jumping</a>，在搞jumping时就想着越简洁越好，最后发现太简洁了，用着不趁手。\r\n\r\n之前太过于崇尚简洁，因为个人博客嘛，而且偏向于技术类的话，文章的展示是首要的，太花哨不好。 而之前制作的主题在使用中有一个很明显的问题，当有时候想要来查一篇曾经发表的笔记时，没有一个快速的入口，需要去把它翻出来，这个体验非常不好。 因为本人使用博客，与一些追求流量的自媒体不同，首先是为自己服务，比如记录笔记，分享技术，找到志同道合的道友等；也跟一些技术大牛的博客不同，技术大牛一般都是超节俭的风格里面满满都是干货。所以SaltedFish的理念，就是 首页的所见即所得，需要什么，快速找到，打通一切入口。于是乎，我在Jumping整体风格的基础上，在首页打通了一些专栏入口，工具入口，优化友链等。这样一来，比较方便我整理笔记，查找笔记，快速定位。\r\n\r\n现在整体看起来个人还比较满意，其实对于配色一直很纠结，不太懂色彩：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/SaltedFish_1.png\"><img class=\"wp-image-987 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/SaltedFish_1-1024x786.png\" alt=\"\" width=\"535\" height=\"411\" /></a> <a href=\"https://files.gzpblog.com/wp/2017/06/SaltedFish_2.png\"><img class=\"wp-image-988 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/SaltedFish_2-1024x820.png\" alt=\"\" width=\"533\" height=\"427\" /></a>\r\n\r\n同样的，<strong>支持自适应</strong>，移动端展示：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/SaltedFish_3.png\"><img class=\"wp-image-989 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/SaltedFish_3.png\" alt=\"\" width=\"274\" height=\"490\" /></a>\r\n\r\n稍微优化了一下后台设置的页面，好看一点点：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/SaltedFish_4.png\"><img class=\"wp-image-990 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/SaltedFish_4-1024x568.png\" alt=\"\" width=\"575\" height=\"319\" /></a>\r\n\r\n这个主题还是采用bootstrap构建；支持自适应，适配移动端设备；去除了加载Google Fonts，emoji表情等以优化速度；优化了Wordpress默认输出的 head 加载等。内置了一些功能，比如：发送邮件（采用PHPMailer）；文章图片放大灯箱效果（采用了Highslide JS，版本5.0）。\r\n\r\n因为刚上线，估计还有些问题，就不放地址了，慢慢优化先，估计也是以后很长一段时间的自用主题了。\r\n\r\n&nbsp;', '扁平化风格WordPress主题SaltedFish', '', 'inherit', 'closed', 'closed', '', '986-revision-v1', '', '', '2017-06-01 15:47:32', '2017-06-01 07:47:32', '', 986, 'https://www.gzpblog.com/20170601/992.html', 0, 'revision', '', 0),
(993, 1, '2017-06-05 18:06:19', '2017-06-05 10:06:19', '把Git的基础知识全部过了一遍，是看的<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener noreferrer\">Git的官方Documentation</a>，现在基本上能用Git工作了。不过看到阮一峰老师总结的命令非常不错，基本上把这些操作熟悉就够了，以下内容转自：<a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?20170208142509\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单 - 阮一峰的网络日志</a>；稍作增加与修改。\n\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n\n<a href=\"http://files.gzpblog.com/wp/2017/02/git-work.png\"><img class=\"alignnone wp-image-616\" src=\"http://files.gzpblog.com/wp/2017/02/git-work-1024x297.png\" alt=\"\" width=\"787\" height=\"228\" /></a>\n\n几个专用名词的译名如下：\n<ul>\n 	<li>Workspace：工作区</li>\n 	<li>Index / Stage：暂存区</li>\n 	<li>Repository：仓库区（或本地仓库）</li>\n 	<li>Remote：远程仓库</li>\n</ul>\n<h2>一、新建代码库</h2>\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n<h2>二、配置</h2>\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n<h2>三、增加/删除文件</h2>\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n<h2>四、代码提交</h2>\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n<h2>五、分支</h2>\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 推送新分支到远程，并在远程建立分支和追踪关系\n$ git push --set-upstream [branch-name]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n<h2>六、标签</h2>\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n<h2>七、查看信息</h2>\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n<h2>八、远程同步</h2>\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n<h2>九、撤销</h2>\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n<h2>十、其他</h2>\n# 生成一个可供发布的压缩包\n$ git archive\n\n#配置git对文件名大小写敏感\n<pre class=\"brush:bash;toolbar:false\">git config core.ignorecase false</pre>', '常用 Git 命令清单', '', 'inherit', 'closed', 'closed', '', '615-autosave-v1', '', '', '2017-06-05 18:06:19', '2017-06-05 10:06:19', '', 615, 'https://www.gzpblog.com/20170601/993.html', 0, 'revision', '', 0),
(994, 1, '2017-06-01 22:31:00', '2017-06-01 14:31:00', '把Git的基础只是全部过了一遍，是看的<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener noreferrer\">Git的官方Documentation</a>，现在基本上能用Git工作了。不过看到阮一峰老师总结的命令非常不错，基本上把这些操作熟悉就够了，以下内容转自：<a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?20170208142509\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单 - 阮一峰的网络日志</a>；稍作增加与修改。\r\n\r\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/git-work.png\"><img class=\"alignnone wp-image-616\" src=\"http://files.gzpblog.com/wp/2017/02/git-work-1024x297.png\" alt=\"\" width=\"787\" height=\"228\" /></a>\r\n\r\n几个专用名词的译名如下：\r\n<ul>\r\n 	<li>Workspace：工作区</li>\r\n 	<li>Index / Stage：暂存区</li>\r\n 	<li>Repository：仓库区（或本地仓库）</li>\r\n 	<li>Remote：远程仓库</li>\r\n</ul>\r\n<h2>一、新建代码库</h2>\r\n# 在当前目录新建一个Git代码库\r\n$ git init\r\n# 新建一个目录，将其初始化为Git代码库\r\n$ git init [project-name]\r\n# 下载一个项目和它的整个代码历史\r\n$ git clone [url]\r\n<h2>二、配置</h2>\r\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\r\n# 显示当前的Git配置\r\n$ git config --list\r\n# 编辑Git配置文件\r\n$ git config -e [--global]\r\n# 设置提交代码时的用户信息\r\n$ git config [--global] user.name \"[name]\"\r\n$ git config [--global] user.email \"[email address]\"\r\n<h2>三、增加/删除文件</h2>\r\n# 添加指定文件到暂存区\r\n$ git add [file1] [file2] ...\r\n# 添加指定目录到暂存区，包括子目录\r\n$ git add [dir]\r\n# 添加当前目录的所有文件到暂存区\r\n$ git add .\r\n# 添加每个变化前，都会要求确认\r\n# 对于同一个文件的多处变化，可以实现分次提交\r\n$ git add -p\r\n# 删除工作区文件，并且将这次删除放入暂存区\r\n$ git rm [file1] [file2] ...\r\n# 停止追踪指定文件，但该文件会保留在工作区\r\n$ git rm --cached [file]\r\n# 改名文件，并且将这个改名放入暂存区\r\n$ git mv [file-original] [file-renamed]\r\n<h2>四、代码提交</h2>\r\n# 提交暂存区到仓库区\r\n$ git commit -m [message]\r\n# 提交暂存区的指定文件到仓库区\r\n$ git commit [file1] [file2] ... -m [message]\r\n# 提交工作区自上次commit之后的变化，直接到仓库区\r\n$ git commit -a\r\n# 提交时显示所有diff信息\r\n$ git commit -v\r\n# 使用一次新的commit，替代上一次提交\r\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\r\n$ git commit --amend -m [message]\r\n# 重做上一次commit，并包括指定文件的新变化\r\n$ git commit --amend [file1] [file2] ...\r\n<h2>五、分支</h2>\r\n# 列出所有本地分支\r\n$ git branch\r\n# 列出所有远程分支\r\n$ git branch -r\r\n# 列出所有本地分支和远程分支\r\n$ git branch -a\r\n# 新建一个分支，但依然停留在当前分支\r\n$ git branch [branch-name]\r\n# 新建一个分支，并切换到该分支\r\n$ git checkout -b [branch]\r\n# 新建一个分支，指向指定commit\r\n$ git branch [branch] [commit]\r\n# 新建一个分支，与指定的远程分支建立追踪关系\r\n$ git branch --track [branch] [remote-branch]\r\n# 切换到指定分支，并更新工作区\r\n$ git checkout [branch-name]\r\n# 切换到上一个分支\r\n$ git checkout -\r\n# 建立追踪关系，在现有分支与指定的远程分支之间\r\n$ git branch --set-upstream [branch] [remote-branch]\r\n\r\n# 推送新分支到远程，并在远程建立分支和追踪关系\r\n$ git push --set-upstream [branch-name]\r\n# 合并指定分支到当前分支\r\n$ git merge [branch]\r\n# 选择一个commit，合并进当前分支\r\n$ git cherry-pick [commit]\r\n# 删除分支\r\n$ git branch -d [branch-name]\r\n# 删除远程分支\r\n$ git push origin --delete [branch-name]\r\n$ git branch -dr [remote/branch]\r\n<h2>六、标签</h2>\r\n# 列出所有tag\r\n$ git tag\r\n# 新建一个tag在当前commit\r\n$ git tag [tag]\r\n# 新建一个tag在指定commit\r\n$ git tag [tag] [commit]\r\n# 删除本地tag\r\n$ git tag -d [tag]\r\n# 删除远程tag\r\n$ git push origin :refs/tags/[tagName]\r\n# 查看tag信息\r\n$ git show [tag]\r\n# 提交指定tag\r\n$ git push [remote] [tag]\r\n# 提交所有tag\r\n$ git push [remote] --tags\r\n# 新建一个分支，指向某个tag\r\n$ git checkout -b [branch] [tag]\r\n<h2>七、查看信息</h2>\r\n# 显示有变更的文件\r\n$ git status\r\n# 显示当前分支的版本历史\r\n$ git log\r\n# 显示commit历史，以及每次commit发生变更的文件\r\n$ git log --stat\r\n# 搜索提交历史，根据关键词\r\n$ git log -S [keyword]\r\n# 显示某个commit之后的所有变动，每个commit占据一行\r\n$ git log [tag] HEAD --pretty=format:%s\r\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\r\n$ git log [tag] HEAD --grep feature\r\n# 显示某个文件的版本历史，包括文件改名\r\n$ git log --follow [file]\r\n$ git whatchanged [file]\r\n# 显示指定文件相关的每一次diff\r\n$ git log -p [file]\r\n# 显示过去5次提交\r\n$ git log -5 --pretty --oneline\r\n# 显示所有提交过的用户，按提交次数排序\r\n$ git shortlog -sn\r\n# 显示指定文件是什么人在什么时间修改过\r\n$ git blame [file]\r\n# 显示暂存区和工作区的差异\r\n$ git diff\r\n# 显示暂存区和上一个commit的差异\r\n$ git diff --cached [file]\r\n# 显示工作区与当前分支最新commit之间的差异\r\n$ git diff HEAD\r\n# 显示两次提交之间的差异\r\n$ git diff [first-branch]...[second-branch]\r\n# 显示今天你写了多少行代码\r\n$ git diff --shortstat \"@{0 day ago}\"\r\n# 显示某次提交的元数据和内容变化\r\n$ git show [commit]\r\n# 显示某次提交发生变化的文件\r\n$ git show --name-only [commit]\r\n# 显示某次提交时，某个文件的内容\r\n$ git show [commit]:[filename]\r\n# 显示当前分支的最近几次提交\r\n$ git reflog\r\n<h2>八、远程同步</h2>\r\n# 下载远程仓库的所有变动\r\n$ git fetch [remote]\r\n# 显示所有远程仓库\r\n$ git remote -v\r\n# 显示某个远程仓库的信息\r\n$ git remote show [remote]\r\n# 增加一个新的远程仓库，并命名\r\n$ git remote add [shortname] [url]\r\n# 取回远程仓库的变化，并与本地分支合并\r\n$ git pull [remote] [branch]\r\n# 上传本地指定分支到远程仓库\r\n$ git push [remote] [branch]\r\n# 强行推送当前分支到远程仓库，即使有冲突\r\n$ git push [remote] --force\r\n# 推送所有分支到远程仓库\r\n$ git push [remote] --all\r\n<h2>九、撤销</h2>\r\n# 恢复暂存区的指定文件到工作区\r\n$ git checkout [file]\r\n# 恢复某个commit的指定文件到暂存区和工作区\r\n$ git checkout [commit] [file]\r\n# 恢复暂存区的所有文件到工作区\r\n$ git checkout .\r\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\r\n$ git reset [file]\r\n# 重置暂存区与工作区，与上一次commit保持一致\r\n$ git reset --hard\r\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\r\n$ git reset [commit]\r\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\r\n$ git reset --hard [commit]\r\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\r\n$ git reset --keep [commit]\r\n# 新建一个commit，用来撤销指定commit\r\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\r\n$ git revert [commit]\r\n# 暂时将未提交的变化移除，稍后再移入\r\n$ git stash\r\n$ git stash pop\r\n<h2>十、其他</h2>\r\n# 生成一个可供发布的压缩包\r\n$ git archive', '常用 Git 命令清单', '', 'inherit', 'closed', 'closed', '', '615-revision-v1', '', '', '2017-06-01 22:31:00', '2017-06-01 14:31:00', '', 615, 'https://www.gzpblog.com/20170601/994.html', 0, 'revision', '', 0),
(995, 1, '2017-06-01 22:38:57', '2017-06-01 14:38:57', '把Git的基础只是全部过了一遍，是看的<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener noreferrer\">Git的官方Documentation</a>，现在基本上能用Git工作了。不过看到阮一峰老师总结的命令非常不错，基本上把这些操作熟悉就够了，以下内容转自：<a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?20170208142509\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单 - 阮一峰的网络日志</a>；稍作增加与修改。\r\n\r\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/git-work.png\"><img class=\"alignnone wp-image-616\" src=\"http://files.gzpblog.com/wp/2017/02/git-work-1024x297.png\" alt=\"\" width=\"787\" height=\"228\" /></a>\r\n\r\n几个专用名词的译名如下：\r\n<ul>\r\n 	<li>Workspace：工作区</li>\r\n 	<li>Index / Stage：暂存区</li>\r\n 	<li>Repository：仓库区（或本地仓库）</li>\r\n 	<li>Remote：远程仓库</li>\r\n</ul>\r\n<h2>一、新建代码库</h2>\r\n# 在当前目录新建一个Git代码库\r\n$ git init\r\n\r\n# 新建一个目录，将其初始化为Git代码库\r\n$ git init [project-name]\r\n\r\n# 下载一个项目和它的整个代码历史\r\n$ git clone [url]\r\n<h2>二、配置</h2>\r\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\r\n# 显示当前的Git配置\r\n$ git config --list\r\n\r\n# 编辑Git配置文件\r\n$ git config -e [--global]\r\n\r\n# 设置提交代码时的用户信息\r\n$ git config [--global] user.name \"[name]\"\r\n$ git config [--global] user.email \"[email address]\"\r\n<h2>三、增加/删除文件</h2>\r\n# 添加指定文件到暂存区\r\n$ git add [file1] [file2] ...\r\n\r\n# 添加指定目录到暂存区，包括子目录\r\n$ git add [dir]\r\n\r\n# 添加当前目录的所有文件到暂存区\r\n$ git add .\r\n\r\n# 添加每个变化前，都会要求确认\r\n# 对于同一个文件的多处变化，可以实现分次提交\r\n$ git add -p\r\n\r\n# 删除工作区文件，并且将这次删除放入暂存区\r\n$ git rm [file1] [file2] ...\r\n\r\n# 停止追踪指定文件，但该文件会保留在工作区\r\n$ git rm --cached [file]\r\n\r\n# 改名文件，并且将这个改名放入暂存区\r\n$ git mv [file-original] [file-renamed]\r\n<h2>四、代码提交</h2>\r\n# 提交暂存区到仓库区\r\n$ git commit -m [message]\r\n\r\n# 提交暂存区的指定文件到仓库区\r\n$ git commit [file1] [file2] ... -m [message]\r\n\r\n# 提交工作区自上次commit之后的变化，直接到仓库区\r\n$ git commit -a\r\n\r\n# 提交时显示所有diff信息\r\n$ git commit -v\r\n\r\n# 使用一次新的commit，替代上一次提交\r\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\r\n$ git commit --amend -m [message]\r\n\r\n# 重做上一次commit，并包括指定文件的新变化\r\n$ git commit --amend [file1] [file2] ...\r\n<h2>五、分支</h2>\r\n# 列出所有本地分支\r\n$ git branch\r\n\r\n# 列出所有远程分支\r\n$ git branch -r\r\n\r\n# 列出所有本地分支和远程分支\r\n$ git branch -a\r\n\r\n# 新建一个分支，但依然停留在当前分支\r\n$ git branch [branch-name]\r\n\r\n# 新建一个分支，并切换到该分支\r\n$ git checkout -b [branch]\r\n\r\n# 新建一个分支，指向指定commit\r\n$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系\r\n$ git branch --track [branch] [remote-branch]\r\n\r\n# 切换到指定分支，并更新工作区\r\n$ git checkout [branch-name]\r\n\r\n# 切换到上一个分支\r\n$ git checkout -\r\n\r\n# 建立追踪关系，在现有分支与指定的远程分支之间\r\n$ git branch --set-upstream [branch] [remote-branch]\r\n\r\n# 推送新分支到远程，并在远程建立分支和追踪关系\r\n$ git push --set-upstream [branch-name]\r\n\r\n# 合并指定分支到当前分支\r\n$ git merge [branch]\r\n\r\n# 选择一个commit，合并进当前分支\r\n$ git cherry-pick [commit]\r\n\r\n# 删除分支\r\n$ git branch -d [branch-name]\r\n\r\n# 删除远程分支\r\n$ git push origin --delete [branch-name]\r\n$ git branch -dr [remote/branch]\r\n<h2>六、标签</h2>\r\n# 列出所有tag\r\n$ git tag\r\n\r\n# 新建一个tag在当前commit\r\n$ git tag [tag]\r\n\r\n# 新建一个tag在指定commit\r\n$ git tag [tag] [commit]\r\n\r\n# 删除本地tag\r\n$ git tag -d [tag]\r\n\r\n# 删除远程tag\r\n$ git push origin :refs/tags/[tagName]\r\n\r\n# 查看tag信息\r\n$ git show [tag]\r\n\r\n# 提交指定tag\r\n$ git push [remote] [tag]\r\n\r\n# 提交所有tag\r\n$ git push [remote] --tags\r\n\r\n# 新建一个分支，指向某个tag\r\n$ git checkout -b [branch] [tag]\r\n<h2>七、查看信息</h2>\r\n# 显示有变更的文件\r\n$ git status\r\n\r\n# 显示当前分支的版本历史\r\n$ git log\r\n\r\n# 显示commit历史，以及每次commit发生变更的文件\r\n$ git log --stat\r\n\r\n# 搜索提交历史，根据关键词\r\n$ git log -S [keyword]\r\n\r\n# 显示某个commit之后的所有变动，每个commit占据一行\r\n$ git log [tag] HEAD --pretty=format:%s\r\n\r\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\r\n$ git log [tag] HEAD --grep feature\r\n\r\n# 显示某个文件的版本历史，包括文件改名\r\n$ git log --follow [file]\r\n$ git whatchanged [file]\r\n\r\n# 显示指定文件相关的每一次diff\r\n$ git log -p [file]\r\n\r\n# 显示过去5次提交\r\n$ git log -5 --pretty --oneline\r\n\r\n# 显示所有提交过的用户，按提交次数排序\r\n$ git shortlog -sn\r\n\r\n# 显示指定文件是什么人在什么时间修改过\r\n$ git blame [file]\r\n\r\n# 显示暂存区和工作区的差异\r\n$ git diff\r\n\r\n# 显示暂存区和上一个commit的差异\r\n$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异\r\n$ git diff HEAD\r\n\r\n# 显示两次提交之间的差异\r\n$ git diff [first-branch]...[second-branch]\r\n\r\n# 显示今天你写了多少行代码\r\n$ git diff --shortstat \"@{0 day ago}\"\r\n\r\n# 显示某次提交的元数据和内容变化\r\n$ git show [commit]\r\n\r\n# 显示某次提交发生变化的文件\r\n$ git show --name-only [commit]\r\n\r\n# 显示某次提交时，某个文件的内容\r\n$ git show [commit]:[filename]\r\n\r\n# 显示当前分支的最近几次提交\r\n$ git reflog\r\n<h2>八、远程同步</h2>\r\n# 下载远程仓库的所有变动\r\n$ git fetch [remote]\r\n\r\n# 显示所有远程仓库\r\n$ git remote -v\r\n\r\n# 显示某个远程仓库的信息\r\n$ git remote show [remote]\r\n\r\n# 增加一个新的远程仓库，并命名\r\n$ git remote add [shortname] [url]\r\n\r\n# 取回远程仓库的变化，并与本地分支合并\r\n$ git pull [remote] [branch]\r\n\r\n# 上传本地指定分支到远程仓库\r\n$ git push [remote] [branch]\r\n\r\n# 强行推送当前分支到远程仓库，即使有冲突\r\n$ git push [remote] --force\r\n\r\n# 推送所有分支到远程仓库\r\n$ git push [remote] --all\r\n<h2>九、撤销</h2>\r\n# 恢复暂存区的指定文件到工作区\r\n$ git checkout [file]\r\n\r\n# 恢复某个commit的指定文件到暂存区和工作区\r\n$ git checkout [commit] [file]\r\n\r\n# 恢复暂存区的所有文件到工作区\r\n$ git checkout .\r\n\r\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\r\n$ git reset [file]\r\n\r\n# 重置暂存区与工作区，与上一次commit保持一致\r\n$ git reset --hard\r\n\r\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\r\n$ git reset [commit]\r\n\r\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\r\n$ git reset --hard [commit]\r\n\r\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\r\n$ git reset --keep [commit]\r\n\r\n# 新建一个commit，用来撤销指定commit\r\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\r\n$ git revert [commit]\r\n\r\n# 暂时将未提交的变化移除，稍后再移入\r\n$ git stash\r\n$ git stash pop\r\n<h2>十、其他</h2>\r\n# 生成一个可供发布的压缩包\r\n$ git archive', '常用 Git 命令清单', '', 'inherit', 'closed', 'closed', '', '615-revision-v1', '', '', '2017-06-01 22:38:57', '2017-06-01 14:38:57', '', 615, 'https://www.gzpblog.com/20170601/995.html', 0, 'revision', '', 0),
(996, 1, '2017-06-01 22:39:25', '2017-06-01 14:39:25', '把Git的基础知识全部过了一遍，是看的<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener noreferrer\">Git的官方Documentation</a>，现在基本上能用Git工作了。不过看到阮一峰老师总结的命令非常不错，基本上把这些操作熟悉就够了，以下内容转自：<a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?20170208142509\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单 - 阮一峰的网络日志</a>；稍作增加与修改。\r\n\r\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/git-work.png\"><img class=\"alignnone wp-image-616\" src=\"http://files.gzpblog.com/wp/2017/02/git-work-1024x297.png\" alt=\"\" width=\"787\" height=\"228\" /></a>\r\n\r\n几个专用名词的译名如下：\r\n<ul>\r\n 	<li>Workspace：工作区</li>\r\n 	<li>Index / Stage：暂存区</li>\r\n 	<li>Repository：仓库区（或本地仓库）</li>\r\n 	<li>Remote：远程仓库</li>\r\n</ul>\r\n<h2>一、新建代码库</h2>\r\n# 在当前目录新建一个Git代码库\r\n$ git init\r\n\r\n# 新建一个目录，将其初始化为Git代码库\r\n$ git init [project-name]\r\n\r\n# 下载一个项目和它的整个代码历史\r\n$ git clone [url]\r\n<h2>二、配置</h2>\r\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\r\n# 显示当前的Git配置\r\n$ git config --list\r\n\r\n# 编辑Git配置文件\r\n$ git config -e [--global]\r\n\r\n# 设置提交代码时的用户信息\r\n$ git config [--global] user.name \"[name]\"\r\n$ git config [--global] user.email \"[email address]\"\r\n<h2>三、增加/删除文件</h2>\r\n# 添加指定文件到暂存区\r\n$ git add [file1] [file2] ...\r\n\r\n# 添加指定目录到暂存区，包括子目录\r\n$ git add [dir]\r\n\r\n# 添加当前目录的所有文件到暂存区\r\n$ git add .\r\n\r\n# 添加每个变化前，都会要求确认\r\n# 对于同一个文件的多处变化，可以实现分次提交\r\n$ git add -p\r\n\r\n# 删除工作区文件，并且将这次删除放入暂存区\r\n$ git rm [file1] [file2] ...\r\n\r\n# 停止追踪指定文件，但该文件会保留在工作区\r\n$ git rm --cached [file]\r\n\r\n# 改名文件，并且将这个改名放入暂存区\r\n$ git mv [file-original] [file-renamed]\r\n<h2>四、代码提交</h2>\r\n# 提交暂存区到仓库区\r\n$ git commit -m [message]\r\n\r\n# 提交暂存区的指定文件到仓库区\r\n$ git commit [file1] [file2] ... -m [message]\r\n\r\n# 提交工作区自上次commit之后的变化，直接到仓库区\r\n$ git commit -a\r\n\r\n# 提交时显示所有diff信息\r\n$ git commit -v\r\n\r\n# 使用一次新的commit，替代上一次提交\r\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\r\n$ git commit --amend -m [message]\r\n\r\n# 重做上一次commit，并包括指定文件的新变化\r\n$ git commit --amend [file1] [file2] ...\r\n<h2>五、分支</h2>\r\n# 列出所有本地分支\r\n$ git branch\r\n\r\n# 列出所有远程分支\r\n$ git branch -r\r\n\r\n# 列出所有本地分支和远程分支\r\n$ git branch -a\r\n\r\n# 新建一个分支，但依然停留在当前分支\r\n$ git branch [branch-name]\r\n\r\n# 新建一个分支，并切换到该分支\r\n$ git checkout -b [branch]\r\n\r\n# 新建一个分支，指向指定commit\r\n$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系\r\n$ git branch --track [branch] [remote-branch]\r\n\r\n# 切换到指定分支，并更新工作区\r\n$ git checkout [branch-name]\r\n\r\n# 切换到上一个分支\r\n$ git checkout -\r\n\r\n# 建立追踪关系，在现有分支与指定的远程分支之间\r\n$ git branch --set-upstream [branch] [remote-branch]\r\n\r\n# 推送新分支到远程，并在远程建立分支和追踪关系\r\n$ git push --set-upstream [branch-name]\r\n\r\n# 合并指定分支到当前分支\r\n$ git merge [branch]\r\n\r\n# 选择一个commit，合并进当前分支\r\n$ git cherry-pick [commit]\r\n\r\n# 删除分支\r\n$ git branch -d [branch-name]\r\n\r\n# 删除远程分支\r\n$ git push origin --delete [branch-name]\r\n$ git branch -dr [remote/branch]\r\n<h2>六、标签</h2>\r\n# 列出所有tag\r\n$ git tag\r\n\r\n# 新建一个tag在当前commit\r\n$ git tag [tag]\r\n\r\n# 新建一个tag在指定commit\r\n$ git tag [tag] [commit]\r\n\r\n# 删除本地tag\r\n$ git tag -d [tag]\r\n\r\n# 删除远程tag\r\n$ git push origin :refs/tags/[tagName]\r\n\r\n# 查看tag信息\r\n$ git show [tag]\r\n\r\n# 提交指定tag\r\n$ git push [remote] [tag]\r\n\r\n# 提交所有tag\r\n$ git push [remote] --tags\r\n\r\n# 新建一个分支，指向某个tag\r\n$ git checkout -b [branch] [tag]\r\n<h2>七、查看信息</h2>\r\n# 显示有变更的文件\r\n$ git status\r\n\r\n# 显示当前分支的版本历史\r\n$ git log\r\n\r\n# 显示commit历史，以及每次commit发生变更的文件\r\n$ git log --stat\r\n\r\n# 搜索提交历史，根据关键词\r\n$ git log -S [keyword]\r\n\r\n# 显示某个commit之后的所有变动，每个commit占据一行\r\n$ git log [tag] HEAD --pretty=format:%s\r\n\r\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\r\n$ git log [tag] HEAD --grep feature\r\n\r\n# 显示某个文件的版本历史，包括文件改名\r\n$ git log --follow [file]\r\n$ git whatchanged [file]\r\n\r\n# 显示指定文件相关的每一次diff\r\n$ git log -p [file]\r\n\r\n# 显示过去5次提交\r\n$ git log -5 --pretty --oneline\r\n\r\n# 显示所有提交过的用户，按提交次数排序\r\n$ git shortlog -sn\r\n\r\n# 显示指定文件是什么人在什么时间修改过\r\n$ git blame [file]\r\n\r\n# 显示暂存区和工作区的差异\r\n$ git diff\r\n\r\n# 显示暂存区和上一个commit的差异\r\n$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异\r\n$ git diff HEAD\r\n\r\n# 显示两次提交之间的差异\r\n$ git diff [first-branch]...[second-branch]\r\n\r\n# 显示今天你写了多少行代码\r\n$ git diff --shortstat \"@{0 day ago}\"\r\n\r\n# 显示某次提交的元数据和内容变化\r\n$ git show [commit]\r\n\r\n# 显示某次提交发生变化的文件\r\n$ git show --name-only [commit]\r\n\r\n# 显示某次提交时，某个文件的内容\r\n$ git show [commit]:[filename]\r\n\r\n# 显示当前分支的最近几次提交\r\n$ git reflog\r\n<h2>八、远程同步</h2>\r\n# 下载远程仓库的所有变动\r\n$ git fetch [remote]\r\n\r\n# 显示所有远程仓库\r\n$ git remote -v\r\n\r\n# 显示某个远程仓库的信息\r\n$ git remote show [remote]\r\n\r\n# 增加一个新的远程仓库，并命名\r\n$ git remote add [shortname] [url]\r\n\r\n# 取回远程仓库的变化，并与本地分支合并\r\n$ git pull [remote] [branch]\r\n\r\n# 上传本地指定分支到远程仓库\r\n$ git push [remote] [branch]\r\n\r\n# 强行推送当前分支到远程仓库，即使有冲突\r\n$ git push [remote] --force\r\n\r\n# 推送所有分支到远程仓库\r\n$ git push [remote] --all\r\n<h2>九、撤销</h2>\r\n# 恢复暂存区的指定文件到工作区\r\n$ git checkout [file]\r\n\r\n# 恢复某个commit的指定文件到暂存区和工作区\r\n$ git checkout [commit] [file]\r\n\r\n# 恢复暂存区的所有文件到工作区\r\n$ git checkout .\r\n\r\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\r\n$ git reset [file]\r\n\r\n# 重置暂存区与工作区，与上一次commit保持一致\r\n$ git reset --hard\r\n\r\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\r\n$ git reset [commit]\r\n\r\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\r\n$ git reset --hard [commit]\r\n\r\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\r\n$ git reset --keep [commit]\r\n\r\n# 新建一个commit，用来撤销指定commit\r\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\r\n$ git revert [commit]\r\n\r\n# 暂时将未提交的变化移除，稍后再移入\r\n$ git stash\r\n$ git stash pop\r\n<h2>十、其他</h2>\r\n# 生成一个可供发布的压缩包\r\n$ git archive', '常用 Git 命令清单', '', 'inherit', 'closed', 'closed', '', '615-revision-v1', '', '', '2017-06-01 22:39:25', '2017-06-01 14:39:25', '', 615, 'https://www.gzpblog.com/20170601/996.html', 0, 'revision', '', 0),
(997, 1, '2017-06-04 01:03:21', '2017-06-03 17:03:21', '我本是一枚扫大街的（环境科学专业），却走上了IT男的不归路。\r\n\r\n为什么？\r\n\r\n因为，\r\n\r\n做些自己喜欢做的事\r\n\r\n做些自己不会后悔的事\r\n\r\n做些让自己充实起来的事\r\n\r\n2015.7.1 大学毕业\r\n\r\n2015.9.1 只身前往上海，开始转行历程，先开始学习PHP\r\n\r\n2016.2.16 开始了我的第一份工作，做电商B2B平台的开发。并（尴尬地）学会了各种修理网络，修理电脑的技巧。\r\n\r\n2016.5.24 第一次跳槽，有点快。做APP服务端接口，后台管理系统，微信公众号及其接口。\r\n\r\n2016.11.27 由于某些原因，离开上海，回到广东，于是开始在深圳工作。\r\n\r\n&nbsp;\r\n\r\n我现在主学PHP，也写写前端，最近对Python和Go特别感兴趣并接触中。\r\n\r\n我虽然接触编程的时间不长，但是我正在好好学，目前为止我很充实，对技术有很高的热情。\r\n\r\n因为起步比较晚，知道自己落下了很多，也比较想快速提升自己，导致有点急功近利，又或者说，有点急躁。还是要提醒自己，不要急，慢慢来，一步一步走！\r\n\r\n&nbsp;\r\n\r\n来来来，搞起！\r\n\r\n扫大街的终于想起了那一夜键盘滋啦滋啦声的恐惧......\r\n\r\n&nbsp;\r\n\r\n我的博客历程：<a href=\"http://www.gzpblog.com/blog-time\" target=\"_blank\" rel=\"noopener noreferrer\">博客历程</a>\r\n\r\n如果你的博客也时常更新一些有价值的内容，希望能相互沟通，并且有兴趣交换友链，可以给我留言哦。', '关于我', '', 'inherit', 'closed', 'closed', '', '5-revision-v1', '', '', '2017-06-04 01:03:21', '2017-06-03 17:03:21', '', 5, 'https://www.gzpblog.com/20170604/997.html', 0, 'revision', '', 0),
(998, 1, '2017-06-04 23:20:02', '2017-06-04 15:20:02', '我本是一枚扫大街的（环境科学专业），却走上了IT男的不归路。\r\n\r\n为什么？\r\n\r\n因为，\r\n\r\n做些自己喜欢做的事\r\n\r\n做些自己不会后悔的事\r\n\r\n做些让自己充实起来的事\r\n\r\n2015.7.1 大学毕业\r\n\r\n2015.9.1 只身前往上海，开始转行历程，先开始学习PHP\r\n\r\n2016.2.16 开始了我的第一份工作，做电商B2B平台的开发。并（尴尬地）学会了各种修理网络，修理电脑的技巧。\r\n\r\n2016.5.24 第一次跳槽，有点快。做APP服务端接口，后台管理系统，微信公众号及其接口。\r\n\r\n2016.11.27 由于某些原因，离开上海，回到广东，于是开始在深圳工作。\r\n\r\n&nbsp;\r\n\r\n我现在主学PHP，也写写前端，最近对Python和Go特别感兴趣并接触中。\r\n\r\n我虽然接触编程的时间不长，但是我正在好好学，目前为止我很充实，对技术有很高的热情。\r\n\r\n因为起步比较晚，知道自己落下了很多，也比较想快速提升自己，导致有点急功近利，又或者说，有点急躁。还是要提醒自己，不要急，慢慢来，一步一步走！\r\n\r\n&nbsp;\r\n\r\n来来来，搞起！\r\n\r\n扫大街的终于想起了那一夜键盘滋啦滋啦声的恐惧......\r\n\r\n&nbsp;\r\n\r\n我的博客历程：<a href=\"http://www.gzpblog.com/blog-time\" target=\"_blank\" rel=\"noopener noreferrer\">博客历程</a>\r\n\r\n如果你的博客也时常更新一些有价值的内容，希望能相互沟通，并且有兴趣交换友链，可以给我留言，<a href=\"https://www.gzpblog.com/friendlink\" target=\"_blank\" rel=\"noopener noreferrer\">友链</a>。', '关于我', '', 'inherit', 'closed', 'closed', '', '5-revision-v1', '', '', '2017-06-04 23:20:02', '2017-06-04 15:20:02', '', 5, 'https://www.gzpblog.com/20170604/998.html', 0, 'revision', '', 0),
(999, 1, '2017-06-05 18:06:40', '2017-06-05 10:06:40', '把Git的基础知识全部过了一遍，是看的<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener noreferrer\">Git的官方Documentation</a>，现在基本上能用Git工作了。不过看到阮一峰老师总结的命令非常不错，基本上把这些操作熟悉就够了，以下内容转自：<a href=\"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?20170208142509\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单 - 阮一峰的网络日志</a>；稍作增加与修改。\r\n\r\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\r\n\r\n<a href=\"http://files.gzpblog.com/wp/2017/02/git-work.png\"><img class=\"alignnone wp-image-616\" src=\"http://files.gzpblog.com/wp/2017/02/git-work-1024x297.png\" alt=\"\" width=\"787\" height=\"228\" /></a>\r\n\r\n几个专用名词的译名如下：\r\n<ul>\r\n 	<li>Workspace：工作区</li>\r\n 	<li>Index / Stage：暂存区</li>\r\n 	<li>Repository：仓库区（或本地仓库）</li>\r\n 	<li>Remote：远程仓库</li>\r\n</ul>\r\n<h2>一、新建代码库</h2>\r\n# 在当前目录新建一个Git代码库\r\n$ git init\r\n\r\n# 新建一个目录，将其初始化为Git代码库\r\n$ git init [project-name]\r\n\r\n# 下载一个项目和它的整个代码历史\r\n$ git clone [url]\r\n<h2>二、配置</h2>\r\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\r\n# 显示当前的Git配置\r\n$ git config --list\r\n\r\n# 编辑Git配置文件\r\n$ git config -e [--global]\r\n\r\n# 设置提交代码时的用户信息\r\n$ git config [--global] user.name \"[name]\"\r\n$ git config [--global] user.email \"[email address]\"\r\n<h2>三、增加/删除文件</h2>\r\n# 添加指定文件到暂存区\r\n$ git add [file1] [file2] ...\r\n\r\n# 添加指定目录到暂存区，包括子目录\r\n$ git add [dir]\r\n\r\n# 添加当前目录的所有文件到暂存区\r\n$ git add .\r\n\r\n# 添加每个变化前，都会要求确认\r\n# 对于同一个文件的多处变化，可以实现分次提交\r\n$ git add -p\r\n\r\n# 删除工作区文件，并且将这次删除放入暂存区\r\n$ git rm [file1] [file2] ...\r\n\r\n# 停止追踪指定文件，但该文件会保留在工作区\r\n$ git rm --cached [file]\r\n\r\n# 改名文件，并且将这个改名放入暂存区\r\n$ git mv [file-original] [file-renamed]\r\n<h2>四、代码提交</h2>\r\n# 提交暂存区到仓库区\r\n$ git commit -m [message]\r\n\r\n# 提交暂存区的指定文件到仓库区\r\n$ git commit [file1] [file2] ... -m [message]\r\n\r\n# 提交工作区自上次commit之后的变化，直接到仓库区\r\n$ git commit -a\r\n\r\n# 提交时显示所有diff信息\r\n$ git commit -v\r\n\r\n# 使用一次新的commit，替代上一次提交\r\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\r\n$ git commit --amend -m [message]\r\n\r\n# 重做上一次commit，并包括指定文件的新变化\r\n$ git commit --amend [file1] [file2] ...\r\n<h2>五、分支</h2>\r\n# 列出所有本地分支\r\n$ git branch\r\n\r\n# 列出所有远程分支\r\n$ git branch -r\r\n\r\n# 列出所有本地分支和远程分支\r\n$ git branch -a\r\n\r\n# 新建一个分支，但依然停留在当前分支\r\n$ git branch [branch-name]\r\n\r\n# 新建一个分支，并切换到该分支\r\n$ git checkout -b [branch]\r\n\r\n# 新建一个分支，指向指定commit\r\n$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系\r\n$ git branch --track [branch] [remote-branch]\r\n\r\n# 切换到指定分支，并更新工作区\r\n$ git checkout [branch-name]\r\n\r\n# 切换到上一个分支\r\n$ git checkout -\r\n\r\n# 建立追踪关系，在现有分支与指定的远程分支之间\r\n$ git branch --set-upstream [branch] [remote-branch]\r\n\r\n# 推送新分支到远程，并在远程建立分支和追踪关系\r\n$ git push --set-upstream [branch-name]\r\n\r\n# 合并指定分支到当前分支\r\n$ git merge [branch]\r\n\r\n# 选择一个commit，合并进当前分支\r\n$ git cherry-pick [commit]\r\n\r\n# 删除分支\r\n$ git branch -d [branch-name]\r\n\r\n# 删除远程分支\r\n$ git push origin --delete [branch-name]\r\n$ git branch -dr [remote/branch]\r\n<h2>六、标签</h2>\r\n# 列出所有tag\r\n$ git tag\r\n\r\n# 新建一个tag在当前commit\r\n$ git tag [tag]\r\n\r\n# 新建一个tag在指定commit\r\n$ git tag [tag] [commit]\r\n\r\n# 删除本地tag\r\n$ git tag -d [tag]\r\n\r\n# 删除远程tag\r\n$ git push origin :refs/tags/[tagName]\r\n\r\n# 查看tag信息\r\n$ git show [tag]\r\n\r\n# 提交指定tag\r\n$ git push [remote] [tag]\r\n\r\n# 提交所有tag\r\n$ git push [remote] --tags\r\n\r\n# 新建一个分支，指向某个tag\r\n$ git checkout -b [branch] [tag]\r\n<h2>七、查看信息</h2>\r\n# 显示有变更的文件\r\n$ git status\r\n\r\n# 显示当前分支的版本历史\r\n$ git log\r\n\r\n# 显示commit历史，以及每次commit发生变更的文件\r\n$ git log --stat\r\n\r\n# 搜索提交历史，根据关键词\r\n$ git log -S [keyword]\r\n\r\n# 显示某个commit之后的所有变动，每个commit占据一行\r\n$ git log [tag] HEAD --pretty=format:%s\r\n\r\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\r\n$ git log [tag] HEAD --grep feature\r\n\r\n# 显示某个文件的版本历史，包括文件改名\r\n$ git log --follow [file]\r\n$ git whatchanged [file]\r\n\r\n# 显示指定文件相关的每一次diff\r\n$ git log -p [file]\r\n\r\n# 显示过去5次提交\r\n$ git log -5 --pretty --oneline\r\n\r\n# 显示所有提交过的用户，按提交次数排序\r\n$ git shortlog -sn\r\n\r\n# 显示指定文件是什么人在什么时间修改过\r\n$ git blame [file]\r\n\r\n# 显示暂存区和工作区的差异\r\n$ git diff\r\n\r\n# 显示暂存区和上一个commit的差异\r\n$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异\r\n$ git diff HEAD\r\n\r\n# 显示两次提交之间的差异\r\n$ git diff [first-branch]...[second-branch]\r\n\r\n# 显示今天你写了多少行代码\r\n$ git diff --shortstat \"@{0 day ago}\"\r\n\r\n# 显示某次提交的元数据和内容变化\r\n$ git show [commit]\r\n\r\n# 显示某次提交发生变化的文件\r\n$ git show --name-only [commit]\r\n\r\n# 显示某次提交时，某个文件的内容\r\n$ git show [commit]:[filename]\r\n\r\n# 显示当前分支的最近几次提交\r\n$ git reflog\r\n<h2>八、远程同步</h2>\r\n# 下载远程仓库的所有变动\r\n$ git fetch [remote]\r\n\r\n# 显示所有远程仓库\r\n$ git remote -v\r\n\r\n# 显示某个远程仓库的信息\r\n$ git remote show [remote]\r\n\r\n# 增加一个新的远程仓库，并命名\r\n$ git remote add [shortname] [url]\r\n\r\n# 取回远程仓库的变化，并与本地分支合并\r\n$ git pull [remote] [branch]\r\n\r\n# 上传本地指定分支到远程仓库\r\n$ git push [remote] [branch]\r\n\r\n# 强行推送当前分支到远程仓库，即使有冲突\r\n$ git push [remote] --force\r\n\r\n# 推送所有分支到远程仓库\r\n$ git push [remote] --all\r\n<h2>九、撤销</h2>\r\n# 恢复暂存区的指定文件到工作区\r\n$ git checkout [file]\r\n\r\n# 恢复某个commit的指定文件到暂存区和工作区\r\n$ git checkout [commit] [file]\r\n\r\n# 恢复暂存区的所有文件到工作区\r\n$ git checkout .\r\n\r\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\r\n$ git reset [file]\r\n\r\n# 重置暂存区与工作区，与上一次commit保持一致\r\n$ git reset --hard\r\n\r\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\r\n$ git reset [commit]\r\n\r\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\r\n$ git reset --hard [commit]\r\n\r\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\r\n$ git reset --keep [commit]\r\n\r\n# 新建一个commit，用来撤销指定commit\r\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\r\n$ git revert [commit]\r\n\r\n# 暂时将未提交的变化移除，稍后再移入\r\n$ git stash\r\n$ git stash pop\r\n<h2>十、其他</h2>\r\n# 生成一个可供发布的压缩包\r\n$ git archive\r\n\r\n#配置git对文件名大小写敏感\r\n$ git config core.ignorecase false', '常用 Git 命令清单', '', 'inherit', 'closed', 'closed', '', '615-revision-v1', '', '', '2017-06-05 18:06:40', '2017-06-05 10:06:40', '', 615, 'https://www.gzpblog.com/20170605/999.html', 0, 'revision', '', 0),
(1000, 1, '2017-06-07 11:48:44', '2017-06-07 03:48:44', '<h2>一 GitBook介绍</h2>\r\nGitBook 是一个使用 Git 和 Markdown 来构建书籍的工具。它可以将你的书输出很多格式：PDF，ePub，mobi，或者输出为静态网页。\r\n\r\nGitBook工具链是开源并且完全免费的，它的源码可以在 GitHub 上获取。\r\n\r\n意思是<strong>GitBook其实就是一个命令行工具</strong>。\r\n\r\n而GitBook.com是一个GitBook 的平台，有点类似于Github，而gitbook面向书籍。\r\n<h2>二 工作流程图</h2>\r\n简单地画了一个工作流程图：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Gitbook使用流程.png\"><img class=\"size-full wp-image-1009 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Gitbook使用流程.png\" alt=\"\" width=\"750\" height=\"412\" /></a>\r\n\r\n&nbsp;\r\n\r\n不过这个图没有体现出多人合作，仅仅是个人工作。个人整体用下来，其实还是直接用gitbook editor最舒服，最方便，写文档还是方便为主。\r\n<h2>三 GitBook命令行工具的基本使用</h2>\r\n<h3>1. 安装gitbook和使用</h3>\r\n<h4>1）准备工作</h4>\r\n<div>安装Gitbook需要安装Node.js，因为要用到npm。</div>\r\n<div>node -v 查看node的版本号</div>\r\n<div>npm -v 查看npm的版本号</div>\r\n<h4>2）NPM安装gitbook cli</h4>\r\n<div>$ npm install gitbook-cli -g</div>\r\n<h4>3）初始化项目</h4>\r\n<div>创建目录，切换到目录下，执行：gitbook init</div>\r\n<div>会自动创建 README.md 和 SUMMARY.md 这两个必须文件；README.md 是对书籍的简单介绍；SUMMARY.md 是书籍的目录结构。</div>\r\n<h4>4） 预览电子书内容</h4>\r\n<ul>\r\n 	<li>gitbook build . ./output</li>\r\n</ul>\r\n<div>根据 gitbook init 生成的 md 文件生成对应的 html 文件；output为要输出的目录，不写默认为电子书项目目录中创建一个名为“_book”的文件夹</div>\r\n<ul>\r\n 	<li>gitbook serve</li>\r\n</ul>\r\n<div>本地预览，浏览器打开http://localhost:4000进行预览；退出命令行结束预览</div>\r\n<h4>5）常用命令</h4>\r\n<div>gitbook help //列出gitbook所有的命令</div>\r\n<div>gitbook --help //输出gitbook-cli的帮助信息</div>\r\n<div>gitbook build --gitbook=2.0.1 //生成时指定gitbook的版本, 本地没有会先下载</div>\r\n<div>gitbook ls //列出本地所有的gitbook版本</div>\r\n<div>gitbook ls-remote //列出远程可用的gitbook版本</div>\r\n<div>gitbook fetch 标签/版本号 //安装对应的gitbook版本</div>\r\n<div>gitbook update //更新到gitbook的最新版本</div>\r\n<div>gitbook uninstall 2.0.1 //卸载对应的gitbook版本</div>\r\n<div>gitbook build --log=debug //指定log的级别</div>\r\n<div>gitbook builid --debug //输出错误信息</div>\r\n<h2>四 gitbook.com平台的使用</h2>\r\n<h3>1. 注册Gitbook.com</h3>\r\n<div>官网：<a href=\"http://gitbook.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.gitbook.com</a></div>\r\n<h3>2. 使用方式——远程仓库构建</h3>\r\n<h4>1）直接在gitbook.com上创建，撰写，发布等等</h4>\r\n<div>gitbook官网国内打开速度有时候简直感人，不推荐在上面直接耍。</div>\r\n<ul>\r\n 	<li>创建普通的一些文档类型：</li>\r\n</ul>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com1_.png\"><img class=\"wp-image-1006 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com1_.png\" alt=\"\" width=\"617\" height=\"384\" /></a></div>\r\n<ul>\r\n 	<li>其他操作，都很简单明了，这里不一一说了。</li>\r\n</ul>\r\n<h4>2）使用Gitbook Editor</h4>\r\n<div>类似于一个集成了Markdown编辑器的git管理软件；但是这个软件国内下载速度简直扎心。</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com2_.png\"><img class=\" wp-image-1002 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com2_-1024x514.png\" alt=\"\" width=\"859\" height=\"431\" /></a></div>\r\n<ul>\r\n 	<li>登录后，会有gitbook远程的书籍数据，可以clone打本地进行编辑，然后保存推送等等操作。</li>\r\n 	<li>gitbook上还没创建的话会提示到gitbook.com上创建，本地创建的是本地书籍。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com3_.png\"><img class=\"size-full wp-image-1003 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com3_.png\" alt=\"\" width=\"423\" height=\"178\" /></a>\r\n<ul>\r\n 	<li>其它的操作也是所见即所得，比较简单明了。</li>\r\n</ul>\r\n<h3>3. Gitbook + Github协同工作</h3>\r\n<ul>\r\n 	<li>先到Gitbook官网设置setting的Github部分；设置与Github帐号的关联，并添加github的gitbook支持。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com4_.png\"><img class=\" wp-image-1004 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com4_-1024x771.png\" alt=\"\" width=\"711\" height=\"536\" /></a>\r\n<ul>\r\n 	<li>Github创建一个要用来关联的repository。</li>\r\n 	<li>创建一个与github关联的书籍，左侧选择github，右侧选择一个github的项目（如果上一步integration设置好了就有了），填好信息Create。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com5_.png\"><img class=\"size-full wp-image-1007 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com5_.png\" alt=\"\" width=\"838\" height=\"526\" /></a>\r\n<ul>\r\n 	<li>完成之后就创建了一个与github仓库关联的书籍，创建了关联的好处在于；可以像平时玩github一样在github来更新你的gitbook书籍，而同时也可以用gitbook/gitbook editor，git操纵gitbook来更新；两边会同步。</li>\r\n</ul>\r\n<h2>五 使用Git更新书本</h2>\r\n<div>通过 Git 命令行来推送内容更新你的书本</div>\r\n<h4>1) GIT Url</h4>\r\n<div>git url的格式是：</div>\r\n<div>https://git.gitbook.com/{{UserName}}/{{Book}}.git</div>\r\n<div>（GitBook的git服务器暂时还不支持ssh协议）</div>\r\n<h4>2） 在Git命令行创建一个新的仓库</h4>\r\n<div>touch README.md SUMMARY.md</div>\r\n<div>git init</div>\r\n<div>git add README.md SUMMARY.md</div>\r\n<div>git commit -m \"first commit\"</div>\r\n<div>git remote add gitbook https://git.gitbook.com/{{UserName}}/{{Book}}.git</div>\r\n<div>git push -u gitbook master</div>\r\n<h4>3. 推送一个已存在的仓库</h4>\r\n<div>git remote add gitbook https://git.gitbook.com/{{UserName}}/{{Book}}.git</div>\r\n<div>git push -u gitbook master</div>\r\n<div>\r\n<h2>六 编写书籍</h2>\r\n<div>剩下的就是好好写东西了。</div>\r\n<div>编写书籍的格式，markdown的语法，gitbook文件的格式等可以查看这个文档：<a href=\"https://chrisniael.gitbooks.io/gitbook-documentation/content/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">gitbook-documentation</a></div>\r\n</div>\r\n<div></div>', '使用Gitbook编写书籍文档', '', 'publish', 'open', 'closed', '', '%e4%bd%bf%e7%94%a8gitbook%e7%bc%96%e5%86%99%e4%b9%a6%e7%b1%8d%e6%96%87%e6%a1%a3', '', '', '2017-06-07 11:48:44', '2017-06-07 03:48:44', '', 0, 'https://www.gzpblog.com/?p=1000', 0, 'post', '', 1),
(1009, 1, '2017-06-07 11:48:12', '2017-06-07 03:48:12', '', 'Gitbook使用流程', '', 'inherit', 'open', 'closed', '', 'gitbook%e4%bd%bf%e7%94%a8%e6%b5%81%e7%a8%8b', '', '', '2017-06-07 11:48:12', '2017-06-07 03:48:12', '', 1000, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Gitbook使用流程.png', 0, 'attachment', 'image/png', 0),
(1002, 1, '2017-06-07 11:24:17', '2017-06-07 03:24:17', '', '使用gitbook.com2', '', 'inherit', 'open', 'closed', '', '%e4%bd%bf%e7%94%a8gitbook-com2', '', '', '2017-06-07 11:24:17', '2017-06-07 03:24:17', '', 1000, 'https://www.gzpblog.com/wp-content/uploads/2017/06/使用gitbook.com2_.png', 0, 'attachment', 'image/png', 0),
(1003, 1, '2017-06-07 11:24:19', '2017-06-07 03:24:19', '', '使用gitbook.com3', '', 'inherit', 'open', 'closed', '', '%e4%bd%bf%e7%94%a8gitbook-com3', '', '', '2017-06-07 11:24:19', '2017-06-07 03:24:19', '', 1000, 'https://www.gzpblog.com/wp-content/uploads/2017/06/使用gitbook.com3_.png', 0, 'attachment', 'image/png', 0),
(1004, 1, '2017-06-07 11:24:20', '2017-06-07 03:24:20', '', '使用gitbook.com4', '', 'inherit', 'open', 'closed', '', '%e4%bd%bf%e7%94%a8gitbook-com4', '', '', '2017-06-07 11:24:20', '2017-06-07 03:24:20', '', 1000, 'https://www.gzpblog.com/wp-content/uploads/2017/06/使用gitbook.com4_.png', 0, 'attachment', 'image/png', 0),
(1005, 1, '2017-06-07 11:24:22', '2017-06-07 03:24:22', '', 'Gitbook editor', '', 'inherit', 'open', 'closed', '', 'gitbook-editor', '', '', '2017-06-07 11:24:22', '2017-06-07 03:24:22', '', 1000, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Gitbook-editor.jpg', 0, 'attachment', 'image/jpeg', 0),
(1006, 1, '2017-06-07 11:24:23', '2017-06-07 03:24:23', '', '使用gitbook.com1', '', 'inherit', 'open', 'closed', '', '%e4%bd%bf%e7%94%a8gitbook-com1', '', '', '2017-06-07 11:24:23', '2017-06-07 03:24:23', '', 1000, 'https://www.gzpblog.com/wp-content/uploads/2017/06/使用gitbook.com1_.png', 0, 'attachment', 'image/png', 0),
(1007, 1, '2017-06-07 11:28:42', '2017-06-07 03:28:42', '', '使用gitbook.com5', '', 'inherit', 'open', 'closed', '', '%e4%bd%bf%e7%94%a8gitbook-com5', '', '', '2017-06-07 11:28:42', '2017-06-07 03:28:42', '', 1000, 'https://www.gzpblog.com/wp-content/uploads/2017/06/使用gitbook.com5_.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1008, 1, '2017-06-07 11:39:34', '2017-06-07 03:39:34', '<h2>一 GitBook介绍</h2>\r\nGitBook 是一个使用 Git 和 Markdown 来构建书籍的工具。它可以将你的书输出很多格式：PDF，ePub，mobi，或者输出为静态网页。\r\n\r\nGitBook工具链是开源并且完全免费的，它的源码可以在 GitHub 上获取。\r\n\r\n意思是<strong>GitBook其实就是一个命令行工具</strong>。\r\n\r\n而GitBook.com是一个GitBook 的平台，有点类似于Github，而gitbook面向书籍。\r\n<h2>二 工作流程图</h2>\r\n简单地画了一个工作流程图：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Gitbook使用流程.png\"><img class=\"size-full wp-image-1001 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Gitbook使用流程.png\" alt=\"\" width=\"742\" height=\"412\" /></a>\r\n\r\n不过这个图没有体现出多人合作，仅仅是个人工作。个人整体用下来，其实还是直接用gitbook editor最舒服，最方便，写文档还是方便为主。\r\n<h2>三 GitBook命令行工具的基本使用</h2>\r\n<h3>1. 安装gitbook和使用</h3>\r\n<h4>1）准备工作</h4>\r\n<div>安装Gitbook需要安装Node.js，因为要用到npm。</div>\r\n<div>node -v 查看node的版本号</div>\r\n<div>npm -v 查看npm的版本号</div>\r\n<h4>2）NPM安装gitbook cli</h4>\r\n<div>$ npm install gitbook-cli -g</div>\r\n<h4>3）初始化项目</h4>\r\n<div>创建目录，切换到目录下，执行：gitbook init</div>\r\n<div>会自动创建 README.md 和 SUMMARY.md 这两个必须文件；README.md 是对书籍的简单介绍；SUMMARY.md 是书籍的目录结构。</div>\r\n<h4>4） 预览电子书内容</h4>\r\n<ul>\r\n 	<li>gitbook build . ./output</li>\r\n</ul>\r\n<div>根据 gitbook init 生成的 md 文件生成对应的 html 文件；output为要输出的目录，不写默认为电子书项目目录中创建一个名为“_book”的文件夹</div>\r\n<ul>\r\n 	<li>gitbook serve</li>\r\n</ul>\r\n<div>本地预览，浏览器打开http://localhost:4000进行预览；退出命令行结束预览</div>\r\n<h4>5）常用命令</h4>\r\n<div>gitbook help //列出gitbook所有的命令</div>\r\n<div>gitbook --help //输出gitbook-cli的帮助信息</div>\r\n<div>gitbook build --gitbook=2.0.1 //生成时指定gitbook的版本, 本地没有会先下载</div>\r\n<div>gitbook ls //列出本地所有的gitbook版本</div>\r\n<div>gitbook ls-remote //列出远程可用的gitbook版本</div>\r\n<div>gitbook fetch 标签/版本号 //安装对应的gitbook版本</div>\r\n<div>gitbook update //更新到gitbook的最新版本</div>\r\n<div>gitbook uninstall 2.0.1 //卸载对应的gitbook版本</div>\r\n<div>gitbook build --log=debug //指定log的级别</div>\r\n<div>gitbook builid --debug //输出错误信息</div>\r\n<h2>四 gitbook.com平台的使用</h2>\r\n<h3>1. 注册Gitbook.com</h3>\r\n<div>官网：<a href=\"http://gitbook.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.gitbook.com</a></div>\r\n<h3>2. 使用方式——远程仓库构建</h3>\r\n<h4>1）直接在gitbook.com上创建，撰写，发布等等</h4>\r\n<div>gitbook官网国内打开速度有时候简直感人，不推荐在上面直接耍。</div>\r\n<ul>\r\n 	<li>创建普通的一些文档类型：</li>\r\n</ul>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com1_.png\"><img class=\"wp-image-1006 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com1_.png\" alt=\"\" width=\"617\" height=\"384\" /></a></div>\r\n<ul>\r\n 	<li>其他操作，都很简单明了，这里不一一说了。</li>\r\n</ul>\r\n<h4>2）使用Gitbook Editor</h4>\r\n<div>类似于一个集成了Markdown编辑器的git管理软件；但是这个软件国内下载速度简直扎心。</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com2_.png\"><img class=\" wp-image-1002 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com2_-1024x514.png\" alt=\"\" width=\"859\" height=\"431\" /></a></div>\r\n<ul>\r\n 	<li>登录后，会有gitbook远程的书籍数据，可以clone打本地进行编辑，然后保存推送等等操作。</li>\r\n 	<li>gitbook上还没创建的话会提示到gitbook.com上创建，本地创建的是本地书籍。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com3_.png\"><img class=\"size-full wp-image-1003 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com3_.png\" alt=\"\" width=\"423\" height=\"178\" /></a>\r\n<ul>\r\n 	<li>其它的操作也是所见即所得，比较简单明了。</li>\r\n</ul>\r\n<h3>3. Gitbook + Github协同工作</h3>\r\n<ul>\r\n 	<li>先到Gitbook官网设置setting的Github部分；设置与Github帐号的关联，并添加github的gitbook支持。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com4_.png\"><img class=\" wp-image-1004 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com4_-1024x771.png\" alt=\"\" width=\"711\" height=\"536\" /></a>\r\n<ul>\r\n 	<li>Github创建一个要用来关联的repository。</li>\r\n 	<li>创建一个与github关联的书籍，左侧选择github，右侧选择一个github的项目（如果上一步integration设置好了就有了），填好信息Create。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com5_.png\"><img class=\"size-full wp-image-1007 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com5_.png\" alt=\"\" width=\"838\" height=\"526\" /></a>\r\n<ul>\r\n 	<li>完成之后就创建了一个与github仓库关联的书籍，创建了关联的好处在于；可以像平时玩github一样在github来更新你的gitbook书籍，而同时也可以用gitbook/gitbook editor，git操纵gitbook来更新；两边会同步。</li>\r\n</ul>\r\n<h2>五 使用Git更新书本</h2>\r\n<div>通过 Git 命令行来推送内容更新你的书本</div>\r\n<h4>1) GIT Url</h4>\r\n<div>git url的格式是：</div>\r\n<div>https://git.gitbook.com/{{UserName}}/{{Book}}.git</div>\r\n<div>（GitBook的git服务器暂时还不支持ssh协议）</div>\r\n<h4>2） 在Git命令行创建一个新的仓库</h4>\r\n<div>touch README.md SUMMARY.md</div>\r\n<div>git init</div>\r\n<div>git add README.md SUMMARY.md</div>\r\n<div>git commit -m \"first commit\"</div>\r\n<div>git remote add gitbook https://git.gitbook.com/{{UserName}}/{{Book}}.git</div>\r\n<div>git push -u gitbook master</div>\r\n<h4>3. 推送一个已存在的仓库</h4>\r\n<div>git remote add gitbook https://git.gitbook.com/{{UserName}}/{{Book}}.git</div>\r\n<div>git push -u gitbook master</div>\r\n<div>\r\n<h2>六 编写书籍</h2>\r\n<div>剩下的就是好好写东西了。</div>\r\n<div>编写书籍的格式，markdown的语法，gitbook文件的格式等可以查看这个文档：<a href=\"https://chrisniael.gitbooks.io/gitbook-documentation/content/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">gitbook-documentation</a></div>\r\n</div>\r\n<div></div>', '使用Gitbook编写书籍文档', '', 'inherit', 'closed', 'closed', '', '1000-revision-v1', '', '', '2017-06-07 11:39:34', '2017-06-07 03:39:34', '', 1000, 'https://www.gzpblog.com/20170607/1008.html', 0, 'revision', '', 0),
(1010, 1, '2017-06-07 11:48:44', '2017-06-07 03:48:44', '<h2>一 GitBook介绍</h2>\r\nGitBook 是一个使用 Git 和 Markdown 来构建书籍的工具。它可以将你的书输出很多格式：PDF，ePub，mobi，或者输出为静态网页。\r\n\r\nGitBook工具链是开源并且完全免费的，它的源码可以在 GitHub 上获取。\r\n\r\n意思是<strong>GitBook其实就是一个命令行工具</strong>。\r\n\r\n而GitBook.com是一个GitBook 的平台，有点类似于Github，而gitbook面向书籍。\r\n<h2>二 工作流程图</h2>\r\n简单地画了一个工作流程图：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Gitbook使用流程.png\"><img class=\"size-full wp-image-1009 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Gitbook使用流程.png\" alt=\"\" width=\"750\" height=\"412\" /></a>\r\n\r\n&nbsp;\r\n\r\n不过这个图没有体现出多人合作，仅仅是个人工作。个人整体用下来，其实还是直接用gitbook editor最舒服，最方便，写文档还是方便为主。\r\n<h2>三 GitBook命令行工具的基本使用</h2>\r\n<h3>1. 安装gitbook和使用</h3>\r\n<h4>1）准备工作</h4>\r\n<div>安装Gitbook需要安装Node.js，因为要用到npm。</div>\r\n<div>node -v 查看node的版本号</div>\r\n<div>npm -v 查看npm的版本号</div>\r\n<h4>2）NPM安装gitbook cli</h4>\r\n<div>$ npm install gitbook-cli -g</div>\r\n<h4>3）初始化项目</h4>\r\n<div>创建目录，切换到目录下，执行：gitbook init</div>\r\n<div>会自动创建 README.md 和 SUMMARY.md 这两个必须文件；README.md 是对书籍的简单介绍；SUMMARY.md 是书籍的目录结构。</div>\r\n<h4>4） 预览电子书内容</h4>\r\n<ul>\r\n 	<li>gitbook build . ./output</li>\r\n</ul>\r\n<div>根据 gitbook init 生成的 md 文件生成对应的 html 文件；output为要输出的目录，不写默认为电子书项目目录中创建一个名为“_book”的文件夹</div>\r\n<ul>\r\n 	<li>gitbook serve</li>\r\n</ul>\r\n<div>本地预览，浏览器打开http://localhost:4000进行预览；退出命令行结束预览</div>\r\n<h4>5）常用命令</h4>\r\n<div>gitbook help //列出gitbook所有的命令</div>\r\n<div>gitbook --help //输出gitbook-cli的帮助信息</div>\r\n<div>gitbook build --gitbook=2.0.1 //生成时指定gitbook的版本, 本地没有会先下载</div>\r\n<div>gitbook ls //列出本地所有的gitbook版本</div>\r\n<div>gitbook ls-remote //列出远程可用的gitbook版本</div>\r\n<div>gitbook fetch 标签/版本号 //安装对应的gitbook版本</div>\r\n<div>gitbook update //更新到gitbook的最新版本</div>\r\n<div>gitbook uninstall 2.0.1 //卸载对应的gitbook版本</div>\r\n<div>gitbook build --log=debug //指定log的级别</div>\r\n<div>gitbook builid --debug //输出错误信息</div>\r\n<h2>四 gitbook.com平台的使用</h2>\r\n<h3>1. 注册Gitbook.com</h3>\r\n<div>官网：<a href=\"http://gitbook.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.gitbook.com</a></div>\r\n<h3>2. 使用方式——远程仓库构建</h3>\r\n<h4>1）直接在gitbook.com上创建，撰写，发布等等</h4>\r\n<div>gitbook官网国内打开速度有时候简直感人，不推荐在上面直接耍。</div>\r\n<ul>\r\n 	<li>创建普通的一些文档类型：</li>\r\n</ul>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com1_.png\"><img class=\"wp-image-1006 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com1_.png\" alt=\"\" width=\"617\" height=\"384\" /></a></div>\r\n<ul>\r\n 	<li>其他操作，都很简单明了，这里不一一说了。</li>\r\n</ul>\r\n<h4>2）使用Gitbook Editor</h4>\r\n<div>类似于一个集成了Markdown编辑器的git管理软件；但是这个软件国内下载速度简直扎心。</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com2_.png\"><img class=\" wp-image-1002 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com2_-1024x514.png\" alt=\"\" width=\"859\" height=\"431\" /></a></div>\r\n<ul>\r\n 	<li>登录后，会有gitbook远程的书籍数据，可以clone打本地进行编辑，然后保存推送等等操作。</li>\r\n 	<li>gitbook上还没创建的话会提示到gitbook.com上创建，本地创建的是本地书籍。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com3_.png\"><img class=\"size-full wp-image-1003 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com3_.png\" alt=\"\" width=\"423\" height=\"178\" /></a>\r\n<ul>\r\n 	<li>其它的操作也是所见即所得，比较简单明了。</li>\r\n</ul>\r\n<h3>3. Gitbook + Github协同工作</h3>\r\n<ul>\r\n 	<li>先到Gitbook官网设置setting的Github部分；设置与Github帐号的关联，并添加github的gitbook支持。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com4_.png\"><img class=\" wp-image-1004 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com4_-1024x771.png\" alt=\"\" width=\"711\" height=\"536\" /></a>\r\n<ul>\r\n 	<li>Github创建一个要用来关联的repository。</li>\r\n 	<li>创建一个与github关联的书籍，左侧选择github，右侧选择一个github的项目（如果上一步integration设置好了就有了），填好信息Create。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com5_.png\"><img class=\"size-full wp-image-1007 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/使用gitbook.com5_.png\" alt=\"\" width=\"838\" height=\"526\" /></a>\r\n<ul>\r\n 	<li>完成之后就创建了一个与github仓库关联的书籍，创建了关联的好处在于；可以像平时玩github一样在github来更新你的gitbook书籍，而同时也可以用gitbook/gitbook editor，git操纵gitbook来更新；两边会同步。</li>\r\n</ul>\r\n<h2>五 使用Git更新书本</h2>\r\n<div>通过 Git 命令行来推送内容更新你的书本</div>\r\n<h4>1) GIT Url</h4>\r\n<div>git url的格式是：</div>\r\n<div>https://git.gitbook.com/{{UserName}}/{{Book}}.git</div>\r\n<div>（GitBook的git服务器暂时还不支持ssh协议）</div>\r\n<h4>2） 在Git命令行创建一个新的仓库</h4>\r\n<div>touch README.md SUMMARY.md</div>\r\n<div>git init</div>\r\n<div>git add README.md SUMMARY.md</div>\r\n<div>git commit -m \"first commit\"</div>\r\n<div>git remote add gitbook https://git.gitbook.com/{{UserName}}/{{Book}}.git</div>\r\n<div>git push -u gitbook master</div>\r\n<h4>3. 推送一个已存在的仓库</h4>\r\n<div>git remote add gitbook https://git.gitbook.com/{{UserName}}/{{Book}}.git</div>\r\n<div>git push -u gitbook master</div>\r\n<div>\r\n<h2>六 编写书籍</h2>\r\n<div>剩下的就是好好写东西了。</div>\r\n<div>编写书籍的格式，markdown的语法，gitbook文件的格式等可以查看这个文档：<a href=\"https://chrisniael.gitbooks.io/gitbook-documentation/content/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">gitbook-documentation</a></div>\r\n</div>\r\n<div></div>', '使用Gitbook编写书籍文档', '', 'inherit', 'closed', 'closed', '', '1000-revision-v1', '', '', '2017-06-07 11:48:44', '2017-06-07 03:48:44', '', 1000, 'https://www.gzpblog.com/20170607/1010.html', 0, 'revision', '', 0),
(1011, 1, '2017-06-07 12:12:19', '2017-06-07 04:12:19', '<h2>工具</h2>\r\n<h3>版本控制</h3>\r\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\r\n\r\n&nbsp;\r\n<h3>代码管理</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\r\n\r\n&nbsp;\r\n<h3>测试相关</h3>\r\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>\r\n\r\n&nbsp;\r\n<h3>其它</h3>\r\n<a href=\"https://www.gzpblog.com/20170607/1000.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Gitbook编写书籍文档</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-revision-v1', '', '', '2017-06-07 12:12:19', '2017-06-07 04:12:19', '', 978, 'https://www.gzpblog.com/20170607/1011.html', 0, 'revision', '', 0),
(1012, 1, '2017-06-07 12:12:42', '2017-06-07 04:12:42', '<h2>工具</h2>\r\n<h3>版本控制</h3>\r\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\r\n<h3>代码管理</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\r\n<h3>测试相关</h3>\r\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>\r\n<h3>其它</h3>\r\n<a href=\"https://www.gzpblog.com/20170607/1000.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Gitbook编写书籍文档</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-revision-v1', '', '', '2017-06-07 12:12:42', '2017-06-07 04:12:42', '', 978, 'https://www.gzpblog.com/20170607/1012.html', 0, 'revision', '', 0),
(1170, 1, '2017-07-20 16:38:12', '2017-07-20 08:38:12', ' ', '', '', 'publish', 'closed', 'closed', '', '1170', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 66, 'https://www.gzpblog.com/?p=1170', 7, 'nav_menu_item', '', 0),
(1016, 1, '2017-06-11 17:15:06', '2017-06-11 09:15:06', '我本是一枚扫大街的（环境科学专业），却走上了IT男的不归路。\r\n\r\n为什么？我仅仅是想做一些自己想做的事情，自己控制自己的人生，我从来没有这么充实过。\r\n\r\n但是起步有点晚，也知道自己落下了很多，也比较想快速提升自己，导致有点急功近利，又或者说，有点急躁。我不断地提醒自己，不要急，慢慢来，一步一步走！\r\n\r\n2015.7.1 毕业；2015.9.1 前往上海，开始转行历程，开始学习PHP；2016.2.16 开始了我的第一份工作，做电商B2B平台的开发；并（尴尬地）学会了各种修理网络，修理电脑的技巧。2016.5.24 第一次跳槽，有点快，做APP服务端接口，后台管理系统，微信公众号及其接口。2016.11.27 由于某些原因，离开上海，回到广东，于是开始在深圳工作。\r\n\r\n我现在主学PHP，不过我希望接下来一段时间内我的学习路线是这样的：\r\n<ul>\r\n 	<li>PHP的道路不要停，巩固基础，而且接下来要学Swoole。</li>\r\n 	<li>学习Golang，不能只会一门语言，Go看起来非常对我的胃口，适当学习起来。</li>\r\n 	<li>写写前端，不用太深入，自己写东西时能够实现自己的需求就行。</li>\r\n 	<li>补补计算机基础，数据结构算法，网络通信什么的。</li>\r\n</ul>\r\n不止是这些，还有很多其它额外的东西要学，比如最近开始了解Docker；还有一些其它与业务有联系的生态，Redis啊MongoDB啊等等很多内容；还有最近出现不久的PHP-X似乎也很有意思。\r\n\r\n虽然起步慢了很多，但是我正在好好学，目前为止我很充实，对技术有很高的热情。感觉自己成长也比较快，不过有也个硬伤，似乎成长为了依赖搜索引擎的业务型选手，比如有一个函数可以实现这个功能，但是想不起来具体叫什么或者具体的参数，但是搜一下，可以很快地反应过来，对对对就是这个，然后拿来用。其实也就是基础不够扎实，包括很多计算器基础的知识，确实落下了很多。\r\n\r\n&nbsp;\r\n\r\n来来来，搞起！\r\n\r\n扫大街的终于想起了那一夜键盘滋啦滋啦声的恐惧......\r\n\r\n&nbsp;\r\n\r\n我的博客历程：<a href=\"http://www.gzpblog.com/blog-time\" target=\"_blank\" rel=\"noopener noreferrer\">博客历程</a>\r\n\r\n如果你的博客也时常更新一些有价值的内容，希望能相互沟通，并且有兴趣交换友链，可以给我留言，<a href=\"https://www.gzpblog.com/friendlink\" target=\"_blank\" rel=\"noopener noreferrer\">友链</a>。', '关于我', '', 'inherit', 'closed', 'closed', '', '5-revision-v1', '', '', '2017-06-11 17:15:06', '2017-06-11 09:15:06', '', 5, 'https://www.gzpblog.com/20170611/1016.html', 0, 'revision', '', 0),
(1017, 1, '2017-06-11 17:17:32', '2017-06-11 09:17:32', '我本是一枚扫大街的（环境科学专业），却走上了IT男的不归路。\r\n\r\n为什么？我仅仅是想做一些自己想做的事情，自己控制自己的人生，我从来没有这么充实过。\r\n\r\n但是起步有点晚，也知道自己落下了很多，也比较想快速提升自己，导致有点急功近利，又或者说，有点急躁。我不断地提醒自己，不要急，慢慢来，一步一步走！\r\n\r\n2015.7.1 毕业；2015.9.1 前往上海，开始转行历程，开始学习PHP；2016.2.16 开始了我的第一份工作，做电商B2B平台的开发；并（尴尬地）学会了各种修理网络，修理电脑的技巧。2016.5.24 第一次跳槽，有点快，做APP服务端接口，后台管理系统，微信公众号及其接口。2016.11.27 由于某些原因，离开上海，回到广东，于是开始在深圳工作。\r\n\r\n我现在主学PHP，不过我希望接下来一段时间内我的学习路线是这样的：\r\n<ul>\r\n 	<li>PHP的道路不要停，巩固基础，而且接下来要学Swoole。</li>\r\n 	<li>学习Golang，不能只会一门语言，Go看起来非常对我的胃口，适当学习起来。</li>\r\n 	<li>写写前端，不用太深入，自己写东西时能够实现自己的需求就行。</li>\r\n 	<li>补补计算机基础，数据结构算法，网络通信什么的。</li>\r\n</ul>\r\n不止是这些，还有很多其它额外的东西要学，比如最近开始了解Docker；还有一些其它与业务有联系的生态，Redis啊MongoDB啊等等很多内容；还有最近出现不久的PHP-X似乎也很有意思。\r\n\r\n虽然起步慢了很多，但是我正在好好学，目前为止我很充实，对技术有很高的热情。感觉自己成长也比较快，不过有也个硬伤，似乎成长为了依赖搜索引擎的业务型选手，比如有一个函数可以实现这个功能，但是想不起来具体叫什么或者具体的参数，但是搜一下，可以很快地反应过来，对对对就是这个，然后拿来用。其实也就是基础不够扎实，包括很多计算器基础的知识，确实落下了很多。\r\n\r\n2017.6.11更新\r\n\r\n&nbsp;\r\n\r\n来来来，搞起！\r\n\r\n扫大街的终于想起了那一夜键盘滋啦滋啦声的恐惧......\r\n\r\n&nbsp;\r\n\r\n我的博客历程：<a href=\"http://www.gzpblog.com/blog-time\" target=\"_blank\" rel=\"noopener noreferrer\">博客历程</a>\r\n\r\n如果你的博客也时常更新一些有价值的内容，希望能相互沟通，并且有兴趣交换友链，可以给我留言，<a href=\"https://www.gzpblog.com/friendlink\" target=\"_blank\" rel=\"noopener noreferrer\">友链</a>。', '关于我', '', 'inherit', 'closed', 'closed', '', '5-revision-v1', '', '', '2017-06-11 17:17:32', '2017-06-11 09:17:32', '', 5, 'https://www.gzpblog.com/20170611/1017.html', 0, 'revision', '', 0),
(1033, 1, '2017-06-20 09:23:33', '2017-06-20 01:23:33', '<h2>一 关于PSR-1</h2>\r\n<div>本篇规范制定了代码基本元素的相关标准，以确保共享的PHP代码间具有较高程度的技术互通性。</div>\r\n<div>本篇能愿动词解释：</div>\r\n<ul>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\n<div>PHP-FIG 官网 PSR-1 详解： <a href=\"http://www.php-fig.org/psr/psr-1/\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-1: Basic Coding Standard</a></div>\r\n<h2>二 PSR-1具体内容</h2>\r\n<h3>1. 概览</h3>\r\n<ul>\r\n 	<li>PHP代码文件 必须 以 &lt;?php 或 &lt;?= 标签开始；</li>\r\n 	<li>PHP代码文件 必须 以 不带 BOM 的 UTF-8 编码；</li>\r\n 	<li>PHP代码中 应该 只定义类、函数、常量等声明，或其他会产生 副作用 的操作（如：生成文件输出以及修改 .ini 配置文件等），二者只能选其一；</li>\r\n 	<li>命名空间以及类 必须 符合 PSR 的自动加载规范：PSR-0（已废弃） 和 PSR-4 中的一个；</li>\r\n 	<li>类的命名 必须 遵循 StudlyCaps 大写开头的驼峰命名规范；</li>\r\n 	<li>类中的常量所有字母都 必须 大写，单词间用下划线分隔；</li>\r\n 	<li>方法名称 必须 符合 camelCase 式的小写开头驼峰命名规范。</li>\r\n</ul>\r\n<h3>2. 文件</h3>\r\n<h4>2.1 PHP标签</h4>\r\n<div>PHP代码 必须 使用<strong> &lt;?php ?&gt;</strong> 长标签 或 <strong>&lt;?= ?&gt;</strong> 短输出标签； 一定不可 使用其它自定义标签。</div>\r\n<div>\r\n<h4>2.2 字符编码</h4>\r\n<div>PHP代码 必须 且只可使用 <strong>不带BOM的UTF-8</strong> 编码。</div>\r\n<div>\r\n<h4>2.3 副作用</h4>\r\n<div>一份 PHP 文件中 应该 要不就只定义新的声明，如类、函数或常量等不产生 副作用 的操作，要不就只书写会产生 副作用 的逻辑操作，但 不该 同时具有两者。</div>\r\n<div>”副作用”(side effects) 一词的意思是，仅仅通过包含文件，不直接声明类、函数和常量等，而执行的逻辑操作。</div>\r\n<div>\r\n<div>”副作用”包含却不仅限于：</div>\r\n<ul>\r\n 	<li>生成输出</li>\r\n 	<li>直接的 require 或 include</li>\r\n 	<li>连接外部服务</li>\r\n 	<li>修改 ini 配置</li>\r\n 	<li>抛出错误或异常</li>\r\n 	<li>修改全局或静态变量</li>\r\n 	<li>读或写文件等</li>\r\n</ul>\r\n<div>以下是一个 反例，一份包含“函数声明”以及产生“副作用”的代码：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\n// 「副作用」：修改 ini 配置\r\nini_set(\'error_reporting\', E_ALL);\r\n\r\n// 「副作用」：引入文件\r\ninclude &quot;file.php&quot;;\r\n\r\n// 「副作用」：生成输出\r\necho &quot;&lt;html&gt;\\n&quot;;\r\n\r\n// 声明函数\r\nfunction foo()\r\n{\r\n    // 函数主体部分\r\n}\r\n[/php]\r\n\r\n</div>\r\n<div>\r\n<div>下面是一个范例，一份只包含声明不产生「副作用」的代码：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\n// 声明函数\r\nfunction foo()\r\n{\r\n    // 函数主体部分\r\n}\r\n\r\n// 条件声明 **不** 属于「副作用」\r\nif (! function_exists(\'bar\')) {\r\n    function bar()\r\n    {\r\n        // 函数主体部分\r\n    }\r\n}\r\n[/php]\r\n\r\n</div>\r\n<h3>3. 命名空间和类</h3>\r\n<ul>\r\n 	<li>命名空间以及类的命名必须遵循 PSR-4。</li>\r\n 	<li>每个类都独立为一个文件</li>\r\n 	<li>命名空间至少有一个层次：顶级的组织名称（vendor name）</li>\r\n 	<li>类的命名 必须 遵循 StudlyCaps 大写开头的驼峰命名规范。</li>\r\n 	<li>PHP 5.3 及以后版本的代码 必须 使用正式的命名空间。</li>\r\n</ul>\r\n<div>例如：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\n// PHP 5.3及以后版本的写法\r\nnamespace Vendor\\Model;\r\n\r\nclass Foo\r\n{\r\n}\r\n[/php]\r\n\r\n</div>\r\n<div>5.2.x 及之前的版本 应该 使用伪命名空间的写法，约定俗成使用顶级的组织名称（vendor name）如 Vendor_ 为类前缀。</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\n// 5.2.x及之前版本的写法\r\nclass Vendor_Model_Foo\r\n{\r\n}\r\n[/php]\r\n\r\n</div>\r\n<h3>4. 类的常量、属性和方法</h3>\r\n<div>此处的“类”指代所有的<strong>类、接口以及可复用代码块（traits）</strong>。</div>\r\n<div>\r\n<h4>4.1 常量</h4>\r\n<div><strong>类的常量中所有字母都 必须 大写，词间以下划线分隔</strong>。</div>\r\n<div>参照以下代码：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Model;\r\n\r\nclass Foo\r\n{\r\n    const VERSION = \'1.0\';\r\n    const DATE_APPROVED = \'2012-06-01\';\r\n}\r\n[/php]\r\n\r\n</div>\r\n<h4>4.2 属性</h4>\r\n<div>类的属性命名 <strong>可以</strong> 遵循：</div>\r\n<ul>\r\n 	<li>大写开头的驼峰式 ($StudlyCaps)</li>\r\n 	<li>小写开头的驼峰式 ($camelCase)</li>\r\n 	<li>下划线分隔式 ($under_score)</li>\r\n</ul>\r\n<div>本规范不做强制要求，但无论遵循哪种命名方式，都 应该 在一定的范围内保持一致。这个范围可以是整个团队、整个包、整个类或整个方法。</div>\r\n<h4>4.3 方法</h4>\r\n<div><strong>方法名称 必须 符合 camelCase() 式的小写开头驼峰命名规范。</strong></div>\r\n</div>\r\n</div>\r\n<div></div>\r\n</div>\r\n</div>\r\n<div></div>\r\n</div>', '「PSR 规范」PSR-1 基础编码规范', '', 'inherit', 'closed', 'closed', '', '1027-revision-v1', '', '', '2017-06-20 09:23:33', '2017-06-20 01:23:33', '', 1027, 'https://www.gzpblog.com/20170620/1033.html', 0, 'revision', '', 0),
(1020, 1, '2017-06-12 22:22:02', '2017-06-12 14:22:02', '<h2>一 什么是Docker</h2>\r\n<h3>1. 什么是Docker？</h3>\r\n<div>Docker是基于Go语言实现的开源容器项目。Docker的构想是要实现“Build,Ship and Run Any App, Anywhere”, 即通过对应用的封装（Packaging）、分发（Distribution）、部署（Deployment）、运行（Runtime）生命周期进行管理，达到应用组件“一次封装，到处运行”的目的。这里的应用组件，既可以是一个Web应用、一个编译环境，也可以是一套数据平台服务，甚至是一个操作系统或集群。</div>\r\n<h2>二 为什么要使用Docker？</h2>\r\n<h3>1. Docker容器虚拟化的好处</h3>\r\n<div>举例子，搭建一个LAMP环境：</div>\r\n<div><strong>传统的做法</strong>是：</div>\r\n<ol>\r\n 	<li>安装Apache，MySQL，PHP以及它们各自运行所依赖的环境；</li>\r\n 	<li>对环境进行配置，包括创建用户，配置参数等；</li>\r\n 	<li>进行功能测试，看看是否工作正常；如果不正常进行调试追踪</li>\r\n 	<li>......</li>\r\n</ol>\r\n<div>应用越多，越难处理；一旦服务器进行迁移，就要重新部署；这些琐碎的工作极大地降低了工作效率。<strong>究其根源，是这些应用直接运行在底层操作系统上，无法保证同一份应用在不同的环境中行为一致。</strong></div>\r\n<div></div>\r\n<div><strong>使用Docker</strong>：</div>\r\n<div>通过容器打包应用，解耦应用和运行平台。迁移的时候，<strong>只需要在新的服务器上启动需要的容器就可以了，无论新旧服务器是否是同一类型的平台。</strong></div>\r\n<h3>2. Docker在开发和运维中的优势</h3>\r\n<div>在开发和运维中，具有如下几个方面的优势：</div>\r\n<ul>\r\n 	<li>更快速的交付和部署</li>\r\n 	<li>更高效的资源利用；Docker是内核级的虚拟化，可以实现更高的性能，同时对资源的额外需求很低。</li>\r\n 	<li>更轻松的迁移和拓展；Docker容器几乎可以在任意的平台上运行</li>\r\n 	<li>更简单的更新管理；使用Dockerfile。只需要小小的配置修改，就可以替代以往大量的更新工作。</li>\r\n</ul>\r\n<h3>3. Docker与虚拟机</h3>\r\n<div>与虚拟机比较，Docker的优势：</div>\r\n<ul>\r\n 	<li>Docker容器很快，启动和停止可以在秒级实现</li>\r\n 	<li>Docker容器对系统资源需求很少</li>\r\n 	<li>Docker通过类似Git设计理念的操作来方便用户获取、分发和更新应用镜像，存储复用，增量更新。</li>\r\n 	<li>Docker中的应用获得的是接近原生的运行性能</li>\r\n</ul>\r\n<h2>三 核心概念</h2>\r\n<div>Docker的大部分操作都围绕着它的三大核心概念——镜像、容器和仓库而展开</div>\r\n<h3>1. Docker镜像</h3>\r\n<div>Docker镜像类似于虚拟机镜像，可以将它理解为一个只读的模板。例如，一个镜像可以只包含一个基本的操作系统环境，里面仅安装了Apache，可以把它称为一个Apache镜像。</div>\r\n<h3>2. Docker容器</h3>\r\n<div>Docker容器类似于一个轻量级的沙箱，Docker利用容器来运行和隔离应用。容器是从镜像创建的应用运行实例。可以将其启动、开始、停止、删除，而这些容器都是彼此相互隔离、互不可见的。</div>\r\n<div>可以把容器看做事一个简易版的linux系统环境（包括root用户权限、进程空间、用户空间和网络空间等）以及运行在其中的应用程序打包而成的盒子。</div>\r\n<div>注：镜像自身是只读的。容器从镜像启动的时候，会在镜像的最上层创建一个可写层。</div>\r\n<h3>3. Docker仓库</h3>\r\n<div>Docker仓库类似于代码仓库，它是Docker集中存放镜像文件的场所。</div>\r\n<div>Docker仓库不是仓库注册服务器（Registry），仓库注册服务器是存放仓库的地方，其上往往存放着多个仓库。每个仓库集中存放某一类镜像，往往包括多个镜像文件，通过不同的标签（tag）来区分。</div>\r\n<div>Docker仓库分为空开仓库（Public）和私有仓库（Private）。目前最大的公开仓库是官方提供的Docker Hub，其中存放了数量庞大的镜像供用户下载。</div>\r\n<div>用户创建了自己的镜像之后就可以使用push命令将它上传到指定的公有或者私有仓库。这样用户下次再另一台机器上使用该镜像时，只需要从将其从仓库上pull下来就可以了。</div>\r\n<h2>四 小结</h2>\r\n<div>无论是系统管理员、应用开发人员、测试人员以及运维管理人员，都应该尽快掌握Docker，尽早享受其带来的巨大便利。</div>\r\n<h2>五 相关链接</h2>\r\n<ul>\r\n 	<li>Docker官方主页：<a href=\"https://www.docker.com\" target=\"_blank\" rel=\"noopener noreferrer\"> https://www.docker.com</a></li>\r\n 	<li>Docker官方博客：<a href=\"https://blog.docker.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.docker.com</a></li>\r\n 	<li>Docker官方文档：<a href=\"https://docs.docker.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com</a></li>\r\n 	<li>Docker Hub：<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://hub.docker.com/</a></li>\r\n 	<li>Dockerfile 参考：<a href=\"https://docs.docker.com/engine/reference/builder/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com/engine/reference/builder/</a></li>\r\n 	<li>Dockerfile 最佳实践：<a href=\"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/</a></li>\r\n</ul>\r\n<div></div>\r\n<div></div>', '认识Docker', '', 'publish', 'open', 'closed', '', '%e8%ae%a4%e8%af%86docker', '', '', '2017-06-13 00:46:18', '2017-06-12 16:46:18', '', 0, 'https://www.gzpblog.com/?p=1020', 0, 'post', '', 0),
(1021, 1, '2017-06-12 22:20:24', '2017-06-12 14:20:24', '', 'Docker-logo', '', 'inherit', 'open', 'closed', '', 'docker-logo', '', '', '2017-06-12 22:20:24', '2017-06-12 14:20:24', '', 1020, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Docker-logo.png', 0, 'attachment', 'image/png', 0),
(1022, 1, '2017-06-12 22:20:26', '2017-06-12 14:20:26', '', 'Docker-logo2', '', 'inherit', 'open', 'closed', '', 'docker-logo2', '', '', '2017-06-12 22:20:26', '2017-06-12 14:20:26', '', 1020, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Docker-logo2.png', 0, 'attachment', 'image/png', 0),
(1023, 1, '2017-06-12 22:22:02', '2017-06-12 14:22:02', '<h2>一 什么是Docker</h2>\r\n<h3>1. 什么是Docker？</h3>\r\n<div>Docker是基于Go语言实现的开源容器项目。Docker的构想是要实现“Build,Ship and Run Any App, Anywhere”, 即通过对应用的封装（Packaging）、分发（Distribution）、部署（Deployment）、运行（Runtime）生命周期进行管理，达到应用组件“一次封装，到处运行”的目的。这里的应用组件，既可以是一个Web应用、一个编译环境，也可以是一套数据平台服务，甚至是一个操作系统或集群。</div>\r\n<h2>二 为什么要使用Docker？</h2>\r\n<h3>1. Docker容器虚拟化的好处</h3>\r\n<div>举例子，搭建一个LAMP环境：</div>\r\n<div><strong>传统的做法</strong>是：</div>\r\n<ol>\r\n 	<li>安装Apache，MySQL，PHP以及它们各自运行所依赖的环境；</li>\r\n 	<li>对环境进行配置，包括创建用户，配置参数等；</li>\r\n 	<li>进行功能测试，看看是否工作正常；如果不正常进行调试追踪</li>\r\n 	<li>......</li>\r\n</ol>\r\n<div>应用越多，越难处理；一旦服务器进行迁移，就要重新部署；这些琐碎的工作极大地降低了工作效率。<strong>究其根源，是这些应用直接运行在底层操作系统上，无法保证同一份应用在不同的环境中行为一致。</strong></div>\r\n<div></div>\r\n<div><strong>使用Docker</strong>：</div>\r\n<div>通过容器打包应用，解耦应用和运行平台。迁移的时候，<strong>只需要在新的服务器上启动需要的容器就可以了，无论新旧服务器是否是同一类型的平台。</strong></div>\r\n<h3>2. Docker在开发和运维中的优势</h3>\r\n<div>在开发和运维中，具有如下几个方面的优势：</div>\r\n<ul>\r\n 	<li>更快速的交付和部署</li>\r\n 	<li>更高效的资源利用；Docker是内核级的虚拟化，可以实现更高的性能，同时对资源的额外需求很低。</li>\r\n 	<li>更轻松的迁移和拓展；Docker容器几乎可以在任意的平台上运行</li>\r\n 	<li>更简单的更新管理；使用Dockerfile。只需要小小的配置修改，就可以替代以往大量的更新工作。</li>\r\n</ul>\r\n<h3>3. Docker与虚拟机</h3>\r\n<div>与虚拟机比较，Docker的优势：</div>\r\n<ul>\r\n 	<li>Docker容器很快，启动和停止可以在秒级实现</li>\r\n 	<li>Docker容器对系统资源需求很少</li>\r\n 	<li>Docker通过类似Git设计理念的操作来方便用户获取、分发和更新应用镜像，存储复用，增量更新。</li>\r\n 	<li>Docker中的应用获得的是接近原生的运行性能</li>\r\n</ul>\r\n<h2>三 小结</h2>\r\n<div>无论是系统管理员、应用开发人员、测试人员以及运维管理人员，都应该尽快掌握Docker，尽早享受其带来的巨大便利。</div>\r\n<div></div>\r\n<h2>四 相关链接</h2>\r\n<ul>\r\n 	<li>Docker官方主页：<a href=\"https://www.docker.com\" target=\"_blank\" rel=\"noopener noreferrer\"> https://www.docker.com</a></li>\r\n 	<li>Docker官方博客：<a href=\"https://blog.docker.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.docker.com</a></li>\r\n 	<li>Docker官方文档：<a href=\"https://docs.docker.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com</a></li>\r\n 	<li>Docker Hub：<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://hub.docker.com/</a></li>\r\n 	<li>Dockerfile 参考：<a href=\"https://docs.docker.com/engine/reference/builder/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com/engine/reference/builder/</a></li>\r\n 	<li>Dockerfile 最佳实践：<a href=\"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/</a></li>\r\n</ul>\r\n<div></div>\r\n<div></div>', '认识Docker', '', 'inherit', 'closed', 'closed', '', '1020-revision-v1', '', '', '2017-06-12 22:22:02', '2017-06-12 14:22:02', '', 1020, 'https://www.gzpblog.com/20170612/1023.html', 0, 'revision', '', 0),
(1024, 1, '2017-06-13 00:46:06', '2017-06-12 16:46:06', '<h2>一 什么是Docker</h2>\n<h3>1. 什么是Docker？</h3>\n<div>Docker是基于Go语言实现的开源容器项目。Docker的构想是要实现“Build,Ship and Run Any App, Anywhere”, 即通过对应用的封装（Packaging）、分发（Distribution）、部署（Deployment）、运行（Runtime）生命周期进行管理，达到应用组件“一次封装，到处运行”的目的。这里的应用组件，既可以是一个Web应用、一个编译环境，也可以是一套数据平台服务，甚至是一个操作系统或集群。</div>\n<h2>二 为什么要使用Docker？</h2>\n<h3>1. Docker容器虚拟化的好处</h3>\n<div>举例子，搭建一个LAMP环境：</div>\n<div><strong>传统的做法</strong>是：</div>\n<ol>\n 	<li>安装Apache，MySQL，PHP以及它们各自运行所依赖的环境；</li>\n 	<li>对环境进行配置，包括创建用户，配置参数等；</li>\n 	<li>进行功能测试，看看是否工作正常；如果不正常进行调试追踪</li>\n 	<li>......</li>\n</ol>\n<div>应用越多，越难处理；一旦服务器进行迁移，就要重新部署；这些琐碎的工作极大地降低了工作效率。<strong>究其根源，是这些应用直接运行在底层操作系统上，无法保证同一份应用在不同的环境中行为一致。</strong></div>\n<div></div>\n<div><strong>使用Docker</strong>：</div>\n<div>通过容器打包应用，解耦应用和运行平台。迁移的时候，<strong>只需要在新的服务器上启动需要的容器就可以了，无论新旧服务器是否是同一类型的平台。</strong></div>\n<h3>2. Docker在开发和运维中的优势</h3>\n<div>在开发和运维中，具有如下几个方面的优势：</div>\n<ul>\n 	<li>更快速的交付和部署</li>\n 	<li>更高效的资源利用；Docker是内核级的虚拟化，可以实现更高的性能，同时对资源的额外需求很低。</li>\n 	<li>更轻松的迁移和拓展；Docker容器几乎可以在任意的平台上运行</li>\n 	<li>更简单的更新管理；使用Dockerfile。只需要小小的配置修改，就可以替代以往大量的更新工作。</li>\n</ul>\n<h3>3. Docker与虚拟机</h3>\n<div>与虚拟机比较，Docker的优势：</div>\n<ul>\n 	<li>Docker容器很快，启动和停止可以在秒级实现</li>\n 	<li>Docker容器对系统资源需求很少</li>\n 	<li>Docker通过类似Git设计理念的操作来方便用户获取、分发和更新应用镜像，存储复用，增量更新。</li>\n 	<li>Docker中的应用获得的是接近原生的运行性能</li>\n</ul>\n<h2>三 核心概念</h2>\n<div>Docker的大部分操作都围绕着它的三大核心概念——镜像、容器和仓库而展开</div>\n<h3>1. Docker镜像</h3>\n<div>Docker镜像类似于虚拟机镜像，可以将它理解为一个只读的模板。例如，一个镜像可以只包含一个基本的操作系统环境，里面仅安装了Apache，可以把它称为一个Apache镜像。</div>\n<h3>2. Docker容器</h3>\n<div>Docker容器类似于一个轻量级的沙箱，Docker利用容器来运行和隔离应用。容器是从镜像创建的应用运行实例。可以将其启动、开始、停止、删除，而这些容器都是彼此相互隔离、互不可见的。</div>\n<div>可以把容器看做事一个简易版的linux系统环境（包括root用户权限、进程空间、用户空间和网络空间等）以及运行在其中的应用程序打包而成的盒子。</div>\n<div>注：镜像自身是只读的。容器从镜像启动的时候，会在镜像的最上层创建一个可写层。</div>\n<h3>3. Docker仓库</h3>\n<div>Docker仓库类似于代码仓库，它是Docker集中存放镜像文件的场所。</div>\n<div>Docker仓库不是仓库注册服务器（Registry），仓库注册服务器是存放仓库的地方，其上往往存放着多个仓库。每个仓库集中存放某一类镜像，往往包括多个镜像文件，通过不同的标签（tag）来区分。</div>\n<div>Docker仓库分为空开仓库（Public）和私有仓库（Private）。目前最大的公开仓库是官方提供的Docker Hub，其中存放了数量庞大的镜像供用户下载。</div>\n<div>用户创建了自己的镜像之后就可以使用push命令将它上传到指定的公有或者私有仓库。这样用户下次再另一台机器上使用该镜像时，只需要从将其从仓库上pull下来就可以了。</div>\n<h2>四 小结</h2>\n<div>无论是系统管理员、应用开发人员、测试人员以及运维管理人员，都应该尽快掌握Docker，尽早享受其带来的巨大便利。</div>\n<div></div>\n<h2>五 相关链接</h2>\n<ul>\n 	<li>Docker官方主页：<a href=\"https://www.docker.com\" target=\"_blank\" rel=\"noopener noreferrer\"> https://www.docker.com</a></li>\n 	<li>Docker官方博客：<a href=\"https://blog.docker.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.docker.com</a></li>\n 	<li>Docker官方文档：<a href=\"https://docs.docker.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com</a></li>\n 	<li>Docker Hub：<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://hub.docker.com/</a></li>\n 	<li>Dockerfile 参考：<a href=\"https://docs.docker.com/engine/reference/builder/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com/engine/reference/builder/</a></li>\n 	<li>Dockerfile 最佳实践：<a href=\"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/</a></li>\n</ul>\n<div></div>\n<div></div>', '认识Docker', '', 'inherit', 'closed', 'closed', '', '1020-autosave-v1', '', '', '2017-06-13 00:46:06', '2017-06-12 16:46:06', '', 1020, 'https://www.gzpblog.com/20170613/1024.html', 0, 'revision', '', 0),
(1025, 1, '2017-06-13 00:46:18', '2017-06-12 16:46:18', '<h2>一 什么是Docker</h2>\r\n<h3>1. 什么是Docker？</h3>\r\n<div>Docker是基于Go语言实现的开源容器项目。Docker的构想是要实现“Build,Ship and Run Any App, Anywhere”, 即通过对应用的封装（Packaging）、分发（Distribution）、部署（Deployment）、运行（Runtime）生命周期进行管理，达到应用组件“一次封装，到处运行”的目的。这里的应用组件，既可以是一个Web应用、一个编译环境，也可以是一套数据平台服务，甚至是一个操作系统或集群。</div>\r\n<h2>二 为什么要使用Docker？</h2>\r\n<h3>1. Docker容器虚拟化的好处</h3>\r\n<div>举例子，搭建一个LAMP环境：</div>\r\n<div><strong>传统的做法</strong>是：</div>\r\n<ol>\r\n 	<li>安装Apache，MySQL，PHP以及它们各自运行所依赖的环境；</li>\r\n 	<li>对环境进行配置，包括创建用户，配置参数等；</li>\r\n 	<li>进行功能测试，看看是否工作正常；如果不正常进行调试追踪</li>\r\n 	<li>......</li>\r\n</ol>\r\n<div>应用越多，越难处理；一旦服务器进行迁移，就要重新部署；这些琐碎的工作极大地降低了工作效率。<strong>究其根源，是这些应用直接运行在底层操作系统上，无法保证同一份应用在不同的环境中行为一致。</strong></div>\r\n<div></div>\r\n<div><strong>使用Docker</strong>：</div>\r\n<div>通过容器打包应用，解耦应用和运行平台。迁移的时候，<strong>只需要在新的服务器上启动需要的容器就可以了，无论新旧服务器是否是同一类型的平台。</strong></div>\r\n<h3>2. Docker在开发和运维中的优势</h3>\r\n<div>在开发和运维中，具有如下几个方面的优势：</div>\r\n<ul>\r\n 	<li>更快速的交付和部署</li>\r\n 	<li>更高效的资源利用；Docker是内核级的虚拟化，可以实现更高的性能，同时对资源的额外需求很低。</li>\r\n 	<li>更轻松的迁移和拓展；Docker容器几乎可以在任意的平台上运行</li>\r\n 	<li>更简单的更新管理；使用Dockerfile。只需要小小的配置修改，就可以替代以往大量的更新工作。</li>\r\n</ul>\r\n<h3>3. Docker与虚拟机</h3>\r\n<div>与虚拟机比较，Docker的优势：</div>\r\n<ul>\r\n 	<li>Docker容器很快，启动和停止可以在秒级实现</li>\r\n 	<li>Docker容器对系统资源需求很少</li>\r\n 	<li>Docker通过类似Git设计理念的操作来方便用户获取、分发和更新应用镜像，存储复用，增量更新。</li>\r\n 	<li>Docker中的应用获得的是接近原生的运行性能</li>\r\n</ul>\r\n<h2>三 核心概念</h2>\r\n<div>Docker的大部分操作都围绕着它的三大核心概念——镜像、容器和仓库而展开</div>\r\n<h3>1. Docker镜像</h3>\r\n<div>Docker镜像类似于虚拟机镜像，可以将它理解为一个只读的模板。例如，一个镜像可以只包含一个基本的操作系统环境，里面仅安装了Apache，可以把它称为一个Apache镜像。</div>\r\n<h3>2. Docker容器</h3>\r\n<div>Docker容器类似于一个轻量级的沙箱，Docker利用容器来运行和隔离应用。容器是从镜像创建的应用运行实例。可以将其启动、开始、停止、删除，而这些容器都是彼此相互隔离、互不可见的。</div>\r\n<div>可以把容器看做事一个简易版的linux系统环境（包括root用户权限、进程空间、用户空间和网络空间等）以及运行在其中的应用程序打包而成的盒子。</div>\r\n<div>注：镜像自身是只读的。容器从镜像启动的时候，会在镜像的最上层创建一个可写层。</div>\r\n<h3>3. Docker仓库</h3>\r\n<div>Docker仓库类似于代码仓库，它是Docker集中存放镜像文件的场所。</div>\r\n<div>Docker仓库不是仓库注册服务器（Registry），仓库注册服务器是存放仓库的地方，其上往往存放着多个仓库。每个仓库集中存放某一类镜像，往往包括多个镜像文件，通过不同的标签（tag）来区分。</div>\r\n<div>Docker仓库分为空开仓库（Public）和私有仓库（Private）。目前最大的公开仓库是官方提供的Docker Hub，其中存放了数量庞大的镜像供用户下载。</div>\r\n<div>用户创建了自己的镜像之后就可以使用push命令将它上传到指定的公有或者私有仓库。这样用户下次再另一台机器上使用该镜像时，只需要从将其从仓库上pull下来就可以了。</div>\r\n<h2>四 小结</h2>\r\n<div>无论是系统管理员、应用开发人员、测试人员以及运维管理人员，都应该尽快掌握Docker，尽早享受其带来的巨大便利。</div>\r\n<h2>五 相关链接</h2>\r\n<ul>\r\n 	<li>Docker官方主页：<a href=\"https://www.docker.com\" target=\"_blank\" rel=\"noopener noreferrer\"> https://www.docker.com</a></li>\r\n 	<li>Docker官方博客：<a href=\"https://blog.docker.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.docker.com</a></li>\r\n 	<li>Docker官方文档：<a href=\"https://docs.docker.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com</a></li>\r\n 	<li>Docker Hub：<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://hub.docker.com/</a></li>\r\n 	<li>Dockerfile 参考：<a href=\"https://docs.docker.com/engine/reference/builder/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com/engine/reference/builder/</a></li>\r\n 	<li>Dockerfile 最佳实践：<a href=\"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/</a></li>\r\n</ul>\r\n<div></div>\r\n<div></div>', '认识Docker', '', 'inherit', 'closed', 'closed', '', '1020-revision-v1', '', '', '2017-06-13 00:46:18', '2017-06-12 16:46:18', '', 1020, 'https://www.gzpblog.com/20170613/1025.html', 0, 'revision', '', 0),
(1026, 1, '2017-06-13 01:44:38', '2017-06-12 17:44:38', ' ', '', '', 'publish', 'closed', 'closed', '', '1026', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 69, 'https://www.gzpblog.com/?p=1026', 20, 'nav_menu_item', '', 0),
(1027, 1, '2017-06-16 01:52:26', '2017-06-15 17:52:26', '<h2>一 关于PSR-1</h2>\r\n<div>本篇规范制定了代码基本元素的相关标准，以确保共享的PHP代码间具有较高程度的技术互通性。</div>\r\n<div>本篇能愿动词解释：</div>\r\n<ul>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\n<div>PHP-FIG 官网 PSR-1 详解： <a href=\"http://www.php-fig.org/psr/psr-1/\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-1: Basic Coding Standard</a></div>\r\n<h2>二 PSR-1具体内容</h2>\r\n<h3>1. 概览</h3>\r\n<ul>\r\n 	<li>PHP代码文件 必须 以 &lt;?php 或 &lt;?= 标签开始；</li>\r\n 	<li>PHP代码文件 必须 以 不带 BOM 的 UTF-8 编码；</li>\r\n 	<li>PHP代码中 应该 只定义类、函数、常量等声明，或其他会产生 副作用 的操作（如：生成文件输出以及修改 .ini 配置文件等），二者只能选其一；</li>\r\n 	<li>命名空间以及类 必须 符合 PSR 的自动加载规范：PSR-0（已废弃） 和 PSR-4 中的一个；</li>\r\n 	<li>类的命名 必须 遵循 StudlyCaps 大写开头的驼峰命名规范；</li>\r\n 	<li>类中的常量所有字母都 必须 大写，单词间用下划线分隔；</li>\r\n 	<li>方法名称 必须 符合 camelCase 式的小写开头驼峰命名规范。</li>\r\n</ul>\r\n<h3>2. 文件</h3>\r\n<h4>2.1 PHP标签</h4>\r\n<div>PHP代码 必须 使用<strong> &lt;?php ?&gt;</strong> 长标签 或 <strong>&lt;?= ?&gt;</strong> 短输出标签； 一定不可 使用其它自定义标签。</div>\r\n<div>\r\n<h4>2.2 字符编码</h4>\r\n<div>PHP代码 必须 且只可使用 <strong>不带BOM的UTF-8</strong> 编码。</div>\r\n<div>\r\n<h4>2.3 副作用</h4>\r\n<div>一份 PHP 文件中 应该 要不就只定义新的声明，如类、函数或常量等不产生 副作用 的操作，要不就只书写会产生 副作用 的逻辑操作，但 不该 同时具有两者。</div>\r\n<div>”副作用”(side effects) 一词的意思是，仅仅通过包含文件，不直接声明类、函数和常量等，而执行的逻辑操作。</div>\r\n<div>\r\n<div>”副作用”包含却不仅限于：</div>\r\n<ul>\r\n 	<li>生成输出</li>\r\n 	<li>直接的 require 或 include</li>\r\n 	<li>连接外部服务</li>\r\n 	<li>修改 ini 配置</li>\r\n 	<li>抛出错误或异常</li>\r\n 	<li>修改全局或静态变量</li>\r\n 	<li>读或写文件等</li>\r\n</ul>\r\n<div>以下是一个 反例，一份包含“函数声明”以及产生“副作用”的代码：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\n// 「副作用」：修改 ini 配置\r\nini_set(\'error_reporting\', E_ALL);\r\n\r\n// 「副作用」：引入文件\r\ninclude &quot;file.php&quot;;\r\n\r\n// 「副作用」：生成输出\r\necho &quot;&lt;html&gt;\\n&quot;;\r\n\r\n// 声明函数\r\nfunction foo()\r\n{\r\n    // 函数主体部分\r\n}\r\n[/php]\r\n\r\n</div>\r\n<div>\r\n<div>下面是一个范例，一份只包含声明不产生「副作用」的代码：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\n// 声明函数\r\nfunction foo()\r\n{\r\n    // 函数主体部分\r\n}\r\n\r\n// 条件声明 **不** 属于「副作用」\r\nif (! function_exists(\'bar\')) {\r\n    function bar()\r\n    {\r\n        // 函数主体部分\r\n    }\r\n}\r\n[/php]\r\n\r\n</div>\r\n<h3>3. 命名空间和类</h3>\r\n<ul>\r\n 	<li>命名空间以及类的命名必须遵循 PSR-4。</li>\r\n 	<li>每个类都独立为一个文件</li>\r\n 	<li>命名空间至少有一个层次：顶级的组织名称（vendor name）</li>\r\n 	<li>类的命名 必须 遵循 StudlyCaps 大写开头的驼峰命名规范。</li>\r\n 	<li>PHP 5.3 及以后版本的代码 必须 使用正式的命名空间。</li>\r\n</ul>\r\n<div>例如：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\n// PHP 5.3及以后版本的写法\r\nnamespace Vendor\\Model;\r\n\r\nclass Foo\r\n{\r\n}\r\n[/php]\r\n\r\n</div>\r\n<div>5.2.x 及之前的版本 应该 使用伪命名空间的写法，约定俗成使用顶级的组织名称（vendor name）如 Vendor_ 为类前缀。</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\n// 5.2.x及之前版本的写法\r\nclass Vendor_Model_Foo\r\n{\r\n}\r\n[/php]\r\n\r\n</div>\r\n<h3>4. 类的常量、属性和方法</h3>\r\n<div>此处的“类”指代所有的<strong>类、接口以及可复用代码块（traits）</strong>。</div>\r\n<div>\r\n<h4>4.1 常量</h4>\r\n<div><strong>类的常量中所有字母都 必须 大写，词间以下划线分隔</strong>。</div>\r\n<div>参照以下代码：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Model;\r\n\r\nclass Foo\r\n{\r\n    const VERSION = \'1.0\';\r\n    const DATE_APPROVED = \'2012-06-01\';\r\n}\r\n[/php]\r\n\r\n</div>\r\n<h4>4.2 属性</h4>\r\n<div>类的属性命名 <strong>可以</strong> 遵循：</div>\r\n<ul>\r\n 	<li>大写开头的驼峰式 ($StudlyCaps)</li>\r\n 	<li>小写开头的驼峰式 ($camelCase)</li>\r\n 	<li>下划线分隔式 ($under_score)</li>\r\n</ul>\r\n<div>本规范不做强制要求，但无论遵循哪种命名方式，都 应该 在一定的范围内保持一致。这个范围可以是整个团队、整个包、整个类或整个方法。</div>\r\n<h4>4.3 方法</h4>\r\n<div><strong>方法名称 必须 符合 camelCase() 式的小写开头驼峰命名规范。</strong></div>\r\n</div>\r\n</div>\r\n<div></div>\r\n</div>\r\n</div>\r\n<div></div>\r\n</div>', '「PSR 规范」PSR-1 基础编码规范', '', 'publish', 'open', 'closed', '', '%e3%80%8cpsr-%e8%a7%84%e8%8c%83%e3%80%8dpsr-1-%e5%9f%ba%e7%a1%80%e7%bc%96%e7%a0%81%e8%a7%84%e8%8c%83', '', '', '2017-06-20 09:23:33', '2017-06-20 01:23:33', '', 0, 'https://www.gzpblog.com/?p=1027', 0, 'post', '', 0),
(1030, 1, '2017-06-16 01:56:43', '2017-06-15 17:56:43', '<h2>一 关于PSR-1</h2>\r\n<div>本篇规范制定了代码基本元素的相关标准，以确保共享的PHP代码间具有较高程度的技术互通性。</div>\r\n<div>本篇能愿动词解释：</div>\r\n<ul>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\n<div>PHP-FIG 官网 PSR-1 详解： <a href=\"http://www.php-fig.org/psr/psr-1/\">PSR-1: Basic Coding Standard</a></div>\r\n<h2>二 PSR-1具体内容</h2>\r\n<h3>1. 概览</h3>\r\n<ul>\r\n 	<li>PHP代码文件 必须 以 &lt;?php 或 &lt;?= 标签开始；</li>\r\n 	<li>PHP代码文件 必须 以 不带 BOM 的 UTF-8 编码；</li>\r\n 	<li>PHP代码中 应该 只定义类、函数、常量等声明，或其他会产生 副作用 的操作（如：生成文件输出以及修改 .ini 配置文件等），二者只能选其一；</li>\r\n 	<li>命名空间以及类 必须 符合 PSR 的自动加载规范：PSR-0（已废弃） 和 PSR-4 中的一个；</li>\r\n 	<li>类的命名 必须 遵循 StudlyCaps 大写开头的驼峰命名规范；</li>\r\n 	<li>类中的常量所有字母都 必须 大写，单词间用下划线分隔；</li>\r\n 	<li>方法名称 必须 符合 camelCase 式的小写开头驼峰命名规范。</li>\r\n</ul>\r\n<h3>2. 文件</h3>\r\n<h4>2.1 PHP标签</h4>\r\n<div>PHP代码 必须 使用<strong> &lt;?php ?&gt;</strong> 长标签 或 <strong>&lt;?= ?&gt;</strong> 短输出标签； 一定不可 使用其它自定义标签。</div>\r\n<div>\r\n<h4>2.2 字符编码</h4>\r\n<div>PHP代码 必须 且只可使用 <strong>不带BOM的UTF-8</strong> 编码。</div>\r\n<div>\r\n<h4>2.3 副作用</h4>\r\n<div>一份 PHP 文件中 应该 要不就只定义新的声明，如类、函数或常量等不产生 副作用 的操作，要不就只书写会产生 副作用 的逻辑操作，但 不该 同时具有两者。</div>\r\n<div>”副作用”(side effects) 一词的意思是，仅仅通过包含文件，不直接声明类、函数和常量等，而执行的逻辑操作。</div>\r\n<div>\r\n<div>”副作用”包含却不仅限于：</div>\r\n<ul>\r\n 	<li>生成输出</li>\r\n 	<li>直接的 require 或 include</li>\r\n 	<li>连接外部服务</li>\r\n 	<li>修改 ini 配置</li>\r\n 	<li>抛出错误或异常</li>\r\n 	<li>修改全局或静态变量</li>\r\n 	<li>读或写文件等</li>\r\n</ul>\r\n<div>以下是一个 反例，一份包含“函数声明”以及产生“副作用”的代码：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\n// 「副作用」：修改 ini 配置\r\nini_set(\'error_reporting\', E_ALL);\r\n\r\n// 「副作用」：引入文件\r\ninclude &quot;file.php&quot;;\r\n\r\n// 「副作用」：生成输出\r\necho &quot;&lt;html&gt;\\n&quot;;\r\n\r\n// 声明函数\r\nfunction foo()\r\n{\r\n    // 函数主体部分\r\n}\r\n[/php]\r\n\r\n</div>\r\n<div>\r\n<div>下面是一个范例，一份只包含声明不产生「副作用」的代码：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\n// 声明函数\r\nfunction foo()\r\n{\r\n    // 函数主体部分\r\n}\r\n\r\n// 条件声明 **不** 属于「副作用」\r\nif (! function_exists(\'bar\')) {\r\n    function bar()\r\n    {\r\n        // 函数主体部分\r\n    }\r\n}\r\n[/php]\r\n\r\n</div>\r\n<h3>3. 命名空间和类</h3>\r\n<ul>\r\n 	<li>命名空间以及类的命名必须遵循 PSR-4。</li>\r\n 	<li>每个类都独立为一个文件</li>\r\n 	<li>命名空间至少有一个层次：顶级的组织名称（vendor name）</li>\r\n 	<li>类的命名 必须 遵循 StudlyCaps 大写开头的驼峰命名规范。</li>\r\n 	<li>PHP 5.3 及以后版本的代码 必须 使用正式的命名空间。</li>\r\n</ul>\r\n<div>例如：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\n// PHP 5.3及以后版本的写法\r\nnamespace Vendor\\Model;\r\n\r\nclass Foo\r\n{\r\n}\r\n[/php]\r\n\r\n</div>\r\n<div>5.2.x 及之前的版本 应该 使用伪命名空间的写法，约定俗成使用顶级的组织名称（vendor name）如 Vendor_ 为类前缀。</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\n// 5.2.x及之前版本的写法\r\nclass Vendor_Model_Foo\r\n{\r\n}\r\n[/php]\r\n\r\n</div>\r\n<h3>4. 类的常量、属性和方法</h3>\r\n<div>此处的“类”指代所有的<strong>类、接口以及可复用代码块（traits）</strong>。</div>\r\n<div>\r\n<h4>4.1 常量</h4>\r\n<div><strong>类的常量中所有字母都 必须 大写，词间以下划线分隔</strong>。</div>\r\n<div>参照以下代码：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Model;\r\n\r\nclass Foo\r\n{\r\n    const VERSION = \'1.0\';\r\n    const DATE_APPROVED = \'2012-06-01\';\r\n}\r\n[/php]\r\n\r\n</div>\r\n<h4>4.2 属性</h4>\r\n<div>类的属性命名 <strong>可以</strong> 遵循：</div>\r\n<ul>\r\n 	<li>大写开头的驼峰式 ($StudlyCaps)</li>\r\n 	<li>小写开头的驼峰式 ($camelCase)</li>\r\n 	<li>下划线分隔式 ($under_score)</li>\r\n</ul>\r\n<div>本规范不做强制要求，但无论遵循哪种命名方式，都 应该 在一定的范围内保持一致。这个范围可以是整个团队、整个包、整个类或整个方法。</div>\r\n<h4>4.3 方法</h4>\r\n<div><strong>方法名称 必须 符合 camelCase() 式的小写开头驼峰命名规范。</strong></div>\r\n</div>\r\n</div>\r\n<div></div>\r\n</div>\r\n</div>\r\n<div></div>\r\n</div>', '「PSR 规范」PSR-1 基础编码规范', '', 'inherit', 'closed', 'closed', '', '1027-revision-v1', '', '', '2017-06-16 01:56:43', '2017-06-15 17:56:43', '', 1027, 'https://www.gzpblog.com/20170616/1030.html', 0, 'revision', '', 0),
(1028, 1, '2017-06-16 01:52:26', '2017-06-15 17:52:26', '<h2>一 关于PSR-1</h2>\r\n<div>本篇规范制定了代码基本元素的相关标准，以确保共享的PHP代码间具有较高程度的技术互通性。</div>\r\n<div>本篇能愿动词解释：</div>\r\n<ul>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\n<div>PHP-FIG 官网 PSR-1 详解： <a href=\"http://www.php-fig.org/psr/psr-1/\">PSR-1: Basic Coding Standard</a></div>\r\n<h2>二 PSR-1具体内容</h2>\r\n<h3>1. 概览</h3>\r\n<ul>\r\n 	<li>PHP代码文件 必须 以 &lt;?php 或 &lt;?= 标签开始；</li>\r\n 	<li>PHP代码文件 必须 以 不带 BOM 的 UTF-8 编码；</li>\r\n 	<li>PHP代码中 应该 只定义类、函数、常量等声明，或其他会产生 副作用 的操作（如：生成文件输出以及修改 .ini 配置文件等），二者只能选其一；</li>\r\n 	<li>命名空间以及类 必须 符合 PSR 的自动加载规范：PSR-0（已废弃） 和 PSR-4 中的一个；</li>\r\n 	<li>类的命名 必须 遵循 StudlyCaps 大写开头的驼峰命名规范；</li>\r\n 	<li>类中的常量所有字母都 必须 大写，单词间用下划线分隔；</li>\r\n 	<li>方法名称 必须 符合 camelCase 式的小写开头驼峰命名规范。</li>\r\n</ul>\r\n<h3>2. 文件</h3>\r\n<h4>2.1 PHP标签</h4>\r\n<div>PHP代码 必须 使用<strong> &lt;?php ?&gt;</strong> 长标签 或 <strong>&lt;?= ?&gt;</strong> 短输出标签； 一定不可 使用其它自定义标签。</div>\r\n<div>\r\n<h4>2.2 字符编码</h4>\r\n<div>PHP代码 必须 且只可使用 <strong>不带BOM的UTF-8</strong> 编码。</div>\r\n<div>\r\n<h4>2.3 副作用</h4>\r\n<div>一份 PHP 文件中 应该 要不就只定义新的声明，如类、函数或常量等不产生 副作用 的操作，要不就只书写会产生 副作用 的逻辑操作，但 不该 同时具有两者。</div>\r\n<div>”副作用”(side effects) 一词的意思是，仅仅通过包含文件，不直接声明类、函数和常量等，而执行的逻辑操作。</div>\r\n<div>\r\n<div>”副作用”包含却不仅限于：</div>\r\n<ul>\r\n 	<li>生成输出</li>\r\n 	<li>直接的 require 或 include</li>\r\n 	<li>连接外部服务</li>\r\n 	<li>修改 ini 配置</li>\r\n 	<li>抛出错误或异常</li>\r\n 	<li>修改全局或静态变量</li>\r\n 	<li>读或写文件等</li>\r\n</ul>\r\n<div>以下是一个 反例，一份包含“函数声明”以及产生“副作用”的代码：</div>\r\n<div>\r\n[php]&lt;/div&gt;\r\n&lt;div&gt;\r\n&lt;div&gt;&lt;?php&lt;/div&gt;\r\n&lt;div&gt;// 「副作用」：修改 ini 配置&lt;/div&gt;\r\n&lt;div&gt;ini_set(\'error_reporting\', E_ALL);&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;// 「副作用」：引入文件&lt;/div&gt;\r\n&lt;div&gt;include &quot;file.php&quot;;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;// 「副作用」：生成输出&lt;/div&gt;\r\n&lt;div&gt;echo &quot;&lt;html&gt;\\n&quot;;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;// 声明函数&lt;/div&gt;\r\n&lt;div&gt;function foo()&lt;/div&gt;\r\n&lt;div&gt;{&lt;/div&gt;\r\n&lt;div&gt;// 函数主体部分&lt;/div&gt;\r\n&lt;div&gt;}&lt;/div&gt;\r\n&lt;/div&gt;\r\n&lt;div&gt;[/php]\r\n</div>\r\n<div>\r\n<div>下面是一个范例，一份只包含声明不产生「副作用」的代码：</div>\r\n<div>\r\n[php]&lt;/div&gt;\r\n&lt;div&gt;\r\n&lt;div&gt;&lt;?php&lt;/div&gt;\r\n&lt;div&gt;// 声明函数&lt;/div&gt;\r\n&lt;div&gt;function foo()&lt;/div&gt;\r\n&lt;div&gt;{&lt;/div&gt;\r\n&lt;div&gt;    // 函数主体部分&lt;/div&gt;\r\n&lt;div&gt;}&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;// 条件声明 **不** 属于「副作用」&lt;/div&gt;\r\n&lt;div&gt;if (! function_exists(\'bar\')) {&lt;/div&gt;\r\n&lt;div&gt;function bar()&lt;/div&gt;\r\n&lt;div&gt;    {&lt;/div&gt;\r\n&lt;div&gt;        // 函数主体部分&lt;/div&gt;\r\n&lt;div&gt;    }&lt;/div&gt;\r\n&lt;div&gt;}&lt;/div&gt;\r\n&lt;/div&gt;\r\n&lt;div&gt;[/php]\r\n</div>\r\n<h3>3. 命名空间和类</h3>\r\n<ul>\r\n 	<li>命名空间以及类的命名必须遵循 PSR-4。</li>\r\n 	<li>每个类都独立为一个文件</li>\r\n 	<li>命名空间至少有一个层次：顶级的组织名称（vendor name）</li>\r\n 	<li>类的命名 必须 遵循 StudlyCaps 大写开头的驼峰命名规范。</li>\r\n 	<li>PHP 5.3 及以后版本的代码 必须 使用正式的命名空间。</li>\r\n</ul>\r\n<div>例如：</div>\r\n<div>\r\n[php]&lt;/div&gt;\r\n&lt;div&gt;\r\n&lt;div&gt;&lt;?php&lt;/div&gt;\r\n&lt;div&gt;// PHP 5.3及以后版本的写法&lt;/div&gt;\r\n&lt;div&gt;namespace Vendor\\Model;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;class Foo&lt;/div&gt;\r\n&lt;div&gt;{&lt;/div&gt;\r\n&lt;div&gt;}&lt;/div&gt;\r\n&lt;/div&gt;\r\n&lt;div&gt;[/php]\r\n</div>\r\n<div>5.2.x 及之前的版本 应该 使用伪命名空间的写法，约定俗成使用顶级的组织名称（vendor name）如 Vendor_ 为类前缀。</div>\r\n<div>\r\n[php]&lt;/div&gt;\r\n&lt;div&gt;\r\n&lt;div&gt;&lt;?php&lt;/div&gt;\r\n&lt;div&gt;// 5.2.x及之前版本的写法&lt;/div&gt;\r\n&lt;div&gt;class Vendor_Model_Foo&lt;/div&gt;\r\n&lt;div&gt;{&lt;/div&gt;\r\n&lt;div&gt;}&lt;/div&gt;\r\n&lt;/div&gt;\r\n&lt;div&gt;[/php]\r\n</div>\r\n<h3>4. 类的常量、属性和方法</h3>\r\n<div>此处的“类”指代所有的<strong>类、接口以及可复用代码块（traits）</strong>。</div>\r\n<div>\r\n<h4>4.1 常量</h4>\r\n<div><strong>类的常量中所有字母都 必须 大写，词间以下划线分隔</strong>。</div>\r\n<div>参照以下代码：</div>\r\n<div>\r\n[php]&lt;/div&gt;\r\n&lt;div&gt;&lt;?php&lt;/div&gt;\r\n&lt;div&gt;namespace Vendor\\Model;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;class Foo&lt;/div&gt;\r\n&lt;div&gt;{&lt;/div&gt;\r\n&lt;div&gt;const VERSION = \'1.0\';&lt;/div&gt;\r\n&lt;div&gt;const DATE_APPROVED = \'2012-06-01\';&lt;/div&gt;\r\n&lt;div&gt;}&lt;/div&gt;\r\n&lt;div&gt;[/php]\r\n</div>\r\n<h4>4.2 属性</h4>\r\n<div>类的属性命名 <strong>可以</strong> 遵循：</div>\r\n<ul>\r\n 	<li>大写开头的驼峰式 ($StudlyCaps)</li>\r\n 	<li>小写开头的驼峰式 ($camelCase)</li>\r\n 	<li>下划线分隔式 ($under_score)</li>\r\n</ul>\r\n<div>本规范不做强制要求，但无论遵循哪种命名方式，都 应该 在一定的范围内保持一致。这个范围可以是整个团队、整个包、整个类或整个方法。</div>\r\n<h4>4.3 方法</h4>\r\n<div><strong>方法名称 必须 符合 camelCase() 式的小写开头驼峰命名规范。</strong></div>\r\n</div>\r\n</div>\r\n<div></div>\r\n</div>\r\n</div>\r\n<div></div>\r\n</div>', '「PSR 规范」PSR-1 基础编码规范', '', 'inherit', 'closed', 'closed', '', '1027-revision-v1', '', '', '2017-06-16 01:52:26', '2017-06-15 17:52:26', '', 1027, 'https://www.gzpblog.com/20170616/1028.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1029, 1, '2017-06-16 01:56:27', '2017-06-15 17:56:27', '<h2>一 关于PSR-1</h2>\n<div>本篇规范制定了代码基本元素的相关标准，以确保共享的PHP代码间具有较高程度的技术互通性。</div>\n<div>本篇能愿动词解释：</div>\n<ul>\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\n</ul>\n<div>PHP-FIG 官网 PSR-1 详解： <a href=\"http://www.php-fig.org/psr/psr-1/\">PSR-1: Basic Coding Standard</a></div>\n<h2>二 PSR-1具体内容</h2>\n<h3>1. 概览</h3>\n<ul>\n 	<li>PHP代码文件 必须 以 &lt;?php 或 &lt;?= 标签开始；</li>\n 	<li>PHP代码文件 必须 以 不带 BOM 的 UTF-8 编码；</li>\n 	<li>PHP代码中 应该 只定义类、函数、常量等声明，或其他会产生 副作用 的操作（如：生成文件输出以及修改 .ini 配置文件等），二者只能选其一；</li>\n 	<li>命名空间以及类 必须 符合 PSR 的自动加载规范：PSR-0（已废弃） 和 PSR-4 中的一个；</li>\n 	<li>类的命名 必须 遵循 StudlyCaps 大写开头的驼峰命名规范；</li>\n 	<li>类中的常量所有字母都 必须 大写，单词间用下划线分隔；</li>\n 	<li>方法名称 必须 符合 camelCase 式的小写开头驼峰命名规范。</li>\n</ul>\n<h3>2. 文件</h3>\n<h4>2.1 PHP标签</h4>\n<div>PHP代码 必须 使用<strong> &lt;?php ?&gt;</strong> 长标签 或 <strong>&lt;?= ?&gt;</strong> 短输出标签； 一定不可 使用其它自定义标签。</div>\n<div>\n<h4>2.2 字符编码</h4>\n<div>PHP代码 必须 且只可使用 <strong>不带BOM的UTF-8</strong> 编码。</div>\n<div>\n<h4>2.3 副作用</h4>\n<div>一份 PHP 文件中 应该 要不就只定义新的声明，如类、函数或常量等不产生 副作用 的操作，要不就只书写会产生 副作用 的逻辑操作，但 不该 同时具有两者。</div>\n<div>”副作用”(side effects) 一词的意思是，仅仅通过包含文件，不直接声明类、函数和常量等，而执行的逻辑操作。</div>\n<div>\n<div>”副作用”包含却不仅限于：</div>\n<ul>\n 	<li>生成输出</li>\n 	<li>直接的 require 或 include</li>\n 	<li>连接外部服务</li>\n 	<li>修改 ini 配置</li>\n 	<li>抛出错误或异常</li>\n 	<li>修改全局或静态变量</li>\n 	<li>读或写文件等</li>\n</ul>\n<div>以下是一个 反例，一份包含“函数声明”以及产生“副作用”的代码：</div>\n<div>\n\n[php]\n&lt;?php\n// 「副作用」：修改 ini 配置\nini_set(\'error_reporting\', E_ALL);\n\n// 「副作用」：引入文件\ninclude &quot;file.php&quot;;\n\n// 「副作用」：生成输出\necho &quot;&lt;html&gt;\\n&quot;;\n\n// 声明函数\nfunction foo()\n{\n    // 函数主体部分\n}\n[/php]\n\n</div>\n<div>\n<div>下面是一个范例，一份只包含声明不产生「副作用」的代码：</div>\n<div>\n\n[php]\n&lt;?php\n// 声明函数\nfunction foo()\n{\n    // 函数主体部分\n}\n\n// 条件声明 **不** 属于「副作用」\nif (! function_exists(\'bar\')) {\n    function bar()\n    {\n        // 函数主体部分\n    }\n}\n[/php]\n\n</div>\n<h3>3. 命名空间和类</h3>\n<ul>\n 	<li>命名空间以及类的命名必须遵循 PSR-4。</li>\n 	<li>每个类都独立为一个文件</li>\n 	<li>命名空间至少有一个层次：顶级的组织名称（vendor name）</li>\n 	<li>类的命名 必须 遵循 StudlyCaps 大写开头的驼峰命名规范。</li>\n 	<li>PHP 5.3 及以后版本的代码 必须 使用正式的命名空间。</li>\n</ul>\n<div>例如：</div>\n<div>\n\n[php]\n&lt;?php\n// PHP 5.3及以后版本的写法\nnamespace Vendor\\Model;\n\nclass Foo\n{\n}\n[/php]\n\n</div>\n<div>5.2.x 及之前的版本 应该 使用伪命名空间的写法，约定俗成使用顶级的组织名称（vendor name）如 Vendor_ 为类前缀。</div>\n<div>\n\n[php]\n&lt;?php\nnamespace Vendor\\Model;\n\nclass Foo\n{\n    const VERSION = \'1.0\';\n    const DATE_APPROVED = \'2012-06-01\';\n}\n[/php]\n\n</div>\n<h3>4. 类的常量、属性和方法</h3>\n<div>此处的“类”指代所有的<strong>类、接口以及可复用代码块（traits）</strong>。</div>\n<div>\n<h4>4.1 常量</h4>\n<div><strong>类的常量中所有字母都 必须 大写，词间以下划线分隔</strong>。</div>\n<div>参照以下代码：</div>\n<div>\n\n[php]\n&lt;?php\nnamespace Vendor\\Model;\n\nclass Foo\n{\n    const VERSION = \'1.0\';\n    const DATE_APPROVED = \'2012-06-01\';\n}\n[/php]\n\n</div>\n<h4>4.2 属性</h4>\n<div>类的属性命名 <strong>可以</strong> 遵循：</div>\n<ul>\n 	<li>大写开头的驼峰式 ($StudlyCaps)</li>\n 	<li>小写开头的驼峰式 ($camelCase)</li>\n 	<li>下划线分隔式 ($under_score)</li>\n</ul>\n<div>本规范不做强制要求，但无论遵循哪种命名方式，都 应该 在一定的范围内保持一致。这个范围可以是整个团队、整个包、整个类或整个方法。</div>\n<h4>4.3 方法</h4>\n<div><strong>方法名称 必须 符合 camelCase() 式的小写开头驼峰命名规范。</strong></div>\n</div>\n</div>\n<div></div>\n</div>\n</div>\n<div></div>\n</div>', '「PSR 规范」PSR-1 基础编码规范', '', 'inherit', 'closed', 'closed', '', '1027-autosave-v1', '', '', '2017-06-16 01:56:27', '2017-06-15 17:56:27', '', 1027, 'https://www.gzpblog.com/20170616/1029.html', 0, 'revision', '', 0),
(1031, 1, '2017-06-16 02:31:48', '2017-06-15 18:31:48', '<h2>PHP</h2>\r\n<h3>综合</h3>\r\n<a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-1 基础编码规范</a>\r\n\r\n&nbsp;\r\n<h2>工具</h2>\r\n<h3>版本控制</h3>\r\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\r\n<h3>代码管理</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\r\n<h3>测试相关</h3>\r\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>\r\n<h3>其它</h3>\r\n<a href=\"https://www.gzpblog.com/20170607/1000.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Gitbook编写书籍文档</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-revision-v1', '', '', '2017-06-16 02:31:48', '2017-06-15 18:31:48', '', 978, 'https://www.gzpblog.com/20170616/1031.html', 0, 'revision', '', 0),
(1034, 1, '2017-06-20 12:10:51', '2017-06-20 04:10:51', '<blockquote>本文来自Laravel-china的翻译：<a href=\"https://laravel-china.org/topics/2079/psr-specification-psr-2-coding-style-specification\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-2 编码风格规范</a>\r\n英文原版：<a href=\"http://www.php-fig.org/psr/psr-2/\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-2: Coding Style Guide</a></blockquote>\r\n<h2>一 关于PSR-2</h2>\r\n<div>PSR-2 规范是 PSR-1 基本代码规范的继承与扩展。</div>\r\n<div>当多名程序员在多个项目中合作时，就需要一个共同的编码规范， 而本文中的风格规范源自于多个不同项目代码风格的共同特性， 因此，<strong>本规范的价值在于我们都遵循这个编码风格，而不是在于它本身</strong>。</div>\r\n<ul>\r\n 	<li>为了避免歧义，文档大量使用了「能愿动词」，对应的解释如下：</li>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\n<h2>二 PSR-2具体内容</h2>\r\n<h3>1. 概览</h3>\r\n<ul>\r\n 	<li>代码 必须 遵循 PSR-1 中的编码规范 。</li>\r\n 	<li>代码 必须 使用4个空格符而不是「Tab 键」进行缩进。</li>\r\n 	<li>每行的字符数 应该 软性保持在 80 个之内，理论上 一定不可 多于 120 个，但 一定不可 有硬性限制。</li>\r\n 	<li>每个 namespace 命名空间声明语句和 use 声明语句块后面，必须 插入一个空白行。</li>\r\n 	<li>类的开始花括号（{） 必须 写在函数声明后自成一行，结束花括号（}）也 必须 写在函数主体后自成一行。</li>\r\n 	<li>方法的开始花括号（{） 必须 写在函数声明后自成一行，结束花括号（}）也 必须 写在函数主体后自成一行。</li>\r\n 	<li>类的属性和方法 必须 添加访问修饰符（private、protected 以及 public），abstract 以及 final 必须 声明在访问修饰符之前，而 static 必须 声明在访问修饰符之后。</li>\r\n 	<li>控制结构的关键字后 必须 要有一个空格符，而调用方法或函数时则 一定不可 有。</li>\r\n 	<li>控制结构的开始花括号（{） 必须 写在声明的同一行，而结束花括号（}） 必须 写在主体后自成一行。</li>\r\n 	<li>控制结构的开始左括号后和结束右括号前，都 一定不可 有空格符。</li>\r\n</ul>\r\n<h4>1.1例子</h4>\r\n<div>以下例子程序简单地展示了以上大部分规范：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooInterface;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\nclass Foo extends Bar implements FooInterface\r\n{\r\n    public function sampleFunction($a, $b = null)\r\n    {\r\n        if ($a === $b) {\r\n            bar();\r\n        } elseif ($a &gt; $b) {\r\n            $foo-&gt;bar($arg1);\r\n        } else {\r\n            BazClass::bar($arg2, $arg3);\r\n        }\r\n    }\r\n\r\n    final public static function bar()\r\n    {\r\n        // 方法的内容\r\n    }\r\n}\r\n[/php]\r\n\r\n</div>\r\n<h3>2. 通则</h3>\r\n<h4>2.1 基本编码准则</h4>\r\n<div>代码 必须 符合 <a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-1</a> 中的所有规范。</div>\r\n<div>\r\n<h4>2.2 文件</h4>\r\n所有PHP文件 必须 使用 Unix LF (linefeed) 作为行的结束符。（\\n，ASCII码为10）\r\n\r\n所有PHP文件 必须 以一个空白行作为结束。\r\n\r\n纯PHP代码文件 必须 省略最后的 ?&gt; 结束标签。\r\n<h4>2.3 行</h4>\r\n行的长度 一定不可 有硬性的约束。\r\n\r\n软性的长度约束 必须 要限制在 120 个字符以内，若超过此长度，带代码规范检查的编辑器 必须 要发出警告，不过 一定不可 发出错误提示。\r\n\r\n每行 不该 多于80个字符，大于80字符的行 应该 折成多行。\r\n\r\n非空行后 一定不可 有多余的空格符。\r\n\r\n空行 可以 使得阅读代码更加方便以及有助于代码的分块。\r\n\r\n每行 一定不可 存在多于一条语句。\r\n<h4>2.4 缩进</h4>\r\n代码 必须 使用4个空格符的缩进，一定不可 用 tab键。\r\n<blockquote>备注：使用空格而不是「tab键缩进」的好处在于， 避免在比较代码差异、打补丁、重阅代码以及注释时产生混淆。 并且，使用空格缩进，让对齐变得更方便。</blockquote>\r\n<h4>2.5 关键字 以及 True/False/Null</h4>\r\nPHP所有 关键字 必须 全部小写。\r\n常量 true 、false 和 null 也 必须 全部小写。\r\n<h3>3. namespace 以及 use 声明</h3>\r\nnamespace 声明后 必须 插入一个空白行。\r\n\r\n所有 use 必须 在 namespace 后声明。\r\n\r\n每条 use 声明语句 必须 只有一个 use 关键词。\r\n\r\nuse 声明语句块后 必须 要有一个空白行。\r\n<div>例如：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooClass;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\n// ... 更多的 PHP 代码在这里 ...\r\n[/php]\r\n\r\n</div>\r\n<div>\r\n<h3>4. 类、属性和方法</h3>\r\n<div>此处的「类」泛指所有的「class类」、「接口」以及「traits 可复用代码块」。</div>\r\n<div>\r\n<h4>4.1 扩展与继承</h4>\r\n关键词 extends 和 implements 必须 写在类名称的同一行。\r\n\r\n类的开始花括号 必须 独占一行，结束花括号也 必须 在类主体后独占一行。\r\n\r\n[php]\r\n\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooClass;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\nclass ClassName extends ParentClass implements \\ArrayAccess, \\Countable\r\n{\r\n    // 这里面是常量、属性、类方法\r\n}\r\n[/php]\r\n\r\n<div>implements 的继承列表也 可以 分成多行，这样的话，每个继承接口名称都 必须 分开独立成行，包括第一个。</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooClass;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\nclass ClassName extends ParentClass implements\r\n    \\ArrayAccess,\r\n    \\Countable,\r\n    \\Serializable\r\n{\r\n    // 这里面是常量、属性、类方法\r\n}\r\n[/php]\r\n\r\n</div>\r\n<div>\r\n<h4>4.2 属性</h4>\r\n每个属性都 必须 添加访问修饰符。\r\n\r\n一定不可 使用关键字 var 声明一个属性。\r\n\r\n每条语句 一定不可 定义超过一个属性。\r\n\r\n不该 使用下划线作为前缀，来区分属性是 protected 或 private。\r\n\r\n以下是属性声明的一个范例：\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\n    public $foo = null;\r\n}\r\n[/php]\r\n\r\n<h4>4.3 方法</h4>\r\n所有方法都 必须 添加访问修饰符。\r\n\r\n不该 使用下划线作为前缀，来区分方法是 protected 或 private。\r\n\r\n方法名称后 一定不可 有空格符，其开始花括号 必须 独占一行，结束花括号也 必须 在方法主体后单独成一行。参数左括号后和右括号前 一定不可 有空格。\r\n\r\n一个标准的方法声明可参照以下范例，留意其括号、逗号、空格以及花括号的位置。\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\n    public function fooBarBaz($arg1, &amp;$arg2, $arg3 = [])\r\n    {\r\n        // method body\r\n    }\r\n}\r\n[/php]\r\n\r\n<h4>4.4 方法的参数</h4>\r\n参数列表中，每个逗号后面 必须 要有一个空格，而逗号前面 一定不可 有空格。\r\n\r\n有默认值的参数，必须 放到参数列表的末尾。\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\n    public function foo($arg1, &amp;$arg2, $arg3 = [])\r\n    {\r\n        // method body\r\n    }\r\n}\r\n[/php]\r\n\r\n参数列表 可以 分列成多行，这样，包括第一个参数在内的每个参数都 必须 单独成行。\r\n\r\n拆分成多行的参数列表后，结束括号以及方法开始花括号 必须 写在同一行，中间用一个空格分隔。\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\n    public function aVeryLongMethodName(\r\n        ClassTypeHint $arg1,\r\n        &amp;$arg2,\r\n        array $arg3 = []\r\n    ) {\r\n        // 方法的内容\r\n    }\r\n}\r\n[/php]\r\n\r\n<h4>4.5 abstract 、 final 、 以及 static</h4>\r\n需要添加 abstract 或 final 声明时，必须 写在访问修饰符前，而 static 则 必须 写在其后。\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nabstract class ClassName\r\n{\r\n    protected static $foo;\r\n\r\n    abstract protected function zim();\r\n\r\n    final public static function bar()\r\n    {\r\n        // method body\r\n    }\r\n}\r\n[/php]\r\n\r\n<h4>4.6 方法及函数调用</h4>\r\n方法及函数调用时，方法名或函数名与参数左括号之间 一定不可 有空格，参数右括号前也 一定不可 有空格。每个参数前 一定不可 有空格，但其后 必须 有一个空格。\r\n\r\n[php]\r\n&lt;?php\r\nbar();\r\n$foo-&gt;bar($arg1);\r\nFoo::bar($arg2, $arg3);\r\n[/php]\r\n\r\n参数 可以 分列成多行，此时包括第一个参数在内的每个参数都 必须 单独成行。\r\n\r\n[php]\r\n&lt;?php\r\n$foo-&gt;bar(\r\n    $longArgument,\r\n    $longerArgument,\r\n    $muchLongerArgument\r\n);\r\n[/php]\r\n\r\n<h3>5. 控制结构</h3>\r\n控制结构的基本规范如下：\r\n<ul>\r\n 	<li>控制结构关键词后 必须 有一个空格。</li>\r\n 	<li>左括号 ( 后 一定不可 有空格。</li>\r\n 	<li>右括号 ) 前也 一定不可 有空格。</li>\r\n 	<li>右括号 ) 与开始花括号 { 间 必须 有一个空格。</li>\r\n 	<li>结构体主体 必须 要有一次缩进。</li>\r\n 	<li>结束花括号 } 必须 在结构体主体后单独成行。</li>\r\n</ul>\r\n每个结构体的主体都 必须 被包含在成对的花括号之中， 这能让结构体更加结构话，以及减少加入新行时，出错的可能性。\r\n<h4>5.1 if 、elseif 和 else</h4>\r\n标准的 if 结构如下代码所示，请留意「括号」、「空格」以及「花括号」的位置， 注意 else 和 elseif 都与前面的结束花括号在同一行。\r\n\r\n[php]\r\n&lt;?php\r\nif ($expr1) {\r\n    // if body\r\n} elseif ($expr2) {\r\n    // elseif body\r\n} else {\r\n    // else body;\r\n}\r\n[/php]\r\n\r\n应该 使用关键词 elseif 代替所有 else if ，以使得所有的控制关键字都像是单独的一个词。\r\n<h4>5.2 switch 和 case</h4>\r\n标准的 switch 结构如下代码所示，留意括号、空格以及花括号的位置。\r\n\r\ncase 语句 必须 相对 switch 进行一次缩进，而 break 语句以及 case 内的其它语句都 必须 相对 case 进行一次缩进。\r\n\r\n如果存在非空的 case 直穿语句，主体里 必须 有类似 // no break 的注释。\r\n\r\n[php]\r\n&lt;?php\r\nswitch ($expr) {\r\n    case 0:\r\n        echo \'First case, with a break\';\r\n        break;\r\n    case 1:\r\n        echo \'Second case, which falls through\';\r\n        // no break\r\n    case 2:\r\n    case 3:\r\n    case 4:\r\n        echo \'Third case, return instead of break\';\r\n        return;\r\n    default:\r\n        echo \'Default case\';\r\n        break;\r\n}\r\n[/php]\r\n\r\n<h4>5.3 while 和 do while</h4>\r\n一个规范的 while 语句应该如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\nwhile ($expr) {\r\n    // structure body\r\n}\r\n[/php]\r\n\r\n标准的 do while 语句如下所示，同样的，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\ndo {\r\n    // structure body;\r\n} while ($expr);\r\n[/php]\r\n\r\n</div>\r\n<h4>5.4 for</h4>\r\n标准的 for 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\nfor ($i = 0; $i &lt; 10; $i++) {\r\n    // for body\r\n}\r\n[/php]\r\n\r\n<h4>5.5 foreach</h4>\r\n标准的 foreach 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\nforeach ($iterable as $key =&gt; $value) {\r\n    // foreach body\r\n}\r\n[/php]\r\n\r\n<h4>5.6 try, catch</h4>\r\n标准的 try catch 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\ntry {\r\n    // try body\r\n} catch (FirstExceptionType $e) {\r\n    // catch body\r\n} catch (OtherExceptionType $e) {\r\n    // catch body\r\n}\r\n[/php]\r\n\r\n<h3>6. 闭包</h3>\r\n闭包声明时，关键词 function 后以及关键词 use 的前后都 必须 要有一个空格。\r\n\r\n开始花括号 必须 写在声明的同一行，结束花括号 必须 紧跟主体结束的下一行。\r\n\r\n参数列表和变量列表的左括号后以及右括号前，一定不可 有空格。\r\n\r\n参数和变量列表中，逗号前 一定不可 有空格，而逗号后 必须 要有空格。\r\n\r\n闭包中有默认值的参数 必须 放到列表的后面。\r\n\r\n</div>\r\n标准的闭包声明语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\n$closureWithArgs = function ($arg1, $arg2) {\r\n    // body\r\n};\r\n\r\n$closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) {\r\n    // body\r\n};\r\n[/php]\r\n\r\n参数列表以及变量列表 可以 分成多行，这样，包括第一个在内的每个参数或变量都 必须 单独成行，而列表的右括号与闭包的开始花括号 必须 放在同一行。\r\n\r\n以下几个例子，包含了参数和变量列表被分成多行的多情况。\r\n\r\n[php]\r\n&lt;?php\r\n$longArgs_noVars = function (\r\n    $longArgument,\r\n    $longerArgument,\r\n    $muchLongerArgument\r\n) {\r\n   // body\r\n};\r\n\r\n$noArgs_longVars = function () use (\r\n    $longVar1,\r\n    $longerVar2,\r\n    $muchLongerVar3\r\n) {\r\n   // body\r\n};\r\n\r\n$longArgs_longVars = function (\r\n    $longArgument,\r\n    $longerArgument,\r\n    $muchLongerArgument\r\n) use (\r\n    $longVar1,\r\n    $longerVar2,\r\n    $muchLongerVar3\r\n) {\r\n   // body\r\n};\r\n\r\n$longArgs_shortVars = function (\r\n    $longArgument,\r\n    $longerArgument,\r\n    $muchLongerArgument\r\n) use ($var1) {\r\n   // body\r\n};\r\n\r\n$shortArgs_longVars = function ($arg) use (\r\n    $longVar1,\r\n    $longerVar2,\r\n    $muchLongerVar3\r\n) {\r\n   // body\r\n};\r\n[/php]\r\n\r\n注意，闭包被直接用作函数或方法调用的参数时，以上规则仍然适用。\r\n\r\n[php]\r\n&lt;?php\r\n$foo-&gt;bar(\r\n    $arg1,\r\n    function ($arg2) use ($var1) {\r\n        // body\r\n    },\r\n    $arg3\r\n);\r\n[/php]\r\n\r\n<h2>三 总结</h2>\r\n以上规范难免有疏忽，其中包括但不仅限于：\r\n<ul>\r\n 	<li>全局变量和常量的定义</li>\r\n 	<li>函数的定义</li>\r\n 	<li>操作符和赋值</li>\r\n 	<li>行内对齐</li>\r\n 	<li>注释和文档描述块</li>\r\n 	<li>类名的前缀及后缀</li>\r\n 	<li>最佳实践</li>\r\n</ul>\r\n本规范之后的修订与扩展将弥补以上不足。\r\n<div></div>\r\n</div>\r\n</div>', '「PSR 规范」PSR-2 编码风格规范', '', 'publish', 'open', 'closed', '', '%e3%80%8cpsr-%e8%a7%84%e8%8c%83%e3%80%8dpsr-2-%e7%bc%96%e7%a0%81%e9%a3%8e%e6%a0%bc%e8%a7%84%e8%8c%83', '', '', '2017-06-20 12:56:23', '2017-06-20 04:56:23', '', 0, 'https://www.gzpblog.com/?p=1034', 0, 'post', '', 0),
(1035, 1, '2017-06-20 12:10:51', '2017-06-20 04:10:51', '<blockquote>\r\n<div>本文来自Laravel-china的翻译：<a href=\"https://laravel-china.org/topics/2079/psr-specification-psr-2-coding-style-specification\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-2 编码风格规范</a></div>\r\n<div>英文原版：<a href=\"http://www.php-fig.org/psr/psr-2/\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-2: Coding Style Guide</a></div></blockquote>\r\n<h2>一 关于PSR-2</h2>\r\n<div>PSR-2 规范是 PSR-1 基本代码规范的继承与扩展。</div>\r\n<div>当多名程序员在多个项目中合作时，就需要一个共同的编码规范， 而本文中的风格规范源自于多个不同项目代码风格的共同特性， 因此，<strong>本规范的价值在于我们都遵循这个编码风格，而不是在于它本身</strong>。</div>\r\n<ul>\r\n 	<li>为了避免歧义，文档大量使用了「能愿动词」，对应的解释如下：</li>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\n<h2>二 PSR-2具体内容</h2>\r\n<h3>1. 概览</h3>\r\n<ul>\r\n 	<li>代码 必须 遵循 PSR-1 中的编码规范 。</li>\r\n 	<li>代码 必须 使用4个空格符而不是「Tab 键」进行缩进。</li>\r\n 	<li>每行的字符数 应该 软性保持在 80 个之内，理论上 一定不可 多于 120 个，但 一定不可 有硬性限制。</li>\r\n 	<li>每个 namespace 命名空间声明语句和 use 声明语句块后面，必须 插入一个空白行。</li>\r\n 	<li>类的开始花括号（{） 必须 写在函数声明后自成一行，结束花括号（}）也 必须 写在函数主体后自成一行。</li>\r\n 	<li>方法的开始花括号（{） 必须 写在函数声明后自成一行，结束花括号（}）也 必须 写在函数主体后自成一行。</li>\r\n 	<li>类的属性和方法 必须 添加访问修饰符（private、protected 以及 public），abstract 以及 final 必须 声明在访问修饰符之前，而 static 必须 声明在访问修饰符之后。</li>\r\n 	<li>控制结构的关键字后 必须 要有一个空格符，而调用方法或函数时则 一定不可 有。</li>\r\n 	<li>控制结构的开始花括号（{） 必须 写在声明的同一行，而结束花括号（}） 必须 写在主体后自成一行。</li>\r\n 	<li>控制结构的开始左括号后和结束右括号前，都 一定不可 有空格符。</li>\r\n</ul>\r\n<h4>1.1例子</h4>\r\n<div>以下例子程序简单地展示了以上大部分规范：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooInterface;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\nclass Foo extends Bar implements FooInterface\r\n{\r\n    public function sampleFunction($a, $b = null)\r\n    {\r\n        if ($a === $b) {\r\n            bar();\r\n        } elseif ($a &gt; $b) {\r\n            $foo-&gt;bar($arg1);\r\n        } else {\r\n            BazClass::bar($arg2, $arg3);\r\n        }\r\n    }\r\n\r\n    final public static function bar()\r\n    {\r\n        // 方法的内容\r\n    }\r\n}\r\n[/php]\r\n\r\n</div>\r\n<h3>2. 通则</h3>\r\n<h4>2.1 基本编码准则</h4>\r\n<div>代码 必须 符合 <a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-1</a> 中的所有规范。</div>\r\n<div>\r\n<h4>2.2 文件</h4>\r\n所有PHP文件 必须 使用 Unix LF (linefeed) 作为行的结束符。（\\n，ASCII码为10）\r\n\r\n所有PHP文件 必须 以一个空白行作为结束。\r\n\r\n纯PHP代码文件 必须 省略最后的 ?&gt; 结束标签。\r\n<h4>2.3 行</h4>\r\n行的长度 一定不可 有硬性的约束。\r\n\r\n软性的长度约束 必须 要限制在 120 个字符以内，若超过此长度，带代码规范检查的编辑器 必须 要发出警告，不过 一定不可 发出错误提示。\r\n\r\n每行 不该 多于80个字符，大于80字符的行 应该 折成多行。\r\n\r\n非空行后 一定不可 有多余的空格符。\r\n\r\n空行 可以 使得阅读代码更加方便以及有助于代码的分块。\r\n\r\n每行 一定不可 存在多于一条语句。\r\n<h4>2.4 缩进</h4>\r\n代码 必须 使用4个空格符的缩进，一定不可 用 tab键。\r\n<blockquote>备注：使用空格而不是「tab键缩进」的好处在于， 避免在比较代码差异、打补丁、重阅代码以及注释时产生混淆。 并且，使用空格缩进，让对齐变得更方便。</blockquote>\r\n<h4>2.5 关键字 以及 True/False/Null</h4>\r\nPHP所有 关键字 必须 全部小写。\r\n常量 true 、false 和 null 也 必须 全部小写。\r\n<h3>3. namespace 以及 use 声明</h3>\r\nnamespace 声明后 必须 插入一个空白行。\r\n\r\n所有 use 必须 在 namespace 后声明。\r\n\r\n每条 use 声明语句 必须 只有一个 use 关键词。\r\n\r\nuse 声明语句块后 必须 要有一个空白行。\r\n<div>例如：</div>\r\n<div>\r\n[php]&lt;/div&gt;\r\n&lt;div&gt;&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooClass;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\n// ... 更多的 PHP 代码在这里 ...&lt;/div&gt;\r\n&lt;div&gt;[/php]\r\n</div>\r\n<div>\r\n<h3>4. 类、属性和方法</h3>\r\n<div>此处的「类」泛指所有的「class类」、「接口」以及「traits 可复用代码块」。</div>\r\n<div>\r\n<h4>4.1 扩展与继承</h4>\r\n关键词 extends 和 implements 必须 写在类名称的同一行。\r\n\r\n类的开始花括号 必须 独占一行，结束花括号也 必须 在类主体后独占一行。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooClass;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\nclass ClassName extends ParentClass implements \\ArrayAccess, \\Countable\r\n{\r\n// 这里面是常量、属性、类方法\r\n}\r\n\r\n[/php]\r\n\r\n<div>implements 的继承列表也 可以 分成多行，这样的话，每个继承接口名称都 必须 分开独立成行，包括第一个。</div>\r\n<div>\r\n[php]&lt;/div&gt;\r\n&lt;div&gt;&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooClass;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\nclass ClassName extends ParentClass implements\r\n\\ArrayAccess,\r\n\\Countable,\r\n\\Serializable\r\n{\r\n// 这里面是常量、属性、类方法\r\n}&lt;/div&gt;\r\n&lt;div&gt;[/php]\r\n</div>\r\n<div>\r\n<h4>4.2 属性</h4>\r\n每个属性都 必须 添加访问修饰符。\r\n\r\n一定不可 使用关键字 var 声明一个属性。\r\n\r\n每条语句 一定不可 定义超过一个属性。\r\n\r\n不该 使用下划线作为前缀，来区分属性是 protected 或 private。\r\n\r\n以下是属性声明的一个范例：\r\n\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\npublic $foo = null;\r\n}\r\n\r\n[/php]\r\n\r\n<h4>4.3 方法</h4>\r\n所有方法都 必须 添加访问修饰符。\r\n\r\n不该 使用下划线作为前缀，来区分方法是 protected 或 private。\r\n\r\n方法名称后 一定不可 有空格符，其开始花括号 必须 独占一行，结束花括号也 必须 在方法主体后单独成一行。参数左括号后和右括号前 一定不可 有空格。\r\n\r\n一个标准的方法声明可参照以下范例，留意其括号、逗号、空格以及花括号的位置。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\npublic function fooBarBaz($arg1, &amp;$arg2, $arg3 = [])\r\n{\r\n// method body\r\n}\r\n}\r\n\r\n[/php]\r\n\r\n<h4>4.4 方法的参数</h4>\r\n参数列表中，每个逗号后面 必须 要有一个空格，而逗号前面 一定不可 有空格。\r\n\r\n有默认值的参数，必须 放到参数列表的末尾。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\npublic function foo($arg1, &amp;$arg2, $arg3 = [])\r\n{\r\n// method body\r\n}\r\n}\r\n\r\n[/php]\r\n\r\n\r\n参数列表 可以 分列成多行，这样，包括第一个参数在内的每个参数都 必须 单独成行。\r\n\r\n拆分成多行的参数列表后，结束括号以及方法开始花括号 必须 写在同一行，中间用一个空格分隔。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\npublic function aVeryLongMethodName(\r\nClassTypeHint $arg1,\r\n&amp;$arg2,\r\narray $arg3 = []\r\n) {\r\n// 方法的内容\r\n}\r\n}\r\n\r\n[/php]\r\n\r\n<h4>4.5 abstract 、 final 、 以及 static</h4>\r\n需要添加 abstract 或 final 声明时，必须 写在访问修饰符前，而 static 则 必须 写在其后。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nabstract class ClassName\r\n{\r\nprotected static $foo;\r\n\r\nabstract protected function zim();\r\n\r\nfinal public static function bar()\r\n{\r\n// method body\r\n}\r\n}\r\n\r\n[/php]\r\n\r\n<h4>4.6 方法及函数调用</h4>\r\n方法及函数调用时，方法名或函数名与参数左括号之间 一定不可 有空格，参数右括号前也 一定不可 有空格。每个参数前 一定不可 有空格，但其后 必须 有一个空格。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\nbar();\r\n$foo-&gt;bar($arg1);\r\nFoo::bar($arg2, $arg3);\r\n\r\n[/php]\r\n\r\n\r\n参数 可以 分列成多行，此时包括第一个参数在内的每个参数都 必须 单独成行。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\n$foo-&gt;bar(\r\n$longArgument,\r\n$longerArgument,\r\n$muchLongerArgument\r\n);\r\n\r\n[/php]\r\n\r\n<h3>5. 控制结构</h3>\r\n控制结构的基本规范如下：\r\n<ul>\r\n 	<li>控制结构关键词后 必须 有一个空格。</li>\r\n 	<li>左括号 ( 后 一定不可 有空格。</li>\r\n 	<li>右括号 ) 前也 一定不可 有空格。</li>\r\n 	<li>右括号 ) 与开始花括号 { 间 必须 有一个空格。</li>\r\n 	<li>结构体主体 必须 要有一次缩进。</li>\r\n 	<li>结束花括号 } 必须 在结构体主体后单独成行。</li>\r\n</ul>\r\n每个结构体的主体都 必须 被包含在成对的花括号之中， 这能让结构体更加结构话，以及减少加入新行时，出错的可能性。\r\n<h4>5.1 if 、elseif 和 else</h4>\r\n标准的 if 结构如下代码所示，请留意「括号」、「空格」以及「花括号」的位置， 注意 else 和 elseif 都与前面的结束花括号在同一行。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\nif ($expr1) {\r\n// if body\r\n} elseif ($expr2) {\r\n// elseif body\r\n} else {\r\n// else body;\r\n}\r\n\r\n[/php]\r\n\r\n\r\n应该 使用关键词 elseif 代替所有 else if ，以使得所有的控制关键字都像是单独的一个词。\r\n<h4>5.2 switch 和 case</h4>\r\n标准的 switch 结构如下代码所示，留意括号、空格以及花括号的位置。\r\n\r\ncase 语句 必须 相对 switch 进行一次缩进，而 break 语句以及 case 内的其它语句都 必须 相对 case 进行一次缩进。\r\n\r\n如果存在非空的 case 直穿语句，主体里 必须 有类似 // no break 的注释。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\nswitch ($expr) {\r\ncase 0:\r\necho \'First case, with a break\';\r\nbreak;\r\ncase 1:\r\necho \'Second case, which falls through\';\r\n// no break\r\ncase 2:\r\ncase 3:\r\ncase 4:\r\necho \'Third case, return instead of break\';\r\nreturn;\r\ndefault:\r\necho \'Default case\';\r\nbreak;\r\n}\r\n\r\n[/php]\r\n\r\n<h4>5.3 while 和 do while</h4>\r\n一个规范的 while 语句应该如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\nwhile ($expr) {\r\n// structure body\r\n}\r\n\r\n[/php]\r\n\r\n\r\n标准的 do while 语句如下所示，同样的，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\ndo {\r\n// structure body;\r\n} while ($expr);\r\n\r\n[/php]\r\n\r\n\r\n</div>\r\n<h4>5.4 for</h4>\r\n标准的 for 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\nfor ($i = 0; $i &lt; 10; $i++) {\r\n// for body\r\n}\r\n\r\n[/php]\r\n\r\n<h4>5.5 foreach</h4>\r\n标准的 foreach 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\nforeach ($iterable as $key =&gt; $value) {\r\n// foreach body\r\n}\r\n\r\n[/php]\r\n\r\n<h4>5.6 try, catch</h4>\r\n标准的 try catch 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\ntry {\r\n// try body\r\n} catch (FirstExceptionType $e) {\r\n// catch body\r\n} catch (OtherExceptionType $e) {\r\n// catch body\r\n}\r\n\r\n[/php]\r\n\r\n<h3>6. 闭包</h3>\r\n闭包声明时，关键词 function 后以及关键词 use 的前后都 必须 要有一个空格。\r\n\r\n开始花括号 必须 写在声明的同一行，结束花括号 必须 紧跟主体结束的下一行。\r\n\r\n参数列表和变量列表的左括号后以及右括号前，一定不可 有空格。\r\n\r\n参数和变量列表中，逗号前 一定不可 有空格，而逗号后 必须 要有空格。\r\n\r\n闭包中有默认值的参数 必须 放到列表的后面。\r\n\r\n</div>\r\n标准的闭包声明语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\n$closureWithArgs = function ($arg1, $arg2) {\r\n// body\r\n};\r\n\r\n$closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) {\r\n// body\r\n};\r\n\r\n[/php]\r\n\r\n\r\n参数列表以及变量列表 可以 分成多行，这样，包括第一个在内的每个参数或变量都 必须 单独成行，而列表的右括号与闭包的开始花括号 必须 放在同一行。\r\n\r\n以下几个例子，包含了参数和变量列表被分成多行的多情况。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\n$longArgs_noVars = function (\r\n$longArgument,\r\n$longerArgument,\r\n$muchLongerArgument\r\n) {\r\n// body\r\n};\r\n\r\n$noArgs_longVars = function () use (\r\n$longVar1,\r\n$longerVar2,\r\n$muchLongerVar3\r\n) {\r\n// body\r\n};\r\n\r\n$longArgs_longVars = function (\r\n$longArgument,\r\n$longerArgument,\r\n$muchLongerArgument\r\n) use (\r\n$longVar1,\r\n$longerVar2,\r\n$muchLongerVar3\r\n) {\r\n// body\r\n};\r\n\r\n$longArgs_shortVars = function (\r\n$longArgument,\r\n$longerArgument,\r\n$muchLongerArgument\r\n) use ($var1) {\r\n// body\r\n};\r\n\r\n$shortArgs_longVars = function ($arg) use (\r\n$longVar1,\r\n$longerVar2,\r\n$muchLongerVar3\r\n) {\r\n// body\r\n};\r\n\r\n[/php]\r\n\r\n\r\n注意，闭包被直接用作函数或方法调用的参数时，以上规则仍然适用。\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\n$foo-&gt;bar(\r\n$arg1,\r\nfunction ($arg2) use ($var1) {\r\n// body\r\n},\r\n$arg3\r\n);\r\n\r\n[/php]\r\n\r\n<h2>三 总结</h2>\r\n以上规范难免有疏忽，其中包括但不仅限于：\r\n<ul>\r\n 	<li>全局变量和常量的定义</li>\r\n 	<li>函数的定义</li>\r\n 	<li>操作符和赋值</li>\r\n 	<li>行内对齐</li>\r\n 	<li>注释和文档描述块</li>\r\n 	<li>类名的前缀及后缀</li>\r\n 	<li>最佳实践</li>\r\n</ul>\r\n本规范之后的修订与扩展将弥补以上不足。\r\n<div>\r\n<div></div>\r\n</div>\r\n</div>\r\n</div>', '「PSR 规范」PSR-2 编码风格规范', '', 'inherit', 'closed', 'closed', '', '1034-revision-v1', '', '', '2017-06-20 12:10:51', '2017-06-20 04:10:51', '', 1034, 'https://www.gzpblog.com/20170620/1035.html', 0, 'revision', '', 0),
(1036, 1, '2017-06-20 12:55:18', '2017-06-20 04:55:18', '<blockquote>本文来自Laravel-china的翻译：「PSR 规范」PSR-2 编码风格规范\n英文原版：PSR-2: Coding Style Guide</blockquote>\n<h2>一 关于PSR-2</h2>\n<div>PSR-2 规范是 PSR-1 基本代码规范的继承与扩展。</div>\n<div>当多名程序员在多个项目中合作时，就需要一个共同的编码规范， 而本文中的风格规范源自于多个不同项目代码风格的共同特性， 因此，<strong>本规范的价值在于我们都遵循这个编码风格，而不是在于它本身</strong>。</div>\n<ul>\n 	<li>为了避免歧义，文档大量使用了「能愿动词」，对应的解释如下：</li>\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\n</ul>\n<h2>二 PSR-2具体内容</h2>\n<h3>1. 概览</h3>\n<ul>\n 	<li>代码 必须 遵循 PSR-1 中的编码规范 。</li>\n 	<li>代码 必须 使用4个空格符而不是「Tab 键」进行缩进。</li>\n 	<li>每行的字符数 应该 软性保持在 80 个之内，理论上 一定不可 多于 120 个，但 一定不可 有硬性限制。</li>\n 	<li>每个 namespace 命名空间声明语句和 use 声明语句块后面，必须 插入一个空白行。</li>\n 	<li>类的开始花括号（{） 必须 写在函数声明后自成一行，结束花括号（}）也 必须 写在函数主体后自成一行。</li>\n 	<li>方法的开始花括号（{） 必须 写在函数声明后自成一行，结束花括号（}）也 必须 写在函数主体后自成一行。</li>\n 	<li>类的属性和方法 必须 添加访问修饰符（private、protected 以及 public），abstract 以及 final 必须 声明在访问修饰符之前，而 static 必须 声明在访问修饰符之后。</li>\n 	<li>控制结构的关键字后 必须 要有一个空格符，而调用方法或函数时则 一定不可 有。</li>\n 	<li>控制结构的开始花括号（{） 必须 写在声明的同一行，而结束花括号（}） 必须 写在主体后自成一行。</li>\n 	<li>控制结构的开始左括号后和结束右括号前，都 一定不可 有空格符。</li>\n</ul>\n<h4>1.1例子</h4>\n<div>以下例子程序简单地展示了以上大部分规范：</div>\n<div>\n\n[php]\n&lt;?php\nnamespace Vendor\\Package;\n\nuse FooInterface;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\nclass Foo extends Bar implements FooInterface\n{\n    public function sampleFunction($a, $b = null)\n    {\n        if ($a === $b) {\n            bar();\n        } elseif ($a &gt; $b) {\n            $foo-&gt;bar($arg1);\n        } else {\n            BazClass::bar($arg2, $arg3);\n        }\n    }\n\n    final public static function bar()\n    {\n        // 方法的内容\n    }\n}\n[/php]\n\n</div>\n<h3>2. 通则</h3>\n<h4>2.1 基本编码准则</h4>\n<div>代码 必须 符合 <a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-1</a> 中的所有规范。</div>\n<div>\n<h4>2.2 文件</h4>\n所有PHP文件 必须 使用 Unix LF (linefeed) 作为行的结束符。（\\n，ASCII码为10）\n\n所有PHP文件 必须 以一个空白行作为结束。\n\n纯PHP代码文件 必须 省略最后的 ?&gt; 结束标签。\n<h4>2.3 行</h4>\n行的长度 一定不可 有硬性的约束。\n\n软性的长度约束 必须 要限制在 120 个字符以内，若超过此长度，带代码规范检查的编辑器 必须 要发出警告，不过 一定不可 发出错误提示。\n\n每行 不该 多于80个字符，大于80字符的行 应该 折成多行。\n\n非空行后 一定不可 有多余的空格符。\n\n空行 可以 使得阅读代码更加方便以及有助于代码的分块。\n\n每行 一定不可 存在多于一条语句。\n<h4>2.4 缩进</h4>\n代码 必须 使用4个空格符的缩进，一定不可 用 tab键。\n<blockquote>备注：使用空格而不是「tab键缩进」的好处在于， 避免在比较代码差异、打补丁、重阅代码以及注释时产生混淆。 并且，使用空格缩进，让对齐变得更方便。</blockquote>\n<h4>2.5 关键字 以及 True/False/Null</h4>\nPHP所有 关键字 必须 全部小写。\n常量 true 、false 和 null 也 必须 全部小写。\n<h3>3. namespace 以及 use 声明</h3>\nnamespace 声明后 必须 插入一个空白行。\n\n所有 use 必须 在 namespace 后声明。\n\n每条 use 声明语句 必须 只有一个 use 关键词。\n\nuse 声明语句块后 必须 要有一个空白行。\n<div>例如：</div>\n<div>\n\n[php]\n&lt;?php\nnamespace Vendor\\Package;\n\nuse FooClass;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\n// ... 更多的 PHP 代码在这里 ...\n[/php]\n\n</div>\n<div>\n<h3>4. 类、属性和方法</h3>\n<div>此处的「类」泛指所有的「class类」、「接口」以及「traits 可复用代码块」。</div>\n<div>\n<h4>4.1 扩展与继承</h4>\n关键词 extends 和 implements 必须 写在类名称的同一行。\n\n类的开始花括号 必须 独占一行，结束花括号也 必须 在类主体后独占一行。\n\n[php]\n\n&lt;?php\nnamespace Vendor\\Package;\n\nuse FooClass;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\nclass ClassName extends ParentClass implements \\ArrayAccess, \\Countable\n{\n    // 这里面是常量、属性、类方法\n}\n[/php]\n\n<div>implements 的继承列表也 可以 分成多行，这样的话，每个继承接口名称都 必须 分开独立成行，包括第一个。</div>\n<div>\n\n[php]\n&lt;?php\nnamespace Vendor\\Package;\n\nuse FooClass;\nuse BarClass as Bar;\nuse OtherVendor\\OtherPackage\\BazClass;\n\nclass ClassName extends ParentClass implements\n    \\ArrayAccess,\n    \\Countable,\n    \\Serializable\n{\n    // 这里面是常量、属性、类方法\n}\n[/php]\n\n</div>\n<div>\n<h4>4.2 属性</h4>\n每个属性都 必须 添加访问修饰符。\n\n一定不可 使用关键字 var 声明一个属性。\n\n每条语句 一定不可 定义超过一个属性。\n\n不该 使用下划线作为前缀，来区分属性是 protected 或 private。\n\n以下是属性声明的一个范例：\n\n[php]\n&lt;?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public $foo = null;\n}\n[/php]\n\n<h4>4.3 方法</h4>\n所有方法都 必须 添加访问修饰符。\n\n不该 使用下划线作为前缀，来区分方法是 protected 或 private。\n\n方法名称后 一定不可 有空格符，其开始花括号 必须 独占一行，结束花括号也 必须 在方法主体后单独成一行。参数左括号后和右括号前 一定不可 有空格。\n\n一个标准的方法声明可参照以下范例，留意其括号、逗号、空格以及花括号的位置。\n\n[php]\n&lt;?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public function fooBarBaz($arg1, &amp;$arg2, $arg3 = [])\n    {\n        // method body\n    }\n}\n[/php]\n\n<h4>4.4 方法的参数</h4>\n参数列表中，每个逗号后面 必须 要有一个空格，而逗号前面 一定不可 有空格。\n\n有默认值的参数，必须 放到参数列表的末尾。\n\n[php]\n&lt;?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public function foo($arg1, &amp;$arg2, $arg3 = [])\n    {\n        // method body\n    }\n}\n[/php]\n\n参数列表 可以 分列成多行，这样，包括第一个参数在内的每个参数都 必须 单独成行。\n\n拆分成多行的参数列表后，结束括号以及方法开始花括号 必须 写在同一行，中间用一个空格分隔。\n\n[php]\n&lt;?php\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public function aVeryLongMethodName(\n        ClassTypeHint $arg1,\n        &amp;$arg2,\n        array $arg3 = []\n    ) {\n        // 方法的内容\n    }\n}\n[/php]\n\n<h4>4.5 abstract 、 final 、 以及 static</h4>\n需要添加 abstract 或 final 声明时，必须 写在访问修饰符前，而 static 则 必须 写在其后。\n\n[php]\n&lt;?php\nnamespace Vendor\\Package;\n\nabstract class ClassName\n{\n    protected static $foo;\n\n    abstract protected function zim();\n\n    final public static function bar()\n    {\n        // method body\n    }\n}\n[/php]\n\n<h4>4.6 方法及函数调用</h4>\n方法及函数调用时，方法名或函数名与参数左括号之间 一定不可 有空格，参数右括号前也 一定不可 有空格。每个参数前 一定不可 有空格，但其后 必须 有一个空格。\n\n[php]\n&lt;?php\nbar();\n$foo-&gt;bar($arg1);\nFoo::bar($arg2, $arg3);\n[/php]\n\n参数 可以 分列成多行，此时包括第一个参数在内的每个参数都 必须 单独成行。\n\n[php]\n&lt;?php\n$foo-&gt;bar(\n    $longArgument,\n    $longerArgument,\n    $muchLongerArgument\n);\n[/php]\n\n<h3>5. 控制结构</h3>\n控制结构的基本规范如下：\n<ul>\n 	<li>控制结构关键词后 必须 有一个空格。</li>\n 	<li>左括号 ( 后 一定不可 有空格。</li>\n 	<li>右括号 ) 前也 一定不可 有空格。</li>\n 	<li>右括号 ) 与开始花括号 { 间 必须 有一个空格。</li>\n 	<li>结构体主体 必须 要有一次缩进。</li>\n 	<li>结束花括号 } 必须 在结构体主体后单独成行。</li>\n</ul>\n每个结构体的主体都 必须 被包含在成对的花括号之中， 这能让结构体更加结构话，以及减少加入新行时，出错的可能性。\n<h4>5.1 if 、elseif 和 else</h4>\n标准的 if 结构如下代码所示，请留意「括号」、「空格」以及「花括号」的位置， 注意 else 和 elseif 都与前面的结束花括号在同一行。\n\n[php]\n&lt;?php\nif ($expr1) {\n    // if body\n} elseif ($expr2) {\n    // elseif body\n} else {\n    // else body;\n}\n[/php]\n\n应该 使用关键词 elseif 代替所有 else if ，以使得所有的控制关键字都像是单独的一个词。\n<h4>5.2 switch 和 case</h4>\n标准的 switch 结构如下代码所示，留意括号、空格以及花括号的位置。\n\ncase 语句 必须 相对 switch 进行一次缩进，而 break 语句以及 case 内的其它语句都 必须 相对 case 进行一次缩进。\n\n如果存在非空的 case 直穿语句，主体里 必须 有类似 // no break 的注释。\n\n[php]\n&lt;?php\nswitch ($expr) {\n    case 0:\n        echo \'First case, with a break\';\n        break;\n    case 1:\n        echo \'Second case, which falls through\';\n        // no break\n    case 2:\n    case 3:\n    case 4:\n        echo \'Third case, return instead of break\';\n        return;\n    default:\n        echo \'Default case\';\n        break;\n}\n[/php]\n\n<h4>5.3 while 和 do while</h4>\n一个规范的 while 语句应该如下所示，注意其「括号」、「空格」以及「花括号」的位置。\n\n[php]\n&lt;?php\nwhile ($expr) {\n    // structure body\n}\n[/php]\n\n标准的 do while 语句如下所示，同样的，注意其「括号」、「空格」以及「花括号」的位置。\n\n[php]\n&lt;?php\ndo {\n    // structure body;\n} while ($expr);\n[/php]\n\n</div>\n<h4>5.4 for</h4>\n标准的 for 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\n\n[php]\n&lt;?php\nfor ($i = 0; $i &lt; 10; $i++) {\n    // for body\n}\n[/php]\n\n<h4>5.5 foreach</h4>\n标准的 foreach 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\n\n[php]\n&lt;?php\nforeach ($iterable as $key =&gt; $value) {\n    // foreach body\n}\n[/php]\n\n<h4>5.6 try, catch</h4>\n标准的 try catch 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\n\n[php]\n&lt;?php\ntry {\n    // try body\n} catch (FirstExceptionType $e) {\n    // catch body\n} catch (OtherExceptionType $e) {\n    // catch body\n}\n[/php]\n\n<h3>6. 闭包</h3>\n闭包声明时，关键词 function 后以及关键词 use 的前后都 必须 要有一个空格。\n\n开始花括号 必须 写在声明的同一行，结束花括号 必须 紧跟主体结束的下一行。\n\n参数列表和变量列表的左括号后以及右括号前，一定不可 有空格。\n\n参数和变量列表中，逗号前 一定不可 有空格，而逗号后 必须 要有空格。\n\n闭包中有默认值的参数 必须 放到列表的后面。\n\n</div>\n标准的闭包声明语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\n\n[php]\n&lt;?php\n$closureWithArgs = function ($arg1, $arg2) {\n    // body\n};\n\n$closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) {\n    // body\n};\n[/php]\n\n参数列表以及变量列表 可以 分成多行，这样，包括第一个在内的每个参数或变量都 必须 单独成行，而列表的右括号与闭包的开始花括号 必须 放在同一行。\n\n以下几个例子，包含了参数和变量列表被分成多行的多情况。\n\n[php]\n&lt;?php\n$longArgs_noVars = function (\n    $longArgument,\n    $longerArgument,\n    $muchLongerArgument\n) {\n   // body\n};\n\n$noArgs_longVars = function () use (\n    $longVar1,\n    $longerVar2,\n    $muchLongerVar3\n) {\n   // body\n};\n\n$longArgs_longVars = function (\n    $longArgument,\n    $longerArgument,\n    $muchLongerArgument\n) use (\n    $longVar1,\n    $longerVar2,\n    $muchLongerVar3\n) {\n   // body\n};\n\n$longArgs_shortVars = function (\n    $longArgument,\n    $longerArgument,\n    $muchLongerArgument\n) use ($var1) {\n   // body\n};\n\n$shortArgs_longVars = function ($arg) use (\n    $longVar1,\n    $longerVar2,\n    $muchLongerVar3\n) {\n   // body\n};\n[/php]\n\n注意，闭包被直接用作函数或方法调用的参数时，以上规则仍然适用。\n\n[php]\n&lt;?php\n$foo-&gt;bar(\n    $arg1,\n    function ($arg2) use ($var1) {\n        // body\n    },\n    $arg3\n);\n[/php]\n\n<h2>三 总结</h2>\n以上规范难免有疏忽，其中包括但不仅限于：\n<ul>\n 	<li>全局变量和常量的定义</li>\n 	<li>函数的定义</li>\n 	<li>操作符和赋值</li>\n 	<li>行内对齐</li>\n 	<li>注释和文档描述块</li>\n 	<li>类名的前缀及后缀</li>\n 	<li>最佳实践</li>\n</ul>\n本规范之后的修订与扩展将弥补以上不足。\n<div></div>\n</div>\n</div>', '「PSR 规范」PSR-2 编码风格规范', '', 'inherit', 'closed', 'closed', '', '1034-autosave-v1', '', '', '2017-06-20 12:55:18', '2017-06-20 04:55:18', '', 1034, 'https://www.gzpblog.com/20170620/1036.html', 0, 'revision', '', 0),
(1037, 1, '2017-06-20 12:55:21', '2017-06-20 04:55:21', '<blockquote>本文来自Laravel-china的翻译：「PSR 规范」PSR-2 编码风格规范\r\n英文原版：PSR-2: Coding Style Guide</blockquote>\r\n<h2>一 关于PSR-2</h2>\r\n<div>PSR-2 规范是 PSR-1 基本代码规范的继承与扩展。</div>\r\n<div>当多名程序员在多个项目中合作时，就需要一个共同的编码规范， 而本文中的风格规范源自于多个不同项目代码风格的共同特性， 因此，<strong>本规范的价值在于我们都遵循这个编码风格，而不是在于它本身</strong>。</div>\r\n<ul>\r\n 	<li>为了避免歧义，文档大量使用了「能愿动词」，对应的解释如下：</li>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\n<h2>二 PSR-2具体内容</h2>\r\n<h3>1. 概览</h3>\r\n<ul>\r\n 	<li>代码 必须 遵循 PSR-1 中的编码规范 。</li>\r\n 	<li>代码 必须 使用4个空格符而不是「Tab 键」进行缩进。</li>\r\n 	<li>每行的字符数 应该 软性保持在 80 个之内，理论上 一定不可 多于 120 个，但 一定不可 有硬性限制。</li>\r\n 	<li>每个 namespace 命名空间声明语句和 use 声明语句块后面，必须 插入一个空白行。</li>\r\n 	<li>类的开始花括号（{） 必须 写在函数声明后自成一行，结束花括号（}）也 必须 写在函数主体后自成一行。</li>\r\n 	<li>方法的开始花括号（{） 必须 写在函数声明后自成一行，结束花括号（}）也 必须 写在函数主体后自成一行。</li>\r\n 	<li>类的属性和方法 必须 添加访问修饰符（private、protected 以及 public），abstract 以及 final 必须 声明在访问修饰符之前，而 static 必须 声明在访问修饰符之后。</li>\r\n 	<li>控制结构的关键字后 必须 要有一个空格符，而调用方法或函数时则 一定不可 有。</li>\r\n 	<li>控制结构的开始花括号（{） 必须 写在声明的同一行，而结束花括号（}） 必须 写在主体后自成一行。</li>\r\n 	<li>控制结构的开始左括号后和结束右括号前，都 一定不可 有空格符。</li>\r\n</ul>\r\n<h4>1.1例子</h4>\r\n<div>以下例子程序简单地展示了以上大部分规范：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooInterface;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\nclass Foo extends Bar implements FooInterface\r\n{\r\n    public function sampleFunction($a, $b = null)\r\n    {\r\n        if ($a === $b) {\r\n            bar();\r\n        } elseif ($a &gt; $b) {\r\n            $foo-&gt;bar($arg1);\r\n        } else {\r\n            BazClass::bar($arg2, $arg3);\r\n        }\r\n    }\r\n\r\n    final public static function bar()\r\n    {\r\n        // 方法的内容\r\n    }\r\n}\r\n[/php]\r\n\r\n</div>\r\n<h3>2. 通则</h3>\r\n<h4>2.1 基本编码准则</h4>\r\n<div>代码 必须 符合 <a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-1</a> 中的所有规范。</div>\r\n<div>\r\n<h4>2.2 文件</h4>\r\n所有PHP文件 必须 使用 Unix LF (linefeed) 作为行的结束符。（\\n，ASCII码为10）\r\n\r\n所有PHP文件 必须 以一个空白行作为结束。\r\n\r\n纯PHP代码文件 必须 省略最后的 ?&gt; 结束标签。\r\n<h4>2.3 行</h4>\r\n行的长度 一定不可 有硬性的约束。\r\n\r\n软性的长度约束 必须 要限制在 120 个字符以内，若超过此长度，带代码规范检查的编辑器 必须 要发出警告，不过 一定不可 发出错误提示。\r\n\r\n每行 不该 多于80个字符，大于80字符的行 应该 折成多行。\r\n\r\n非空行后 一定不可 有多余的空格符。\r\n\r\n空行 可以 使得阅读代码更加方便以及有助于代码的分块。\r\n\r\n每行 一定不可 存在多于一条语句。\r\n<h4>2.4 缩进</h4>\r\n代码 必须 使用4个空格符的缩进，一定不可 用 tab键。\r\n<blockquote>备注：使用空格而不是「tab键缩进」的好处在于， 避免在比较代码差异、打补丁、重阅代码以及注释时产生混淆。 并且，使用空格缩进，让对齐变得更方便。</blockquote>\r\n<h4>2.5 关键字 以及 True/False/Null</h4>\r\nPHP所有 关键字 必须 全部小写。\r\n常量 true 、false 和 null 也 必须 全部小写。\r\n<h3>3. namespace 以及 use 声明</h3>\r\nnamespace 声明后 必须 插入一个空白行。\r\n\r\n所有 use 必须 在 namespace 后声明。\r\n\r\n每条 use 声明语句 必须 只有一个 use 关键词。\r\n\r\nuse 声明语句块后 必须 要有一个空白行。\r\n<div>例如：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooClass;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\n// ... 更多的 PHP 代码在这里 ...\r\n[/php]\r\n\r\n</div>\r\n<div>\r\n<h3>4. 类、属性和方法</h3>\r\n<div>此处的「类」泛指所有的「class类」、「接口」以及「traits 可复用代码块」。</div>\r\n<div>\r\n<h4>4.1 扩展与继承</h4>\r\n关键词 extends 和 implements 必须 写在类名称的同一行。\r\n\r\n类的开始花括号 必须 独占一行，结束花括号也 必须 在类主体后独占一行。\r\n\r\n[php]\r\n\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooClass;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\nclass ClassName extends ParentClass implements \\ArrayAccess, \\Countable\r\n{\r\n    // 这里面是常量、属性、类方法\r\n}\r\n[/php]\r\n\r\n<div>implements 的继承列表也 可以 分成多行，这样的话，每个继承接口名称都 必须 分开独立成行，包括第一个。</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooClass;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\nclass ClassName extends ParentClass implements\r\n    \\ArrayAccess,\r\n    \\Countable,\r\n    \\Serializable\r\n{\r\n    // 这里面是常量、属性、类方法\r\n}\r\n[/php]\r\n\r\n</div>\r\n<div>\r\n<h4>4.2 属性</h4>\r\n每个属性都 必须 添加访问修饰符。\r\n\r\n一定不可 使用关键字 var 声明一个属性。\r\n\r\n每条语句 一定不可 定义超过一个属性。\r\n\r\n不该 使用下划线作为前缀，来区分属性是 protected 或 private。\r\n\r\n以下是属性声明的一个范例：\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\n    public $foo = null;\r\n}\r\n[/php]\r\n\r\n<h4>4.3 方法</h4>\r\n所有方法都 必须 添加访问修饰符。\r\n\r\n不该 使用下划线作为前缀，来区分方法是 protected 或 private。\r\n\r\n方法名称后 一定不可 有空格符，其开始花括号 必须 独占一行，结束花括号也 必须 在方法主体后单独成一行。参数左括号后和右括号前 一定不可 有空格。\r\n\r\n一个标准的方法声明可参照以下范例，留意其括号、逗号、空格以及花括号的位置。\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\n    public function fooBarBaz($arg1, &amp;$arg2, $arg3 = [])\r\n    {\r\n        // method body\r\n    }\r\n}\r\n[/php]\r\n\r\n<h4>4.4 方法的参数</h4>\r\n参数列表中，每个逗号后面 必须 要有一个空格，而逗号前面 一定不可 有空格。\r\n\r\n有默认值的参数，必须 放到参数列表的末尾。\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\n    public function foo($arg1, &amp;$arg2, $arg3 = [])\r\n    {\r\n        // method body\r\n    }\r\n}\r\n[/php]\r\n\r\n参数列表 可以 分列成多行，这样，包括第一个参数在内的每个参数都 必须 单独成行。\r\n\r\n拆分成多行的参数列表后，结束括号以及方法开始花括号 必须 写在同一行，中间用一个空格分隔。\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\n    public function aVeryLongMethodName(\r\n        ClassTypeHint $arg1,\r\n        &amp;$arg2,\r\n        array $arg3 = []\r\n    ) {\r\n        // 方法的内容\r\n    }\r\n}\r\n[/php]\r\n\r\n<h4>4.5 abstract 、 final 、 以及 static</h4>\r\n需要添加 abstract 或 final 声明时，必须 写在访问修饰符前，而 static 则 必须 写在其后。\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nabstract class ClassName\r\n{\r\n    protected static $foo;\r\n\r\n    abstract protected function zim();\r\n\r\n    final public static function bar()\r\n    {\r\n        // method body\r\n    }\r\n}\r\n[/php]\r\n\r\n<h4>4.6 方法及函数调用</h4>\r\n方法及函数调用时，方法名或函数名与参数左括号之间 一定不可 有空格，参数右括号前也 一定不可 有空格。每个参数前 一定不可 有空格，但其后 必须 有一个空格。\r\n\r\n[php]\r\n&lt;?php\r\nbar();\r\n$foo-&gt;bar($arg1);\r\nFoo::bar($arg2, $arg3);\r\n[/php]\r\n\r\n参数 可以 分列成多行，此时包括第一个参数在内的每个参数都 必须 单独成行。\r\n\r\n[php]\r\n&lt;?php\r\n$foo-&gt;bar(\r\n    $longArgument,\r\n    $longerArgument,\r\n    $muchLongerArgument\r\n);\r\n[/php]\r\n\r\n<h3>5. 控制结构</h3>\r\n控制结构的基本规范如下：\r\n<ul>\r\n 	<li>控制结构关键词后 必须 有一个空格。</li>\r\n 	<li>左括号 ( 后 一定不可 有空格。</li>\r\n 	<li>右括号 ) 前也 一定不可 有空格。</li>\r\n 	<li>右括号 ) 与开始花括号 { 间 必须 有一个空格。</li>\r\n 	<li>结构体主体 必须 要有一次缩进。</li>\r\n 	<li>结束花括号 } 必须 在结构体主体后单独成行。</li>\r\n</ul>\r\n每个结构体的主体都 必须 被包含在成对的花括号之中， 这能让结构体更加结构话，以及减少加入新行时，出错的可能性。\r\n<h4>5.1 if 、elseif 和 else</h4>\r\n标准的 if 结构如下代码所示，请留意「括号」、「空格」以及「花括号」的位置， 注意 else 和 elseif 都与前面的结束花括号在同一行。\r\n\r\n[php]\r\n&lt;?php\r\nif ($expr1) {\r\n    // if body\r\n} elseif ($expr2) {\r\n    // elseif body\r\n} else {\r\n    // else body;\r\n}\r\n[/php]\r\n\r\n应该 使用关键词 elseif 代替所有 else if ，以使得所有的控制关键字都像是单独的一个词。\r\n<h4>5.2 switch 和 case</h4>\r\n标准的 switch 结构如下代码所示，留意括号、空格以及花括号的位置。\r\n\r\ncase 语句 必须 相对 switch 进行一次缩进，而 break 语句以及 case 内的其它语句都 必须 相对 case 进行一次缩进。\r\n\r\n如果存在非空的 case 直穿语句，主体里 必须 有类似 // no break 的注释。\r\n\r\n[php]\r\n&lt;?php\r\nswitch ($expr) {\r\n    case 0:\r\n        echo \'First case, with a break\';\r\n        break;\r\n    case 1:\r\n        echo \'Second case, which falls through\';\r\n        // no break\r\n    case 2:\r\n    case 3:\r\n    case 4:\r\n        echo \'Third case, return instead of break\';\r\n        return;\r\n    default:\r\n        echo \'Default case\';\r\n        break;\r\n}\r\n[/php]\r\n\r\n<h4>5.3 while 和 do while</h4>\r\n一个规范的 while 语句应该如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\nwhile ($expr) {\r\n    // structure body\r\n}\r\n[/php]\r\n\r\n标准的 do while 语句如下所示，同样的，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\ndo {\r\n    // structure body;\r\n} while ($expr);\r\n[/php]\r\n\r\n</div>\r\n<h4>5.4 for</h4>\r\n标准的 for 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\nfor ($i = 0; $i &lt; 10; $i++) {\r\n    // for body\r\n}\r\n[/php]\r\n\r\n<h4>5.5 foreach</h4>\r\n标准的 foreach 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\nforeach ($iterable as $key =&gt; $value) {\r\n    // foreach body\r\n}\r\n[/php]\r\n\r\n<h4>5.6 try, catch</h4>\r\n标准的 try catch 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\ntry {\r\n    // try body\r\n} catch (FirstExceptionType $e) {\r\n    // catch body\r\n} catch (OtherExceptionType $e) {\r\n    // catch body\r\n}\r\n[/php]\r\n\r\n<h3>6. 闭包</h3>\r\n闭包声明时，关键词 function 后以及关键词 use 的前后都 必须 要有一个空格。\r\n\r\n开始花括号 必须 写在声明的同一行，结束花括号 必须 紧跟主体结束的下一行。\r\n\r\n参数列表和变量列表的左括号后以及右括号前，一定不可 有空格。\r\n\r\n参数和变量列表中，逗号前 一定不可 有空格，而逗号后 必须 要有空格。\r\n\r\n闭包中有默认值的参数 必须 放到列表的后面。\r\n\r\n</div>\r\n标准的闭包声明语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\n$closureWithArgs = function ($arg1, $arg2) {\r\n    // body\r\n};\r\n\r\n$closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) {\r\n    // body\r\n};\r\n[/php]\r\n\r\n参数列表以及变量列表 可以 分成多行，这样，包括第一个在内的每个参数或变量都 必须 单独成行，而列表的右括号与闭包的开始花括号 必须 放在同一行。\r\n\r\n以下几个例子，包含了参数和变量列表被分成多行的多情况。\r\n\r\n[php]\r\n&lt;?php\r\n$longArgs_noVars = function (\r\n    $longArgument,\r\n    $longerArgument,\r\n    $muchLongerArgument\r\n) {\r\n   // body\r\n};\r\n\r\n$noArgs_longVars = function () use (\r\n    $longVar1,\r\n    $longerVar2,\r\n    $muchLongerVar3\r\n) {\r\n   // body\r\n};\r\n\r\n$longArgs_longVars = function (\r\n    $longArgument,\r\n    $longerArgument,\r\n    $muchLongerArgument\r\n) use (\r\n    $longVar1,\r\n    $longerVar2,\r\n    $muchLongerVar3\r\n) {\r\n   // body\r\n};\r\n\r\n$longArgs_shortVars = function (\r\n    $longArgument,\r\n    $longerArgument,\r\n    $muchLongerArgument\r\n) use ($var1) {\r\n   // body\r\n};\r\n\r\n$shortArgs_longVars = function ($arg) use (\r\n    $longVar1,\r\n    $longerVar2,\r\n    $muchLongerVar3\r\n) {\r\n   // body\r\n};\r\n[/php]\r\n\r\n注意，闭包被直接用作函数或方法调用的参数时，以上规则仍然适用。\r\n\r\n[php]\r\n&lt;?php\r\n$foo-&gt;bar(\r\n    $arg1,\r\n    function ($arg2) use ($var1) {\r\n        // body\r\n    },\r\n    $arg3\r\n);\r\n[/php]\r\n\r\n<h2>三 总结</h2>\r\n以上规范难免有疏忽，其中包括但不仅限于：\r\n<ul>\r\n 	<li>全局变量和常量的定义</li>\r\n 	<li>函数的定义</li>\r\n 	<li>操作符和赋值</li>\r\n 	<li>行内对齐</li>\r\n 	<li>注释和文档描述块</li>\r\n 	<li>类名的前缀及后缀</li>\r\n 	<li>最佳实践</li>\r\n</ul>\r\n本规范之后的修订与扩展将弥补以上不足。\r\n<div></div>\r\n</div>\r\n</div>', '「PSR 规范」PSR-2 编码风格规范', '', 'inherit', 'closed', 'closed', '', '1034-revision-v1', '', '', '2017-06-20 12:55:21', '2017-06-20 04:55:21', '', 1034, 'https://www.gzpblog.com/20170620/1037.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1038, 1, '2017-06-20 12:56:23', '2017-06-20 04:56:23', '<blockquote>本文来自Laravel-china的翻译：<a href=\"https://laravel-china.org/topics/2079/psr-specification-psr-2-coding-style-specification\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-2 编码风格规范</a>\r\n英文原版：<a href=\"http://www.php-fig.org/psr/psr-2/\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-2: Coding Style Guide</a></blockquote>\r\n<h2>一 关于PSR-2</h2>\r\n<div>PSR-2 规范是 PSR-1 基本代码规范的继承与扩展。</div>\r\n<div>当多名程序员在多个项目中合作时，就需要一个共同的编码规范， 而本文中的风格规范源自于多个不同项目代码风格的共同特性， 因此，<strong>本规范的价值在于我们都遵循这个编码风格，而不是在于它本身</strong>。</div>\r\n<ul>\r\n 	<li>为了避免歧义，文档大量使用了「能愿动词」，对应的解释如下：</li>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\n<h2>二 PSR-2具体内容</h2>\r\n<h3>1. 概览</h3>\r\n<ul>\r\n 	<li>代码 必须 遵循 PSR-1 中的编码规范 。</li>\r\n 	<li>代码 必须 使用4个空格符而不是「Tab 键」进行缩进。</li>\r\n 	<li>每行的字符数 应该 软性保持在 80 个之内，理论上 一定不可 多于 120 个，但 一定不可 有硬性限制。</li>\r\n 	<li>每个 namespace 命名空间声明语句和 use 声明语句块后面，必须 插入一个空白行。</li>\r\n 	<li>类的开始花括号（{） 必须 写在函数声明后自成一行，结束花括号（}）也 必须 写在函数主体后自成一行。</li>\r\n 	<li>方法的开始花括号（{） 必须 写在函数声明后自成一行，结束花括号（}）也 必须 写在函数主体后自成一行。</li>\r\n 	<li>类的属性和方法 必须 添加访问修饰符（private、protected 以及 public），abstract 以及 final 必须 声明在访问修饰符之前，而 static 必须 声明在访问修饰符之后。</li>\r\n 	<li>控制结构的关键字后 必须 要有一个空格符，而调用方法或函数时则 一定不可 有。</li>\r\n 	<li>控制结构的开始花括号（{） 必须 写在声明的同一行，而结束花括号（}） 必须 写在主体后自成一行。</li>\r\n 	<li>控制结构的开始左括号后和结束右括号前，都 一定不可 有空格符。</li>\r\n</ul>\r\n<h4>1.1例子</h4>\r\n<div>以下例子程序简单地展示了以上大部分规范：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooInterface;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\nclass Foo extends Bar implements FooInterface\r\n{\r\n    public function sampleFunction($a, $b = null)\r\n    {\r\n        if ($a === $b) {\r\n            bar();\r\n        } elseif ($a &gt; $b) {\r\n            $foo-&gt;bar($arg1);\r\n        } else {\r\n            BazClass::bar($arg2, $arg3);\r\n        }\r\n    }\r\n\r\n    final public static function bar()\r\n    {\r\n        // 方法的内容\r\n    }\r\n}\r\n[/php]\r\n\r\n</div>\r\n<h3>2. 通则</h3>\r\n<h4>2.1 基本编码准则</h4>\r\n<div>代码 必须 符合 <a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-1</a> 中的所有规范。</div>\r\n<div>\r\n<h4>2.2 文件</h4>\r\n所有PHP文件 必须 使用 Unix LF (linefeed) 作为行的结束符。（\\n，ASCII码为10）\r\n\r\n所有PHP文件 必须 以一个空白行作为结束。\r\n\r\n纯PHP代码文件 必须 省略最后的 ?&gt; 结束标签。\r\n<h4>2.3 行</h4>\r\n行的长度 一定不可 有硬性的约束。\r\n\r\n软性的长度约束 必须 要限制在 120 个字符以内，若超过此长度，带代码规范检查的编辑器 必须 要发出警告，不过 一定不可 发出错误提示。\r\n\r\n每行 不该 多于80个字符，大于80字符的行 应该 折成多行。\r\n\r\n非空行后 一定不可 有多余的空格符。\r\n\r\n空行 可以 使得阅读代码更加方便以及有助于代码的分块。\r\n\r\n每行 一定不可 存在多于一条语句。\r\n<h4>2.4 缩进</h4>\r\n代码 必须 使用4个空格符的缩进，一定不可 用 tab键。\r\n<blockquote>备注：使用空格而不是「tab键缩进」的好处在于， 避免在比较代码差异、打补丁、重阅代码以及注释时产生混淆。 并且，使用空格缩进，让对齐变得更方便。</blockquote>\r\n<h4>2.5 关键字 以及 True/False/Null</h4>\r\nPHP所有 关键字 必须 全部小写。\r\n常量 true 、false 和 null 也 必须 全部小写。\r\n<h3>3. namespace 以及 use 声明</h3>\r\nnamespace 声明后 必须 插入一个空白行。\r\n\r\n所有 use 必须 在 namespace 后声明。\r\n\r\n每条 use 声明语句 必须 只有一个 use 关键词。\r\n\r\nuse 声明语句块后 必须 要有一个空白行。\r\n<div>例如：</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooClass;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\n// ... 更多的 PHP 代码在这里 ...\r\n[/php]\r\n\r\n</div>\r\n<div>\r\n<h3>4. 类、属性和方法</h3>\r\n<div>此处的「类」泛指所有的「class类」、「接口」以及「traits 可复用代码块」。</div>\r\n<div>\r\n<h4>4.1 扩展与继承</h4>\r\n关键词 extends 和 implements 必须 写在类名称的同一行。\r\n\r\n类的开始花括号 必须 独占一行，结束花括号也 必须 在类主体后独占一行。\r\n\r\n[php]\r\n\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooClass;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\nclass ClassName extends ParentClass implements \\ArrayAccess, \\Countable\r\n{\r\n    // 这里面是常量、属性、类方法\r\n}\r\n[/php]\r\n\r\n<div>implements 的继承列表也 可以 分成多行，这样的话，每个继承接口名称都 必须 分开独立成行，包括第一个。</div>\r\n<div>\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooClass;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\nclass ClassName extends ParentClass implements\r\n    \\ArrayAccess,\r\n    \\Countable,\r\n    \\Serializable\r\n{\r\n    // 这里面是常量、属性、类方法\r\n}\r\n[/php]\r\n\r\n</div>\r\n<div>\r\n<h4>4.2 属性</h4>\r\n每个属性都 必须 添加访问修饰符。\r\n\r\n一定不可 使用关键字 var 声明一个属性。\r\n\r\n每条语句 一定不可 定义超过一个属性。\r\n\r\n不该 使用下划线作为前缀，来区分属性是 protected 或 private。\r\n\r\n以下是属性声明的一个范例：\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\n    public $foo = null;\r\n}\r\n[/php]\r\n\r\n<h4>4.3 方法</h4>\r\n所有方法都 必须 添加访问修饰符。\r\n\r\n不该 使用下划线作为前缀，来区分方法是 protected 或 private。\r\n\r\n方法名称后 一定不可 有空格符，其开始花括号 必须 独占一行，结束花括号也 必须 在方法主体后单独成一行。参数左括号后和右括号前 一定不可 有空格。\r\n\r\n一个标准的方法声明可参照以下范例，留意其括号、逗号、空格以及花括号的位置。\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\n    public function fooBarBaz($arg1, &amp;$arg2, $arg3 = [])\r\n    {\r\n        // method body\r\n    }\r\n}\r\n[/php]\r\n\r\n<h4>4.4 方法的参数</h4>\r\n参数列表中，每个逗号后面 必须 要有一个空格，而逗号前面 一定不可 有空格。\r\n\r\n有默认值的参数，必须 放到参数列表的末尾。\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\n    public function foo($arg1, &amp;$arg2, $arg3 = [])\r\n    {\r\n        // method body\r\n    }\r\n}\r\n[/php]\r\n\r\n参数列表 可以 分列成多行，这样，包括第一个参数在内的每个参数都 必须 单独成行。\r\n\r\n拆分成多行的参数列表后，结束括号以及方法开始花括号 必须 写在同一行，中间用一个空格分隔。\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\n    public function aVeryLongMethodName(\r\n        ClassTypeHint $arg1,\r\n        &amp;$arg2,\r\n        array $arg3 = []\r\n    ) {\r\n        // 方法的内容\r\n    }\r\n}\r\n[/php]\r\n\r\n<h4>4.5 abstract 、 final 、 以及 static</h4>\r\n需要添加 abstract 或 final 声明时，必须 写在访问修饰符前，而 static 则 必须 写在其后。\r\n\r\n[php]\r\n&lt;?php\r\nnamespace Vendor\\Package;\r\n\r\nabstract class ClassName\r\n{\r\n    protected static $foo;\r\n\r\n    abstract protected function zim();\r\n\r\n    final public static function bar()\r\n    {\r\n        // method body\r\n    }\r\n}\r\n[/php]\r\n\r\n<h4>4.6 方法及函数调用</h4>\r\n方法及函数调用时，方法名或函数名与参数左括号之间 一定不可 有空格，参数右括号前也 一定不可 有空格。每个参数前 一定不可 有空格，但其后 必须 有一个空格。\r\n\r\n[php]\r\n&lt;?php\r\nbar();\r\n$foo-&gt;bar($arg1);\r\nFoo::bar($arg2, $arg3);\r\n[/php]\r\n\r\n参数 可以 分列成多行，此时包括第一个参数在内的每个参数都 必须 单独成行。\r\n\r\n[php]\r\n&lt;?php\r\n$foo-&gt;bar(\r\n    $longArgument,\r\n    $longerArgument,\r\n    $muchLongerArgument\r\n);\r\n[/php]\r\n\r\n<h3>5. 控制结构</h3>\r\n控制结构的基本规范如下：\r\n<ul>\r\n 	<li>控制结构关键词后 必须 有一个空格。</li>\r\n 	<li>左括号 ( 后 一定不可 有空格。</li>\r\n 	<li>右括号 ) 前也 一定不可 有空格。</li>\r\n 	<li>右括号 ) 与开始花括号 { 间 必须 有一个空格。</li>\r\n 	<li>结构体主体 必须 要有一次缩进。</li>\r\n 	<li>结束花括号 } 必须 在结构体主体后单独成行。</li>\r\n</ul>\r\n每个结构体的主体都 必须 被包含在成对的花括号之中， 这能让结构体更加结构话，以及减少加入新行时，出错的可能性。\r\n<h4>5.1 if 、elseif 和 else</h4>\r\n标准的 if 结构如下代码所示，请留意「括号」、「空格」以及「花括号」的位置， 注意 else 和 elseif 都与前面的结束花括号在同一行。\r\n\r\n[php]\r\n&lt;?php\r\nif ($expr1) {\r\n    // if body\r\n} elseif ($expr2) {\r\n    // elseif body\r\n} else {\r\n    // else body;\r\n}\r\n[/php]\r\n\r\n应该 使用关键词 elseif 代替所有 else if ，以使得所有的控制关键字都像是单独的一个词。\r\n<h4>5.2 switch 和 case</h4>\r\n标准的 switch 结构如下代码所示，留意括号、空格以及花括号的位置。\r\n\r\ncase 语句 必须 相对 switch 进行一次缩进，而 break 语句以及 case 内的其它语句都 必须 相对 case 进行一次缩进。\r\n\r\n如果存在非空的 case 直穿语句，主体里 必须 有类似 // no break 的注释。\r\n\r\n[php]\r\n&lt;?php\r\nswitch ($expr) {\r\n    case 0:\r\n        echo \'First case, with a break\';\r\n        break;\r\n    case 1:\r\n        echo \'Second case, which falls through\';\r\n        // no break\r\n    case 2:\r\n    case 3:\r\n    case 4:\r\n        echo \'Third case, return instead of break\';\r\n        return;\r\n    default:\r\n        echo \'Default case\';\r\n        break;\r\n}\r\n[/php]\r\n\r\n<h4>5.3 while 和 do while</h4>\r\n一个规范的 while 语句应该如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\nwhile ($expr) {\r\n    // structure body\r\n}\r\n[/php]\r\n\r\n标准的 do while 语句如下所示，同样的，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\ndo {\r\n    // structure body;\r\n} while ($expr);\r\n[/php]\r\n\r\n</div>\r\n<h4>5.4 for</h4>\r\n标准的 for 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\nfor ($i = 0; $i &lt; 10; $i++) {\r\n    // for body\r\n}\r\n[/php]\r\n\r\n<h4>5.5 foreach</h4>\r\n标准的 foreach 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\nforeach ($iterable as $key =&gt; $value) {\r\n    // foreach body\r\n}\r\n[/php]\r\n\r\n<h4>5.6 try, catch</h4>\r\n标准的 try catch 语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\ntry {\r\n    // try body\r\n} catch (FirstExceptionType $e) {\r\n    // catch body\r\n} catch (OtherExceptionType $e) {\r\n    // catch body\r\n}\r\n[/php]\r\n\r\n<h3>6. 闭包</h3>\r\n闭包声明时，关键词 function 后以及关键词 use 的前后都 必须 要有一个空格。\r\n\r\n开始花括号 必须 写在声明的同一行，结束花括号 必须 紧跟主体结束的下一行。\r\n\r\n参数列表和变量列表的左括号后以及右括号前，一定不可 有空格。\r\n\r\n参数和变量列表中，逗号前 一定不可 有空格，而逗号后 必须 要有空格。\r\n\r\n闭包中有默认值的参数 必须 放到列表的后面。\r\n\r\n</div>\r\n标准的闭包声明语句如下所示，注意其「括号」、「空格」以及「花括号」的位置。\r\n\r\n[php]\r\n&lt;?php\r\n$closureWithArgs = function ($arg1, $arg2) {\r\n    // body\r\n};\r\n\r\n$closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) {\r\n    // body\r\n};\r\n[/php]\r\n\r\n参数列表以及变量列表 可以 分成多行，这样，包括第一个在内的每个参数或变量都 必须 单独成行，而列表的右括号与闭包的开始花括号 必须 放在同一行。\r\n\r\n以下几个例子，包含了参数和变量列表被分成多行的多情况。\r\n\r\n[php]\r\n&lt;?php\r\n$longArgs_noVars = function (\r\n    $longArgument,\r\n    $longerArgument,\r\n    $muchLongerArgument\r\n) {\r\n   // body\r\n};\r\n\r\n$noArgs_longVars = function () use (\r\n    $longVar1,\r\n    $longerVar2,\r\n    $muchLongerVar3\r\n) {\r\n   // body\r\n};\r\n\r\n$longArgs_longVars = function (\r\n    $longArgument,\r\n    $longerArgument,\r\n    $muchLongerArgument\r\n) use (\r\n    $longVar1,\r\n    $longerVar2,\r\n    $muchLongerVar3\r\n) {\r\n   // body\r\n};\r\n\r\n$longArgs_shortVars = function (\r\n    $longArgument,\r\n    $longerArgument,\r\n    $muchLongerArgument\r\n) use ($var1) {\r\n   // body\r\n};\r\n\r\n$shortArgs_longVars = function ($arg) use (\r\n    $longVar1,\r\n    $longerVar2,\r\n    $muchLongerVar3\r\n) {\r\n   // body\r\n};\r\n[/php]\r\n\r\n注意，闭包被直接用作函数或方法调用的参数时，以上规则仍然适用。\r\n\r\n[php]\r\n&lt;?php\r\n$foo-&gt;bar(\r\n    $arg1,\r\n    function ($arg2) use ($var1) {\r\n        // body\r\n    },\r\n    $arg3\r\n);\r\n[/php]\r\n\r\n<h2>三 总结</h2>\r\n以上规范难免有疏忽，其中包括但不仅限于：\r\n<ul>\r\n 	<li>全局变量和常量的定义</li>\r\n 	<li>函数的定义</li>\r\n 	<li>操作符和赋值</li>\r\n 	<li>行内对齐</li>\r\n 	<li>注释和文档描述块</li>\r\n 	<li>类名的前缀及后缀</li>\r\n 	<li>最佳实践</li>\r\n</ul>\r\n本规范之后的修订与扩展将弥补以上不足。\r\n<div></div>\r\n</div>\r\n</div>', '「PSR 规范」PSR-2 编码风格规范', '', 'inherit', 'closed', 'closed', '', '1034-revision-v1', '', '', '2017-06-20 12:56:23', '2017-06-20 04:56:23', '', 1034, 'https://www.gzpblog.com/20170620/1038.html', 0, 'revision', '', 0),
(1039, 1, '2017-06-20 14:20:31', '2017-06-20 06:20:31', '<h2>PHP</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-1 基础编码规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170620/1034.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-2 编码风格规范</a>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20160421/26.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPExcel：PHP导出Excel文件</a>\r\n\r\n&nbsp;\r\n<h2>工具</h2>\r\n<h3>版本控制</h3>\r\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\r\n<h3>代码管理</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\r\n<h3>测试相关</h3>\r\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>\r\n<h3>其它</h3>\r\n<a href=\"https://www.gzpblog.com/20170607/1000.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Gitbook编写书籍文档</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-revision-v1', '', '', '2017-06-20 14:20:31', '2017-06-20 06:20:31', '', 978, 'https://www.gzpblog.com/20170620/1039.html', 0, 'revision', '', 0),
(1041, 1, '2017-06-21 00:55:11', '2017-06-20 16:55:11', '<h2>1. 关于PHPMailer</h2>\r\nPHP用来操作发送邮件的类库。\r\n\r\nGithub地址：<a href=\"https://github.com/PHPMailer/PHPMailer\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/PHPMailer/PHPMailer</a>\r\n<h2>2. 使用</h2>\r\n<h3>2.1下载</h3>\r\n首先下载类库包，直接Github下载或者通过composer都可以\r\n<h3>2.2 使用</h3>\r\n直接引入PHPMailerAutoload.php文件：\r\n\r\n[php]\r\n\r\nrequire \'/path/to/PHPMailerAutoload.php\';\r\n\r\n[/php]\r\n\r\n然后实例化 PHPMailer() 类执行操作即可。\r\n<h3>2.3 使用示例</h3>\r\n官方简单示例:\r\n\r\n[php]\r\n\r\n&lt;?php\r\nrequire \'PHPMailerAutoload.php\';\r\n\r\n$mail = new PHPMailer;\r\n\r\n//$mail-&gt;SMTPDebug = 3;                               // 是否输出debug信息\r\n\r\n$mail-&gt;isSMTP();                                      // 设置mailer为SMTP模式\r\n$mail-&gt;Host = \'smtp1.example.com;smtp2.example.com\';  // SMTP服务器host\r\n$mail-&gt;SMTPAuth = true;                               // 启用SMTP身份验证\r\n$mail-&gt;Username = \'user@example.com\';                 // SMTP用户名\r\n$mail-&gt;Password = \'secret\';                           // SMTP密码\r\n$mail-&gt;SMTPSecure = \'tls\';                            // 是否使用 TLS 证书，支持\'ssl\'\r\n$mail-&gt;Port = 587;                                    // TCP连接端口\r\n\r\n$mail-&gt;setFrom(\'from@example.com\', \'Mailer\');         // 设置发件人地址\r\n$mail-&gt;addAddress(\'joe@example.net\', \'Joe User\');     // 添加收件人地址\r\n$mail-&gt;addAddress(\'ellen@example.com\');               // 添加收件人时名称是可选的\r\n$mail-&gt;addReplyTo(\'info@example.com\', \'Information\'); // 回复地址\r\n$mail-&gt;addCC(\'cc@example.com\');                       // 添加抄送地址\r\n$mail-&gt;addBCC(\'bcc@example.com\');                     // 添加密件抄送地址\r\n\r\n$mail-&gt;addAttachment(\'/var/tmp/file.tar.gz\');         // 添加附件\r\n$mail-&gt;addAttachment(\'/tmp/image.jpg\', \'new.jpg\');    // 添加带有名称的附件\r\n$mail-&gt;isHTML(true);                                  // 发送HTML格式的邮件\r\n\r\n$mail-&gt;Subject = \'Here is the subject\';               // 邮件标题\r\n$mail-&gt;Body    = \'This is the HTML message body &lt;b&gt;in bold!&lt;/b&gt;\'; // 邮件主体内容\r\n$mail-&gt;AltBody = \'This is the body in plain text for non-HTML mail clients\'; //附加信息\r\n\r\n/* 执行发送邮件 */\r\nif(!$mail-&gt;send()) {\r\necho \'Message could not be sent.\';\r\necho \'Mailer Error: \' . $mail-&gt;ErrorInfo;\r\n} else {\r\necho \'Message has been sent\';\r\n}\r\n\r\n[/php]\r\n\r\n<h2>3. 提取文件</h2>\r\n<h3>3.1 提取？</h3>\r\n在有些时候，我们只需要用到一个简单发送邮件功能来实现一些简单的功能，或者测试某些功能，我们可以进行一个瘦身操作；这步看个人其实可以忽略。\r\n<h3>3.2 操作</h3>\r\n我们可以提取出PHPmailer包中的class.phpmailer.php，class.pop3.php，class.smtp.php三个文件备用（实际使用smtp发送只引入了class.smtp）；\r\n\r\n同样直接引入class.phpmailer.php就可以使用发送邮件功能。\r\n<h3>3.3 简单示例</h3>\r\n\r\n[php]\r\n\r\n&lt;?php\r\nrequire  \'/path/to/class.phpmailer.php\';\r\ntry {\r\n$mail = new PHPMailer(true);\r\n$mail-&gt;IsSMTP();\r\n$mail-&gt;CharSet=\'UTF-8\';\r\n$mail-&gt;SMTPAuth = true;\r\n$emailPort = \'\';\r\nif ($emailPort == \'465\'){       // 如果使用ssl则加上\r\n$mail-&gt;SMTPSecure = \'ssl\';\r\n}\r\n$mail-&gt;Port = $emailPort;\r\n$mail-&gt;Host = \'\';               // 邮箱smtp地址\r\n$mail-&gt;Username = \'\';           // 你的邮箱账号\r\n$mail-&gt;Password = \'\';           // 你的邮箱密码\r\n$mail-&gt;From = $mail-&gt;Username;  // 你的邮箱账号(发件人)\r\n$mail-&gt;FromName = \'\';           // 发件人名称\r\n\r\n$mail-&gt;AddAddress(\'\');          // 收件人\r\n$mail-&gt;Subject = $subject;      // 标题\r\n$mail-&gt;Body = $message;         // 邮件内容\r\n$mail-&gt;WordWrap = 80;           // 设置长度\r\n//$mail-&gt;AddAttachment(&quot;f:/test.png&quot;); //可以添加附件\r\n$mail-&gt;IsHTML(true);                   //是否HTML格式\r\n$mail-&gt;Send();                  //执行发送\r\n} catch (phpmailerException $e) {\r\n// echo &quot;邮件发送失败：&quot;.$e-&gt;errorMessage(); //测试的时候可以去掉此行的注释\r\n}\r\n\r\n[/php]\r\n\r\n<h2>4. 提示</h2>\r\nPHPMailer偶尔会爆出安全性漏洞，最好保持PHPmailer时常更新，更新的安全版本状态。\r\n<h2>5. 可能的错误</h2>\r\n<h4>5.1 SMTP ERROR: Cound not connect to SMTP host.</h4>\r\n连接不到SMTP服务器，首先检查SMTP服务器是否可用，比如该邮箱提供商是否支持，如果支持看看smtp是否解析；再检查用来发送邮件的端口是否被占用；以及是否发送方式出错，例如使用了ssl方式却没有配置好环境。\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'PHPMailer：PHP的邮件发送类库', '', 'publish', 'open', 'closed', '', 'phpmailer%ef%bc%9aphp%e7%9a%84%e9%82%ae%e4%bb%b6%e5%8f%91%e9%80%81%e7%b1%bb%e5%ba%93', '', '', '2017-06-21 00:57:47', '2017-06-20 16:57:47', '', 0, 'https://www.gzpblog.com/?p=1041', 0, 'post', '', 0),
(1042, 1, '2017-06-21 00:55:11', '2017-06-20 16:55:11', '<h2>1. 关于PHPMailer</h2>\r\nPHP用来操作发送邮件的类库。\r\n\r\nGithub地址：<a href=\"https://github.com/PHPMailer/PHPMailer\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/PHPMailer/PHPMailer</a>\r\n<h2>2. 使用</h2>\r\n<h3>2.1下载</h3>\r\n首先下载类库包，直接Github下载或者通过composer都可以\r\n<h3>2.2 使用</h3>\r\n直接引入PHPMailerAutoload.php文件：\r\n\r\n[php]\r\n\r\nrequire \'/path/to/PHPMailerAutoload.php\';\r\n\r\n[/php]\r\n\r\n然后实例化 PHPMailer() 类执行操作即可。\r\n<h3>2.3 使用示例</h3>\r\n官方简单示例:\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\nrequire \'PHPMailerAutoload.php\';\r\n\r\n$mail = new PHPMailer;\r\n\r\n//$mail-&gt;SMTPDebug = 3;                               // 是否输出debug信息\r\n\r\n$mail-&gt;isSMTP();                                      // 设置mailer为SMTP模式\r\n$mail-&gt;Host = \'smtp1.example.com;smtp2.example.com\';  // SMTP服务器host\r\n$mail-&gt;SMTPAuth = true;                               // 启用SMTP身份验证\r\n$mail-&gt;Username = \'user@example.com\';                 // SMTP用户名\r\n$mail-&gt;Password = \'secret\';                           // SMTP密码\r\n$mail-&gt;SMTPSecure = \'tls\';                            // 是否使用 TLS 证书，支持\'ssl\'\r\n$mail-&gt;Port = 587;                                    // TCP连接端口\r\n\r\n$mail-&gt;setFrom(\'from@example.com\', \'Mailer\');         // 设置发件人地址\r\n$mail-&gt;addAddress(\'joe@example.net\', \'Joe User\');     // 添加收件人地址\r\n$mail-&gt;addAddress(\'ellen@example.com\');               // 添加收件人时名称是可选的\r\n$mail-&gt;addReplyTo(\'info@example.com\', \'Information\'); // 回复地址\r\n$mail-&gt;addCC(\'cc@example.com\');                       // 添加抄送地址\r\n$mail-&gt;addBCC(\'bcc@example.com\');                     // 添加密件抄送地址\r\n\r\n$mail-&gt;addAttachment(\'/var/tmp/file.tar.gz\');         // 添加附件\r\n$mail-&gt;addAttachment(\'/tmp/image.jpg\', \'new.jpg\');    // 添加带有名称的附件\r\n$mail-&gt;isHTML(true);                                  // 发送HTML格式的邮件\r\n\r\n$mail-&gt;Subject = \'Here is the subject\';               // 邮件标题\r\n$mail-&gt;Body    = \'This is the HTML message body &lt;b&gt;in bold!&lt;/b&gt;\'; // 邮件主体内容\r\n$mail-&gt;AltBody = \'This is the body in plain text for non-HTML mail clients\'; //附加信息\r\n\r\n/* 执行发送邮件 */\r\nif(!$mail-&gt;send()) {\r\necho \'Message could not be sent.\';\r\necho \'Mailer Error: \' . $mail-&gt;ErrorInfo;\r\n} else {\r\necho \'Message has been sent\';\r\n}\r\n\r\n[/php]\r\n\r\n<h3>3. 提取文件</h3>\r\n<h3>3.1 提取？</h3>\r\n在有些时候，我们只需要用到一个简单发送邮件功能来实现一些简单的功能，或者测试某些功能，我们可以进行一个瘦身操作；这步看个人其实可以忽略。\r\n<h3>3.2 操作</h3>\r\n我们可以提取出PHPmailer包中的class.phpmailer.php，class.pop3.php，class.smtp.php三个文件备用（实际使用smtp发送只引入了classs.mtp）；\r\n\r\n同样直接引入class.phpmailer.php就可以使用发送邮件功能。\r\n<h3>3.3 简单示例</h3>\r\n\r\n[php]\r\n\r\n&lt;?php\r\nrequire  \'/path/to/class.phpmailer.php\';\r\ntry {\r\n$mail = new PHPMailer(true);\r\n$mail-&gt;IsSMTP();\r\n$mail-&gt;CharSet=\'UTF-8\';\r\n$mail-&gt;SMTPAuth = true;\r\n$emailPort = \'\';\r\nif ($emailPort == \'465\'){       // 如果使用ssl则加上\r\n$mail-&gt;SMTPSecure = \'ssl\';\r\n}\r\n$mail-&gt;Port = $emailPort;\r\n$mail-&gt;Host = \'\';               // 邮箱smtp地址\r\n$mail-&gt;Username = \'\';           // 你的邮箱账号\r\n$mail-&gt;Password = \'\';           // 你的邮箱密码\r\n$mail-&gt;From = $mail-&gt;Username;  // 你的邮箱账号(发件人)\r\n$mail-&gt;FromName = \'\';           // 发件人名称\r\n\r\n$mail-&gt;AddAddress(\'\');          // 收件人\r\n$mail-&gt;Subject = $subject;      // 标题\r\n$mail-&gt;Body = $message;         // 邮件内容\r\n$mail-&gt;WordWrap = 80;           // 设置长度\r\n//$mail-&gt;AddAttachment(&quot;f:/test.png&quot;); //可以添加附件\r\n$mail-&gt;IsHTML(true);                   //是否HTML格式\r\n$mail-&gt;Send();                  //执行发送\r\n} catch (phpmailerException $e) {\r\n// echo &quot;邮件发送失败：&quot;.$e-&gt;errorMessage(); //测试的时候可以去掉此行的注释\r\n}\r\n\r\n[/php]\r\n\r\n<h2>4. 提示</h2>\r\nPHPMailer偶尔会爆出安全性漏洞，最好保持PHPmailer时常更新，更新的安全版本状态。\r\n<h2>5. 可能的错误</h2>\r\n<h4>5.1 SMTP ERROR: Cound not connect to SMTP host.</h4>\r\n连接不到SMTP服务器，首先检查SMTP服务器是否可用，比如该邮箱提供商是否支持，如果支持看看smtp是否解析；再检查用来发送邮件的端口是否被占用；以及是否发送方式出错，例如使用了ssl方式却没有配置好环境。\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'PHPMailer：PHP的邮件发送类库', '', 'inherit', 'closed', 'closed', '', '1041-revision-v1', '', '', '2017-06-21 00:55:11', '2017-06-20 16:55:11', '', 1041, 'https://www.gzpblog.com/20170621/1042.html', 0, 'revision', '', 0),
(1043, 1, '2017-06-21 00:57:47', '2017-06-20 16:57:47', '<h2>1. 关于PHPMailer</h2>\r\nPHP用来操作发送邮件的类库。\r\n\r\nGithub地址：<a href=\"https://github.com/PHPMailer/PHPMailer\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/PHPMailer/PHPMailer</a>\r\n<h2>2. 使用</h2>\r\n<h3>2.1下载</h3>\r\n首先下载类库包，直接Github下载或者通过composer都可以\r\n<h3>2.2 使用</h3>\r\n直接引入PHPMailerAutoload.php文件：\r\n\r\n[php]\r\n\r\nrequire \'/path/to/PHPMailerAutoload.php\';\r\n\r\n[/php]\r\n\r\n然后实例化 PHPMailer() 类执行操作即可。\r\n<h3>2.3 使用示例</h3>\r\n官方简单示例:\r\n\r\n[php]\r\n\r\n&lt;?php\r\nrequire \'PHPMailerAutoload.php\';\r\n\r\n$mail = new PHPMailer;\r\n\r\n//$mail-&gt;SMTPDebug = 3;                               // 是否输出debug信息\r\n\r\n$mail-&gt;isSMTP();                                      // 设置mailer为SMTP模式\r\n$mail-&gt;Host = \'smtp1.example.com;smtp2.example.com\';  // SMTP服务器host\r\n$mail-&gt;SMTPAuth = true;                               // 启用SMTP身份验证\r\n$mail-&gt;Username = \'user@example.com\';                 // SMTP用户名\r\n$mail-&gt;Password = \'secret\';                           // SMTP密码\r\n$mail-&gt;SMTPSecure = \'tls\';                            // 是否使用 TLS 证书，支持\'ssl\'\r\n$mail-&gt;Port = 587;                                    // TCP连接端口\r\n\r\n$mail-&gt;setFrom(\'from@example.com\', \'Mailer\');         // 设置发件人地址\r\n$mail-&gt;addAddress(\'joe@example.net\', \'Joe User\');     // 添加收件人地址\r\n$mail-&gt;addAddress(\'ellen@example.com\');               // 添加收件人时名称是可选的\r\n$mail-&gt;addReplyTo(\'info@example.com\', \'Information\'); // 回复地址\r\n$mail-&gt;addCC(\'cc@example.com\');                       // 添加抄送地址\r\n$mail-&gt;addBCC(\'bcc@example.com\');                     // 添加密件抄送地址\r\n\r\n$mail-&gt;addAttachment(\'/var/tmp/file.tar.gz\');         // 添加附件\r\n$mail-&gt;addAttachment(\'/tmp/image.jpg\', \'new.jpg\');    // 添加带有名称的附件\r\n$mail-&gt;isHTML(true);                                  // 发送HTML格式的邮件\r\n\r\n$mail-&gt;Subject = \'Here is the subject\';               // 邮件标题\r\n$mail-&gt;Body    = \'This is the HTML message body &lt;b&gt;in bold!&lt;/b&gt;\'; // 邮件主体内容\r\n$mail-&gt;AltBody = \'This is the body in plain text for non-HTML mail clients\'; //附加信息\r\n\r\n/* 执行发送邮件 */\r\nif(!$mail-&gt;send()) {\r\necho \'Message could not be sent.\';\r\necho \'Mailer Error: \' . $mail-&gt;ErrorInfo;\r\n} else {\r\necho \'Message has been sent\';\r\n}\r\n\r\n[/php]\r\n\r\n<h2>3. 提取文件</h2>\r\n<h3>3.1 提取？</h3>\r\n在有些时候，我们只需要用到一个简单发送邮件功能来实现一些简单的功能，或者测试某些功能，我们可以进行一个瘦身操作；这步看个人其实可以忽略。\r\n<h3>3.2 操作</h3>\r\n我们可以提取出PHPmailer包中的class.phpmailer.php，class.pop3.php，class.smtp.php三个文件备用（实际使用smtp发送只引入了class.smtp）；\r\n\r\n同样直接引入class.phpmailer.php就可以使用发送邮件功能。\r\n<h3>3.3 简单示例</h3>\r\n\r\n[php]\r\n\r\n&lt;?php\r\nrequire  \'/path/to/class.phpmailer.php\';\r\ntry {\r\n$mail = new PHPMailer(true);\r\n$mail-&gt;IsSMTP();\r\n$mail-&gt;CharSet=\'UTF-8\';\r\n$mail-&gt;SMTPAuth = true;\r\n$emailPort = \'\';\r\nif ($emailPort == \'465\'){       // 如果使用ssl则加上\r\n$mail-&gt;SMTPSecure = \'ssl\';\r\n}\r\n$mail-&gt;Port = $emailPort;\r\n$mail-&gt;Host = \'\';               // 邮箱smtp地址\r\n$mail-&gt;Username = \'\';           // 你的邮箱账号\r\n$mail-&gt;Password = \'\';           // 你的邮箱密码\r\n$mail-&gt;From = $mail-&gt;Username;  // 你的邮箱账号(发件人)\r\n$mail-&gt;FromName = \'\';           // 发件人名称\r\n\r\n$mail-&gt;AddAddress(\'\');          // 收件人\r\n$mail-&gt;Subject = $subject;      // 标题\r\n$mail-&gt;Body = $message;         // 邮件内容\r\n$mail-&gt;WordWrap = 80;           // 设置长度\r\n//$mail-&gt;AddAttachment(&quot;f:/test.png&quot;); //可以添加附件\r\n$mail-&gt;IsHTML(true);                   //是否HTML格式\r\n$mail-&gt;Send();                  //执行发送\r\n} catch (phpmailerException $e) {\r\n// echo &quot;邮件发送失败：&quot;.$e-&gt;errorMessage(); //测试的时候可以去掉此行的注释\r\n}\r\n\r\n[/php]\r\n\r\n<h2>4. 提示</h2>\r\nPHPMailer偶尔会爆出安全性漏洞，最好保持PHPmailer时常更新，更新的安全版本状态。\r\n<h2>5. 可能的错误</h2>\r\n<h4>5.1 SMTP ERROR: Cound not connect to SMTP host.</h4>\r\n连接不到SMTP服务器，首先检查SMTP服务器是否可用，比如该邮箱提供商是否支持，如果支持看看smtp是否解析；再检查用来发送邮件的端口是否被占用；以及是否发送方式出错，例如使用了ssl方式却没有配置好环境。\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'PHPMailer：PHP的邮件发送类库', '', 'inherit', 'closed', 'closed', '', '1041-revision-v1', '', '', '2017-06-21 00:57:47', '2017-06-20 16:57:47', '', 1041, 'https://www.gzpblog.com/20170621/1043.html', 0, 'revision', '', 0),
(1044, 1, '2017-06-21 00:58:52', '2017-06-20 16:58:52', '<h2>PHP</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-1 基础编码规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170620/1034.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-2 编码风格规范</a>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20160421/26.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPExcel：PHP导出Excel文件</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1041.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPMailer：PHP的邮件发送类库</a>\r\n\r\n&nbsp;\r\n<h2>工具</h2>\r\n<h3>版本控制</h3>\r\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\r\n<h3>代码管理</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\r\n<h3>测试相关</h3>\r\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>\r\n<h3>其它</h3>\r\n<a href=\"https://www.gzpblog.com/20170607/1000.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Gitbook编写书籍文档</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-revision-v1', '', '', '2017-06-21 00:58:52', '2017-06-20 16:58:52', '', 978, 'https://www.gzpblog.com/20170621/1044.html', 0, 'revision', '', 0),
(1045, 1, '2017-06-21 11:36:45', '2017-06-21 03:36:45', '<h2>1. 介绍</h2>\r\nPHP QR Code是一个开源的（LGPL）二维码生成库。\r\n\r\n官网及下载地址：<a href=\"http://phpqrcode.sourceforge.net/\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code</a>\r\n<h2>2. 依赖</h2>\r\n环境需要开启GD2拓展\r\n<h2>3. 使用场景</h2>\r\n将内容生成二维码供扫码使用；例如微信支付，将支付信息生成的URL转为二维码，用户用过微信客户端扫码进行支付。\r\n<h2>4. 使用PHP QR Code</h2>\r\n<h3>4.1 官方示例</h3>\r\n可以创建生成二维码文件，或者直接将图片展示到浏览器上。\r\n\r\n[php]\r\nQRcode::png(\'code data text\', \'filename.png\'); // 创建文件\r\nQRcode::png(\'some othertext 1234\'); // 创建图片直接展示到浏览器上\r\n[/php]\r\n\r\n<h3>4.2 关键方法png()</h3>\r\nphpqrcode.php中的png()方法：\r\n\r\n[php]\r\npublic static function png($text, $outfile=false, $level=QR_ECLEVEL_L, $size=3, $margin=4, $saveandprint=false)\r\n[/php]\r\n\r\n参数：\r\n<ul>\r\n 	<li>param $text 表示生成二位的的信息文本；</li>\r\n 	<li>param $outfile 表示是否输出二维码图片 文件，默认否；</li>\r\n 	<li>param $level 表示容错率，也就是有被覆盖的区域还能识别，默认是QR_ECLEVEL_L；可选参数为 L（QR_ECLEVEL_L，7%），M（QR_ECLEVEL_M，15%），Q（QR_ECLEVEL_Q，25%），H（QR_ECLEVEL_H，30%）；</li>\r\n 	<li>param $size 表示生成图片大小，默认是3；</li>\r\n 	<li>param $margin 表示二维码周围边框空白区域间距值；</li>\r\n 	<li>param $saveandprint 表示是否保存二维码并显示。</li>\r\n</ul>\r\n<h3>4.3 简单使用示例</h3>\r\n\r\n[php]\r\nrequire_once \'phpqrcode/phpqrcode.php\';\r\nQRcode::png(&quot;https://www.gzpblog.com&quot;);\r\n[/php]\r\n\r\n这里就生成了一张内容是\"https://www.gzpblog.com\"的二维码\r\n<h2>5. 可能遇到的问题</h2>\r\n<h4>5.1 生成二维码时失败，显示的是乱码</h4>\r\n生成了这样的东西：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/qrcode_error.png\"><img class=\"alignnone size-full wp-image-1050\" src=\"https://files.gzpblog.com/wp/2017/06/qrcode_error.png\" alt=\"\" width=\"669\" height=\"128\" /></a>\r\n\r\n可能说在后面输出了东西；解决方法：\r\n\r\n[php]\r\nQRcode::png($url);\r\nexit();\r\n[/php]\r\n\r\n&nbsp;', 'PHP QR Code：生成二维码', '', 'publish', 'open', 'closed', '', 'php-qr-code%ef%bc%9a%e7%94%9f%e6%88%90%e4%ba%8c%e7%bb%b4%e7%a0%81', '', '', '2017-06-22 15:01:09', '2017-06-22 07:01:09', '', 0, 'https://www.gzpblog.com/?p=1045', 0, 'post', '', 0),
(1046, 1, '2017-06-21 11:36:45', '2017-06-21 03:36:45', '&nbsp;\r\n<h2>1. 介绍</h2>\r\nPHP QR Code是一个开源的（LGPL）二维码生成库。\r\n\r\n官网及下载地址：<a href=\"http://phpqrcode.sourceforge.net/\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code</a>\r\n<h2>2. 依赖</h2>\r\n环境需要开启GD2拓展\r\n<h3>3. 使用场景</h3>\r\n将内容生成二维码供扫码使用；例如微信支付，将支付信息生成的URL转为二维码，用户用过微信客户端扫码进行支付。\r\n<h2>4. 使用PHP QR Code</h2>\r\n<h3>4.1 官方示例</h3>\r\n可以创建生成二维码文件，或者直接将图片展示到浏览器上。\r\n\r\n[php]\r\nQRcode::png(\'code data text\', \'filename.png\'); // 创建文件\r\nQRcode::png(\'some othertext 1234\'); // 创建图片直接展示到浏览器上\r\n[/php]\r\n\r\n<h3>4.2 关键方法png()</h3>\r\nphpqrcode.php中的png()方法：\r\n\r\n[php]\r\npublic static function png($text, $outfile=false, $level=QR_ECLEVEL_L, $size=3, $margin=4, $saveandprint=false)\r\n[/php]\r\n\r\n参数：\r\n<ul>\r\n 	<li>param $text 表示生成二位的的信息文本；</li>\r\n 	<li>param $outfile 表示是否输出二维码图片 文件，默认否；</li>\r\n 	<li>param $level 表示容错率，也就是有被覆盖的区域还能识别，默认是QR_ECLEVEL_L；可选参数为 L（QR_ECLEVEL_L，7%），M（QR_ECLEVEL_M，15%），Q（QR_ECLEVEL_Q，25%），H（QR_ECLEVEL_H，30%）；</li>\r\n 	<li>param $size 表示生成图片大小，默认是3；</li>\r\n 	<li>param $margin 表示二维码周围边框空白区域间距值；</li>\r\n 	<li>param $saveandprint 表示是否保存二维码并显示。</li>\r\n</ul>\r\n<h3>4.3 简单使用示例</h3>\r\n\r\n[php]\r\nrequire_once \'phpqrcode/phpqrcode.php\';\r\nQRcode::png(&quot;https://www.gzpblog.com&quot;);\r\n[/php]\r\n\r\n这里就生成了一张内容是\"https://www.gzpblog.com\"的二维码', 'PHP QR Code：生成二维码', '', 'inherit', 'closed', 'closed', '', '1045-revision-v1', '', '', '2017-06-21 11:36:45', '2017-06-21 03:36:45', '', 1045, 'https://www.gzpblog.com/20170621/1046.html', 0, 'revision', '', 0),
(1047, 1, '2017-06-21 11:39:55', '2017-06-21 03:39:55', '<h2>1. 介绍</h2>\r\nPHP QR Code是一个开源的（LGPL）二维码生成库。\r\n\r\n官网及下载地址：<a href=\"http://phpqrcode.sourceforge.net/\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code</a>\r\n<h2>2. 依赖</h2>\r\n环境需要开启GD2拓展\r\n<h2>3. 使用场景</h2>\r\n将内容生成二维码供扫码使用；例如微信支付，将支付信息生成的URL转为二维码，用户用过微信客户端扫码进行支付。\r\n<h2>4. 使用PHP QR Code</h2>\r\n<h3>4.1 官方示例</h3>\r\n可以创建生成二维码文件，或者直接将图片展示到浏览器上。\r\n\r\n[php]\r\nQRcode::png(\'code data text\', \'filename.png\'); // 创建文件\r\nQRcode::png(\'some othertext 1234\'); // 创建图片直接展示到浏览器上\r\n[/php]\r\n\r\n<h3>4.2 关键方法png()</h3>\r\nphpqrcode.php中的png()方法：\r\n\r\n[php]\r\npublic static function png($text, $outfile=false, $level=QR_ECLEVEL_L, $size=3, $margin=4, $saveandprint=false)\r\n[/php]\r\n\r\n参数：\r\n<ul>\r\n 	<li>param $text 表示生成二位的的信息文本；</li>\r\n 	<li>param $outfile 表示是否输出二维码图片 文件，默认否；</li>\r\n 	<li>param $level 表示容错率，也就是有被覆盖的区域还能识别，默认是QR_ECLEVEL_L；可选参数为 L（QR_ECLEVEL_L，7%），M（QR_ECLEVEL_M，15%），Q（QR_ECLEVEL_Q，25%），H（QR_ECLEVEL_H，30%）；</li>\r\n 	<li>param $size 表示生成图片大小，默认是3；</li>\r\n 	<li>param $margin 表示二维码周围边框空白区域间距值；</li>\r\n 	<li>param $saveandprint 表示是否保存二维码并显示。</li>\r\n</ul>\r\n<h3>4.3 简单使用示例</h3>\r\n\r\n[php]\r\nrequire_once \'phpqrcode/phpqrcode.php\';\r\nQRcode::png(&quot;https://www.gzpblog.com&quot;);\r\n[/php]\r\n\r\n这里就生成了一张内容是\"https://www.gzpblog.com\"的二维码', 'PHP QR Code：生成二维码', '', 'inherit', 'closed', 'closed', '', '1045-revision-v1', '', '', '2017-06-21 11:39:55', '2017-06-21 03:39:55', '', 1045, 'https://www.gzpblog.com/20170621/1047.html', 0, 'revision', '', 0),
(1048, 1, '2017-06-21 11:41:02', '2017-06-21 03:41:02', '<h2>PHP</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-1 基础编码规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170620/1034.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-2 编码风格规范</a>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20160421/26.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPExcel：PHP导出Excel文件</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1041.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPMailer：PHP的邮件发送类库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1045.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code：生成二维码</a>\r\n\r\n&nbsp;\r\n<h2>工具</h2>\r\n<h3>版本控制</h3>\r\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\r\n<h3>代码管理</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\r\n<h3>测试相关</h3>\r\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>\r\n<h3>其它</h3>\r\n<a href=\"https://www.gzpblog.com/20170607/1000.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Gitbook编写书籍文档</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-revision-v1', '', '', '2017-06-21 11:41:02', '2017-06-21 03:41:02', '', 978, 'https://www.gzpblog.com/20170621/1048.html', 0, 'revision', '', 0),
(1049, 1, '2017-06-22 14:58:48', '2017-06-22 06:58:48', '<h2>1. 介绍</h2>\nPHP QR Code是一个开源的（LGPL）二维码生成库。\n\n官网及下载地址：<a href=\"http://phpqrcode.sourceforge.net/\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code</a>\n<h2>2. 依赖</h2>\n环境需要开启GD2拓展\n<h2>3. 使用场景</h2>\n将内容生成二维码供扫码使用；例如微信支付，将支付信息生成的URL转为二维码，用户用过微信客户端扫码进行支付。\n<h2>4. 使用PHP QR Code</h2>\n<h3>4.1 官方示例</h3>\n可以创建生成二维码文件，或者直接将图片展示到浏览器上。\n\n[php]\nQRcode::png(\'code data text\', \'filename.png\'); // 创建文件\nQRcode::png(\'some othertext 1234\'); // 创建图片直接展示到浏览器上\n[/php]\n\n<h3>4.2 关键方法png()</h3>\nphpqrcode.php中的png()方法：\n\n[php]\npublic static function png($text, $outfile=false, $level=QR_ECLEVEL_L, $size=3, $margin=4, $saveandprint=false)\n[/php]\n\n参数：\n<ul>\n 	<li>param $text 表示生成二位的的信息文本；</li>\n 	<li>param $outfile 表示是否输出二维码图片 文件，默认否；</li>\n 	<li>param $level 表示容错率，也就是有被覆盖的区域还能识别，默认是QR_ECLEVEL_L；可选参数为 L（QR_ECLEVEL_L，7%），M（QR_ECLEVEL_M，15%），Q（QR_ECLEVEL_Q，25%），H（QR_ECLEVEL_H，30%）；</li>\n 	<li>param $size 表示生成图片大小，默认是3；</li>\n 	<li>param $margin 表示二维码周围边框空白区域间距值；</li>\n 	<li>param $saveandprint 表示是否保存二维码并显示。</li>\n</ul>\n<h3>4.3 简单使用示例</h3>\n\n[php]\nrequire_once \'phpqrcode/phpqrcode.php\';\nQRcode::png(&quot;https://www.gzpblog.com&quot;);\n[/php]\n\n这里就生成了一张内容是\"https://www.gzpblog.com\"的二维码\n<h2>5. 可能遇到的问题</h2>\n<h4>5.1 s</h4>\n&nbsp;', 'PHP QR Code：生成二维码', '', 'inherit', 'closed', 'closed', '', '1045-autosave-v1', '', '', '2017-06-22 14:58:48', '2017-06-22 06:58:48', '', 1045, 'https://www.gzpblog.com/20170622/1049.html', 0, 'revision', '', 0),
(1050, 1, '2017-06-22 14:59:36', '2017-06-22 06:59:36', '', 'qrcode_error', '', 'inherit', 'open', 'closed', '', 'qrcode_error', '', '', '2017-06-22 14:59:36', '2017-06-22 06:59:36', '', 1045, 'https://www.gzpblog.com/wp-content/uploads/2017/06/qrcode_error.png', 0, 'attachment', 'image/png', 0),
(1051, 1, '2017-06-22 15:00:40', '2017-06-22 07:00:40', '<h2>1. 介绍</h2>\r\nPHP QR Code是一个开源的（LGPL）二维码生成库。\r\n\r\n官网及下载地址：<a href=\"http://phpqrcode.sourceforge.net/\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code</a>\r\n<h2>2. 依赖</h2>\r\n环境需要开启GD2拓展\r\n<h2>3. 使用场景</h2>\r\n将内容生成二维码供扫码使用；例如微信支付，将支付信息生成的URL转为二维码，用户用过微信客户端扫码进行支付。\r\n<h2>4. 使用PHP QR Code</h2>\r\n<h3>4.1 官方示例</h3>\r\n可以创建生成二维码文件，或者直接将图片展示到浏览器上。\r\n\r\n[php]\r\nQRcode::png(\'code data text\', \'filename.png\'); // 创建文件\r\nQRcode::png(\'some othertext 1234\'); // 创建图片直接展示到浏览器上\r\n[/php]\r\n\r\n<h3>4.2 关键方法png()</h3>\r\nphpqrcode.php中的png()方法：\r\n\r\n[php]\r\npublic static function png($text, $outfile=false, $level=QR_ECLEVEL_L, $size=3, $margin=4, $saveandprint=false)\r\n[/php]\r\n\r\n参数：\r\n<ul>\r\n 	<li>param $text 表示生成二位的的信息文本；</li>\r\n 	<li>param $outfile 表示是否输出二维码图片 文件，默认否；</li>\r\n 	<li>param $level 表示容错率，也就是有被覆盖的区域还能识别，默认是QR_ECLEVEL_L；可选参数为 L（QR_ECLEVEL_L，7%），M（QR_ECLEVEL_M，15%），Q（QR_ECLEVEL_Q，25%），H（QR_ECLEVEL_H，30%）；</li>\r\n 	<li>param $size 表示生成图片大小，默认是3；</li>\r\n 	<li>param $margin 表示二维码周围边框空白区域间距值；</li>\r\n 	<li>param $saveandprint 表示是否保存二维码并显示。</li>\r\n</ul>\r\n<h3>4.3 简单使用示例</h3>\r\n\r\n[php]\r\nrequire_once \'phpqrcode/phpqrcode.php\';\r\nQRcode::png(&quot;https://www.gzpblog.com&quot;);\r\n[/php]\r\n\r\n这里就生成了一张内容是\"https://www.gzpblog.com\"的二维码\r\n<h2>5. 可能遇到的问题</h2>\r\n<h4>5.1 生成二维码时失败，显示的是乱码</h4>\r\n生成了这样的东西：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/qrcode_error.png\"><img class=\"alignnone size-full wp-image-1050\" src=\"https://files.gzpblog.com/wp/2017/06/qrcode_error.png\" alt=\"\" width=\"669\" height=\"128\" /></a>\r\n\r\n可能说在后面输出了东西；解决方法：\r\n\r\n\r\n[php]\r\n&lt;pre&gt;QRcode::png($url);\r\nexit();&lt;/pre&gt;\r\n[/php]\r\n\r\n\r\n&nbsp;', 'PHP QR Code：生成二维码', '', 'inherit', 'closed', 'closed', '', '1045-revision-v1', '', '', '2017-06-22 15:00:40', '2017-06-22 07:00:40', '', 1045, 'https://www.gzpblog.com/20170622/1051.html', 0, 'revision', '', 0),
(1052, 1, '2017-06-22 15:01:09', '2017-06-22 07:01:09', '<h2>1. 介绍</h2>\r\nPHP QR Code是一个开源的（LGPL）二维码生成库。\r\n\r\n官网及下载地址：<a href=\"http://phpqrcode.sourceforge.net/\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code</a>\r\n<h2>2. 依赖</h2>\r\n环境需要开启GD2拓展\r\n<h2>3. 使用场景</h2>\r\n将内容生成二维码供扫码使用；例如微信支付，将支付信息生成的URL转为二维码，用户用过微信客户端扫码进行支付。\r\n<h2>4. 使用PHP QR Code</h2>\r\n<h3>4.1 官方示例</h3>\r\n可以创建生成二维码文件，或者直接将图片展示到浏览器上。\r\n\r\n[php]\r\nQRcode::png(\'code data text\', \'filename.png\'); // 创建文件\r\nQRcode::png(\'some othertext 1234\'); // 创建图片直接展示到浏览器上\r\n[/php]\r\n\r\n<h3>4.2 关键方法png()</h3>\r\nphpqrcode.php中的png()方法：\r\n\r\n[php]\r\npublic static function png($text, $outfile=false, $level=QR_ECLEVEL_L, $size=3, $margin=4, $saveandprint=false)\r\n[/php]\r\n\r\n参数：\r\n<ul>\r\n 	<li>param $text 表示生成二位的的信息文本；</li>\r\n 	<li>param $outfile 表示是否输出二维码图片 文件，默认否；</li>\r\n 	<li>param $level 表示容错率，也就是有被覆盖的区域还能识别，默认是QR_ECLEVEL_L；可选参数为 L（QR_ECLEVEL_L，7%），M（QR_ECLEVEL_M，15%），Q（QR_ECLEVEL_Q，25%），H（QR_ECLEVEL_H，30%）；</li>\r\n 	<li>param $size 表示生成图片大小，默认是3；</li>\r\n 	<li>param $margin 表示二维码周围边框空白区域间距值；</li>\r\n 	<li>param $saveandprint 表示是否保存二维码并显示。</li>\r\n</ul>\r\n<h3>4.3 简单使用示例</h3>\r\n\r\n[php]\r\nrequire_once \'phpqrcode/phpqrcode.php\';\r\nQRcode::png(&quot;https://www.gzpblog.com&quot;);\r\n[/php]\r\n\r\n这里就生成了一张内容是\"https://www.gzpblog.com\"的二维码\r\n<h2>5. 可能遇到的问题</h2>\r\n<h4>5.1 生成二维码时失败，显示的是乱码</h4>\r\n生成了这样的东西：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/qrcode_error.png\"><img class=\"alignnone size-full wp-image-1050\" src=\"https://files.gzpblog.com/wp/2017/06/qrcode_error.png\" alt=\"\" width=\"669\" height=\"128\" /></a>\r\n\r\n可能说在后面输出了东西；解决方法：\r\n\r\n[php]\r\nQRcode::png($url);\r\nexit();\r\n[/php]\r\n\r\n&nbsp;', 'PHP QR Code：生成二维码', '', 'inherit', 'closed', 'closed', '', '1045-revision-v1', '', '', '2017-06-22 15:01:09', '2017-06-22 07:01:09', '', 1045, 'https://www.gzpblog.com/20170622/1052.html', 0, 'revision', '', 0),
(1053, 1, '2017-06-22 18:50:41', '2017-06-22 10:50:41', '<h2>1. QRCode.js</h2>\r\nQRCode.js是一个二维码生成javascript库；支持跨浏览器的HTML5 Canvas和表格标签的DOM操作；并且不依赖其它的库或拓展。\r\n\r\n主页：<a href=\"http://davidshimjs.github.io/qrcodejs/\" target=\"_blank\" rel=\"noopener noreferrer\">QRCode.js</a>\r\n\r\nGithub：<a href=\"https://github.com/davidshimjs/qrcodejs\" target=\"_blank\" rel=\"noopener noreferrer\">davidshimjs/qrcodejs</a>\r\n<h2>2. 用法</h2>\r\n<h3>2.1 基础用法</h3>\r\n\r\n[javascript]\r\n&lt;div id=&quot;qrcode&quot;&gt;&lt;/div&gt;\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\nnew QRCode(document.getElementById(&quot;qrcode&quot;), &quot;https://www.gzpblog.com&quot;);\r\n&lt;/script&gt;\r\n[/javascript]\r\n\r\n<h3>2.2 传参用法</h3>\r\n\r\n[javascript]\r\n&lt;div id=&quot;qrcode&quot;&gt;&lt;/div&gt;\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\nvar qrcode = new QRCode(document.getElementById(&quot;qrcode&quot;), {\r\n    text: &quot;https://www.gzpblog.com&quot;,\r\n    width: 128,\r\n    height: 128,\r\n    colorDark : &quot;#000000&quot;,\r\n    colorLight : &quot;#ffffff&quot;,\r\n    correctLevel : QRCode.CorrectLevel.H\r\n});\r\n&lt;/script&gt;\r\n[/javascript]\r\n\r\n<h3>2.3 调用函数</h3>\r\n\r\n[javascript]\r\nqrcode.clear(); // 清除二维码\r\nqrcode.makeCode(&quot;https://www.gzpblog.com&quot;); // 创建一个新的二维码\r\n[/javascript]\r\n\r\n<h3>3. 适用范围</h3>\r\n之前用<a href=\"https://www.gzpblog.com/20170621/1045.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code</a>来生成二维码，发现通过这个PHP插件来生成，有些小问题；它内部集成得不是很好，不是很适合用来直接展示二维码到浏览器上，样式不好控制（不保存二维码文件的情况下）。\r\n\r\n而使用QRCode.js可以非常方面地控制样式，就像一张图片一样来用，因为图片直接输出到\r\n\r\n[code]&lt;div id=&quot;qrcode&quot;&gt;&lt;/div&gt;[/code]\r\n\r\n中，非常可控。就像之前微信支付官方的sdk，phpsdk是用的phpqrcode来生成，改成QRCode.js，之后，一个简单的效果：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/wechat_qrcode.png\"><img class=\"wp-image-1054 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/wechat_qrcode.png\" alt=\"\" width=\"301\" height=\"334\" /></a>\r\n\r\n&nbsp;', 'QRCode.js：基于JQuery的生成二维码JS库', '', 'publish', 'open', 'closed', '', 'qrcode-js%ef%bc%9a%e5%9f%ba%e4%ba%8ejquery%e7%9a%84%e7%94%9f%e6%88%90%e4%ba%8c%e7%bb%b4%e7%a0%81js%e5%ba%93', '', '', '2017-06-22 19:04:19', '2017-06-22 11:04:19', '', 0, 'https://www.gzpblog.com/?p=1053', 0, 'post', '', 0),
(1054, 1, '2017-06-22 18:46:58', '2017-06-22 10:46:58', '', 'wechat_qrcode', '', 'inherit', 'open', 'closed', '', 'wechat_qrcode', '', '', '2017-06-22 18:46:58', '2017-06-22 10:46:58', '', 1053, 'https://www.gzpblog.com/wp-content/uploads/2017/06/wechat_qrcode.png', 0, 'attachment', 'image/png', 0),
(1055, 1, '2017-06-22 18:50:41', '2017-06-22 10:50:41', '&nbsp;\r\n<h2>1. QRCode.js</h2>\r\nQRCode.js是一个二维码生成javascript库；支持跨浏览器的HTML5 Canvas和表格标签的DOM操作；并且不依赖其它的库或拓展。\r\n\r\n主页：<a href=\"http://davidshimjs.github.io/qrcodejs/\" target=\"_blank\" rel=\"noopener noreferrer\">QRCode.js</a>\r\n\r\nGithub：<a href=\"https://github.com/davidshimjs/qrcodejs\" target=\"_blank\" rel=\"noopener noreferrer\">davidshimjs/qrcodejs</a>\r\n<h2>2. 用法</h2>\r\n<h3>2.1 基础用法</h3>\r\n\r\n[javascript]\r\n&lt;div id=&quot;qrcode&quot;&gt;&lt;/div&gt;\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\nnew QRCode(document.getElementById(&quot;qrcode&quot;), &quot;http://jindo.dev.naver.com/collie&quot;);\r\n&lt;/script&gt;\r\n[/javascript]\r\n\r\n<h3>2.2 传参用法</h3>\r\n\r\n[javascript]\r\n&lt;div id=&quot;qrcode&quot;&gt;&lt;/div&gt;\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\nvar qrcode = new QRCode(document.getElementById(&quot;qrcode&quot;), {\r\n    text: &quot;http://jindo.dev.naver.com/collie&quot;,\r\n    width: 128,\r\n    height: 128,\r\n    colorDark : &quot;#000000&quot;,\r\n    colorLight : &quot;#ffffff&quot;,\r\n    correctLevel : QRCode.CorrectLevel.H\r\n});\r\n&lt;/script&gt;\r\n[/javascript]\r\n\r\n<h3>2.3 调用函数</h3>\r\n\r\n[javascript]\r\nqrcode.clear(); // 清除二维码\r\nqrcode.makeCode(&quot;https://www.gzpblog.com&quot;); // 创建一个新的二维码\r\n[/javascript]\r\n\r\n<h3>3. 适用范围</h3>\r\n之前用<a href=\"https://www.gzpblog.com/20170621/1045.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code</a>来生成二维码，发现通过这个PHP插件来生成，有些小问题；它内部集成得不是很好，不是很适合用来直接展示二维码到浏览器上，样式不好控制（不保存二维码文件的情况下）。\r\n\r\n而使用QRCode.js可以非常方面地控制样式，就像一张图片一样来用，因为图片直接输出到\r\n[code]&lt;div id=&quot;qrcode&quot;&gt;&lt;/div&gt;[/code]\r\n中，非常可控。就像之前微信支付官方的sdk，phpsdk是用的phpqrcode来生成，改成QRCode.js，之后，一个简单的效果：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/wechat_qrcode.png\"><img class=\"wp-image-1054 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/wechat_qrcode.png\" alt=\"\" width=\"301\" height=\"334\" /></a>\r\n\r\n&nbsp;', 'QRCode.js：基于JQuery的生成二维码JS库', '', 'inherit', 'closed', 'closed', '', '1053-revision-v1', '', '', '2017-06-22 18:50:41', '2017-06-22 10:50:41', '', 1053, 'https://www.gzpblog.com/20170622/1055.html', 0, 'revision', '', 0),
(1056, 1, '2017-06-22 19:03:43', '2017-06-22 11:03:43', '&nbsp;\r\n<h2>1. QRCode.js</h2>\r\nQRCode.js是一个二维码生成javascript库；支持跨浏览器的HTML5 Canvas和表格标签的DOM操作；并且不依赖其它的库或拓展。\r\n\r\n主页：<a href=\"http://davidshimjs.github.io/qrcodejs/\" target=\"_blank\" rel=\"noopener noreferrer\">QRCode.js</a>\r\n\r\nGithub：<a href=\"https://github.com/davidshimjs/qrcodejs\" target=\"_blank\" rel=\"noopener noreferrer\">davidshimjs/qrcodejs</a>\r\n<h2>2. 用法</h2>\r\n<h3>2.1 基础用法</h3>\r\n\r\n[javascript]\r\n&lt;div id=&quot;qrcode&quot;&gt;&lt;/div&gt;\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\nnew QRCode(document.getElementById(&quot;qrcode&quot;), &quot;https://www.gzpblog.com&quot;);\r\n&lt;/script&gt;\r\n[/javascript]\r\n\r\n<h3>2.2 传参用法</h3>\r\n\r\n[javascript]\r\n&lt;div id=&quot;qrcode&quot;&gt;&lt;/div&gt;\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\nvar qrcode = new QRCode(document.getElementById(&quot;qrcode&quot;), {\r\n    text: &quot;https://www.gzpblog.com&quot;,\r\n    width: 128,\r\n    height: 128,\r\n    colorDark : &quot;#000000&quot;,\r\n    colorLight : &quot;#ffffff&quot;,\r\n    correctLevel : QRCode.CorrectLevel.H\r\n});\r\n&lt;/script&gt;\r\n[/javascript]\r\n\r\n<h3>2.3 调用函数</h3>\r\n\r\n[javascript]\r\nqrcode.clear(); // 清除二维码\r\nqrcode.makeCode(&quot;https://www.gzpblog.com&quot;); // 创建一个新的二维码\r\n[/javascript]\r\n\r\n<h3>3. 适用范围</h3>\r\n之前用<a href=\"https://www.gzpblog.com/20170621/1045.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code</a>来生成二维码，发现通过这个PHP插件来生成，有些小问题；它内部集成得不是很好，不是很适合用来直接展示二维码到浏览器上，样式不好控制（不保存二维码文件的情况下）。\r\n\r\n而使用QRCode.js可以非常方面地控制样式，就像一张图片一样来用，因为图片直接输出到\r\n\r\n[code]&lt;div id=&quot;qrcode&quot;&gt;&lt;/div&gt;[/code]\r\n\r\n中，非常可控。就像之前微信支付官方的sdk，phpsdk是用的phpqrcode来生成，改成QRCode.js，之后，一个简单的效果：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/wechat_qrcode.png\"><img class=\"wp-image-1054 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/wechat_qrcode.png\" alt=\"\" width=\"301\" height=\"334\" /></a>\r\n\r\n&nbsp;', 'QRCode.js：基于JQuery的生成二维码JS库', '', 'inherit', 'closed', 'closed', '', '1053-revision-v1', '', '', '2017-06-22 19:03:43', '2017-06-22 11:03:43', '', 1053, 'https://www.gzpblog.com/20170622/1056.html', 0, 'revision', '', 0),
(1057, 1, '2017-06-22 19:04:19', '2017-06-22 11:04:19', '<h2>1. QRCode.js</h2>\r\nQRCode.js是一个二维码生成javascript库；支持跨浏览器的HTML5 Canvas和表格标签的DOM操作；并且不依赖其它的库或拓展。\r\n\r\n主页：<a href=\"http://davidshimjs.github.io/qrcodejs/\" target=\"_blank\" rel=\"noopener noreferrer\">QRCode.js</a>\r\n\r\nGithub：<a href=\"https://github.com/davidshimjs/qrcodejs\" target=\"_blank\" rel=\"noopener noreferrer\">davidshimjs/qrcodejs</a>\r\n<h2>2. 用法</h2>\r\n<h3>2.1 基础用法</h3>\r\n\r\n[javascript]\r\n&lt;div id=&quot;qrcode&quot;&gt;&lt;/div&gt;\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\nnew QRCode(document.getElementById(&quot;qrcode&quot;), &quot;https://www.gzpblog.com&quot;);\r\n&lt;/script&gt;\r\n[/javascript]\r\n\r\n<h3>2.2 传参用法</h3>\r\n\r\n[javascript]\r\n&lt;div id=&quot;qrcode&quot;&gt;&lt;/div&gt;\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\nvar qrcode = new QRCode(document.getElementById(&quot;qrcode&quot;), {\r\n    text: &quot;https://www.gzpblog.com&quot;,\r\n    width: 128,\r\n    height: 128,\r\n    colorDark : &quot;#000000&quot;,\r\n    colorLight : &quot;#ffffff&quot;,\r\n    correctLevel : QRCode.CorrectLevel.H\r\n});\r\n&lt;/script&gt;\r\n[/javascript]\r\n\r\n<h3>2.3 调用函数</h3>\r\n\r\n[javascript]\r\nqrcode.clear(); // 清除二维码\r\nqrcode.makeCode(&quot;https://www.gzpblog.com&quot;); // 创建一个新的二维码\r\n[/javascript]\r\n\r\n<h3>3. 适用范围</h3>\r\n之前用<a href=\"https://www.gzpblog.com/20170621/1045.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code</a>来生成二维码，发现通过这个PHP插件来生成，有些小问题；它内部集成得不是很好，不是很适合用来直接展示二维码到浏览器上，样式不好控制（不保存二维码文件的情况下）。\r\n\r\n而使用QRCode.js可以非常方面地控制样式，就像一张图片一样来用，因为图片直接输出到\r\n\r\n[code]&lt;div id=&quot;qrcode&quot;&gt;&lt;/div&gt;[/code]\r\n\r\n中，非常可控。就像之前微信支付官方的sdk，phpsdk是用的phpqrcode来生成，改成QRCode.js，之后，一个简单的效果：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/wechat_qrcode.png\"><img class=\"wp-image-1054 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/wechat_qrcode.png\" alt=\"\" width=\"301\" height=\"334\" /></a>\r\n\r\n&nbsp;', 'QRCode.js：基于JQuery的生成二维码JS库', '', 'inherit', 'closed', 'closed', '', '1053-revision-v1', '', '', '2017-06-22 19:04:19', '2017-06-22 11:04:19', '', 1053, 'https://www.gzpblog.com/20170622/1057.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1058, 1, '2017-06-22 19:07:54', '2017-06-22 11:07:54', '<h2>PHP</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-1 基础编码规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170620/1034.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-2 编码风格规范</a>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20160421/26.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPExcel：PHP导出Excel文件</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1041.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPMailer：PHP的邮件发送类库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1045.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code：生成二维码</a>\r\n\r\n&nbsp;\r\n<h2>Javascript</h2>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20170622/1053.html\" target=\"_blank\" rel=\"noopener noreferrer\">QRCode.js：基于JQuery的生成二维码JS库</a>\r\n\r\n&nbsp;\r\n<h2>工具</h2>\r\n<h3>版本控制</h3>\r\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\r\n<h3>代码管理</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\r\n<h3>测试相关</h3>\r\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>\r\n<h3>其它</h3>\r\n<a href=\"https://www.gzpblog.com/20170607/1000.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Gitbook编写书籍文档</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-revision-v1', '', '', '2017-06-22 19:07:54', '2017-06-22 11:07:54', '', 978, 'https://www.gzpblog.com/20170622/1058.html', 0, 'revision', '', 0),
(1059, 1, '2017-06-23 11:46:21', '2017-06-23 03:46:21', '<h2>1. Pace.js</h2>\r\npace是一个页面自动加载进度的js插件，而且使用特别方便。\r\n\r\n主页地址：<a href=\"http://github.hubspot.com/pace/\" target=\"_blank\" rel=\"noopener noreferrer\">PACE</a>\r\n\r\nGithub地址：<a href=\"https://github.com/HubSpot/PACE/\" target=\"_blank\" rel=\"noopener noreferrer\">PACE</a>\r\n\r\n官方也提供了很多加载样式，都很不错，例如：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/pace1.png\"><img class=\"wp-image-1060 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/pace1.png\" alt=\"\" width=\"666\" height=\"597\" /></a>\r\n\r\n更多主题可以在这里看：<a href=\"http://github.hubspot.com/pace/docs/welcome/\" target=\"_blank\" rel=\"noopener noreferrer\">pace/docs</a>\r\n\r\n并且提供wordpress插件：<a href=\"https://wordpress.org/plugins/search/pace/\" target=\"_blank\" rel=\"noopener noreferrer\">PACE Wordpress插件</a>\r\n<h2>2. 使用</h2>\r\n<h3>2.1 基本用法</h3>\r\n只需要引入一个pace.js文件和一个主题文件，就自动集成了该功能，在加载页面时会有主题对应的效果。\r\n\r\n\r\n[html]\r\n\r\n&lt;head&gt;\r\n&lt;script src=&quot;/pace/pace.js&quot;&gt;&lt;/script&gt;\r\n&lt;link href=&quot;/pace/themes/pace-theme-barber-shop.css&quot; rel=&quot;stylesheet&quot; /&gt;\r\n&lt;/head&gt;\r\n\r\n[/html]\r\n\r\n<h3>2.2 配置</h3>\r\n<h4>设置window.paceOptions ：</h4>\r\n\r\n[javascript]\r\n\r\npaceOptions = {\r\n// Disable the \'elements\' source\r\nelements: false,\r\n\r\n// Only show the progress on regular and ajax-y page navigation,\r\n// not every request\r\nrestartOnRequestAfter: false\r\n}\r\n\r\n[/javascript]\r\n\r\n<h4>script标签中配置参数:</h4>\r\n\r\n[javascript]\r\n\r\n&lt;script data-pace-options=\'{ &quot;ajax&quot;: false }\' src=\'pace.js\'&gt;&lt;/script&gt;\r\n&lt;pre&gt;[/javascript]\r\n\r\n详细的配置可以查看具体的主页文档。</pre>', 'PACE：页面自动加载进度插件', '', 'publish', 'open', 'closed', '', 'pace%ef%bc%9a%e9%a1%b5%e9%9d%a2%e8%87%aa%e5%8a%a8%e5%8a%a0%e8%bd%bd%e8%bf%9b%e5%ba%a6%e6%8f%92%e4%bb%b6', '', '', '2017-06-23 11:46:21', '2017-06-23 03:46:21', '', 0, 'https://www.gzpblog.com/?p=1059', 0, 'post', '', 0),
(1060, 1, '2017-06-23 11:32:33', '2017-06-23 03:32:33', '', 'pace1', '', 'inherit', 'open', 'closed', '', 'pace1', '', '', '2017-06-23 11:32:33', '2017-06-23 03:32:33', '', 1059, 'https://www.gzpblog.com/wp-content/uploads/2017/06/pace1.png', 0, 'attachment', 'image/png', 0),
(1061, 1, '2017-06-23 11:46:21', '2017-06-23 03:46:21', '<h2>1. Pace.js</h2>\r\npace是一个页面自动加载进度的js插件，而且使用特别方便。\r\n\r\n主页地址：<a href=\"http://github.hubspot.com/pace/\" target=\"_blank\" rel=\"noopener noreferrer\">PACE</a>\r\n\r\nGithub地址：<a href=\"https://github.com/HubSpot/PACE/\" target=\"_blank\" rel=\"noopener noreferrer\">PACE</a>\r\n\r\n官方也提供了很多加载样式，都很不错，例如：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/pace1.png\"><img class=\"wp-image-1060 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/pace1.png\" alt=\"\" width=\"666\" height=\"597\" /></a>\r\n\r\n更多主题可以在这里看：<a href=\"http://github.hubspot.com/pace/docs/welcome/\" target=\"_blank\" rel=\"noopener noreferrer\">pace/docs</a>\r\n\r\n并且提供wordpress插件：<a href=\"https://wordpress.org/plugins/search/pace/\" target=\"_blank\" rel=\"noopener noreferrer\">PACE Wordpress插件</a>\r\n<h2>2. 使用</h2>\r\n<h3>2.1 基本用法</h3>\r\n只需要引入一个pace.js文件和一个主题文件，就自动集成了该功能，在加载页面时会有主题对应的效果。\r\n\r\n\r\n[html]\r\n\r\n&lt;head&gt;\r\n&lt;script src=&quot;/pace/pace.js&quot;&gt;&lt;/script&gt;\r\n&lt;link href=&quot;/pace/themes/pace-theme-barber-shop.css&quot; rel=&quot;stylesheet&quot; /&gt;\r\n&lt;/head&gt;\r\n\r\n[/html]\r\n\r\n<h3>2.2 配置</h3>\r\n<h4>设置window.paceOptions ：</h4>\r\n\r\n[javascript]\r\n\r\npaceOptions = {\r\n// Disable the \'elements\' source\r\nelements: false,\r\n\r\n// Only show the progress on regular and ajax-y page navigation,\r\n// not every request\r\nrestartOnRequestAfter: false\r\n}\r\n\r\n[/javascript]\r\n\r\n<h4>script标签中配置参数:</h4>\r\n\r\n[javascript]\r\n\r\n&lt;script data-pace-options=\'{ &quot;ajax&quot;: false }\' src=\'pace.js\'&gt;&lt;/script&gt;\r\n&lt;pre&gt;[/javascript]\r\n\r\n详细的配置可以查看具体的主页文档。</pre>', 'PACE：页面自动加载进度插件', '', 'inherit', 'closed', 'closed', '', '1059-revision-v1', '', '', '2017-06-23 11:46:21', '2017-06-23 03:46:21', '', 1059, 'https://www.gzpblog.com/20170623/1061.html', 0, 'revision', '', 0),
(1062, 1, '2017-06-23 16:12:05', '2017-06-23 08:12:05', '<h2>1. 什么是WebSocket？</h2>\r\nWebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。\r\n\r\n可以用来替代长轮询（long polling）；long polling 就是客户端不停地向服务器发送请求以获取最新的数据信息，比如说用ajax轮询就是一种方式。\r\n\r\n应用场景：一些高实时的应用场景，比如社交聊天、弹幕、多玩家游戏、协同编辑、股票基金实时报价、体育实况更新、视频会议/聊天、基于位置的应用、在线教育、智能家居等等。\r\n<h2>2. WebSocket客户端实现</h2>\r\n<h3>2.1 创建一个 WebSocket 对象</h3>\r\nvar Socket = new WebSocket(url, [protocol] );\r\n\r\n第一个参数 url, 指定连接的 URL。WebSocket协议的URL使用ws://开头，SSL的WebSocket协议使用wss://开头。\r\n\r\n第二个参数 protocol 是可选的，指定了可接受的子协议。\r\n<h3>2.2 WebSocket 属性</h3>\r\n<h4>Socket.readyState</h4>\r\n只读属性 readyState 表示连接状态，状态值：\r\n<ul>\r\n 	<li>0 - 表示连接尚未建立。</li>\r\n 	<li>1 - 表示连接已建立，可以进行通信。</li>\r\n 	<li>2 - 表示连接正在进行关闭。</li>\r\n 	<li>3 - 表示连接已经关闭或者连接不能打开。</li>\r\n</ul>\r\n<h4>Socket.bufferedAmount</h4>\r\n只读属性 bufferedAmount 表示已被 send() 放入正在队列中等待传输，但是还没有发出的 UTF-8 文本字节数。\r\n<h3>2.3 WebSocket 事件</h3>\r\nWebSocket 对象目前一共有四个：onopen, onmessage, onclose 和 onerror。\r\n<ul>\r\n 	<li>Socket.onopen 连接建立时触发</li>\r\n 	<li>Socket.onmessage 客户端接收服务端数据时触发</li>\r\n 	<li>Socket.onerror 通信发生错误时触发</li>\r\n 	<li>Socket.onclose 连接关闭时触发</li>\r\n</ul>\r\n<h3>2.4 WebSocket 方法</h3>\r\nSocket.send() 使用连接发送数据\r\n\r\nSocket.close() 关闭连接\r\n<h3>2.5. 一个简单的例子</h3>\r\n\r\n[javascript]\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n    //检查浏览器是否支持WebSocket\r\n    if(window.WebSocket){            \r\n        console.log(\'This browser supports WebSocket\');\r\n    }else{\r\n        console.log(\'This browser does not supports WebSocket\');\r\n    }\r\n\r\n    // 打开一个 web socket\r\n    var ws = new WebSocket(&quot;ws://localhost:1234&quot;);\r\n                \r\n    /**\r\n     * 连接建立时\r\n     */    \r\n    ws.onopen = function()\r\n    {\r\n         // 使用 send() 方法发送数据\r\n         ws.send(&quot;hello&quot;);\r\n    };\r\n\r\n    /**\r\n     * 接收服务端数据时\r\n     */    \r\n    ws.onmessage = function (evt) \r\n    {\r\n        var received_data = evt.data;\r\n        console.log(received_data);\r\n    };\r\n            \r\n    /**\r\n     * 连接关闭时\r\n     */\r\n    ws.onclose = function(){                 \r\n        alert(&quot;连接已关闭...&quot;); \r\n    };\r\n\r\n    /**\r\n     * 通信发生错误时\r\n     */\r\n    ws.onerror = function(){ \r\n        // 关闭 websocket \r\n        ws.close(); \r\n    };  \r\n&lt;/script&gt;\r\n[/javascript]\r\n\r\n<h2>3. WebSocket 服务端实现</h2>\r\n服务端实现 WebSocket，现在各种语言都很方便了。\r\n\r\n比如PHP，我们可以使用Swoole，workerman，ReactPHP等。', 'WebSocket实现', '', 'publish', 'open', 'closed', '', 'web-socket%e5%ae%9e%e7%8e%b0', '', '', '2017-06-23 16:17:43', '2017-06-23 08:17:43', '', 0, 'https://www.gzpblog.com/?p=1062', 0, 'post', '', 0),
(1063, 1, '2017-06-23 16:12:05', '2017-06-23 08:12:05', '<h2>1. 什么是Web Socket？</h2>\r\nWebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。\r\n\r\n可以用来替代长轮询（long polling）；long polling 就是客户端不停地向服务器发送请求以获取最新的数据信息，比如说用ajax轮询就是一种方式。\r\n\r\n应用场景：一些高实时的应用场景，比如社交聊天、弹幕、多玩家游戏、协同编辑、股票基金实时报价、体育实况更新、视频会议/聊天、基于位置的应用、在线教育、智能家居等等。\r\n<h2>2. Web Socket客户端实现</h2>\r\n<h3>2.1 创建一个 WebSocket 对象</h3>\r\nvar Socket = new WebSocket(url, [protocol] );\r\n\r\n第一个参数 url, 指定连接的 URL。WebSocket协议的URL使用ws://开头，SSL的WebSocket协议使用wss://开头。\r\n\r\n第二个参数 protocol 是可选的，指定了可接受的子协议。\r\n<h3>2.2 WebSocket 属性</h3>\r\n<h4>Socket.readyState</h4>\r\n只读属性 readyState 表示连接状态，状态值：\r\n<ul>\r\n 	<li>0 - 表示连接尚未建立。</li>\r\n 	<li>1 - 表示连接已建立，可以进行通信。</li>\r\n 	<li>2 - 表示连接正在进行关闭。</li>\r\n 	<li>3 - 表示连接已经关闭或者连接不能打开。</li>\r\n</ul>\r\n<h4>Socket.bufferedAmount</h4>\r\n只读属性 bufferedAmount 表示已被 send() 放入正在队列中等待传输，但是还没有发出的 UTF-8 文本字节数。\r\n<h3>2.3 WebSocket 事件</h3>\r\nWebSocket 对象目前一共有四个：onopen, onmessage, onclose 和 onerror。\r\n<ul>\r\n 	<li>Socket.onopen 连接建立时触发</li>\r\n 	<li>Socket.onmessage 客户端接收服务端数据时触发</li>\r\n 	<li>Socket.onerror 通信发生错误时触发</li>\r\n 	<li>Socket.onclose 连接关闭时触发</li>\r\n</ul>\r\n<h3>2.4 WebSocket 方法</h3>\r\nSocket.send() 使用连接发送数据\r\n\r\nSocket.close() 关闭连接\r\n<h3>2.5. 一个简单的例子</h3>\r\n\r\n[javascript]\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n    //检查浏览器是否支持WebSocket\r\n    if(window.WebSocket){            \r\n        console.log(\'This browser supports WebSocket\');\r\n    }else{\r\n        console.log(\'This browser does not supports WebSocket\');\r\n    }\r\n\r\n    // 打开一个 web socket\r\n    var ws = new WebSocket(&quot;ws://localhost:1234&quot;);\r\n                \r\n    /**\r\n     * 连接建立时\r\n     */    \r\n    ws.onopen = function()\r\n    {\r\n         // 使用 send() 方法发送数据\r\n         ws.send(&quot;hello&quot;);\r\n    };\r\n\r\n    /**\r\n     * 接收服务端数据时\r\n     */    \r\n    ws.onmessage = function (evt) \r\n    {\r\n        var received_data = evt.data;\r\n        console.log(received_data);\r\n    };\r\n            \r\n    /**\r\n     * 连接关闭时\r\n     */\r\n    ws.onclose = function(){                 \r\n        alert(&quot;连接已关闭...&quot;); \r\n    };\r\n\r\n    /**\r\n     * 通信发生错误时\r\n     */\r\n    ws.onerror = function(){ \r\n        // 关闭 websocket \r\n        ws.close(); \r\n    };  \r\n&lt;/script&gt;\r\n[/javascript]\r\n\r\n<h2>3. Web Socket 服务端实现</h2>\r\n服务端实现 WebSocket，现在各种语言都很方便了。\r\n\r\n比如PHP，我们可以使用Swoole，workerman，ReactPHP等。', 'Web Socket实现', '', 'inherit', 'closed', 'closed', '', '1062-revision-v1', '', '', '2017-06-23 16:12:05', '2017-06-23 08:12:05', '', 1062, 'https://www.gzpblog.com/20170623/1063.html', 0, 'revision', '', 0),
(1064, 1, '2017-06-23 16:15:27', '2017-06-23 08:15:27', '<h2>1. 什么是WebSocket？</h2>\nWebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。\n\n可以用来替代长轮询（long polling）；long polling 就是客户端不停地向服务器发送请求以获取最新的数据信息，比如说用ajax轮询就是一种方式。\n\n应用场景：一些高实时的应用场景，比如社交聊天、弹幕、多玩家游戏、协同编辑、股票基金实时报价、体育实况更新、视频会议/聊天、基于位置的应用、在线教育、智能家居等等。\n<h2>2. WebSocket客户端实现</h2>\n<h3>2.1 创建一个 WebSocket 对象</h3>\nvar Socket = new WebSocket(url, [protocol] );\n\n第一个参数 url, 指定连接的 URL。WebSocket协议的URL使用ws://开头，SSL的WebSocket协议使用wss://开头。\n\n第二个参数 protocol 是可选的，指定了可接受的子协议。\n<h3>2.2 WebSocket 属性</h3>\n<h4>Socket.readyState</h4>\n只读属性 readyState 表示连接状态，状态值：\n<ul>\n 	<li>0 - 表示连接尚未建立。</li>\n 	<li>1 - 表示连接已建立，可以进行通信。</li>\n 	<li>2 - 表示连接正在进行关闭。</li>\n 	<li>3 - 表示连接已经关闭或者连接不能打开。</li>\n</ul>\n<h4>Socket.bufferedAmount</h4>\n只读属性 bufferedAmount 表示已被 send() 放入正在队列中等待传输，但是还没有发出的 UTF-8 文本字节数。\n<h3>2.3 WebSocket 事件</h3>\nWebSocket 对象目前一共有四个：onopen, onmessage, onclose 和 onerror。\n<ul>\n 	<li>Socket.onopen 连接建立时触发</li>\n 	<li>Socket.onmessage 客户端接收服务端数据时触发</li>\n 	<li>Socket.onerror 通信发生错误时触发</li>\n 	<li>Socket.onclose 连接关闭时触发</li>\n</ul>\n<h3>2.4 WebSocket 方法</h3>\nSocket.send() 使用连接发送数据\n\nSocket.close() 关闭连接\n<h3>2.5. 一个简单的例子</h3>\n\n[javascript]\n&lt;script type=&quot;text/javascript&quot;&gt;\n    //检查浏览器是否支持WebSocket\n    if(window.WebSocket){            \n        console.log(\'This browser supports WebSocket\');\n    }else{\n        console.log(\'This browser does not supports WebSocket\');\n    }\n\n    // 打开一个 web socket\n    var ws = new WebSocket(&quot;ws://localhost:1234&quot;);\n                \n    /**\n     * 连接建立时\n     */    \n    ws.onopen = function()\n    {\n         // 使用 send() 方法发送数据\n         ws.send(&quot;hello&quot;);\n    };\n\n    /**\n     * 接收服务端数据时\n     */    \n    ws.onmessage = function (evt) \n    {\n        var received_data = evt.data;\n        console.log(received_data);\n    };\n            \n    /**\n     * 连接关闭时\n     */\n    ws.onclose = function(){                 \n        alert(&quot;连接已关闭...&quot;); \n    };\n\n    /**\n     * 通信发生错误时\n     */\n    ws.onerror = function(){ \n        // 关闭 websocket \n        ws.close(); \n    };  \n&lt;/script&gt;\n[/javascript]\n\n<h2>3. WebSocket 服务端实现</h2>\n服务端实现 WebSocket，现在各种语言都很方便了。\n\n比如PHP，我们可以使用Swoole，workerman，ReactPHP等。', 'WebSocket实现', '', 'inherit', 'closed', 'closed', '', '1062-autosave-v1', '', '', '2017-06-23 16:15:27', '2017-06-23 08:15:27', '', 1062, 'https://www.gzpblog.com/20170623/1064.html', 0, 'revision', '', 0),
(1065, 1, '2017-06-23 16:17:43', '2017-06-23 08:17:43', '<h2>1. 什么是WebSocket？</h2>\r\nWebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。\r\n\r\n可以用来替代长轮询（long polling）；long polling 就是客户端不停地向服务器发送请求以获取最新的数据信息，比如说用ajax轮询就是一种方式。\r\n\r\n应用场景：一些高实时的应用场景，比如社交聊天、弹幕、多玩家游戏、协同编辑、股票基金实时报价、体育实况更新、视频会议/聊天、基于位置的应用、在线教育、智能家居等等。\r\n<h2>2. WebSocket客户端实现</h2>\r\n<h3>2.1 创建一个 WebSocket 对象</h3>\r\nvar Socket = new WebSocket(url, [protocol] );\r\n\r\n第一个参数 url, 指定连接的 URL。WebSocket协议的URL使用ws://开头，SSL的WebSocket协议使用wss://开头。\r\n\r\n第二个参数 protocol 是可选的，指定了可接受的子协议。\r\n<h3>2.2 WebSocket 属性</h3>\r\n<h4>Socket.readyState</h4>\r\n只读属性 readyState 表示连接状态，状态值：\r\n<ul>\r\n 	<li>0 - 表示连接尚未建立。</li>\r\n 	<li>1 - 表示连接已建立，可以进行通信。</li>\r\n 	<li>2 - 表示连接正在进行关闭。</li>\r\n 	<li>3 - 表示连接已经关闭或者连接不能打开。</li>\r\n</ul>\r\n<h4>Socket.bufferedAmount</h4>\r\n只读属性 bufferedAmount 表示已被 send() 放入正在队列中等待传输，但是还没有发出的 UTF-8 文本字节数。\r\n<h3>2.3 WebSocket 事件</h3>\r\nWebSocket 对象目前一共有四个：onopen, onmessage, onclose 和 onerror。\r\n<ul>\r\n 	<li>Socket.onopen 连接建立时触发</li>\r\n 	<li>Socket.onmessage 客户端接收服务端数据时触发</li>\r\n 	<li>Socket.onerror 通信发生错误时触发</li>\r\n 	<li>Socket.onclose 连接关闭时触发</li>\r\n</ul>\r\n<h3>2.4 WebSocket 方法</h3>\r\nSocket.send() 使用连接发送数据\r\n\r\nSocket.close() 关闭连接\r\n<h3>2.5. 一个简单的例子</h3>\r\n\r\n[javascript]\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n    //检查浏览器是否支持WebSocket\r\n    if(window.WebSocket){            \r\n        console.log(\'This browser supports WebSocket\');\r\n    }else{\r\n        console.log(\'This browser does not supports WebSocket\');\r\n    }\r\n\r\n    // 打开一个 web socket\r\n    var ws = new WebSocket(&quot;ws://localhost:1234&quot;);\r\n                \r\n    /**\r\n     * 连接建立时\r\n     */    \r\n    ws.onopen = function()\r\n    {\r\n         // 使用 send() 方法发送数据\r\n         ws.send(&quot;hello&quot;);\r\n    };\r\n\r\n    /**\r\n     * 接收服务端数据时\r\n     */    \r\n    ws.onmessage = function (evt) \r\n    {\r\n        var received_data = evt.data;\r\n        console.log(received_data);\r\n    };\r\n            \r\n    /**\r\n     * 连接关闭时\r\n     */\r\n    ws.onclose = function(){                 \r\n        alert(&quot;连接已关闭...&quot;); \r\n    };\r\n\r\n    /**\r\n     * 通信发生错误时\r\n     */\r\n    ws.onerror = function(){ \r\n        // 关闭 websocket \r\n        ws.close(); \r\n    };  \r\n&lt;/script&gt;\r\n[/javascript]\r\n\r\n<h2>3. WebSocket 服务端实现</h2>\r\n服务端实现 WebSocket，现在各种语言都很方便了。\r\n\r\n比如PHP，我们可以使用Swoole，workerman，ReactPHP等。', 'WebSocket实现', '', 'inherit', 'closed', 'closed', '', '1062-revision-v1', '', '', '2017-06-23 16:17:43', '2017-06-23 08:17:43', '', 1062, 'https://www.gzpblog.com/20170623/1065.html', 0, 'revision', '', 0),
(1066, 1, '2017-06-23 17:03:54', '2017-06-23 09:03:54', '最近可能会发一些没有营养，或者是没啥干货的东西，诸如一些基础的知识， 插件或者拓展的介绍和使用之类的。\r\n\r\n主要是我想整理一下学过的东西，梳理一下知识链，以此发现自己的欠缺和不足，也是回顾，记录一下一些东西，复习的同时方便以后查看。', '最近可能会发一些没有营养的东西', '', 'publish', 'open', 'closed', '', '1066', '', '', '2017-07-28 09:15:04', '2017-07-28 01:15:04', '', 0, 'https://www.gzpblog.com/?p=1066', 0, 'post', '', 3),
(1067, 1, '2017-06-23 17:03:54', '2017-06-23 09:03:54', '最近可能会发一些没有营养，或者是没啥干货的东西，诸如一些基础的知识， 插件或者拓展的介绍和使用之类的。\r\n\r\n主要是我想整理一下学过的东西，梳理一下知识链，以此发现自己的欠缺和不足，也是回顾，记录一下一些东西，复习的同时方便以后查看。', '', '', 'inherit', 'closed', 'closed', '', '1066-revision-v1', '', '', '2017-06-23 17:03:54', '2017-06-23 09:03:54', '', 1066, 'https://www.gzpblog.com/20170623/1067.html', 0, 'revision', '', 0),
(1068, 1, '2017-06-23 17:04:40', '2017-06-23 09:04:40', '最近可能会发一些没有营养，或者是没啥干货的东西，诸如一些基础的知识， 插件或者拓展的介绍和使用之类的。\r\n\r\n主要是我想整理一下学过的东西，梳理一下知识链，以此发现自己的欠缺和不足，也是回顾，记录一下一些东西，复习的同时方便以后查看。', '最近可能会发一些没有营养的东西', '', 'inherit', 'closed', 'closed', '', '1066-revision-v1', '', '', '2017-06-23 17:04:40', '2017-06-23 09:04:40', '', 1066, 'https://www.gzpblog.com/20170623/1068.html', 0, 'revision', '', 0),
(1069, 1, '2017-06-26 01:57:38', '2017-06-25 17:57:38', '<h2>PHP</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-1 基础编码规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170620/1034.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-2 编码风格规范</a>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20160421/26.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPExcel：PHP导出Excel文件</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1041.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPMailer：PHP的邮件发送类库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1045.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code：生成二维码</a>\r\n\r\n&nbsp;\r\n<h2>Javascript</h2>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20170622/1053.html\" target=\"_blank\" rel=\"noopener noreferrer\">QRCode.js：基于JQuery的生成二维码JS库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170623/1059.html\" target=\"_blank\" rel=\"noopener noreferrer\">PACE：页面自动加载进度插件</a>\r\n\r\n&nbsp;\r\n<h2>前端综合</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170623/1062.html\" target=\"_blank\" rel=\"noopener noreferrer\">客户端实现WebSocket</a>\r\n\r\n&nbsp;\r\n<h2>工具</h2>\r\n<h3>版本控制</h3>\r\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\r\n<h3>代码管理</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\r\n<h3>测试相关</h3>\r\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>\r\n<h3>其它</h3>\r\n<a href=\"https://www.gzpblog.com/20170607/1000.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Gitbook编写书籍文档</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-revision-v1', '', '', '2017-06-26 01:57:38', '2017-06-25 17:57:38', '', 978, 'https://www.gzpblog.com/20170626/1069.html', 0, 'revision', '', 0),
(1070, 1, '2017-06-26 02:02:35', '2017-06-25 18:02:35', '<h2>PHP</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-1 基础编码规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170620/1034.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-2 编码风格规范</a>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20160421/26.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPExcel：PHP导出Excel文件</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1041.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPMailer：PHP的邮件发送类库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1045.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code：生成二维码</a>\r\n<h3>Thinkphp</h3>\r\n<a href=\"https://www.gzpblog.com/20161230/561.html\" target=\"_blank\" rel=\"noopener noreferrer\">基于Thinkphp5的cURL封装类</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170330/850.html\" target=\"_blank\" rel=\"noopener noreferrer\">阿里云Oss+Thinkphp5，Web一站式可拓展包</a>\r\n\r\n&nbsp;\r\n<h2>Javascript</h2>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20170622/1053.html\" target=\"_blank\" rel=\"noopener noreferrer\">QRCode.js：基于JQuery的生成二维码JS库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170623/1059.html\" target=\"_blank\" rel=\"noopener noreferrer\">PACE：页面自动加载进度插件</a>\r\n\r\n&nbsp;\r\n<h2>前端综合</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170623/1062.html\" target=\"_blank\" rel=\"noopener noreferrer\">客户端实现WebSocket</a>\r\n\r\n&nbsp;\r\n<h2>工具</h2>\r\n<h3>版本控制</h3>\r\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\r\n<h3>代码管理</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\r\n<h3>测试相关</h3>\r\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>\r\n<h3>其它</h3>\r\n<a href=\"https://www.gzpblog.com/20170607/1000.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Gitbook编写书籍文档</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-revision-v1', '', '', '2017-06-26 02:02:35', '2017-06-25 18:02:35', '', 978, 'https://www.gzpblog.com/20170626/1070.html', 0, 'revision', '', 0),
(1072, 1, '2017-06-27 12:51:22', '2017-06-27 04:51:22', '', 'Wireshark1', '', 'inherit', 'open', 'closed', '', 'wireshark1', '', '', '2017-06-27 12:54:35', '2017-06-27 04:54:35', '', 1081, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Wireshark1.png', 0, 'attachment', 'image/png', 0),
(1073, 1, '2017-06-27 12:51:23', '2017-06-27 04:51:23', '', 'Wireshark2', '', 'inherit', 'open', 'closed', '', 'wireshark2', '', '', '2017-06-27 12:54:48', '2017-06-27 04:54:48', '', 1081, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Wireshark2.png', 0, 'attachment', 'image/png', 0),
(1074, 1, '2017-06-27 12:51:25', '2017-06-27 04:51:25', '', 'Wireshark3', '', 'inherit', 'open', 'closed', '', 'wireshark3', '', '', '2017-06-27 12:55:42', '2017-06-27 04:55:42', '', 1081, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Wireshark3.png', 0, 'attachment', 'image/png', 0),
(1075, 1, '2017-06-27 12:51:26', '2017-06-27 04:51:26', '', 'Wireshark4', '', 'inherit', 'open', 'closed', '', 'wireshark4', '', '', '2017-06-27 12:56:14', '2017-06-27 04:56:14', '', 1081, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Wireshark4.png', 0, 'attachment', 'image/png', 0),
(1076, 1, '2017-06-27 12:51:27', '2017-06-27 04:51:27', '', 'Wireshark5', '', 'inherit', 'open', 'closed', '', 'wireshark5', '', '', '2017-06-27 12:56:29', '2017-06-27 04:56:29', '', 1081, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Wireshark5.png', 0, 'attachment', 'image/png', 0),
(1077, 1, '2017-06-27 12:51:29', '2017-06-27 04:51:29', '', 'Wireshark6', '', 'inherit', 'open', 'closed', '', 'wireshark6', '', '', '2017-06-27 12:56:54', '2017-06-27 04:56:54', '', 1081, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Wireshark6.png', 0, 'attachment', 'image/png', 0),
(1078, 1, '2017-06-27 12:51:30', '2017-06-27 04:51:30', '', 'Wireshark7', '', 'inherit', 'open', 'closed', '', 'wireshark7', '', '', '2017-06-27 12:57:31', '2017-06-27 04:57:31', '', 1081, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Wireshark7.png', 0, 'attachment', 'image/png', 0),
(1079, 1, '2017-06-27 12:51:31', '2017-06-27 04:51:31', '', 'Wireshark8', '', 'inherit', 'open', 'closed', '', 'wireshark8', '', '', '2017-06-27 12:57:55', '2017-06-27 04:57:55', '', 1081, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Wireshark8.png', 0, 'attachment', 'image/png', 0),
(1080, 1, '2017-06-27 12:51:32', '2017-06-27 04:51:32', '', 'Wireshark-logo', '', 'inherit', 'open', 'closed', '', 'wireshark-logo', '', '', '2017-06-27 12:51:32', '2017-06-27 04:51:32', '', 0, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Wireshark-logo.png', 0, 'attachment', 'image/png', 0),
(1081, 1, '2017-06-27 12:58:31', '2017-06-27 04:58:31', '<h2>1. 什么是Wireshark？</h2>\r\nWireshark 是一个网络封包分析软件。网络封包分析软件的功能是捕获网络封包，并尽可能显示出最为详细的网络封包资料。\r\n\r\nWireshark不会对网络封包产生内容的修改，它只会反映出目前流通的封包资讯。 Wireshark本身也不会送出封包至网络上。\r\n\r\n官网：<a href=\"https://www.wireshark.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.wireshark.org/</a>\r\n<h2>2. 使用</h2>\r\n<h3>2.1 安装</h3>\r\n下载地址：<a href=\"https://www.wireshark.org/download.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.wireshark.org/download.html</a>\r\n\r\n下载下来安装就好，过程很简单，我发现现在安装下来之后直接就是中文版了。\r\n<h3>2.2 开始捕获</h3>\r\n启动Wireshark后，会自动检测网络接口，然后给你选择进行捕获：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Wireshark1.png\"><img class=\"alignnone size-full wp-image-1072\" src=\"https://files.gzpblog.com/wp/2017/06/Wireshark1.png\" alt=\"\" width=\"936\" height=\"340\" /></a>\r\n\r\n比如我们选择本地连接，就会捕获本地连接中的网络通讯。下面是Wireshark主要的捕获界面，列出了捕获到的所有网络封包：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Wireshark2.png\"><img class=\"wp-image-1073 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Wireshark2.png\" alt=\"\" width=\"655\" height=\"617\" /></a>\r\n<h3>2.3 着色规则</h3>\r\n可以发现，在捕获到的报文包中，Wireshark会用不同的颜色区分出来。具体的着色规则，可以在 视图 -&gt; 着色规则（如果你是中文版） 中看到：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Wireshark3.png\"><img class=\"size-full wp-image-1074 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Wireshark3.png\" alt=\"\" width=\"631\" height=\"453\" /></a>\r\n\r\n熟悉之后，通过颜色，就可以快速定位你要关注的包了，比如Bad TCP就是黑底红色的。\r\n<h3>2.4 过滤器</h3>\r\nwireshark有两种过滤器：捕捉过滤器（CaptureFilters）和显示过滤器（DisplayFilters）。\r\n\r\n捕捉过滤器（CaptureFilters）：用于决定将什么样的信息记录在捕捉结果中，在捕捉时就进行过滤。\r\n\r\n显示过滤器（DisplayFilters）：在捕捉结果中进行过滤查找。\r\n\r\n可以在下图标注的两个地方用到这两个过滤器：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Wireshark4.png\"><img class=\"wp-image-1075 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Wireshark4.png\" alt=\"\" width=\"775\" height=\"278\" /></a>\r\n\r\n过滤器会有语法规则，一开始不熟悉，其实也挺方便查看的，点击表达式，会有如下一个界面：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Wireshark5.png\"><img class=\" wp-image-1076 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Wireshark5.png\" alt=\"\" width=\"521\" height=\"724\" /></a>\r\n\r\n可以在这里查看显示过滤器的表达式规则，很方便。\r\n\r\n过滤例子，只查看HTTP：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Wireshark6.png\"><img class=\" wp-image-1077 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Wireshark6.png\" alt=\"\" width=\"619\" height=\"576\" /></a>\r\n<h3>2.5 追踪流</h3>\r\n通过使用追踪流，还能够看到服务器和目标端之间的全部会话。可以通过右键来选择：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Wireshark7.png\"><img class=\"size-full wp-image-1078 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Wireshark7.png\" alt=\"\" width=\"586\" height=\"474\" /></a>会看到两边的会话信息：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Wireshark8.png\"><img class=\" wp-image-1079 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Wireshark8.png\" alt=\"\" width=\"464\" height=\"651\" /></a>\r\n\r\n查看完追踪流后，会自动添加过滤条件并显示。\r\n<h3>2.6 检查报文</h3>\r\n单击捕获的报文列表，下面的框框就会显示出该报文的信息，或者直接双击查看。', 'Wireshark基础用法：用Wireshark抓包分析网络通讯', '', 'publish', 'open', 'closed', '', 'wireshark%e5%9f%ba%e7%a1%80%e7%94%a8%e6%b3%95%ef%bc%9a%e7%94%a8wireshark%e6%8a%93%e5%8c%85%e5%88%86%e6%9e%90%e7%bd%91%e7%bb%9c%e9%80%9a%e8%ae%af', '', '', '2017-06-27 12:58:31', '2017-06-27 04:58:31', '', 0, 'https://www.gzpblog.com/?p=1081', 0, 'post', '', 0),
(1082, 1, '2017-06-27 12:58:31', '2017-06-27 04:58:31', '<h2>1. 什么是Wireshark？</h2>\r\nWireshark 是一个网络封包分析软件。网络封包分析软件的功能是捕获网络封包，并尽可能显示出最为详细的网络封包资料。\r\n\r\nWireshark不会对网络封包产生内容的修改，它只会反映出目前流通的封包资讯。 Wireshark本身也不会送出封包至网络上。\r\n\r\n官网：<a href=\"https://www.wireshark.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.wireshark.org/</a>\r\n<h2>2. 使用</h2>\r\n<h3>2.1 安装</h3>\r\n下载地址：<a href=\"https://www.wireshark.org/download.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.wireshark.org/download.html</a>\r\n\r\n下载下来安装就好，过程很简单，我发现现在安装下来之后直接就是中文版了。\r\n<h3>2.2 开始捕获</h3>\r\n启动Wireshark后，会自动检测网络接口，然后给你选择进行捕获：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Wireshark1.png\"><img class=\"alignnone size-full wp-image-1072\" src=\"https://files.gzpblog.com/wp/2017/06/Wireshark1.png\" alt=\"\" width=\"936\" height=\"340\" /></a>\r\n\r\n比如我们选择本地连接，就会捕获本地连接中的网络通讯。下面是Wireshark主要的捕获界面，列出了捕获到的所有网络封包：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Wireshark2.png\"><img class=\"wp-image-1073 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Wireshark2.png\" alt=\"\" width=\"655\" height=\"617\" /></a>\r\n<h3>2.3 着色规则</h3>\r\n可以发现，在捕获到的报文包中，Wireshark会用不同的颜色区分出来。具体的着色规则，可以在 视图 -&gt; 着色规则（如果你是中文版） 中看到：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Wireshark3.png\"><img class=\"size-full wp-image-1074 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Wireshark3.png\" alt=\"\" width=\"631\" height=\"453\" /></a>\r\n\r\n熟悉之后，通过颜色，就可以快速定位你要关注的包了，比如Bad TCP就是黑底红色的。\r\n<h3>2.4 过滤器</h3>\r\nwireshark有两种过滤器：捕捉过滤器（CaptureFilters）和显示过滤器（DisplayFilters）。\r\n\r\n捕捉过滤器（CaptureFilters）：用于决定将什么样的信息记录在捕捉结果中，在捕捉时就进行过滤。\r\n\r\n显示过滤器（DisplayFilters）：在捕捉结果中进行过滤查找。\r\n\r\n可以在下图标注的两个地方用到这两个过滤器：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Wireshark4.png\"><img class=\"wp-image-1075 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Wireshark4.png\" alt=\"\" width=\"775\" height=\"278\" /></a>\r\n\r\n过滤器会有语法规则，一开始不熟悉，其实也挺方便查看的，点击表达式，会有如下一个界面：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Wireshark5.png\"><img class=\" wp-image-1076 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Wireshark5.png\" alt=\"\" width=\"521\" height=\"724\" /></a>\r\n\r\n可以在这里查看显示过滤器的表达式规则，很方便。\r\n\r\n过滤例子，只查看HTTP：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Wireshark6.png\"><img class=\" wp-image-1077 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Wireshark6.png\" alt=\"\" width=\"619\" height=\"576\" /></a>\r\n<h3>2.5 追踪流</h3>\r\n通过使用追踪流，还能够看到服务器和目标端之间的全部会话。可以通过右键来选择：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Wireshark7.png\"><img class=\"size-full wp-image-1078 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Wireshark7.png\" alt=\"\" width=\"586\" height=\"474\" /></a>会看到两边的会话信息：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Wireshark8.png\"><img class=\" wp-image-1079 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Wireshark8.png\" alt=\"\" width=\"464\" height=\"651\" /></a>\r\n\r\n查看完追踪流后，会自动添加过滤条件并显示。\r\n<h3>2.6 检查报文</h3>\r\n单击捕获的报文列表，下面的框框就会显示出该报文的信息，或者直接双击查看。', 'Wireshark基础用法：用Wireshark抓包分析网络通讯', '', 'inherit', 'closed', 'closed', '', '1081-revision-v1', '', '', '2017-06-27 12:58:31', '2017-06-27 04:58:31', '', 1081, 'https://www.gzpblog.com/20170627/1082.html', 0, 'revision', '', 0),
(1083, 1, '2017-06-27 13:44:41', '2017-06-27 05:44:41', '<h2>PHP</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-1 基础编码规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170620/1034.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-2 编码风格规范</a>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20160421/26.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPExcel：PHP导出Excel文件</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1041.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPMailer：PHP的邮件发送类库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1045.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code：生成二维码</a>\r\n<h3>Thinkphp</h3>\r\n<a href=\"https://www.gzpblog.com/20161230/561.html\" target=\"_blank\" rel=\"noopener noreferrer\">基于Thinkphp5的cURL封装类</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170330/850.html\" target=\"_blank\" rel=\"noopener noreferrer\">阿里云Oss+Thinkphp5，Web一站式可拓展包</a>\r\n\r\n&nbsp;\r\n<h2>Javascript</h2>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20170622/1053.html\" target=\"_blank\" rel=\"noopener noreferrer\">QRCode.js：基于JQuery的生成二维码JS库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170623/1059.html\" target=\"_blank\" rel=\"noopener noreferrer\">PACE：页面自动加载进度插件</a>\r\n\r\n&nbsp;\r\n<h2>前端综合</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170623/1062.html\" target=\"_blank\" rel=\"noopener noreferrer\">客户端实现WebSocket</a>\r\n\r\n&nbsp;\r\n<h2>工具</h2>\r\n<h3>版本控制</h3>\r\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\r\n<h3>代码管理</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\r\n<h3>测试相关</h3>\r\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170627/1081.html\" target=\"_blank\" rel=\"noopener noreferrer\">Wireshark基础用法：用Wireshark抓包分析网络通讯</a>\r\n<h3>其它</h3>\r\n<a href=\"https://www.gzpblog.com/20170607/1000.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Gitbook编写书籍文档</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-revision-v1', '', '', '2017-06-27 13:44:41', '2017-06-27 05:44:41', '', 978, 'https://www.gzpblog.com/20170627/1083.html', 0, 'revision', '', 0),
(1084, 1, '2017-06-29 02:38:19', '2017-06-28 18:38:19', '', 'Fiddler1', '', 'inherit', 'open', 'closed', '', 'fiddler1', '', '', '2017-06-29 02:40:13', '2017-06-28 18:40:13', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler1.png', 0, 'attachment', 'image/png', 0),
(1085, 1, '2017-06-29 02:38:20', '2017-06-28 18:38:20', '', 'Fiddler2', '', 'inherit', 'open', 'closed', '', 'fiddler2', '', '', '2017-06-29 02:41:11', '2017-06-28 18:41:11', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler2.png', 0, 'attachment', 'image/png', 0),
(1086, 1, '2017-06-29 02:38:21', '2017-06-28 18:38:21', '', 'Fiddler3', '', 'inherit', 'open', 'closed', '', 'fiddler3', '', '', '2017-06-29 02:41:59', '2017-06-28 18:41:59', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler3.png', 0, 'attachment', 'image/png', 0),
(1087, 1, '2017-06-29 02:38:22', '2017-06-28 18:38:22', '', 'Fiddler4', '', 'inherit', 'open', 'closed', '', 'fiddler4', '', '', '2017-06-29 02:42:14', '2017-06-28 18:42:14', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler4.png', 0, 'attachment', 'image/png', 0),
(1088, 1, '2017-06-29 02:38:25', '2017-06-28 18:38:25', '', 'Fiddler5', '', 'inherit', 'open', 'closed', '', 'fiddler5', '', '', '2017-06-29 02:42:52', '2017-06-28 18:42:52', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler5.png', 0, 'attachment', 'image/png', 0),
(1089, 1, '2017-06-29 02:38:26', '2017-06-28 18:38:26', '', 'Fiddler6', '', 'inherit', 'open', 'closed', '', 'fiddler6', '', '', '2017-06-29 02:43:21', '2017-06-28 18:43:21', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler6.png', 0, 'attachment', 'image/png', 0),
(1090, 1, '2017-06-29 02:38:26', '2017-06-28 18:38:26', '', 'Fiddler7', '', 'inherit', 'open', 'closed', '', 'fiddler7', '', '', '2017-06-29 02:43:56', '2017-06-28 18:43:56', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler7.png', 0, 'attachment', 'image/png', 0),
(1091, 1, '2017-06-29 02:38:29', '2017-06-28 18:38:29', '', 'Fiddler8', '', 'inherit', 'open', 'closed', '', 'fiddler8', '', '', '2017-06-29 02:44:27', '2017-06-28 18:44:27', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler8.png', 0, 'attachment', 'image/png', 0),
(1092, 1, '2017-06-29 02:38:30', '2017-06-28 18:38:30', '', 'Fiddler9', '', 'inherit', 'open', 'closed', '', 'fiddler9', '', '', '2017-06-29 02:44:55', '2017-06-28 18:44:55', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler9.png', 0, 'attachment', 'image/png', 0),
(1093, 1, '2017-06-29 02:38:32', '2017-06-28 18:38:32', '', 'Fiddler10', '', 'inherit', 'open', 'closed', '', 'fiddler10', '', '', '2017-06-29 02:45:11', '2017-06-28 18:45:11', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler10.png', 0, 'attachment', 'image/png', 0),
(1094, 1, '2017-06-29 02:38:33', '2017-06-28 18:38:33', '', 'Fiddler11', '', 'inherit', 'open', 'closed', '', 'fiddler11', '', '', '2017-06-29 02:46:03', '2017-06-28 18:46:03', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler11.png', 0, 'attachment', 'image/png', 0),
(1095, 1, '2017-06-29 02:38:36', '2017-06-28 18:38:36', '', 'Fiddler12', '', 'inherit', 'open', 'closed', '', 'fiddler12', '', '', '2017-06-29 02:47:28', '2017-06-28 18:47:28', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler12.png', 0, 'attachment', 'image/png', 0),
(1096, 1, '2017-06-29 02:38:38', '2017-06-28 18:38:38', '', 'Fiddler13', '', 'inherit', 'open', 'closed', '', 'fiddler13', '', '', '2017-06-29 02:47:50', '2017-06-28 18:47:50', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler13.png', 0, 'attachment', 'image/png', 0),
(1097, 1, '2017-06-29 02:38:39', '2017-06-28 18:38:39', '', 'Fiddler14', '', 'inherit', 'open', 'closed', '', 'fiddler14', '', '', '2017-06-29 02:48:08', '2017-06-28 18:48:08', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler14.png', 0, 'attachment', 'image/png', 0),
(1098, 1, '2017-06-29 02:38:40', '2017-06-28 18:38:40', '', 'Fiddler15', '', 'inherit', 'open', 'closed', '', 'fiddler15', '', '', '2017-06-29 02:48:30', '2017-06-28 18:48:30', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler15.png', 0, 'attachment', 'image/png', 0),
(1099, 1, '2017-06-29 02:38:40', '2017-06-28 18:38:40', '', 'Fiddler16', '', 'inherit', 'open', 'closed', '', 'fiddler16', '', '', '2017-06-29 02:48:54', '2017-06-28 18:48:54', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler16.png', 0, 'attachment', 'image/png', 0),
(1100, 1, '2017-06-29 02:38:41', '2017-06-28 18:38:41', '', 'Fiddler17', '', 'inherit', 'open', 'closed', '', 'fiddler17', '', '', '2017-06-29 02:51:33', '2017-06-28 18:51:33', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler17.png', 0, 'attachment', 'image/png', 0),
(1101, 1, '2017-06-29 02:38:42', '2017-06-28 18:38:42', '', 'Fiddler18', '', 'inherit', 'open', 'closed', '', 'fiddler18', '', '', '2017-06-29 02:52:26', '2017-06-28 18:52:26', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler18.png', 0, 'attachment', 'image/png', 0),
(1102, 1, '2017-06-29 02:38:45', '2017-06-28 18:38:45', '', 'Fiddler19', '', 'inherit', 'open', 'closed', '', 'fiddler19', '', '', '2017-06-29 02:52:41', '2017-06-28 18:52:41', '', 1104, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler19.png', 0, 'attachment', 'image/png', 0),
(1103, 1, '2017-06-29 02:38:45', '2017-06-28 18:38:45', '', 'Fiddler-banner', '', 'inherit', 'open', 'closed', '', 'fiddler-banner', '', '', '2017-06-29 02:38:45', '2017-06-28 18:38:45', '', 0, 'https://www.gzpblog.com/wp-content/uploads/2017/06/Fiddler-banner.png', 0, 'attachment', 'image/png', 0),
(1104, 1, '2017-06-29 02:55:00', '2017-06-28 18:55:00', '<h2>1. 什么是Fiddler？</h2>\r\nFiddler是一个http协议调试代理工具，它能够记录并检查所有你的电脑和互联网之间的http通讯，设置断点，查看所有“进出”Fiddler的数据（指cookie,html,js,css等文件，这些都可以让你胡乱修改的意思）。\r\n\r\n通过Fiddle这个目前最常用的抓包工具之一，我们可以更加方便地在Web开发时进行Debug，像之前，进行ajax接口调试时，都要console.log打印，比较麻烦。用Fiddler就可以省事很多。\r\n\r\n抓包工具，HTTP和HTTPS调试用Fiddler，涉及TCP、UDP等其它的就用Wireshark。\r\n\r\n其实官网这个图就非常简单地说明了Fiddler可以用来做什么，Fiddler就充当了图中放大镜部分的作用，位于客户端和服务器端之前的HTTP代理。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler1.png\"><img class=\"size-full wp-image-1084 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler1.png\" alt=\"\" width=\"580\" height=\"231\" /></a>\r\n\r\n它能够记录客户端和服务器之间获取到的所有HTTP请求，并且可以针对特定的HTTP请求，分析请求的数据，还能设置断点，修改请求的数据，甚至可以修改服务器返回的数据。\r\n\r\n官网地址：<a href=\"http://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.telerik.com/fiddler</a>\r\n<h2>2. 使用</h2>\r\n<h3>2.1 下载</h3>\r\n到官网免费下载，需要填一下邮箱：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler2.png\"><img class=\"size-full wp-image-1085 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler2.png\" alt=\"\" width=\"724\" height=\"494\" /></a>\r\n<h3>2.2 安装</h3>\r\n直接安装，安装过程很无脑。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler3.png\"><img class=\"size-full wp-image-1086 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler3.png\" alt=\"\" width=\"424\" height=\"289\" /></a>\r\n\r\n安装完后启动Fiddler，然后用浏览器随便打开一个网页，发现Fiddler已经开始工作了，左边为获取到的请求列表，点击查看详情后可以在右边查看到请求的详情；列表下面有个小黑框，是执行命令行用的。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler4.png\"><img class=\"wp-image-1087 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler4.png\" alt=\"\" width=\"1151\" height=\"660\" /></a>\r\n<h3>2.3 配置</h3>\r\n<h4>2.3.1 代理设置</h4>\r\n打开Tools -&gt; Options -&gt; Connections，可以看到默认端口为8888，把Allow remote computers to connect勾上，允许其他电脑的连接。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler5.png\"><img class=\"size-full wp-image-1088 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler5.png\" alt=\"\" width=\"547\" height=\"367\" /></a>\r\n\r\nFiddler可以代理PC端的请求，也可以代理移动端的请求，只需要将手机网络设置中的HTTP代理设置为电脑的IP地址，端口为Fiddler的默认端口号8888即可。\r\n<h4>2.3.2  配置捕获HTTPS</h4>\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler6.png\"><img class=\"size-full wp-image-1089 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler6.png\" alt=\"\" width=\"546\" height=\"360\" /></a>\r\n\r\n会弹出一个Trust the Fiddler Root certificate的确认，点击Yes信任证书即可。\r\n<h3>2.4 分析</h3>\r\n<h4>2.4.1 性能数据分析（Statistics）</h4>\r\n右侧第一个指标，Statistics，可以看到关于HTTP请求的性能以及数据分析，以及饼图。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler7.png\"><img class=\"wp-image-1090 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler7.png\" alt=\"\" width=\"1098\" height=\"621\" /></a>\r\n<h4>2.4.2 会话内容（Inspectors）</h4>\r\nInspectors是用于查看会话的内容，上半部分是请求的内容（Request），下半部分是响应的内容（Response），可以查看header，json，text等等，选择就可以。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler8.png\"><img class=\"size-full wp-image-1091 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler8.png\" alt=\"\" width=\"990\" height=\"724\" /></a>\r\n<h4>2.4.3 自动响应（AutoResponder）</h4>\r\nAutoResponder允许你拦截指定规则的请求，并自动返回本地资源或Fiddler资源，从而代替服务器响应。\r\n\r\n比如，正常打开百度是这样的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler9.png\"><img class=\"wp-image-1092 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler9.png\" alt=\"\" width=\"969\" height=\"373\" /></a>\r\n\r\n我们在AutoResponder设置一条简单的规则，将baidu绑定到我本地的一张图片：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler10.png\"><img class=\" wp-image-1093 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler10.png\" alt=\"\" width=\"786\" height=\"552\" /></a>\r\n\r\n这个时候再打开百度，就被拦截下来了，并返回了我设置好的这张图片：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler11.png\"><img class=\" wp-image-1094 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler11-1024x685.png\" alt=\"\" width=\"625\" height=\"418\" /></a>\r\n<h4>2.4.4 自定义请求发送服务器（Composer）</h4>\r\nComposer可以自定义请求发送到服务器，通过手动创建一个新的请求，或者在会话列表中，拖拽一个现有的请求。\r\n\r\n输入一个url地址既可以模拟请求，也可以填写一些其它属性。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler12.png\"><img class=\"size-large wp-image-1095 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler12-1024x581.png\" alt=\"\" width=\"1024\" height=\"581\" /></a>\r\n<h4>2.4.5 日志（Log）</h4>\r\nLog部分可以看到Fiddler的运行日志\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler13.png\"><img class=\"size-full wp-image-1096 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler13.png\" alt=\"\" width=\"935\" height=\"262\" /></a>\r\n<h4>2.4.6 请求过滤（Filters）</h4>\r\n通过设置Filters设置规则来过滤掉一些请求；点击Use Filters开启功能，第一个框Hosts设置里，可以设置本地还是局域网，设置域名的过滤；下面还有一些更具体的设置。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler14.png\"><img class=\" wp-image-1097 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler14.png\" alt=\"\" width=\"729\" height=\"539\" /></a>\r\n<h4>2.4.7 请求响应时间线（Timeline）</h4>\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler15.png\"><img class=\"size-full wp-image-1098 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler15.png\" alt=\"\" width=\"990\" height=\"174\" /></a>\r\n<h3>2.5 命令使用</h3>\r\n列表下面的黑色框框，可以输入命令进行操作：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler16.png\"><img class=\" wp-image-1099 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler16.png\" alt=\"\" width=\"282\" height=\"525\" /></a>\r\n<h4>2.1 基本命令</h4>\r\n<table style=\"height: 279px;\" border=\"1\" width=\"906\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td><strong>命令</strong></td>\r\n<td><strong>对应请求项</strong></td>\r\n<td><strong>介绍</strong></td>\r\n<td><strong>示例</strong></td>\r\n</tr>\r\n<tr>\r\n<td>?</td>\r\n<td>All</td>\r\n<td>问号后边跟一个字符串，可以匹配出包含这个字符串的请求</td>\r\n<td>?google</td>\r\n</tr>\r\n<tr>\r\n<td>&gt;</td>\r\n<td>Body</td>\r\n<td>大于号后面跟一个数字，可以匹配出请求大小，大于这个数字请求</td>\r\n<td>&gt;1000</td>\r\n</tr>\r\n<tr>\r\n<td>&lt;</td>\r\n<td>Body</td>\r\n<td>小于号跟大于号相反，匹配出请求大小，小于这个数字的请求</td>\r\n<td>&lt;100</td>\r\n</tr>\r\n<tr>\r\n<td>=</td>\r\n<td>Result</td>\r\n<td>等于号后面跟数字，可以匹配HTTP返回码</td>\r\n<td>=200</td>\r\n</tr>\r\n<tr>\r\n<td>@</td>\r\n<td>Host</td>\r\n<td>@后面跟Host，可以匹配域名</td>\r\n<td>@www.baidu.com</td>\r\n</tr>\r\n<tr>\r\n<td>select</td>\r\n<td>Content-Type</td>\r\n<td>select后面跟响应类型，可以匹配到相关的类型</td>\r\n<td>select image</td>\r\n</tr>\r\n<tr>\r\n<td>cls</td>\r\n<td>All</td>\r\n<td>清空当前所有请求</td>\r\n<td>cls</td>\r\n</tr>\r\n<tr>\r\n<td>dump</td>\r\n<td>All</td>\r\n<td>将所有请求打包成saz压缩包，保存到“我的文档\\Fiddler2\\Captures”目录下</td>\r\n<td>dump</td>\r\n</tr>\r\n<tr>\r\n<td>start</td>\r\n<td>All</td>\r\n<td>开始监听请求</td>\r\n<td>start</td>\r\n</tr>\r\n<tr>\r\n<td>stop</td>\r\n<td>All</td>\r\n<td>停止监听请求</td>\r\n<td>stop</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h4>2.2 断点命令（进行断点测试）</h4>\r\n<table style=\"height: 292px;\" border=\"1\" width=\"904\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td><strong>命令</strong></td>\r\n<td><strong>对应请求项</strong></td>\r\n<td><strong>介绍</strong></td>\r\n<td><strong>示例</strong></td>\r\n</tr>\r\n<tr>\r\n<td>bpafter</td>\r\n<td>All</td>\r\n<td>bpafter后边跟一个字符串，表示中断所有包含该字符串的请求</td>\r\n<td>bpafter baidu（输入bpafter解除断点）</td>\r\n</tr>\r\n<tr>\r\n<td>bpu</td>\r\n<td>All</td>\r\n<td>跟bpafter差不多，只不过这个是收到请求了，中断响应</td>\r\n<td>bpu baidu（输入bpu解除断点）</td>\r\n</tr>\r\n<tr>\r\n<td>bps</td>\r\n<td>Result</td>\r\n<td>后面跟状态吗，表示中断所有是这个状态码的请求</td>\r\n<td>bps 200（输入bps解除断点）</td>\r\n</tr>\r\n<tr>\r\n<td>bpv / bpm</td>\r\n<td>HTTP方法</td>\r\n<td>只中断HTTP方法的命令，HTTP方法如POST、GET</td>\r\n<td>bpv get（输入bpv解除断点）</td>\r\n</tr>\r\n<tr>\r\n<td>g / Go</td>\r\n<td>All</td>\r\n<td>放行所有中断下来的请求</td>\r\n<td>g</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n例如，运行命令bpu www.gzpblog.com，然后打开www.gzpblog.com，发现直接被怼掉：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler17.png\"><img class=\"size-large wp-image-1100 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler17-1024x33.png\" alt=\"\" width=\"1024\" height=\"33\" /></a>\r\n\r\n我们看下这个请求，这个时候可以输入要传入的数据，然后可以选择黄色button断掉，或者绿色button继续加载：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler18.png\"><img class=\" wp-image-1101 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler18-1024x522.png\" alt=\"\" width=\"912\" height=\"465\" /></a>\r\n\r\n点击绿色Run to Completion，就开始加载了：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler19.png\"><img class=\"size-large wp-image-1102 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler19-1024x72.png\" alt=\"\" width=\"1024\" height=\"72\" /></a>\r\n\r\n有可能会挡掉下载的很多请求，我们可以运行go放行所有中断下来的请求。\r\n\r\n&nbsp;', '用 Fiddler 进行HTTP请求调试', '', 'publish', 'open', 'closed', '', '%e7%94%a8-fiddler-%e8%bf%9b%e8%a1%8chttp%e8%af%b7%e6%b1%82%e8%b0%83%e8%af%95', '', '', '2017-06-29 02:58:23', '2017-06-28 18:58:23', '', 0, 'https://www.gzpblog.com/?p=1104', 0, 'post', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1105, 1, '2017-06-29 02:55:00', '2017-06-28 18:55:00', '<h2>1. 什么是Fiddler？</h2>\r\nFiddler是一个http协议调试代理工具，它能够记录并检查所有你的电脑和互联网之间的http通讯，设置断点，查看所有“进出”Fiddler的数据（指cookie,html,js,css等文件，这些都可以让你胡乱修改的意思）。\r\n\r\n通过Fiddle这个目前最常用的抓包工具之一，我们可以更加方便地在Web开发时进行Debug，像之前，进行ajax接口调试时，都要console.log打印，比较麻烦。用Fiddler就可以省事很多。\r\n\r\n抓包工具，HTTP和HTTPS调试用Fiddler，涉及TCP、UDP等其它的就用Wireshark。\r\n\r\n其实官网这个图就非常简单地说明了Fiddler可以用来做什么，Fiddler就充当了图中放大镜部分的作用，位于客户端和服务器端之前的HTTP代理。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler1.png\"><img class=\"size-full wp-image-1084 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler1.png\" alt=\"\" width=\"580\" height=\"231\" /></a>\r\n\r\n它能够记录客户端和服务器之间获取到的所有HTTP请求，并且可以针对特定的HTTP请求，分析请求的数据，还能设置断点，修改请求的数据，甚至可以修改服务器返回的数据。\r\n\r\n官网地址：<a href=\"http://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.telerik.com/fiddler</a>\r\n<h2>2. 使用</h2>\r\n<h3>2.1 下载</h3>\r\n到官网免费下载，需要填一下邮箱：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler2.png\"><img class=\"size-full wp-image-1085 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler2.png\" alt=\"\" width=\"724\" height=\"494\" /></a>\r\n<h3>2.2 安装</h3>\r\n直接安装，安装过程很无脑。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler3.png\"><img class=\"size-full wp-image-1086 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler3.png\" alt=\"\" width=\"424\" height=\"289\" /></a>\r\n\r\n安装完后启动Fiddler，然后用浏览器随便打开一个网页，发现Fiddler已经开始工作了，左边为获取到的请求列表，点击查看详情后可以在右边查看到请求的详情；列表下面有个小黑框，是执行命令行用的。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler4.png\"><img class=\"wp-image-1087 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler4.png\" alt=\"\" width=\"1151\" height=\"660\" /></a>\r\n<h3>2.3 配置</h3>\r\n<h4>2.3.1 代理设置</h4>\r\n打开Tools -&gt; Options -&gt; Connections，可以看到默认端口为8888，把Allow remote computers to connect勾上，允许其他电脑的连接。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler5.png\"><img class=\"size-full wp-image-1088 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler5.png\" alt=\"\" width=\"547\" height=\"367\" /></a>\r\n\r\nFiddler可以代理PC端的请求，也可以代理移动端的请求，只需要将手机网络设置中的HTTP代理设置为电脑的IP地址，端口为Fiddler的默认端口号8888即可。\r\n<h4>2.3.2  配置捕获HTTPS</h4>\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler6.png\"><img class=\"size-full wp-image-1089 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler6.png\" alt=\"\" width=\"546\" height=\"360\" /></a>\r\n\r\n会弹出一个Trust the Fiddler Root certificate的确认，点击Yes信任证书即可。\r\n<h3>2.4 分析</h3>\r\n<h4>2.4.1 性能数据分析（Statistics）</h4>\r\n右侧第一个指标，Statistics，可以看到关于HTTP请求的性能以及数据分析，以及饼图。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler7.png\"><img class=\"wp-image-1090 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler7.png\" alt=\"\" width=\"1098\" height=\"621\" /></a>\r\n<h4>2.4.2 会话内容（Inspectors）</h4>\r\nInspectors是用于查看会话的内容，上半部分是请求的内容（Request），下半部分是响应的内容（Response），可以查看header，json，text等等，选择就可以。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler8.png\"><img class=\"size-full wp-image-1091 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler8.png\" alt=\"\" width=\"990\" height=\"724\" /></a>\r\n<h4>2.4.3 自动响应（AutoResponder）</h4>\r\nAutoResponder允许你拦截指定规则的请求，并自动返回本地资源或Fiddler资源，从而代替服务器响应。\r\n\r\n比如，正常打开百度是这样的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler9.png\"><img class=\"wp-image-1092 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler9.png\" alt=\"\" width=\"969\" height=\"373\" /></a>\r\n\r\n我们在AutoResponder设置一条简单的规则，将baidu绑定到我本地的一张图片：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler10.png\"><img class=\" wp-image-1093 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler10.png\" alt=\"\" width=\"786\" height=\"552\" /></a>\r\n\r\n这个时候再打开百度，就被拦截下来了，并返回了我设置好的这张图片：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler11.png\"><img class=\" wp-image-1094 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler11-1024x685.png\" alt=\"\" width=\"625\" height=\"418\" /></a>\r\n<h4>2.4.4 自定义请求发送服务器（Composer）</h4>\r\nComposer可以自定义请求发送到服务器，通过手动创建一个新的请求，或者在会话列表中，拖拽一个现有的请求。\r\n\r\n输入一个url地址既可以模拟请求，也可以填写一些其它属性。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler12.png\"><img class=\"size-large wp-image-1095 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler12-1024x581.png\" alt=\"\" width=\"1024\" height=\"581\" /></a>\r\n<h4>2.4.5 日志（Log）</h4>\r\nLog部分可以看到Fiddler的运行日志\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler13.png\"><img class=\"size-full wp-image-1096 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler13.png\" alt=\"\" width=\"935\" height=\"262\" /></a>\r\n\r\n2.4.6 请求过滤（Filters）\r\n\r\n通过设置Filters设置规则来过滤掉一些请求；点击Use Filters开启功能，第一个框Hosts设置里，可以设置本地还是局域网，设置域名的过滤；下面还有一些更具体的设置。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler14.png\"><img class=\" wp-image-1097 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler14.png\" alt=\"\" width=\"729\" height=\"539\" /></a>\r\n<h4>2.4.7 请求响应时间线（Timeline）</h4>\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler15.png\"><img class=\"size-full wp-image-1098 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler15.png\" alt=\"\" width=\"990\" height=\"174\" /></a>\r\n<h3>2.5 命令使用</h3>\r\n列表下面的黑色框框，可以输入命令进行操作：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler16.png\"><img class=\" wp-image-1099 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler16.png\" alt=\"\" width=\"282\" height=\"525\" /></a>\r\n<h4>2.1 基本命令</h4>\r\n<table style=\"height: 279px;\" border=\"1\" width=\"906\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td><strong>命令</strong></td>\r\n<td><strong>对应请求项</strong></td>\r\n<td><strong>介绍</strong></td>\r\n<td><strong>示例</strong></td>\r\n</tr>\r\n<tr>\r\n<td>?</td>\r\n<td>All</td>\r\n<td>问号后边跟一个字符串，可以匹配出包含这个字符串的请求</td>\r\n<td>?google</td>\r\n</tr>\r\n<tr>\r\n<td>&gt;</td>\r\n<td>Body</td>\r\n<td>大于号后面跟一个数字，可以匹配出请求大小，大于这个数字请求</td>\r\n<td>&gt;1000</td>\r\n</tr>\r\n<tr>\r\n<td>&lt;</td>\r\n<td>Body</td>\r\n<td>小于号跟大于号相反，匹配出请求大小，小于这个数字的请求</td>\r\n<td>&lt;100</td>\r\n</tr>\r\n<tr>\r\n<td>=</td>\r\n<td>Result</td>\r\n<td>等于号后面跟数字，可以匹配HTTP返回码</td>\r\n<td>=200</td>\r\n</tr>\r\n<tr>\r\n<td>@</td>\r\n<td>Host</td>\r\n<td>@后面跟Host，可以匹配域名</td>\r\n<td>@www.baidu.com</td>\r\n</tr>\r\n<tr>\r\n<td>select</td>\r\n<td>Content-Type</td>\r\n<td>select后面跟响应类型，可以匹配到相关的类型</td>\r\n<td>select image</td>\r\n</tr>\r\n<tr>\r\n<td>cls</td>\r\n<td>All</td>\r\n<td>清空当前所有请求</td>\r\n<td>cls</td>\r\n</tr>\r\n<tr>\r\n<td>dump</td>\r\n<td>All</td>\r\n<td>将所有请求打包成saz压缩包，保存到“我的文档\\Fiddler2\\Captures”目录下</td>\r\n<td>dump</td>\r\n</tr>\r\n<tr>\r\n<td>start</td>\r\n<td>All</td>\r\n<td>开始监听请求</td>\r\n<td>start</td>\r\n</tr>\r\n<tr>\r\n<td>stop</td>\r\n<td>All</td>\r\n<td>停止监听请求</td>\r\n<td>stop</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h4>2.2 断点命令（进行断点测试）</h4>\r\n<table style=\"height: 292px;\" border=\"1\" width=\"904\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td><strong>命令</strong></td>\r\n<td><strong>对应请求项</strong></td>\r\n<td><strong>介绍</strong></td>\r\n<td><strong>示例</strong></td>\r\n</tr>\r\n<tr>\r\n<td>bpafter</td>\r\n<td>All</td>\r\n<td>bpafter后边跟一个字符串，表示中断所有包含该字符串的请求</td>\r\n<td>bpafter baidu（输入bpafter解除断点）</td>\r\n</tr>\r\n<tr>\r\n<td>bpu</td>\r\n<td>All</td>\r\n<td>跟bpafter差不多，只不过这个是收到请求了，中断响应</td>\r\n<td>bpu baidu（输入bpu解除断点）</td>\r\n</tr>\r\n<tr>\r\n<td>bps</td>\r\n<td>Result</td>\r\n<td>后面跟状态吗，表示中断所有是这个状态码的请求</td>\r\n<td>bps 200（输入bps解除断点）</td>\r\n</tr>\r\n<tr>\r\n<td>bpv / bpm</td>\r\n<td>HTTP方法</td>\r\n<td>只中断HTTP方法的命令，HTTP方法如POST、GET</td>\r\n<td>bpv get（输入bpv解除断点）</td>\r\n</tr>\r\n<tr>\r\n<td>g / Go</td>\r\n<td>All</td>\r\n<td>放行所有中断下来的请求</td>\r\n<td>g</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n例如，运行命令bpu www.gzpblog.com，然后打开www.gzpblog.com，发现直接被怼掉：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler17.png\"><img class=\"size-large wp-image-1100 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler17-1024x33.png\" alt=\"\" width=\"1024\" height=\"33\" /></a>\r\n\r\n我们看下这个请求，这个时候可以输入要传入的数据，然后可以选择黄色button断掉，或者绿色button继续加载：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler18.png\"><img class=\" wp-image-1101 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler18-1024x522.png\" alt=\"\" width=\"912\" height=\"465\" /></a>\r\n\r\n点击绿色Run to Completion，就开始加载了：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler19.png\"><img class=\"size-large wp-image-1102 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler19-1024x72.png\" alt=\"\" width=\"1024\" height=\"72\" /></a>\r\n\r\n有可能会挡掉下载的很多请求，我们可以运行go放行所有中断下来的请求。\r\n\r\n&nbsp;', '用 Fiddler 进行HTTP请求调试', '', 'inherit', 'closed', 'closed', '', '1104-revision-v1', '', '', '2017-06-29 02:55:00', '2017-06-28 18:55:00', '', 1104, 'https://www.gzpblog.com/20170629/1105.html', 0, 'revision', '', 0),
(1106, 1, '2017-06-29 02:58:23', '2017-06-28 18:58:23', '<h2>1. 什么是Fiddler？</h2>\r\nFiddler是一个http协议调试代理工具，它能够记录并检查所有你的电脑和互联网之间的http通讯，设置断点，查看所有“进出”Fiddler的数据（指cookie,html,js,css等文件，这些都可以让你胡乱修改的意思）。\r\n\r\n通过Fiddle这个目前最常用的抓包工具之一，我们可以更加方便地在Web开发时进行Debug，像之前，进行ajax接口调试时，都要console.log打印，比较麻烦。用Fiddler就可以省事很多。\r\n\r\n抓包工具，HTTP和HTTPS调试用Fiddler，涉及TCP、UDP等其它的就用Wireshark。\r\n\r\n其实官网这个图就非常简单地说明了Fiddler可以用来做什么，Fiddler就充当了图中放大镜部分的作用，位于客户端和服务器端之前的HTTP代理。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler1.png\"><img class=\"size-full wp-image-1084 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler1.png\" alt=\"\" width=\"580\" height=\"231\" /></a>\r\n\r\n它能够记录客户端和服务器之间获取到的所有HTTP请求，并且可以针对特定的HTTP请求，分析请求的数据，还能设置断点，修改请求的数据，甚至可以修改服务器返回的数据。\r\n\r\n官网地址：<a href=\"http://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.telerik.com/fiddler</a>\r\n<h2>2. 使用</h2>\r\n<h3>2.1 下载</h3>\r\n到官网免费下载，需要填一下邮箱：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler2.png\"><img class=\"size-full wp-image-1085 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler2.png\" alt=\"\" width=\"724\" height=\"494\" /></a>\r\n<h3>2.2 安装</h3>\r\n直接安装，安装过程很无脑。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler3.png\"><img class=\"size-full wp-image-1086 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler3.png\" alt=\"\" width=\"424\" height=\"289\" /></a>\r\n\r\n安装完后启动Fiddler，然后用浏览器随便打开一个网页，发现Fiddler已经开始工作了，左边为获取到的请求列表，点击查看详情后可以在右边查看到请求的详情；列表下面有个小黑框，是执行命令行用的。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler4.png\"><img class=\"wp-image-1087 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler4.png\" alt=\"\" width=\"1151\" height=\"660\" /></a>\r\n<h3>2.3 配置</h3>\r\n<h4>2.3.1 代理设置</h4>\r\n打开Tools -&gt; Options -&gt; Connections，可以看到默认端口为8888，把Allow remote computers to connect勾上，允许其他电脑的连接。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler5.png\"><img class=\"size-full wp-image-1088 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler5.png\" alt=\"\" width=\"547\" height=\"367\" /></a>\r\n\r\nFiddler可以代理PC端的请求，也可以代理移动端的请求，只需要将手机网络设置中的HTTP代理设置为电脑的IP地址，端口为Fiddler的默认端口号8888即可。\r\n<h4>2.3.2  配置捕获HTTPS</h4>\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler6.png\"><img class=\"size-full wp-image-1089 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler6.png\" alt=\"\" width=\"546\" height=\"360\" /></a>\r\n\r\n会弹出一个Trust the Fiddler Root certificate的确认，点击Yes信任证书即可。\r\n<h3>2.4 分析</h3>\r\n<h4>2.4.1 性能数据分析（Statistics）</h4>\r\n右侧第一个指标，Statistics，可以看到关于HTTP请求的性能以及数据分析，以及饼图。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler7.png\"><img class=\"wp-image-1090 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler7.png\" alt=\"\" width=\"1098\" height=\"621\" /></a>\r\n<h4>2.4.2 会话内容（Inspectors）</h4>\r\nInspectors是用于查看会话的内容，上半部分是请求的内容（Request），下半部分是响应的内容（Response），可以查看header，json，text等等，选择就可以。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler8.png\"><img class=\"size-full wp-image-1091 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler8.png\" alt=\"\" width=\"990\" height=\"724\" /></a>\r\n<h4>2.4.3 自动响应（AutoResponder）</h4>\r\nAutoResponder允许你拦截指定规则的请求，并自动返回本地资源或Fiddler资源，从而代替服务器响应。\r\n\r\n比如，正常打开百度是这样的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler9.png\"><img class=\"wp-image-1092 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler9.png\" alt=\"\" width=\"969\" height=\"373\" /></a>\r\n\r\n我们在AutoResponder设置一条简单的规则，将baidu绑定到我本地的一张图片：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler10.png\"><img class=\" wp-image-1093 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler10.png\" alt=\"\" width=\"786\" height=\"552\" /></a>\r\n\r\n这个时候再打开百度，就被拦截下来了，并返回了我设置好的这张图片：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler11.png\"><img class=\" wp-image-1094 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler11-1024x685.png\" alt=\"\" width=\"625\" height=\"418\" /></a>\r\n<h4>2.4.4 自定义请求发送服务器（Composer）</h4>\r\nComposer可以自定义请求发送到服务器，通过手动创建一个新的请求，或者在会话列表中，拖拽一个现有的请求。\r\n\r\n输入一个url地址既可以模拟请求，也可以填写一些其它属性。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler12.png\"><img class=\"size-large wp-image-1095 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler12-1024x581.png\" alt=\"\" width=\"1024\" height=\"581\" /></a>\r\n<h4>2.4.5 日志（Log）</h4>\r\nLog部分可以看到Fiddler的运行日志\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler13.png\"><img class=\"size-full wp-image-1096 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler13.png\" alt=\"\" width=\"935\" height=\"262\" /></a>\r\n<h4>2.4.6 请求过滤（Filters）</h4>\r\n通过设置Filters设置规则来过滤掉一些请求；点击Use Filters开启功能，第一个框Hosts设置里，可以设置本地还是局域网，设置域名的过滤；下面还有一些更具体的设置。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler14.png\"><img class=\" wp-image-1097 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler14.png\" alt=\"\" width=\"729\" height=\"539\" /></a>\r\n<h4>2.4.7 请求响应时间线（Timeline）</h4>\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler15.png\"><img class=\"size-full wp-image-1098 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler15.png\" alt=\"\" width=\"990\" height=\"174\" /></a>\r\n<h3>2.5 命令使用</h3>\r\n列表下面的黑色框框，可以输入命令进行操作：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler16.png\"><img class=\" wp-image-1099 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler16.png\" alt=\"\" width=\"282\" height=\"525\" /></a>\r\n<h4>2.1 基本命令</h4>\r\n<table style=\"height: 279px;\" border=\"1\" width=\"906\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td><strong>命令</strong></td>\r\n<td><strong>对应请求项</strong></td>\r\n<td><strong>介绍</strong></td>\r\n<td><strong>示例</strong></td>\r\n</tr>\r\n<tr>\r\n<td>?</td>\r\n<td>All</td>\r\n<td>问号后边跟一个字符串，可以匹配出包含这个字符串的请求</td>\r\n<td>?google</td>\r\n</tr>\r\n<tr>\r\n<td>&gt;</td>\r\n<td>Body</td>\r\n<td>大于号后面跟一个数字，可以匹配出请求大小，大于这个数字请求</td>\r\n<td>&gt;1000</td>\r\n</tr>\r\n<tr>\r\n<td>&lt;</td>\r\n<td>Body</td>\r\n<td>小于号跟大于号相反，匹配出请求大小，小于这个数字的请求</td>\r\n<td>&lt;100</td>\r\n</tr>\r\n<tr>\r\n<td>=</td>\r\n<td>Result</td>\r\n<td>等于号后面跟数字，可以匹配HTTP返回码</td>\r\n<td>=200</td>\r\n</tr>\r\n<tr>\r\n<td>@</td>\r\n<td>Host</td>\r\n<td>@后面跟Host，可以匹配域名</td>\r\n<td>@www.baidu.com</td>\r\n</tr>\r\n<tr>\r\n<td>select</td>\r\n<td>Content-Type</td>\r\n<td>select后面跟响应类型，可以匹配到相关的类型</td>\r\n<td>select image</td>\r\n</tr>\r\n<tr>\r\n<td>cls</td>\r\n<td>All</td>\r\n<td>清空当前所有请求</td>\r\n<td>cls</td>\r\n</tr>\r\n<tr>\r\n<td>dump</td>\r\n<td>All</td>\r\n<td>将所有请求打包成saz压缩包，保存到“我的文档\\Fiddler2\\Captures”目录下</td>\r\n<td>dump</td>\r\n</tr>\r\n<tr>\r\n<td>start</td>\r\n<td>All</td>\r\n<td>开始监听请求</td>\r\n<td>start</td>\r\n</tr>\r\n<tr>\r\n<td>stop</td>\r\n<td>All</td>\r\n<td>停止监听请求</td>\r\n<td>stop</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h4>2.2 断点命令（进行断点测试）</h4>\r\n<table style=\"height: 292px;\" border=\"1\" width=\"904\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td><strong>命令</strong></td>\r\n<td><strong>对应请求项</strong></td>\r\n<td><strong>介绍</strong></td>\r\n<td><strong>示例</strong></td>\r\n</tr>\r\n<tr>\r\n<td>bpafter</td>\r\n<td>All</td>\r\n<td>bpafter后边跟一个字符串，表示中断所有包含该字符串的请求</td>\r\n<td>bpafter baidu（输入bpafter解除断点）</td>\r\n</tr>\r\n<tr>\r\n<td>bpu</td>\r\n<td>All</td>\r\n<td>跟bpafter差不多，只不过这个是收到请求了，中断响应</td>\r\n<td>bpu baidu（输入bpu解除断点）</td>\r\n</tr>\r\n<tr>\r\n<td>bps</td>\r\n<td>Result</td>\r\n<td>后面跟状态吗，表示中断所有是这个状态码的请求</td>\r\n<td>bps 200（输入bps解除断点）</td>\r\n</tr>\r\n<tr>\r\n<td>bpv / bpm</td>\r\n<td>HTTP方法</td>\r\n<td>只中断HTTP方法的命令，HTTP方法如POST、GET</td>\r\n<td>bpv get（输入bpv解除断点）</td>\r\n</tr>\r\n<tr>\r\n<td>g / Go</td>\r\n<td>All</td>\r\n<td>放行所有中断下来的请求</td>\r\n<td>g</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n例如，运行命令bpu www.gzpblog.com，然后打开www.gzpblog.com，发现直接被怼掉：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler17.png\"><img class=\"size-large wp-image-1100 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler17-1024x33.png\" alt=\"\" width=\"1024\" height=\"33\" /></a>\r\n\r\n我们看下这个请求，这个时候可以输入要传入的数据，然后可以选择黄色button断掉，或者绿色button继续加载：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler18.png\"><img class=\" wp-image-1101 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler18-1024x522.png\" alt=\"\" width=\"912\" height=\"465\" /></a>\r\n\r\n点击绿色Run to Completion，就开始加载了：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/06/Fiddler19.png\"><img class=\"size-large wp-image-1102 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/06/Fiddler19-1024x72.png\" alt=\"\" width=\"1024\" height=\"72\" /></a>\r\n\r\n有可能会挡掉下载的很多请求，我们可以运行go放行所有中断下来的请求。\r\n\r\n&nbsp;', '用 Fiddler 进行HTTP请求调试', '', 'inherit', 'closed', 'closed', '', '1104-revision-v1', '', '', '2017-06-29 02:58:23', '2017-06-28 18:58:23', '', 1104, 'https://www.gzpblog.com/20170629/1106.html', 0, 'revision', '', 0),
(1107, 1, '2017-06-29 03:02:23', '2017-06-28 19:02:23', '<h2>PHP</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-1 基础编码规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170620/1034.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-2 编码风格规范</a>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20160421/26.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPExcel：PHP导出Excel文件</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1041.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPMailer：PHP的邮件发送类库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1045.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code：生成二维码</a>\r\n<h3>Thinkphp</h3>\r\n<a href=\"https://www.gzpblog.com/20161230/561.html\" target=\"_blank\" rel=\"noopener noreferrer\">基于Thinkphp5的cURL封装类</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170330/850.html\" target=\"_blank\" rel=\"noopener noreferrer\">阿里云Oss+Thinkphp5，Web一站式可拓展包</a>\r\n\r\n&nbsp;\r\n<h2>Javascript</h2>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20170622/1053.html\" target=\"_blank\" rel=\"noopener noreferrer\">QRCode.js：基于JQuery的生成二维码JS库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170623/1059.html\" target=\"_blank\" rel=\"noopener noreferrer\">PACE：页面自动加载进度插件</a>\r\n\r\n&nbsp;\r\n<h2>前端综合</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170623/1062.html\" target=\"_blank\" rel=\"noopener noreferrer\">客户端实现WebSocket</a>\r\n\r\n&nbsp;\r\n<h2>工具</h2>\r\n<h3>版本控制</h3>\r\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\r\n<h3>代码管理</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\r\n<h3>测试相关</h3>\r\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170627/1081.html\" target=\"_blank\" rel=\"noopener noreferrer\">Wireshark基础用法：用Wireshark抓包分析网络通讯</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170629/1104.html\" target=\"_blank\" rel=\"noopener noreferrer\">用 Fiddler 进行HTTP请求调试</a>\r\n<h3>其它</h3>\r\n<a href=\"https://www.gzpblog.com/20170607/1000.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Gitbook编写书籍文档</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-revision-v1', '', '', '2017-06-29 03:02:23', '2017-06-28 19:02:23', '', 978, 'https://www.gzpblog.com/20170629/1107.html', 0, 'revision', '', 0),
(1109, 1, '2017-07-05 10:39:27', '2017-07-05 02:39:27', '', 'docker for windows1', '', 'inherit', 'open', 'closed', '', 'docker-for-windows1', '', '', '2017-07-05 10:43:52', '2017-07-05 02:43:52', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows1.png', 0, 'attachment', 'image/png', 0),
(1110, 1, '2017-07-05 10:39:28', '2017-07-05 02:39:28', '', 'docker for windows2', '', 'inherit', 'open', 'closed', '', 'docker-for-windows2', '', '', '2017-07-05 10:44:13', '2017-07-05 02:44:13', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows2.png', 0, 'attachment', 'image/png', 0),
(1111, 1, '2017-07-05 10:39:30', '2017-07-05 02:39:30', '', 'docker for windows3', '', 'inherit', 'open', 'closed', '', 'docker-for-windows3', '', '', '2017-07-05 10:44:20', '2017-07-05 02:44:20', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows3.png', 0, 'attachment', 'image/png', 0),
(1112, 1, '2017-07-05 10:39:31', '2017-07-05 02:39:31', '', 'docker for windows4', '', 'inherit', 'open', 'closed', '', 'docker-for-windows4', '', '', '2017-07-05 10:44:58', '2017-07-05 02:44:58', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows4.png', 0, 'attachment', 'image/png', 0),
(1113, 1, '2017-07-05 10:39:32', '2017-07-05 02:39:32', '', 'docker for windows5', '', 'inherit', 'open', 'closed', '', 'docker-for-windows5', '', '', '2017-07-05 10:45:59', '2017-07-05 02:45:59', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows5.png', 0, 'attachment', 'image/png', 0),
(1114, 1, '2017-07-05 10:39:33', '2017-07-05 02:39:33', '', 'docker for windows6', '', 'inherit', 'open', 'closed', '', 'docker-for-windows6', '', '', '2017-07-05 10:47:47', '2017-07-05 02:47:47', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows6.png', 0, 'attachment', 'image/png', 0),
(1115, 1, '2017-07-05 10:39:33', '2017-07-05 02:39:33', '', 'docker for windows7', '', 'inherit', 'open', 'closed', '', 'docker-for-windows7', '', '', '2017-07-05 10:47:28', '2017-07-05 02:47:28', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows7.png', 0, 'attachment', 'image/png', 0),
(1116, 1, '2017-07-05 10:39:34', '2017-07-05 02:39:34', '', 'docker for windows8', '', 'inherit', 'open', 'closed', '', 'docker-for-windows8', '', '', '2017-07-05 10:48:47', '2017-07-05 02:48:47', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows8.png', 0, 'attachment', 'image/png', 0),
(1117, 1, '2017-07-05 10:39:36', '2017-07-05 02:39:36', '', 'docker for windows9', '', 'inherit', 'open', 'closed', '', 'docker-for-windows9', '', '', '2017-07-05 10:48:36', '2017-07-05 02:48:36', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows9.png', 0, 'attachment', 'image/png', 0),
(1118, 1, '2017-07-05 10:39:37', '2017-07-05 02:39:37', '', 'docker for windows10', '', 'inherit', 'open', 'closed', '', 'docker-for-windows10', '', '', '2017-07-05 10:51:41', '2017-07-05 02:51:41', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows10.png', 0, 'attachment', 'image/png', 0),
(1119, 1, '2017-07-05 10:39:37', '2017-07-05 02:39:37', '', 'docker for windows11', '', 'inherit', 'open', 'closed', '', 'docker-for-windows11', '', '', '2017-07-05 10:51:26', '2017-07-05 02:51:26', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows11.png', 0, 'attachment', 'image/png', 0),
(1120, 1, '2017-07-05 10:39:38', '2017-07-05 02:39:38', '', 'docker for windows12', '', 'inherit', 'open', 'closed', '', 'docker-for-windows12', '', '', '2017-07-05 10:53:04', '2017-07-05 02:53:04', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows12.png', 0, 'attachment', 'image/png', 0),
(1121, 1, '2017-07-05 10:39:39', '2017-07-05 02:39:39', '', 'docker for windows13', '', 'inherit', 'open', 'closed', '', 'docker-for-windows13', '', '', '2017-07-05 10:53:47', '2017-07-05 02:53:47', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows13.png', 0, 'attachment', 'image/png', 0),
(1122, 1, '2017-07-05 10:39:40', '2017-07-05 02:39:40', '', 'docker for windows14', '', 'inherit', 'open', 'closed', '', 'docker-for-windows14', '', '', '2017-07-05 10:54:05', '2017-07-05 02:54:05', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows14.png', 0, 'attachment', 'image/png', 0),
(1123, 1, '2017-07-05 10:39:41', '2017-07-05 02:39:41', '', 'docker for windows15', '', 'inherit', 'open', 'closed', '', 'docker-for-windows15', '', '', '2017-07-05 10:54:50', '2017-07-05 02:54:50', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows15.png', 0, 'attachment', 'image/png', 0),
(1124, 1, '2017-07-05 10:39:41', '2017-07-05 02:39:41', '', 'docker for windows16', '', 'inherit', 'open', 'closed', '', 'docker-for-windows16', '', '', '2017-07-05 10:58:05', '2017-07-05 02:58:05', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows16.png', 0, 'attachment', 'image/png', 0),
(1125, 1, '2017-07-05 10:39:43', '2017-07-05 02:39:43', '', 'docker for windows17', '', 'inherit', 'open', 'closed', '', 'docker-for-windows17', '', '', '2017-07-05 10:58:52', '2017-07-05 02:58:52', '', 1126, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-for-windows17.png', 0, 'attachment', 'image/png', 0),
(1126, 1, '2017-07-05 11:02:41', '2017-07-05 03:02:41', '<blockquote>本文更新时间：2017-07-05（Docker发展得很快）</blockquote>\r\n<h2>1. 环境要求</h2>\r\n需要Windows 10 Pro系统；不是win10的windows系统不能用Docker for Windows，需要使用 Docker Toolbox。\r\n<h2>2. 安装</h2>\r\n<h3>2.1 下载</h3>\r\nDocker store下载地址：<a href=\"https://store.docker.com/editions/community/docker-ce-desktop-windows\" target=\"_blank\" rel=\"noopener noreferrer\">下载Docker CE for Windows</a>\r\n<h3>2.2 安装</h3>\r\n基本上，什么都不用干！勾个协议就搞定了。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows1.png\"><img class=\"size-medium wp-image-1109 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows1-300x233.png\" alt=\"\" width=\"300\" height=\"233\" /></a>\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows2.png\"><img class=\"size-medium wp-image-1110 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows2-300x233.png\" alt=\"\" width=\"300\" height=\"233\" /></a>\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows3.png\"><img class=\"size-medium wp-image-1111 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows3-300x236.png\" alt=\"\" width=\"300\" height=\"236\" /></a>\r\n<h3>2.3 启动</h3>\r\n第一次启动的时候，会提示Hyper-V没有开启，点击OK电脑会重启。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows4.png\"><img class=\" wp-image-1112 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows4.png\" alt=\"\" width=\"536\" height=\"194\" /></a>\r\n\r\n电脑重启后Docker就可以正常启用了，右下角小图标会有一个小鲸鱼在动，等小鲸鱼动完了停下来就启动成功了。\r\n<h2>3. 使用</h2>\r\n<h3>3.1 通过PowerShell</h3>\r\n接下来可以用CMD命令行窗口或者PowerShell来开始使用，推荐PowerShell。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows5.png\"><img class=\" wp-image-1113 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows5.png\" alt=\"\" width=\"275\" height=\"675\" /></a>打开PowerShell。\r\n<h3>3.2 查看版本</h3>\r\n查看docker的版本：docker --version\r\n\r\n查看docker compose的版本：docker-compose --version\r\n\r\n查看docker machine的版本：docker-machine --version\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows6.png\"><img class=\"size-full wp-image-1114 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows6.png\" alt=\"\" width=\"468\" height=\"201\" /></a>\r\n<h3>3.3 使用示例</h3>\r\n<ul>\r\n 	<li>启动Shell（PowerShell或其它Shell）</li>\r\n 	<li>运行docker命令, 例如 docker ps，docker version，和 docker info。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows7.png\"><img class=\"wp-image-1115 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows7.png\" alt=\"\" width=\"785\" height=\"283\" /></a>\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows8.png\"><img class=\"wp-image-1116 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows8.png\" alt=\"\" width=\"766\" height=\"600\" /></a>\r\n<ul>\r\n 	<li>尝试执行 docker run hello-world 来测试从 Docker Hub 上拉取一个镜像并运行该容器。这是一个hello world demo，运行成功说明docker工作正常。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows9.png\"><img class=\"size-full wp-image-1117 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows9.png\" alt=\"\" width=\"665\" height=\"431\" /></a>\r\n<ul>\r\n 	<li>尝试执行 docker run -it ubuntu bash 运行一个Ubuntu镜像。成功之后直接启动Ubuntu并进入到了系统中，exit可以退出返回到shell。<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows10.png\"><img class=\"size-full wp-image-1118 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows10.png\" alt=\"\" width=\"673\" height=\"184\" /></a></li>\r\n 	<li>执行命令下载并启动一个 Nginx容器；命名为 webserver。\r\n<div>docker run -d -p 80:80 --name webserver nginx</div></li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows11.png\"><img class=\"size-full wp-image-1119 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows11.png\" alt=\"\" width=\"649\" height=\"148\" /></a>\r\n<div style=\"padding-left: 30px;\">因为是默认的80端口，浏览器中直接打开localhost，可以看到：</div>\r\n<div style=\"padding-left: 30px;\"><a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows12.png\"><img class=\"wp-image-1120 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows12-1024x268.png\" alt=\"\" width=\"646\" height=\"169\" /></a></div>\r\n<div style=\"padding-left: 30px;\">说明Nginx服务已经开启了。</div>\r\n<div style=\"padding-left: 30px;\">这个时候如果再运行 docker ps 可以看到运行着一个Nginx容器；是的，docker可以允许只单独运行一个独立的容器，可以是Nginx，Apache，Ubuntu等等。</div>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows13.png\"><img class=\"wp-image-1121 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows13.png\" alt=\"\" width=\"842\" height=\"74\" /></a>\r\n<p style=\"padding-left: 30px;\">这个Nginx服务会一直在容器中运行，直到你停止或者删除容器。（Docker的核心概念镜像，容器，仓库；我们必须知道容器是镜像的运行实例）</p>\r\n<p style=\"padding-left: 30px;\">可以通过 docker stop webserver 停止Nginx（NAMES是webserver）；通过 docker start webserver 开启服务。</p>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows14.png\"><img class=\"size-full wp-image-1122 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows14.png\" alt=\"\" width=\"327\" height=\"68\" /></a>\r\n<ul>\r\n 	<li>停止并移除运行中的容器，可以通过命令： docker rm -f webserver\r\n该命令会删除这个容器，但是不会删除镜像。\r\n通过命令：docker images 可以查看当前本地的所有 Docker 镜像。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows15.png\"><img class=\"size-full wp-image-1123 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows15.png\" alt=\"\" width=\"715\" height=\"83\" /></a>\r\n<p style=\"padding-left: 30px;\">下次要使用这些镜像来创建容器的时候，就不需要从 Docker Hub 上去下载了，可以直接从本地拿来用。</p>\r\n<p style=\"padding-left: 30px;\">不再需要的可以通过命令删除：docker rmi [镜像id或者镜像名]</p>\r\n<p style=\"padding-left: 30px;\">例如：docker rmi nginx</p>\r\n\r\n<ul>\r\n 	<li>在进行以上步奏run 镜像的时候，如果本地没有镜像，会到远程下载。官方仓库在国内可能会连接失败，可以配置为阿里云的加速镜像地址。（看下面的配置）</li>\r\n</ul>\r\n<h2>4. 配置</h2>\r\n<h3>4.1 配置阿里云镜像</h3>\r\n阿里云Docker镜像的地址：<a href=\"https://cr.console.aliyun.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://cr.console.aliyun.com/</a>\r\n\r\n可以得到一个专属的地址：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows16.png\"><img class=\" wp-image-1124 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows16.png\" alt=\"\" width=\"644\" height=\"269\" /></a>\r\n<h4><strong>1）通过客户端直接配置</strong></h4>\r\n打开settings -&gt; Daemon，在Resgistry mirrors注册一个镜像地址，将专属地址写进去：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows17.png\"><img class=\"size-medium wp-image-1125 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows17-300x195.png\" alt=\"\" width=\"300\" height=\"195\" /></a>\r\n\r\n确定应用后，Docker会自动重启。\r\n<h4>2）创建 docker machine 方式配置</h4>\r\n创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址：\r\n\r\ndocker-machine create --engine-registry-mirror=https://kab482al.mirror.aliyuncs.com -d virtualbox default\r\n\r\n查看机器的环境配置，并配置到本地，并通过Docker客户端访问Docker服务：\r\n\r\ndocker-machine env default\r\neval \"$(docker-machine env default)\"\r\ndocker info', 'Win10安装使用Docker for Windows', '', 'publish', 'open', 'closed', '', 'win10%e5%ae%89%e8%a3%85%e4%bd%bf%e7%94%a8docker-for-windows', '', '', '2017-07-05 11:43:46', '2017-07-05 03:43:46', '', 0, 'https://www.gzpblog.com/?p=1126', 0, 'post', '', 0),
(1127, 1, '2017-07-05 11:02:41', '2017-07-05 03:02:41', '<h2>1. 环境要求</h2>\r\n需要Windows 10 Pro系统；不是win10的windows系统不能用Docker for Windows，需要使用 Docker Toolbox。\r\n<h2>2. 安装</h2>\r\n<h3>2.1 下载</h3>\r\nDocker store下载地址：<a href=\"https://store.docker.com/editions/community/docker-ce-desktop-windows\" target=\"_blank\" rel=\"noopener noreferrer\">下载Docker CE for Windows</a>\r\n<h3>2.2 安装</h3>\r\n基本上，什么都不用干！勾个协议就搞定了。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows1.png\"><img class=\"size-medium wp-image-1109 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows1-300x233.png\" alt=\"\" width=\"300\" height=\"233\" /></a>\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows2.png\"><img class=\"size-medium wp-image-1110 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows2-300x233.png\" alt=\"\" width=\"300\" height=\"233\" /></a>\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows3.png\"><img class=\"size-medium wp-image-1111 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows3-300x236.png\" alt=\"\" width=\"300\" height=\"236\" /></a>\r\n<h3>2.3 启动</h3>\r\n第一次启动的时候，会提示Hyper-V没有开启，点击OK电脑会重启。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows4.png\"><img class=\" wp-image-1112 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows4.png\" alt=\"\" width=\"536\" height=\"194\" /></a>\r\n\r\n电脑重启后Docker就可以正常启用了，右下角小图标会有一个小鲸鱼在动，等小鲸鱼动完了停下来就启动成功了。\r\n<h2>3. 使用</h2>\r\n<h3>3.1 通过PowerShell</h3>\r\n接下来可以用CMD命令行窗口或者PowerShell来开始使用，推荐PowerShell。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows5.png\"><img class=\" wp-image-1113 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows5.png\" alt=\"\" width=\"275\" height=\"675\" /></a>打开PowerShell。\r\n<h3>3.2 查看版本</h3>\r\n查看docker的版本：docker --version\r\n\r\n查看docker compose的版本：docker-compose --version\r\n\r\n查看docker machine的版本：docker-machine --version\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows6.png\"><img class=\"size-full wp-image-1114 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows6.png\" alt=\"\" width=\"468\" height=\"201\" /></a>\r\n<h3>3.3 使用示例</h3>\r\n<ul>\r\n 	<li>启动Shell（PowerShell或其它Shell）</li>\r\n 	<li>运行docker命令, 例如 docker ps，docker version，和 docker info。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows7.png\"><img class=\"wp-image-1115 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows7.png\" alt=\"\" width=\"785\" height=\"283\" /></a>\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows8.png\"><img class=\"wp-image-1116 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows8.png\" alt=\"\" width=\"766\" height=\"600\" /></a>\r\n<ul>\r\n 	<li>执行 docker run hello-world 来测试从 Docker Hub 上拉取一个镜像并运行该容器。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows9.png\"><img class=\"size-full wp-image-1117 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows9.png\" alt=\"\" width=\"665\" height=\"431\" /></a>\r\n<ul>\r\n 	<li>尝试执行 docker run -it ubuntu bash 运行一个Ubuntu镜像。exit可以退出。<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows10.png\"><img class=\"size-full wp-image-1118 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows10.png\" alt=\"\" width=\"673\" height=\"184\" /></a></li>\r\n 	<li>执行命令下载并启动一个 Nginx；命名为 webserver。\r\n<div>docker run -d -p 80:80 --name webserver nginx</div></li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows11.png\"><img class=\"size-full wp-image-1119 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows11.png\" alt=\"\" width=\"649\" height=\"148\" /></a>\r\n<div>因为是默认的80端口，浏览器中直接打开localhost，可以看到：</div>\r\n<div><a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows12.png\"><img class=\"wp-image-1120 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows12-1024x268.png\" alt=\"\" width=\"646\" height=\"169\" /></a></div>\r\n<div>说明Nginx服务已经开启了。</div>\r\n<div>这个时候如果再运行 docker ps 可以看到运行着一个Nginx容器；是的，docker可以允许只单独允许一个独立的容器，可以是Nginx，Apache，Ubuntu等等。</div>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows13.png\"><img class=\"wp-image-1121 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows13.png\" alt=\"\" width=\"842\" height=\"74\" /></a>\r\n\r\n这个Nginx服务会一直在容器中运行，直到你停止或者删除容器。\r\n\r\n可以通过 docker stop webserver 停止Nginx（NAMES是webserver）；通过 docker start webserver 开启服务。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows14.png\"><img class=\"size-full wp-image-1122 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows14.png\" alt=\"\" width=\"327\" height=\"68\" /></a>\r\n<ul>\r\n 	<li>停止并移除运行中的容器，可以通过命令： docker rm -f webserver\r\n该命令会删除这个容器，但是不会删除镜像。\r\n通过命令：docker images 可以查看当前本地的所有 Docker 镜像。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows15.png\"><img class=\"size-full wp-image-1123 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows15.png\" alt=\"\" width=\"715\" height=\"83\" /></a>\r\n\r\n下次要使用这些镜像来创建容器的时候，就不需要从 Docker Hub 上去下载了，可以直接从本地拿来用。\r\n\r\n不再需要的可以通过命令删除：docker rmi [镜像id或者镜像名]\r\n\r\n例如：docker rmi nginx\r\n<ul>\r\n 	<li>在进行以上步奏run 镜像的时候，如果本地没有镜像，会到远程下载。官方仓库在国内可能会连接失败，可以配置为阿里云的加速镜像地址。（看下面的配置）</li>\r\n</ul>\r\n<h2>4. 配置</h2>\r\n<h3>4.1 配置阿里云镜像</h3>\r\n阿里云Docker镜像的地址：<a href=\"https://cr.console.aliyun.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://cr.console.aliyun.com/</a>\r\n\r\n可以得到一个专属的地址：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows16.png\"><img class=\" wp-image-1124 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows16.png\" alt=\"\" width=\"644\" height=\"269\" /></a>\r\n<h4><strong>1）通过客户端直接配置</strong></h4>\r\n打开settings -&gt; Daemon，在Resgistry mirrors注册一个镜像地址，将专属地址写进去：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows17.png\"><img class=\"size-medium wp-image-1125 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows17-300x195.png\" alt=\"\" width=\"300\" height=\"195\" /></a>\r\n\r\n确定应用后，Docker会自动重启。\r\n<h4>2）创建 docker machine 方式配置</h4>\r\n创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址：\r\n\r\ndocker-machine create --engine-registry-mirror=https://kab482al.mirror.aliyuncs.com -d virtualbox default\r\n\r\n查看机器的环境配置，并配置到本地，并通过Docker客户端访问Docker服务：\r\n\r\ndocker-machine env default\r\neval \"$(docker-machine env default)\"\r\ndocker info\r\n\r\n&nbsp;', 'Win10安装使用Docker for Windows', '', 'inherit', 'closed', 'closed', '', '1126-revision-v1', '', '', '2017-07-05 11:02:41', '2017-07-05 03:02:41', '', 1126, 'https://www.gzpblog.com/20170705/1127.html', 0, 'revision', '', 0),
(1128, 1, '2017-07-05 11:28:48', '2017-07-05 03:28:48', '<blockquote>本文更新时间：2017-07-05（Docker发展得很快）</blockquote>\n<h2>1. 环境要求</h2>\n需要Windows 10 Pro系统；不是win10的windows系统不能用Docker for Windows，需要使用 Docker Toolbox。\n<h2>2. 安装</h2>\n<h3>2.1 下载</h3>\nDocker store下载地址：<a href=\"https://store.docker.com/editions/community/docker-ce-desktop-windows\" target=\"_blank\" rel=\"noopener noreferrer\">下载Docker CE for Windows</a>\n<h3>2.2 安装</h3>\n基本上，什么都不用干！勾个协议就搞定了。\n\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows1.png\"><img class=\"size-medium wp-image-1109 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows1-300x233.png\" alt=\"\" width=\"300\" height=\"233\" /></a>\n\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows2.png\"><img class=\"size-medium wp-image-1110 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows2-300x233.png\" alt=\"\" width=\"300\" height=\"233\" /></a>\n\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows3.png\"><img class=\"size-medium wp-image-1111 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows3-300x236.png\" alt=\"\" width=\"300\" height=\"236\" /></a>\n<h3>2.3 启动</h3>\n第一次启动的时候，会提示Hyper-V没有开启，点击OK电脑会重启。\n\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows4.png\"><img class=\" wp-image-1112 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows4.png\" alt=\"\" width=\"536\" height=\"194\" /></a>\n\n电脑重启后Docker就可以正常启用了，右下角小图标会有一个小鲸鱼在动，等小鲸鱼动完了停下来就启动成功了。\n<h2>3. 使用</h2>\n<h3>3.1 通过PowerShell</h3>\n接下来可以用CMD命令行窗口或者PowerShell来开始使用，推荐PowerShell。\n\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows5.png\"><img class=\" wp-image-1113 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows5.png\" alt=\"\" width=\"275\" height=\"675\" /></a>打开PowerShell。\n<h3>3.2 查看版本</h3>\n查看docker的版本：docker --version\n\n查看docker compose的版本：docker-compose --version\n\n查看docker machine的版本：docker-machine --version\n\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows6.png\"><img class=\"size-full wp-image-1114 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows6.png\" alt=\"\" width=\"468\" height=\"201\" /></a>\n<h3>3.3 使用示例</h3>\n<ul>\n 	<li>启动Shell（PowerShell或其它Shell）</li>\n 	<li>运行docker命令, 例如 docker ps，docker version，和 docker info。</li>\n</ul>\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows7.png\"><img class=\"wp-image-1115 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows7.png\" alt=\"\" width=\"785\" height=\"283\" /></a>\n\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows8.png\"><img class=\"wp-image-1116 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows8.png\" alt=\"\" width=\"766\" height=\"600\" /></a>\n<ul>\n 	<li>尝试执行 docker run hello-world 来测试从 Docker Hub 上拉取一个镜像并运行该容器。这是一个hello world demo，运行成功说明docker工作正常。</li>\n</ul>\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows9.png\"><img class=\"size-full wp-image-1117 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows9.png\" alt=\"\" width=\"665\" height=\"431\" /></a>\n<ul>\n 	<li>尝试执行 docker run -it ubuntu bash 运行一个Ubuntu镜像。成功之后直接启动Ubuntu并进入到了系统中，exit可以退出返回到shell。<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows10.png\"><img class=\"size-full wp-image-1118 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows10.png\" alt=\"\" width=\"673\" height=\"184\" /></a></li>\n 	<li>执行命令下载并启动一个 Nginx容器；命名为 webserver。\n<div>docker run -d -p 80:80 --name webserver nginx</div></li>\n</ul>\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows11.png\"><img class=\"size-full wp-image-1119 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows11.png\" alt=\"\" width=\"649\" height=\"148\" /></a>\n<div style=\"padding-left: 30px;\">因为是默认的80端口，浏览器中直接打开localhost，可以看到：</div>\n<div style=\"padding-left: 30px;\"><a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows12.png\"><img class=\"wp-image-1120 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows12-1024x268.png\" alt=\"\" width=\"646\" height=\"169\" /></a></div>\n<div style=\"padding-left: 30px;\">说明Nginx服务已经开启了。</div>\n<div style=\"padding-left: 30px;\">这个时候如果再运行 docker ps 可以看到运行着一个Nginx容器；是的，docker可以允许只单独运行一个独立的容器，可以是Nginx，Apache，Ubuntu等等。</div>\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows13.png\"><img class=\"wp-image-1121 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows13.png\" alt=\"\" width=\"842\" height=\"74\" /></a>\n<p style=\"padding-left: 30px;\">这个Nginx服务会一直在容器中运行，直到你停止或者删除容器。（Docker的核心概念镜像，容器，仓库；我们必须知道容器是镜像的运行shili）</p>\n<p style=\"padding-left: 30px;\">可以通过 docker stop webserver 停止Nginx（NAMES是webserver）；通过 docker start webserver 开启服务。</p>\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows14.png\"><img class=\"size-full wp-image-1122 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows14.png\" alt=\"\" width=\"327\" height=\"68\" /></a>\n<ul>\n 	<li>停止并移除运行中的容器，可以通过命令： docker rm -f webserver\n该命令会删除这个容器，但是不会删除镜像。\n通过命令：docker images 可以查看当前本地的所有 Docker 镜像。</li>\n</ul>\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows15.png\"><img class=\"size-full wp-image-1123 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows15.png\" alt=\"\" width=\"715\" height=\"83\" /></a>\n<p style=\"padding-left: 30px;\">下次要使用这些镜像来创建容器的时候，就不需要从 Docker Hub 上去下载了，可以直接从本地拿来用。</p>\n<p style=\"padding-left: 30px;\">不再需要的可以通过命令删除：docker rmi [镜像id或者镜像名]</p>\n<p style=\"padding-left: 30px;\">例如：docker rmi nginx</p>\n\n<ul>\n 	<li>在进行以上步奏run 镜像的时候，如果本地没有镜像，会到远程下载。官方仓库在国内可能会连接失败，可以配置为阿里云的加速镜像地址。（看下面的配置）</li>\n</ul>\n<h2>4. 配置</h2>\n<h3>4.1 配置阿里云镜像</h3>\n阿里云Docker镜像的地址：<a href=\"https://cr.console.aliyun.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://cr.console.aliyun.com/</a>\n\n可以得到一个专属的地址：\n\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows16.png\"><img class=\" wp-image-1124 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows16.png\" alt=\"\" width=\"644\" height=\"269\" /></a>\n<h4><strong>1）通过客户端直接配置</strong></h4>\n打开settings -&gt; Daemon，在Resgistry mirrors注册一个镜像地址，将专属地址写进去：\n\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows17.png\"><img class=\"size-medium wp-image-1125 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows17-300x195.png\" alt=\"\" width=\"300\" height=\"195\" /></a>\n\n确定应用后，Docker会自动重启。\n<h4>2）创建 docker machine 方式配置</h4>\n创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址：\n\ndocker-machine create --engine-registry-mirror=https://kab482al.mirror.aliyuncs.com -d virtualbox default\n\n查看机器的环境配置，并配置到本地，并通过Docker客户端访问Docker服务：\n\ndocker-machine env default\neval \"$(docker-machine env default)\"\ndocker info', 'Win10安装使用Docker for Windows', '', 'inherit', 'closed', 'closed', '', '1126-autosave-v1', '', '', '2017-07-05 11:28:48', '2017-07-05 03:28:48', '', 1126, 'https://www.gzpblog.com/20170705/1128.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1129, 1, '2017-07-05 11:30:04', '2017-07-05 03:30:04', '<blockquote>本文更新时间：2017-07-05（Docker发展得很快）</blockquote>\r\n<h2>1. 环境要求</h2>\r\n需要Windows 10 Pro系统；不是win10的windows系统不能用Docker for Windows，需要使用 Docker Toolbox。\r\n<h2>2. 安装</h2>\r\n<h3>2.1 下载</h3>\r\nDocker store下载地址：<a href=\"https://store.docker.com/editions/community/docker-ce-desktop-windows\" target=\"_blank\" rel=\"noopener noreferrer\">下载Docker CE for Windows</a>\r\n<h3>2.2 安装</h3>\r\n基本上，什么都不用干！勾个协议就搞定了。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows1.png\"><img class=\"size-medium wp-image-1109 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows1-300x233.png\" alt=\"\" width=\"300\" height=\"233\" /></a>\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows2.png\"><img class=\"size-medium wp-image-1110 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows2-300x233.png\" alt=\"\" width=\"300\" height=\"233\" /></a>\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows3.png\"><img class=\"size-medium wp-image-1111 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows3-300x236.png\" alt=\"\" width=\"300\" height=\"236\" /></a>\r\n<h3>2.3 启动</h3>\r\n第一次启动的时候，会提示Hyper-V没有开启，点击OK电脑会重启。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows4.png\"><img class=\" wp-image-1112 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows4.png\" alt=\"\" width=\"536\" height=\"194\" /></a>\r\n\r\n电脑重启后Docker就可以正常启用了，右下角小图标会有一个小鲸鱼在动，等小鲸鱼动完了停下来就启动成功了。\r\n<h2>3. 使用</h2>\r\n<h3>3.1 通过PowerShell</h3>\r\n接下来可以用CMD命令行窗口或者PowerShell来开始使用，推荐PowerShell。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows5.png\"><img class=\" wp-image-1113 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows5.png\" alt=\"\" width=\"275\" height=\"675\" /></a>打开PowerShell。\r\n<h3>3.2 查看版本</h3>\r\n查看docker的版本：docker --version\r\n\r\n查看docker compose的版本：docker-compose --version\r\n\r\n查看docker machine的版本：docker-machine --version\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows6.png\"><img class=\"size-full wp-image-1114 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows6.png\" alt=\"\" width=\"468\" height=\"201\" /></a>\r\n<h3>3.3 使用示例</h3>\r\n<ul>\r\n 	<li>启动Shell（PowerShell或其它Shell）</li>\r\n 	<li>运行docker命令, 例如 docker ps，docker version，和 docker info。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows7.png\"><img class=\"wp-image-1115 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows7.png\" alt=\"\" width=\"785\" height=\"283\" /></a>\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows8.png\"><img class=\"wp-image-1116 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows8.png\" alt=\"\" width=\"766\" height=\"600\" /></a>\r\n<ul>\r\n 	<li>尝试执行 docker run hello-world 来测试从 Docker Hub 上拉取一个镜像并运行该容器。这是一个hello world demo，运行成功说明docker工作正常。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows9.png\"><img class=\"size-full wp-image-1117 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows9.png\" alt=\"\" width=\"665\" height=\"431\" /></a>\r\n<ul>\r\n 	<li>尝试执行 docker run -it ubuntu bash 运行一个Ubuntu镜像。成功之后直接启动Ubuntu并进入到了系统中，exit可以退出返回到shell。<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows10.png\"><img class=\"size-full wp-image-1118 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows10.png\" alt=\"\" width=\"673\" height=\"184\" /></a></li>\r\n 	<li>执行命令下载并启动一个 Nginx容器；命名为 webserver。\r\n<div>docker run -d -p 80:80 --name webserver nginx</div></li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows11.png\"><img class=\"size-full wp-image-1119 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows11.png\" alt=\"\" width=\"649\" height=\"148\" /></a>\r\n<div style=\"padding-left: 30px;\">因为是默认的80端口，浏览器中直接打开localhost，可以看到：</div>\r\n<div style=\"padding-left: 30px;\"><a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows12.png\"><img class=\"wp-image-1120 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows12-1024x268.png\" alt=\"\" width=\"646\" height=\"169\" /></a></div>\r\n<div style=\"padding-left: 30px;\">说明Nginx服务已经开启了。</div>\r\n<div style=\"padding-left: 30px;\">这个时候如果再运行 docker ps 可以看到运行着一个Nginx容器；是的，docker可以允许只单独运行一个独立的容器，可以是Nginx，Apache，Ubuntu等等。</div>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows13.png\"><img class=\"wp-image-1121 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows13.png\" alt=\"\" width=\"842\" height=\"74\" /></a>\r\n<p style=\"padding-left: 30px;\">这个Nginx服务会一直在容器中运行，直到你停止或者删除容器。（Docker的核心概念镜像，容器，仓库；我们必须知道容器是镜像的运行实例）</p>\r\n<p style=\"padding-left: 30px;\">可以通过 docker stop webserver 停止Nginx（NAMES是webserver）；通过 docker start webserver 开启服务。</p>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows14.png\"><img class=\"size-full wp-image-1122 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows14.png\" alt=\"\" width=\"327\" height=\"68\" /></a>\r\n<ul>\r\n 	<li>停止并移除运行中的容器，可以通过命令： docker rm -f webserver\r\n该命令会删除这个容器，但是不会删除镜像。\r\n通过命令：docker images 可以查看当前本地的所有 Docker 镜像。</li>\r\n</ul>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows15.png\"><img class=\"size-full wp-image-1123 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows15.png\" alt=\"\" width=\"715\" height=\"83\" /></a>\r\n<p style=\"padding-left: 30px;\">下次要使用这些镜像来创建容器的时候，就不需要从 Docker Hub 上去下载了，可以直接从本地拿来用。</p>\r\n<p style=\"padding-left: 30px;\">不再需要的可以通过命令删除：docker rmi [镜像id或者镜像名]</p>\r\n<p style=\"padding-left: 30px;\">例如：docker rmi nginx</p>\r\n\r\n<ul>\r\n 	<li>在进行以上步奏run 镜像的时候，如果本地没有镜像，会到远程下载。官方仓库在国内可能会连接失败，可以配置为阿里云的加速镜像地址。（看下面的配置）</li>\r\n</ul>\r\n<h2>4. 配置</h2>\r\n<h3>4.1 配置阿里云镜像</h3>\r\n阿里云Docker镜像的地址：<a href=\"https://cr.console.aliyun.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://cr.console.aliyun.com/</a>\r\n\r\n可以得到一个专属的地址：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows16.png\"><img class=\" wp-image-1124 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows16.png\" alt=\"\" width=\"644\" height=\"269\" /></a>\r\n<h4><strong>1）通过客户端直接配置</strong></h4>\r\n打开settings -&gt; Daemon，在Resgistry mirrors注册一个镜像地址，将专属地址写进去：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows17.png\"><img class=\"size-medium wp-image-1125 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/docker-for-windows17-300x195.png\" alt=\"\" width=\"300\" height=\"195\" /></a>\r\n\r\n确定应用后，Docker会自动重启。\r\n<h4>2）创建 docker machine 方式配置</h4>\r\n创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址：\r\n\r\ndocker-machine create --engine-registry-mirror=https://kab482al.mirror.aliyuncs.com -d virtualbox default\r\n\r\n查看机器的环境配置，并配置到本地，并通过Docker客户端访问Docker服务：\r\n\r\ndocker-machine env default\r\neval \"$(docker-machine env default)\"\r\ndocker info', 'Win10安装使用Docker for Windows', '', 'inherit', 'closed', 'closed', '', '1126-revision-v1', '', '', '2017-07-05 11:30:04', '2017-07-05 03:30:04', '', 1126, 'https://www.gzpblog.com/20170705/1129.html', 0, 'revision', '', 0),
(1130, 1, '2017-07-05 11:43:18', '2017-07-05 03:43:18', '', 'docker-logo4', '', 'inherit', 'open', 'closed', '', 'docker-logo4', '', '', '2017-07-05 11:43:18', '2017-07-05 03:43:18', '', 0, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-logo4.png', 0, 'attachment', 'image/png', 0),
(1131, 1, '2017-07-05 11:43:19', '2017-07-05 03:43:19', '', 'docker-logo3', '', 'inherit', 'open', 'closed', '', 'docker-logo3', '', '', '2017-07-05 11:43:19', '2017-07-05 03:43:19', '', 0, 'https://www.gzpblog.com/wp-content/uploads/2017/07/docker-logo3.png', 0, 'attachment', 'image/png', 0),
(1132, 1, '2017-07-05 15:24:11', '2017-07-05 07:24:11', '<h2>服务器</h2>\r\n<h3>性能优化</h3>\r\n<a href=\"https://www.gzpblog.com/20170304/751.html\" target=\"_blank\" rel=\"noopener noreferrer\">服务器由阿里云虚拟主机转云服务器ECS实践（二）性能优化</a>\r\n<h3>疑难杂症</h3>\r\n<a href=\"https://www.gzpblog.com/20170311/788.html\" target=\"_blank\" rel=\"noopener noreferrer\">Apache间歇性500服务器错误探究</a>\r\n\r\n&nbsp;\r\n<h2>WebServer</h2>\r\n<h3>Nginx</h3>\r\n<a href=\"https://www.gzpblog.com/20161230/563.html\" target=\"_blank\" rel=\"noopener noreferrer\">windows下解决Nginx+php-cgi线程并发问题</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170209/619.html\" target=\"_blank\" rel=\"noopener noreferrer\">解决windows下php-cgi进程经常自动关闭</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20161215/542.html\" target=\"_blank\" rel=\"noopener noreferrer\">支持Pathinfo模式的Nginx配置</a>\r\n\r\n&nbsp;\r\n<h2>HTTP相关</h2>\r\n<h3>HTTPS</h3>\r\n<a href=\"https://www.gzpblog.com/20170305/785.html\" target=\"_blank\" rel=\"noopener noreferrer\">全站HTTP转HTTPS实践（WordPress+阿里云）</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170321/835.html\" target=\"_blank\" rel=\"noopener noreferrer\">HTTPS进阶优化（一）</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170316/804.html\" target=\"_blank\" rel=\"noopener noreferrer\">升级到HTTP/2，性能大提升</a>\r\n\r\n&nbsp;\r\n<h2>容器技术</h2>\r\n<h3>Docker</h3>\r\n<a href=\"https://www.gzpblog.com/20170612/1020.html\" target=\"_blank\" rel=\"noopener noreferrer\">认识Docker</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170705/1126.html\" target=\"_blank\" rel=\"noopener noreferrer\">Win10安装使用Docker for Windows</a>\r\n\r\n&nbsp;\r\n<h2>主机环境</h2>\r\n<h3>Linux</h3>\r\n<a href=\"https://www.gzpblog.com/20170303/731.html\" target=\"_blank\" rel=\"noopener noreferrer\">Centos6.8编译安装LNMP环境（Nginx+MySQL+PHP）</a>\r\n<h3>Windows</h3>\r\n<a href=\"https://www.gzpblog.com/20160118/6.html\" target=\"_blank\" rel=\"noopener noreferrer\">Windows下搭建PHP开发环境：Apache2.4+PHP5.6+MySQL5.6</a>\r\n\r\n&nbsp;', '建站技术', '', 'inherit', 'closed', 'closed', '', '976-revision-v1', '', '', '2017-07-05 15:24:11', '2017-07-05 07:24:11', '', 976, 'https://www.gzpblog.com/20170705/1132.html', 0, 'revision', '', 0),
(1133, 1, '2017-07-07 16:59:15', '2017-07-07 08:59:15', '<h2 id=\"日志接口规范\">一. 关于PSR-3日志接口规范</h2>\r\n本文制定了日志类库的通用接口规范。\r\n\r\n本规范的主要目的，是为了让日志类库以简单通用的方式，通过接收一个 Psr\\Log\\LoggerInterface 对象，来记录日志信息。 框架以及CMS内容管理系统如有需要，<strong>可以</strong> 对此接口进行扩展，但需遵循本规范， 这才能保证在使用第三方的类库文件时，日志接口仍能正常对接。\r\n\r\n本篇能愿动词解释：\r\n<ul>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\nPHP-FIG 官网 PSR-3 详解：<a href=\"http://www.php-fig.org/psr/psr-3/\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-3: Logger Interface</a>\r\n<h2>二. PSR-3内容</h2>\r\n<h3>1. 规范说明</h3>\r\n<h4>1.1 基本规范</h4>\r\n<ul>\r\n 	<li>LoggerInterface 接口对外定义了八个方法，分别用来记录 <a href=\"https://tools.ietf.org/html/rfc5424\" target=\"_blank\" rel=\"noopener noreferrer\">RFC 5424</a> 中定义的八个等级的日志：debug、 info、 notice、 warning、 error、 critical、 alert 以及 emergency 。</li>\r\n 	<li>第九个方法 —— log，其第一个参数为记录的等级。可使用一个预先定义的等级常量作为参数来调用此方法，<strong>必须</strong> 与直接调用以上八个方法具有相同的效果。如果传入的等级常量参数没有预先定义，则 <strong>必须</strong> 抛出 Psr\\Log\\InvalidArgumentException 类型的异常。在不确定的情况下，使用者 不该 使用未支持的等级常量来调用此方法。</li>\r\n</ul>\r\n<h4>1.2 记录信息</h4>\r\n<ul>\r\n 	<li>以上每个方法都接受一个字符串类型或者是有 __toString() 方法的对象作为记录信息参数，这样，实现者就能把它当成字符串来处理，否则实现者 <strong>必须</strong> 自己把它转换成字符串。</li>\r\n 	<li>记录信息参数 <strong>可以</strong> 携带占位符，实现者 <strong>可以</strong> 根据上下文将其它替换成相应的值。\r\n其中占位符 <strong>必须</strong> 与上下文数组中的键名保持一致。\r\n占位符的名称 <strong>必须</strong> 由一个左花括号 { 以及一个右括号 } 包含。但花括号与名称之间 <strong>一定不可</strong>有空格符。\r\n占位符的名称 <strong>应该</strong> 只由 A-Z、a-z、0-9、下划线 _、以及英文的句号 . 组成，其它字符作为将来占位符规范的保留。\r\n实现者 <strong>可以</strong> 通过对占位符采用不同的转义和转换策略，来生成最终的日志。 而使用者在不知道上下文的前提下，<strong>不该</strong> 提前转义占位符。</li>\r\n</ul>\r\n<p style=\"padding-left: 30px;\">以下是一个占位符使用的例子：</p>\r\n\r\n\r\n[php]\r\n/**\r\n* 用上下文信息替换记录信息中的占位符\r\n*/\r\nfunction interpolate($message, array $context = array())\r\n{\r\n  // 构建一个花括号包含的键名的替换数组\r\n  $replace = array();\r\n  foreach ($context as $key =&gt; $val) {\r\n      $replace[\'{\' . $key . \'}\'] = $val;\r\n  }\r\n\r\n  // 替换记录信息中的占位符，最后返回修改后的记录信息。\r\n  return strtr($message, $replace);\r\n}\r\n\r\n// 含有带花括号占位符的记录信息。\r\n$message = &quot;User {username} created&quot;;\r\n\r\n// 带有替换信息的上下文数组，键名为占位符名称，键值为替换值。\r\n$context = array(\'username\' =&gt; \'bolivar\');\r\n\r\n// 输出 &quot;Username bolivar created&quot;\r\necho interpolate($message, $context);\r\n[/php]\r\n\r\n<h4>1.3 上下文</h4>\r\n<ul>\r\n 	<li>每个记录函数都接受一个上下文数组参数，用来装载字符串类型无法表示的信息。它 可以 装载任何信息，所以实现者 必须 确保能正确处理其装载的信息，对于其装载的数据， <strong>一定不可</strong> 抛出异常，或产生PHP出错、警告或提醒信息（error、warning、notice）。</li>\r\n 	<li>如需通过上下文参数传入了一个 Exception 对象，必须 以 exception 作为键名。 记录异常信息是很普遍的，所以如果它能够在记录类库的底层实现，就能够让实现者从异常信息中抽丝剥茧。 当然，实现者在使用它时，必须 确保键名为 exception 的键值是否真的是一个 Exception，毕竟它 <strong>可以</strong> 装载任何信息。</li>\r\n</ul>\r\n<h4>1.4 助手类和接口</h4>\r\n<ul>\r\n 	<li>Psr\\Log\\AbstractLogger 类使得只需继承它和实现其中的 log 方法，就能够很轻易地实现 LoggerInterface 接口，而另外八个方法就能够把记录信息和上下文信息传给它。</li>\r\n 	<li>同样地，使用 Psr\\Log\\LoggerTrait 也只需实现其中的 log 方法。不过，需要特别注意的是，在 traits 可复用代码块还不能实现接口前，还需要 implement LoggerInterface。</li>\r\n 	<li>在没有可用的日志记录器时，Psr\\Log\\NullLogger 接口 <strong>可以</strong> 为使用者提供一个备用的日志「黑洞」。不过，当上下文的构建非常消耗资源时，带条件检查的日志记录或许是更好的办法。</li>\r\n 	<li>Psr\\Log\\LoggerAwareInterface 接口仅包括一个 setLogger(LoggerInterface $logger) 方法，框架可以使用它实现自动连接任意的日志记录实例。</li>\r\n 	<li>Psr\\Log\\LoggerAwareTrait trait可复用代码块可以在任何的类里面使用，只需通过它提供的 $this-&gt;logger，就可以轻松地实现等同的接口。</li>\r\n 	<li>Psr\\Log\\LogLevel 类装载了八个记录等级常量。</li>\r\n</ul>\r\n<h3>2. 包</h3>\r\n上述的接口、类和相关的异常类，以及一系列的实现检测文件，都包含在 psr/log 文件包中。\r\n<h3>3. Psr\\Log\\LoggerInterface</h3>\r\n\r\n[php]\r\n&lt;?php\r\n\r\nnamespace Psr\\Log;\r\n\r\n/**\r\n * 日志记录实例\r\n *\r\n * 日志信息变量 —— message，**必须** 是一个字符串或是实现了 __toString() 方法的对象。\r\n *\r\n * 日志信息变量中 **可以** 包含格式如 “{foo}” (代表 foo) 的占位符，\r\n * 它将会由上下文数组中键名为「foo」的键值替代。\r\n *\r\n * 上下文数组可以携带任意的数据，唯一的限制是，当它携带的是一个 exception 对象时，它的键名 **必须** 是 &quot;exception&quot;。\r\n *\r\n * 详情可参阅： https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-3-logger-interface-cn.md\r\n */\r\ninterface LoggerInterface\r\n{\r\n    /**\r\n     * 系统不可用\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function emergency($message, array $context = array());\r\n\r\n    /**\r\n     *  **必须** 立刻采取行动\r\n     *\r\n     * 例如：在整个网站都垮掉了、数据库不可用了或者其他的情况下， **应该** 发送一条警报短信把你叫醒。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function alert($message, array $context = array());\r\n\r\n    /**\r\n     * 紧急情况\r\n     *\r\n     * 例如：程序组件不可用或者出现非预期的异常。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function critical($message, array $context = array());\r\n\r\n    /**\r\n     * 运行时出现的错误，不需要立刻采取行动，但必须记录下来以备检测。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function error($message, array $context = array());\r\n\r\n    /**\r\n     * 出现非错误性的异常。\r\n     *\r\n     * 例如：使用了被弃用的API、错误地使用了API或者非预想的不必要错误。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function warning($message, array $context = array());\r\n\r\n    /**\r\n     * 一般性重要的事件。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function notice($message, array $context = array());\r\n\r\n    /**\r\n     * 重要事件\r\n     *\r\n     * 例如：用户登录和SQL记录。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function info($message, array $context = array());\r\n\r\n    /**\r\n     * debug 详情\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function debug($message, array $context = array());\r\n\r\n    /**\r\n     * 任意等级的日志记录\r\n     *\r\n     * @param mixed $level\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function log($level, $message, array $context = array());\r\n}\r\n[/php]\r\n\r\n<h3>4. Psr\\Log\\LoggerAwareInterface</h3>\r\n\r\n[php]\r\n&lt;?php\r\n\r\nnamespace Psr\\Log;\r\n\r\n/**\r\n * logger-aware 定义实例\r\n */\r\ninterface LoggerAwareInterface\r\n{\r\n    /**\r\n     * 设置一个日志记录实例\r\n     *\r\n     * @param LoggerInterface $logger\r\n     * @return null\r\n     */\r\n    public function setLogger(LoggerInterface $logger);\r\n}\r\n[/php]\r\n\r\n<h3>5. Psr\\Log\\LogLevel</h3>\r\n\r\n[php]\r\n&lt;?php\r\n\r\nnamespace Psr\\Log;\r\n\r\n/**\r\n * 日志等级常量定义\r\n */\r\nclass LogLevel\r\n{\r\n    const EMERGENCY = \'emergency\';\r\n    const ALERT     = \'alert\';\r\n    const CRITICAL  = \'critical\';\r\n    const ERROR     = \'error\';\r\n    const WARNING   = \'warning\';\r\n    const NOTICE    = \'notice\';\r\n    const INFO      = \'info\';\r\n    const DEBUG     = \'debug\';\r\n}\r\n[/php]\r\n\r\n&nbsp;', '「PSR 规范」PSR-3 日志接口规范', '', 'publish', 'open', 'closed', '', '%e3%80%8cpsr-%e8%a7%84%e8%8c%83%e3%80%8dpsr-3-%e6%97%a5%e5%bf%97%e6%8e%a5%e5%8f%a3%e8%a7%84%e8%8c%83', '', '', '2017-07-07 17:04:00', '2017-07-07 09:04:00', '', 0, 'https://www.gzpblog.com/?p=1133', 0, 'post', '', 0),
(1134, 1, '2017-07-07 16:59:15', '2017-07-07 08:59:15', '<h2 id=\"日志接口规范\">一. 关于PSR-3日志接口规范</h2>\r\n本文制定了日志类库的通用接口规范。\r\n\r\n本规范的主要目的，是为了让日志类库以简单通用的方式，通过接收一个 Psr\\Log\\LoggerInterface 对象，来记录日志信息。 框架以及CMS内容管理系统如有需要，<strong>可以</strong> 对此接口进行扩展，但需遵循本规范， 这才能保证在使用第三方的类库文件时，日志接口仍能正常对接。\r\n\r\n本篇能愿动词解释：\r\n<ul>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\nPHP-FIG 官网 PSR-3 详解：<a href=\"http://www.php-fig.org/psr/psr-3/\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-3: Logger Interface</a>\r\n<h2>二. PSR-3内容</h2>\r\n<h3>1. 规范说明</h3>\r\n<h4>1.1 基本规范</h4>\r\n<ul>\r\n 	<li>LoggerInterface 接口对外定义了八个方法，分别用来记录 <a href=\"https://tools.ietf.org/html/rfc5424\" target=\"_blank\" rel=\"noopener noreferrer\">RFC 5424</a> 中定义的八个等级的日志：debug、 info、 notice、 warning、 error、 critical、 alert 以及 emergency 。</li>\r\n 	<li>第九个方法 —— log，其第一个参数为记录的等级。可使用一个预先定义的等级常量作为参数来调用此方法，<strong>必须</strong> 与直接调用以上八个方法具有相同的效果。如果传入的等级常量参数没有预先定义，则 <strong>必须</strong> 抛出 Psr\\Log\\InvalidArgumentException 类型的异常。在不确定的情况下，使用者 不该 使用未支持的等级常量来调用此方法。</li>\r\n</ul>\r\n<h4>1.2 记录信息</h4>\r\n<ul>\r\n 	<li>以上每个方法都接受一个字符串类型或者是有 __toString() 方法的对象作为记录信息参数，这样，实现者就能把它当成字符串来处理，否则实现者 <strong>必须</strong> 自己把它转换成字符串。</li>\r\n 	<li>记录信息参数 <strong>可以</strong> 携带占位符，实现者 <strong>可以</strong> 根据上下文将其它替换成相应的值。\r\n其中占位符 <strong>必须</strong> 与上下文数组中的键名保持一致。\r\n占位符的名称 <strong>必须</strong> 由一个左花括号 { 以及一个右括号 } 包含。但花括号与名称之间 <strong>一定不可</strong>有空格符。\r\n占位符的名称 <strong>应该</strong> 只由 A-Z、a-z、0-9、下划线 _、以及英文的句号 . 组成，其它字符作为将来占位符规范的保留。\r\n实现者 <strong>可以</strong> 通过对占位符采用不同的转义和转换策略，来生成最终的日志。 而使用者在不知道上下文的前提下，<strong>不该</strong> 提前转义占位符。</li>\r\n</ul>\r\n<p style=\"padding-left: 30px;\">以下是一个占位符使用的例子：</p>\r\n<p style=\"padding-left: 30px;\">\r\n[php]&lt;/p&gt;\r\n&lt;p style=&quot;padding-left: 30px;&quot;&gt;/**\r\n* 用上下文信息替换记录信息中的占位符\r\n*/\r\nfunction interpolate($message, array $context = array())\r\n{\r\n// 构建一个花括号包含的键名的替换数组\r\n$replace = array();\r\nforeach ($context as $key =&gt; $val) {\r\n$replace[\'{\' . $key . \'}\'] = $val;\r\n}\r\n\r\n// 替换记录信息中的占位符，最后返回修改后的记录信息。\r\nreturn strtr($message, $replace);\r\n}\r\n\r\n// 含有带花括号占位符的记录信息。\r\n$message = &quot;User {username} created&quot;;\r\n\r\n// 带有替换信息的上下文数组，键名为占位符名称，键值为替换值。\r\n$context = array(\'username\' =&gt; \'bolivar\');\r\n\r\n// 输出 &quot;Username bolivar created&quot;\r\necho interpolate($message, $context);&lt;/p&gt;\r\n&lt;p style=&quot;padding-left: 30px;&quot;&gt;[/php]\r\n</p>\r\n\r\n<h4>1.3 上下文</h4>\r\n<ul>\r\n 	<li>每个记录函数都接受一个上下文数组参数，用来装载字符串类型无法表示的信息。它 可以 装载任何信息，所以实现者 必须 确保能正确处理其装载的信息，对于其装载的数据， <strong>一定不可</strong> 抛出异常，或产生PHP出错、警告或提醒信息（error、warning、notice）。</li>\r\n 	<li>如需通过上下文参数传入了一个 Exception 对象，必须 以 exception 作为键名。 记录异常信息是很普遍的，所以如果它能够在记录类库的底层实现，就能够让实现者从异常信息中抽丝剥茧。 当然，实现者在使用它时，必须 确保键名为 exception 的键值是否真的是一个 Exception，毕竟它 <strong>可以</strong> 装载任何信息。</li>\r\n</ul>\r\n<h4>1.4 助手类和接口</h4>\r\n<ul>\r\n 	<li>Psr\\Log\\AbstractLogger 类使得只需继承它和实现其中的 log 方法，就能够很轻易地实现 LoggerInterface 接口，而另外八个方法就能够把记录信息和上下文信息传给它。</li>\r\n 	<li>同样地，使用 Psr\\Log\\LoggerTrait 也只需实现其中的 log 方法。不过，需要特别注意的是，在 traits 可复用代码块还不能实现接口前，还需要 implement LoggerInterface。</li>\r\n 	<li>在没有可用的日志记录器时，Psr\\Log\\NullLogger 接口 <strong>可以</strong> 为使用者提供一个备用的日志「黑洞」。不过，当上下文的构建非常消耗资源时，带条件检查的日志记录或许是更好的办法。</li>\r\n 	<li>Psr\\Log\\LoggerAwareInterface 接口仅包括一个 setLogger(LoggerInterface $logger) 方法，框架可以使用它实现自动连接任意的日志记录实例。</li>\r\n 	<li>Psr\\Log\\LoggerAwareTrait trait可复用代码块可以在任何的类里面使用，只需通过它提供的 $this-&gt;logger，就可以轻松地实现等同的接口。</li>\r\n 	<li>Psr\\Log\\LogLevel 类装载了八个记录等级常量。</li>\r\n</ul>\r\n<h3>2. 包</h3>\r\n上述的接口、类和相关的异常类，以及一系列的实现检测文件，都包含在 psr/log 文件包中。\r\n<h3>3. Psr\\Log\\LoggerInterface</h3>\r\n\r\n[php]\r\n\r\n&lt;?php\r\n\r\nnamespace Psr\\Log;\r\n\r\n/**\r\n* 日志记录实例\r\n*\r\n* 日志信息变量 —— message，**必须** 是一个字符串或是实现了 __toString() 方法的对象。\r\n*\r\n* 日志信息变量中 **可以** 包含格式如 “{foo}” (代表 foo) 的占位符，\r\n* 它将会由上下文数组中键名为「foo」的键值替代。\r\n*\r\n* 上下文数组可以携带任意的数据，唯一的限制是，当它携带的是一个 exception 对象时，它的键名 **必须** 是 &quot;exception&quot;。\r\n*\r\n* 详情可参阅： https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-3-logger-interface-cn.md\r\n*/\r\ninterface LoggerInterface\r\n{\r\n/**\r\n* 系统不可用\r\n*\r\n* @param string $message\r\n* @param array $context\r\n* @return null\r\n*/\r\npublic function emergency($message, array $context = array());\r\n\r\n/**\r\n*  **必须** 立刻采取行动\r\n*\r\n* 例如：在整个网站都垮掉了、数据库不可用了或者其他的情况下， **应该** 发送一条警报短信把你叫醒。\r\n*\r\n* @param string $message\r\n* @param array $context\r\n* @return null\r\n*/\r\npublic function alert($message, array $context = array());\r\n\r\n/**\r\n* 紧急情况\r\n*\r\n* 例如：程序组件不可用或者出现非预期的异常。\r\n*\r\n* @param string $message\r\n* @param array $context\r\n* @return null\r\n*/\r\npublic function critical($message, array $context = array());\r\n\r\n/**\r\n* 运行时出现的错误，不需要立刻采取行动，但必须记录下来以备检测。\r\n*\r\n* @param string $message\r\n* @param array $context\r\n* @return null\r\n*/\r\npublic function error($message, array $context = array());\r\n\r\n/**\r\n* 出现非错误性的异常。\r\n*\r\n* 例如：使用了被弃用的API、错误地使用了API或者非预想的不必要错误。\r\n*\r\n* @param string $message\r\n* @param array $context\r\n* @return null\r\n*/\r\npublic function warning($message, array $context = array());\r\n\r\n/**\r\n* 一般性重要的事件。\r\n*\r\n* @param string $message\r\n* @param array $context\r\n* @return null\r\n*/\r\npublic function notice($message, array $context = array());\r\n\r\n/**\r\n* 重要事件\r\n*\r\n* 例如：用户登录和SQL记录。\r\n*\r\n* @param string $message\r\n* @param array $context\r\n* @return null\r\n*/\r\npublic function info($message, array $context = array());\r\n\r\n/**\r\n* debug 详情\r\n*\r\n* @param string $message\r\n* @param array $context\r\n* @return null\r\n*/\r\npublic function debug($message, array $context = array());\r\n\r\n/**\r\n* 任意等级的日志记录\r\n*\r\n* @param mixed $level\r\n* @param string $message\r\n* @param array $context\r\n* @return null\r\n*/\r\npublic function log($level, $message, array $context = array());\r\n}\r\n\r\n[/php]\r\n\r\n<h3>4. Psr\\Log\\LoggerAwareInterface</h3>\r\n\r\n[php]\r\n\r\n&lt;?php\r\n\r\nnamespace Psr\\Log;\r\n\r\n/**\r\n* logger-aware 定义实例\r\n*/\r\ninterface LoggerAwareInterface\r\n{\r\n/**\r\n* 设置一个日志记录实例\r\n*\r\n* @param LoggerInterface $logger\r\n* @return null\r\n*/\r\npublic function setLogger(LoggerInterface $logger);\r\n}\r\n\r\n[/php]\r\n\r\n<h3>5. Psr\\Log\\LogLevel</h3>\r\n\r\n[php]\r\n\r\n&lt;?php\r\n\r\nnamespace Psr\\Log;\r\n\r\n/**\r\n* 日志等级常量定义\r\n*/\r\nclass LogLevel\r\n{\r\nconst EMERGENCY = \'emergency\';\r\nconst ALERT     = \'alert\';\r\nconst CRITICAL  = \'critical\';\r\nconst ERROR     = \'error\';\r\nconst WARNING   = \'warning\';\r\nconst NOTICE    = \'notice\';\r\nconst INFO      = \'info\';\r\nconst DEBUG     = \'debug\';\r\n}\r\n\r\n[/php]\r\n\r\n\r\n&nbsp;', '「PSR 规范」PSR-3 日志接口规范', '', 'inherit', 'closed', 'closed', '', '1133-revision-v1', '', '', '2017-07-07 16:59:15', '2017-07-07 08:59:15', '', 1133, 'https://www.gzpblog.com/20170707/1134.html', 0, 'revision', '', 0),
(1135, 1, '2017-07-07 17:01:20', '2017-07-07 09:01:20', '<h2 id=\"日志接口规范\">一. 关于PSR-3日志接口规范</h2>\n本文制定了日志类库的通用接口规范。\n\n本规范的主要目的，是为了让日志类库以简单通用的方式，通过接收一个 Psr\\Log\\LoggerInterface 对象，来记录日志信息。 框架以及CMS内容管理系统如有需要，<strong>可以</strong> 对此接口进行扩展，但需遵循本规范， 这才能保证在使用第三方的类库文件时，日志接口仍能正常对接。\n\n本篇能愿动词解释：\n<ul>\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\n</ul>\nPHP-FIG 官网 PSR-3 详解：<a href=\"http://www.php-fig.org/psr/psr-3/\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-3: Logger Interface</a>\n<h2>二. PSR-3内容</h2>\n<h3>1. 规范说明</h3>\n<h4>1.1 基本规范</h4>\n<ul>\n 	<li>LoggerInterface 接口对外定义了八个方法，分别用来记录 <a href=\"https://tools.ietf.org/html/rfc5424\" target=\"_blank\" rel=\"noopener noreferrer\">RFC 5424</a> 中定义的八个等级的日志：debug、 info、 notice、 warning、 error、 critical、 alert 以及 emergency 。</li>\n 	<li>第九个方法 —— log，其第一个参数为记录的等级。可使用一个预先定义的等级常量作为参数来调用此方法，<strong>必须</strong> 与直接调用以上八个方法具有相同的效果。如果传入的等级常量参数没有预先定义，则 <strong>必须</strong> 抛出 Psr\\Log\\InvalidArgumentException 类型的异常。在不确定的情况下，使用者 不该 使用未支持的等级常量来调用此方法。</li>\n</ul>\n<h4>1.2 记录信息</h4>\n<ul>\n 	<li>以上每个方法都接受一个字符串类型或者是有 __toString() 方法的对象作为记录信息参数，这样，实现者就能把它当成字符串来处理，否则实现者 <strong>必须</strong> 自己把它转换成字符串。</li>\n 	<li>记录信息参数 <strong>可以</strong> 携带占位符，实现者 <strong>可以</strong> 根据上下文将其它替换成相应的值。\n其中占位符 <strong>必须</strong> 与上下文数组中的键名保持一致。\n占位符的名称 <strong>必须</strong> 由一个左花括号 { 以及一个右括号 } 包含。但花括号与名称之间 <strong>一定不可</strong>有空格符。\n占位符的名称 <strong>应该</strong> 只由 A-Z、a-z、0-9、下划线 _、以及英文的句号 . 组成，其它字符作为将来占位符规范的保留。\n实现者 <strong>可以</strong> 通过对占位符采用不同的转义和转换策略，来生成最终的日志。 而使用者在不知道上下文的前提下，<strong>不该</strong> 提前转义占位符。</li>\n</ul>\n<p style=\"padding-left: 30px;\">以下是一个占位符使用的例子：</p>\n\n\n[php]&lt;/p&gt;\n&lt;p style=&quot;padding-left: 30px;&quot;&gt;/**\n* 用上下文信息替换记录信息中的占位符\n*/\nfunction interpolate($message, array $context = array())\n{\n// 构建一个花括号包含的键名的替换数组\n$replace = array();\nforeach ($context as $key =&gt; $val) {\n$replace[\'{\' . $key . \'}\'] = $val;\n}\n\n// 替换记录信息中的占位符，最后返回修改后的记录信息。\nreturn strtr($message, $replace);\n}\n\n// 含有带花括号占位符的记录信息。\n$message = &quot;User {username} created&quot;;\n\n// 带有替换信息的上下文数组，键名为占位符名称，键值为替换值。\n$context = array(\'username\' =&gt; \'bolivar\');\n\n// 输出 &quot;Username bolivar created&quot;\necho interpolate($message, $context);&lt;/p&gt;\n&lt;p style=&quot;padding-left: 30px;&quot;&gt;[/php]\n\n<h4>1.3 上下文</h4>\n<ul>\n 	<li>每个记录函数都接受一个上下文数组参数，用来装载字符串类型无法表示的信息。它 可以 装载任何信息，所以实现者 必须 确保能正确处理其装载的信息，对于其装载的数据， <strong>一定不可</strong> 抛出异常，或产生PHP出错、警告或提醒信息（error、warning、notice）。</li>\n 	<li>如需通过上下文参数传入了一个 Exception 对象，必须 以 exception 作为键名。 记录异常信息是很普遍的，所以如果它能够在记录类库的底层实现，就能够让实现者从异常信息中抽丝剥茧。 当然，实现者在使用它时，必须 确保键名为 exception 的键值是否真的是一个 Exception，毕竟它 <strong>可以</strong> 装载任何信息。</li>\n</ul>\n<h4>1.4 助手类和接口</h4>\n<ul>\n 	<li>Psr\\Log\\AbstractLogger 类使得只需继承它和实现其中的 log 方法，就能够很轻易地实现 LoggerInterface 接口，而另外八个方法就能够把记录信息和上下文信息传给它。</li>\n 	<li>同样地，使用 Psr\\Log\\LoggerTrait 也只需实现其中的 log 方法。不过，需要特别注意的是，在 traits 可复用代码块还不能实现接口前，还需要 implement LoggerInterface。</li>\n 	<li>在没有可用的日志记录器时，Psr\\Log\\NullLogger 接口 <strong>可以</strong> 为使用者提供一个备用的日志「黑洞」。不过，当上下文的构建非常消耗资源时，带条件检查的日志记录或许是更好的办法。</li>\n 	<li>Psr\\Log\\LoggerAwareInterface 接口仅包括一个 setLogger(LoggerInterface $logger) 方法，框架可以使用它实现自动连接任意的日志记录实例。</li>\n 	<li>Psr\\Log\\LoggerAwareTrait trait可复用代码块可以在任何的类里面使用，只需通过它提供的 $this-&gt;logger，就可以轻松地实现等同的接口。</li>\n 	<li>Psr\\Log\\LogLevel 类装载了八个记录等级常量。</li>\n</ul>\n<h3>2. 包</h3>\n上述的接口、类和相关的异常类，以及一系列的实现检测文件，都包含在 psr/log 文件包中。\n<h3>3. Psr\\Log\\LoggerInterface</h3>\n\n[php]\n\n&lt;?php\n\nnamespace Psr\\Log;\n\n/**\n* 日志记录实例\n*\n* 日志信息变量 —— message，**必须** 是一个字符串或是实现了 __toString() 方法的对象。\n*\n* 日志信息变量中 **可以** 包含格式如 “{foo}” (代表 foo) 的占位符，\n* 它将会由上下文数组中键名为「foo」的键值替代。\n*\n* 上下文数组可以携带任意的数据，唯一的限制是，当它携带的是一个 exception 对象时，它的键名 **必须** 是 &quot;exception&quot;。\n*\n* 详情可参阅： https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-3-logger-interface-cn.md\n*/\ninterface LoggerInterface\n{\n/**\n* 系统不可用\n*\n* @param string $message\n* @param array $context\n* @return null\n*/\npublic function emergency($message, array $context = array());\n\n/**\n*  **必须** 立刻采取行动\n*\n* 例如：在整个网站都垮掉了、数据库不可用了或者其他的情况下， **应该** 发送一条警报短信把你叫醒。\n*\n* @param string $message\n* @param array $context\n* @return null\n*/\npublic function alert($message, array $context = array());\n\n/**\n* 紧急情况\n*\n* 例如：程序组件不可用或者出现非预期的异常。\n*\n* @param string $message\n* @param array $context\n* @return null\n*/\npublic function critical($message, array $context = array());\n\n/**\n* 运行时出现的错误，不需要立刻采取行动，但必须记录下来以备检测。\n*\n* @param string $message\n* @param array $context\n* @return null\n*/\npublic function error($message, array $context = array());\n\n/**\n* 出现非错误性的异常。\n*\n* 例如：使用了被弃用的API、错误地使用了API或者非预想的不必要错误。\n*\n* @param string $message\n* @param array $context\n* @return null\n*/\npublic function warning($message, array $context = array());\n\n/**\n* 一般性重要的事件。\n*\n* @param string $message\n* @param array $context\n* @return null\n*/\npublic function notice($message, array $context = array());\n\n/**\n* 重要事件\n*\n* 例如：用户登录和SQL记录。\n*\n* @param string $message\n* @param array $context\n* @return null\n*/\npublic function info($message, array $context = array());\n\n/**\n* debug 详情\n*\n* @param string $message\n* @param array $context\n* @return null\n*/\npublic function debug($message, array $context = array());\n\n/**\n* 任意等级的日志记录\n*\n* @param mixed $level\n* @param string $message\n* @param array $context\n* @return null\n*/\npublic function log($level, $message, array $context = array());\n}\n\n[/php]\n\n<h3>4. Psr\\Log\\LoggerAwareInterface</h3>\n\n[php]\n&lt;?php\n\nnamespace Psr\\Log;\n\n/**\n * logger-aware 定义实例\n */\ninterface LoggerAwareInterface\n{\n    /**\n     * 设置一个日志记录实例\n     *\n     * @param LoggerInterface $logger\n     * @return null\n     */\n    public function setLogger(LoggerInterface $logger);\n}\n[/php]\n\n<h3>5. Psr\\Log\\LogLevel</h3>\n\n[php]\n&lt;?php\n\nnamespace Psr\\Log;\n\n/**\n * 日志等级常量定义\n */\nclass LogLevel\n{\n    const EMERGENCY = \'emergency\';\n    const ALERT     = \'alert\';\n    const CRITICAL  = \'critical\';\n    const ERROR     = \'error\';\n    const WARNING   = \'warning\';\n    const NOTICE    = \'notice\';\n    const INFO      = \'info\';\n    const DEBUG     = \'debug\';\n}\n[/php]\n\n&nbsp;', '「PSR 规范」PSR-3 日志接口规范', '', 'inherit', 'closed', 'closed', '', '1133-autosave-v1', '', '', '2017-07-07 17:01:20', '2017-07-07 09:01:20', '', 1133, 'https://www.gzpblog.com/20170707/1135.html', 0, 'revision', '', 0),
(1136, 1, '2017-07-07 17:03:01', '2017-07-07 09:03:01', '<h2 id=\"日志接口规范\">一. 关于PSR-3日志接口规范</h2>\r\n本文制定了日志类库的通用接口规范。\r\n\r\n本规范的主要目的，是为了让日志类库以简单通用的方式，通过接收一个 Psr\\Log\\LoggerInterface 对象，来记录日志信息。 框架以及CMS内容管理系统如有需要，<strong>可以</strong> 对此接口进行扩展，但需遵循本规范， 这才能保证在使用第三方的类库文件时，日志接口仍能正常对接。\r\n\r\n本篇能愿动词解释：\r\n<ul>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\nPHP-FIG 官网 PSR-3 详解：<a href=\"http://www.php-fig.org/psr/psr-3/\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-3: Logger Interface</a>\r\n<h2>二. PSR-3内容</h2>\r\n<h3>1. 规范说明</h3>\r\n<h4>1.1 基本规范</h4>\r\n<ul>\r\n 	<li>LoggerInterface 接口对外定义了八个方法，分别用来记录 <a href=\"https://tools.ietf.org/html/rfc5424\" target=\"_blank\" rel=\"noopener noreferrer\">RFC 5424</a> 中定义的八个等级的日志：debug、 info、 notice、 warning、 error、 critical、 alert 以及 emergency 。</li>\r\n 	<li>第九个方法 —— log，其第一个参数为记录的等级。可使用一个预先定义的等级常量作为参数来调用此方法，<strong>必须</strong> 与直接调用以上八个方法具有相同的效果。如果传入的等级常量参数没有预先定义，则 <strong>必须</strong> 抛出 Psr\\Log\\InvalidArgumentException 类型的异常。在不确定的情况下，使用者 不该 使用未支持的等级常量来调用此方法。</li>\r\n</ul>\r\n<h4>1.2 记录信息</h4>\r\n<ul>\r\n 	<li>以上每个方法都接受一个字符串类型或者是有 __toString() 方法的对象作为记录信息参数，这样，实现者就能把它当成字符串来处理，否则实现者 <strong>必须</strong> 自己把它转换成字符串。</li>\r\n 	<li>记录信息参数 <strong>可以</strong> 携带占位符，实现者 <strong>可以</strong> 根据上下文将其它替换成相应的值。\r\n其中占位符 <strong>必须</strong> 与上下文数组中的键名保持一致。\r\n占位符的名称 <strong>必须</strong> 由一个左花括号 { 以及一个右括号 } 包含。但花括号与名称之间 <strong>一定不可</strong>有空格符。\r\n占位符的名称 <strong>应该</strong> 只由 A-Z、a-z、0-9、下划线 _、以及英文的句号 . 组成，其它字符作为将来占位符规范的保留。\r\n实现者 <strong>可以</strong> 通过对占位符采用不同的转义和转换策略，来生成最终的日志。 而使用者在不知道上下文的前提下，<strong>不该</strong> 提前转义占位符。</li>\r\n</ul>\r\n<p style=\"padding-left: 30px;\">以下是一个占位符使用的例子：</p>\r\n\r\n<pre style=\"padding-left: 30px;\">\r\n[php]\r\n/**\r\n* 用上下文信息替换记录信息中的占位符\r\n*/\r\nfunction interpolate($message, array $context = array())\r\n{\r\n  // 构建一个花括号包含的键名的替换数组\r\n  $replace = array();\r\n  foreach ($context as $key =&gt; $val) {\r\n      $replace[\'{\' . $key . \'}\'] = $val;\r\n  }\r\n\r\n  // 替换记录信息中的占位符，最后返回修改后的记录信息。\r\n  return strtr($message, $replace);\r\n}\r\n\r\n// 含有带花括号占位符的记录信息。\r\n$message = &quot;User {username} created&quot;;\r\n\r\n// 带有替换信息的上下文数组，键名为占位符名称，键值为替换值。\r\n$context = array(\'username\' =&gt; \'bolivar\');\r\n\r\n// 输出 &quot;Username bolivar created&quot;\r\necho interpolate($message, $context);\r\n[/php]\r\n\r\n<h4>1.3 上下文</h4>\r\n<ul>\r\n 	<li>每个记录函数都接受一个上下文数组参数，用来装载字符串类型无法表示的信息。它 可以 装载任何信息，所以实现者 必须 确保能正确处理其装载的信息，对于其装载的数据， <strong>一定不可</strong> 抛出异常，或产生PHP出错、警告或提醒信息（error、warning、notice）。</li>\r\n 	<li>如需通过上下文参数传入了一个 Exception 对象，必须 以 exception 作为键名。 记录异常信息是很普遍的，所以如果它能够在记录类库的底层实现，就能够让实现者从异常信息中抽丝剥茧。 当然，实现者在使用它时，必须 确保键名为 exception 的键值是否真的是一个 Exception，毕竟它 <strong>可以</strong> 装载任何信息。</li>\r\n</ul>\r\n<h4>1.4 助手类和接口</h4>\r\n<ul>\r\n 	<li>Psr\\Log\\AbstractLogger 类使得只需继承它和实现其中的 log 方法，就能够很轻易地实现 LoggerInterface 接口，而另外八个方法就能够把记录信息和上下文信息传给它。</li>\r\n 	<li>同样地，使用 Psr\\Log\\LoggerTrait 也只需实现其中的 log 方法。不过，需要特别注意的是，在 traits 可复用代码块还不能实现接口前，还需要 implement LoggerInterface。</li>\r\n 	<li>在没有可用的日志记录器时，Psr\\Log\\NullLogger 接口 <strong>可以</strong> 为使用者提供一个备用的日志「黑洞」。不过，当上下文的构建非常消耗资源时，带条件检查的日志记录或许是更好的办法。</li>\r\n 	<li>Psr\\Log\\LoggerAwareInterface 接口仅包括一个 setLogger(LoggerInterface $logger) 方法，框架可以使用它实现自动连接任意的日志记录实例。</li>\r\n 	<li>Psr\\Log\\LoggerAwareTrait trait可复用代码块可以在任何的类里面使用，只需通过它提供的 $this-&gt;logger，就可以轻松地实现等同的接口。</li>\r\n 	<li>Psr\\Log\\LogLevel 类装载了八个记录等级常量。</li>\r\n</ul>\r\n<h3>2. 包</h3>\r\n上述的接口、类和相关的异常类，以及一系列的实现检测文件，都包含在 psr/log 文件包中。\r\n<h3>3. Psr\\Log\\LoggerInterface</h3>\r\n\r\n[php]\r\n&lt;?php\r\n\r\nnamespace Psr\\Log;\r\n\r\n/**\r\n * 日志记录实例\r\n *\r\n * 日志信息变量 —— message，**必须** 是一个字符串或是实现了 __toString() 方法的对象。\r\n *\r\n * 日志信息变量中 **可以** 包含格式如 “{foo}” (代表 foo) 的占位符，\r\n * 它将会由上下文数组中键名为「foo」的键值替代。\r\n *\r\n * 上下文数组可以携带任意的数据，唯一的限制是，当它携带的是一个 exception 对象时，它的键名 **必须** 是 &quot;exception&quot;。\r\n *\r\n * 详情可参阅： https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-3-logger-interface-cn.md\r\n */\r\ninterface LoggerInterface\r\n{\r\n    /**\r\n     * 系统不可用\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function emergency($message, array $context = array());\r\n\r\n    /**\r\n     *  **必须** 立刻采取行动\r\n     *\r\n     * 例如：在整个网站都垮掉了、数据库不可用了或者其他的情况下， **应该** 发送一条警报短信把你叫醒。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function alert($message, array $context = array());\r\n\r\n    /**\r\n     * 紧急情况\r\n     *\r\n     * 例如：程序组件不可用或者出现非预期的异常。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function critical($message, array $context = array());\r\n\r\n    /**\r\n     * 运行时出现的错误，不需要立刻采取行动，但必须记录下来以备检测。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function error($message, array $context = array());\r\n\r\n    /**\r\n     * 出现非错误性的异常。\r\n     *\r\n     * 例如：使用了被弃用的API、错误地使用了API或者非预想的不必要错误。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function warning($message, array $context = array());\r\n\r\n    /**\r\n     * 一般性重要的事件。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function notice($message, array $context = array());\r\n\r\n    /**\r\n     * 重要事件\r\n     *\r\n     * 例如：用户登录和SQL记录。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function info($message, array $context = array());\r\n\r\n    /**\r\n     * debug 详情\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function debug($message, array $context = array());\r\n\r\n    /**\r\n     * 任意等级的日志记录\r\n     *\r\n     * @param mixed $level\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function log($level, $message, array $context = array());\r\n}\r\n[/php]\r\n\r\n<h3>4. Psr\\Log\\LoggerAwareInterface</h3>\r\n\r\n[php]\r\n&lt;?php\r\n\r\nnamespace Psr\\Log;\r\n\r\n/**\r\n * logger-aware 定义实例\r\n */\r\ninterface LoggerAwareInterface\r\n{\r\n    /**\r\n     * 设置一个日志记录实例\r\n     *\r\n     * @param LoggerInterface $logger\r\n     * @return null\r\n     */\r\n    public function setLogger(LoggerInterface $logger);\r\n}\r\n[/php]\r\n\r\n<h3>5. Psr\\Log\\LogLevel</h3>\r\n\r\n[php]\r\n&lt;?php\r\n\r\nnamespace Psr\\Log;\r\n\r\n/**\r\n * 日志等级常量定义\r\n */\r\nclass LogLevel\r\n{\r\n    const EMERGENCY = \'emergency\';\r\n    const ALERT     = \'alert\';\r\n    const CRITICAL  = \'critical\';\r\n    const ERROR     = \'error\';\r\n    const WARNING   = \'warning\';\r\n    const NOTICE    = \'notice\';\r\n    const INFO      = \'info\';\r\n    const DEBUG     = \'debug\';\r\n}\r\n[/php]\r\n\r\n&nbsp;', '「PSR 规范」PSR-3 日志接口规范', '', 'inherit', 'closed', 'closed', '', '1133-revision-v1', '', '', '2017-07-07 17:03:01', '2017-07-07 09:03:01', '', 1133, 'https://www.gzpblog.com/20170707/1136.html', 0, 'revision', '', 0),
(1137, 1, '2017-07-07 17:04:00', '2017-07-07 09:04:00', '<h2 id=\"日志接口规范\">一. 关于PSR-3日志接口规范</h2>\r\n本文制定了日志类库的通用接口规范。\r\n\r\n本规范的主要目的，是为了让日志类库以简单通用的方式，通过接收一个 Psr\\Log\\LoggerInterface 对象，来记录日志信息。 框架以及CMS内容管理系统如有需要，<strong>可以</strong> 对此接口进行扩展，但需遵循本规范， 这才能保证在使用第三方的类库文件时，日志接口仍能正常对接。\r\n\r\n本篇能愿动词解释：\r\n<ul>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\nPHP-FIG 官网 PSR-3 详解：<a href=\"http://www.php-fig.org/psr/psr-3/\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-3: Logger Interface</a>\r\n<h2>二. PSR-3内容</h2>\r\n<h3>1. 规范说明</h3>\r\n<h4>1.1 基本规范</h4>\r\n<ul>\r\n 	<li>LoggerInterface 接口对外定义了八个方法，分别用来记录 <a href=\"https://tools.ietf.org/html/rfc5424\" target=\"_blank\" rel=\"noopener noreferrer\">RFC 5424</a> 中定义的八个等级的日志：debug、 info、 notice、 warning、 error、 critical、 alert 以及 emergency 。</li>\r\n 	<li>第九个方法 —— log，其第一个参数为记录的等级。可使用一个预先定义的等级常量作为参数来调用此方法，<strong>必须</strong> 与直接调用以上八个方法具有相同的效果。如果传入的等级常量参数没有预先定义，则 <strong>必须</strong> 抛出 Psr\\Log\\InvalidArgumentException 类型的异常。在不确定的情况下，使用者 不该 使用未支持的等级常量来调用此方法。</li>\r\n</ul>\r\n<h4>1.2 记录信息</h4>\r\n<ul>\r\n 	<li>以上每个方法都接受一个字符串类型或者是有 __toString() 方法的对象作为记录信息参数，这样，实现者就能把它当成字符串来处理，否则实现者 <strong>必须</strong> 自己把它转换成字符串。</li>\r\n 	<li>记录信息参数 <strong>可以</strong> 携带占位符，实现者 <strong>可以</strong> 根据上下文将其它替换成相应的值。\r\n其中占位符 <strong>必须</strong> 与上下文数组中的键名保持一致。\r\n占位符的名称 <strong>必须</strong> 由一个左花括号 { 以及一个右括号 } 包含。但花括号与名称之间 <strong>一定不可</strong>有空格符。\r\n占位符的名称 <strong>应该</strong> 只由 A-Z、a-z、0-9、下划线 _、以及英文的句号 . 组成，其它字符作为将来占位符规范的保留。\r\n实现者 <strong>可以</strong> 通过对占位符采用不同的转义和转换策略，来生成最终的日志。 而使用者在不知道上下文的前提下，<strong>不该</strong> 提前转义占位符。</li>\r\n</ul>\r\n<p style=\"padding-left: 30px;\">以下是一个占位符使用的例子：</p>\r\n\r\n\r\n[php]\r\n/**\r\n* 用上下文信息替换记录信息中的占位符\r\n*/\r\nfunction interpolate($message, array $context = array())\r\n{\r\n  // 构建一个花括号包含的键名的替换数组\r\n  $replace = array();\r\n  foreach ($context as $key =&gt; $val) {\r\n      $replace[\'{\' . $key . \'}\'] = $val;\r\n  }\r\n\r\n  // 替换记录信息中的占位符，最后返回修改后的记录信息。\r\n  return strtr($message, $replace);\r\n}\r\n\r\n// 含有带花括号占位符的记录信息。\r\n$message = &quot;User {username} created&quot;;\r\n\r\n// 带有替换信息的上下文数组，键名为占位符名称，键值为替换值。\r\n$context = array(\'username\' =&gt; \'bolivar\');\r\n\r\n// 输出 &quot;Username bolivar created&quot;\r\necho interpolate($message, $context);\r\n[/php]\r\n\r\n<h4>1.3 上下文</h4>\r\n<ul>\r\n 	<li>每个记录函数都接受一个上下文数组参数，用来装载字符串类型无法表示的信息。它 可以 装载任何信息，所以实现者 必须 确保能正确处理其装载的信息，对于其装载的数据， <strong>一定不可</strong> 抛出异常，或产生PHP出错、警告或提醒信息（error、warning、notice）。</li>\r\n 	<li>如需通过上下文参数传入了一个 Exception 对象，必须 以 exception 作为键名。 记录异常信息是很普遍的，所以如果它能够在记录类库的底层实现，就能够让实现者从异常信息中抽丝剥茧。 当然，实现者在使用它时，必须 确保键名为 exception 的键值是否真的是一个 Exception，毕竟它 <strong>可以</strong> 装载任何信息。</li>\r\n</ul>\r\n<h4>1.4 助手类和接口</h4>\r\n<ul>\r\n 	<li>Psr\\Log\\AbstractLogger 类使得只需继承它和实现其中的 log 方法，就能够很轻易地实现 LoggerInterface 接口，而另外八个方法就能够把记录信息和上下文信息传给它。</li>\r\n 	<li>同样地，使用 Psr\\Log\\LoggerTrait 也只需实现其中的 log 方法。不过，需要特别注意的是，在 traits 可复用代码块还不能实现接口前，还需要 implement LoggerInterface。</li>\r\n 	<li>在没有可用的日志记录器时，Psr\\Log\\NullLogger 接口 <strong>可以</strong> 为使用者提供一个备用的日志「黑洞」。不过，当上下文的构建非常消耗资源时，带条件检查的日志记录或许是更好的办法。</li>\r\n 	<li>Psr\\Log\\LoggerAwareInterface 接口仅包括一个 setLogger(LoggerInterface $logger) 方法，框架可以使用它实现自动连接任意的日志记录实例。</li>\r\n 	<li>Psr\\Log\\LoggerAwareTrait trait可复用代码块可以在任何的类里面使用，只需通过它提供的 $this-&gt;logger，就可以轻松地实现等同的接口。</li>\r\n 	<li>Psr\\Log\\LogLevel 类装载了八个记录等级常量。</li>\r\n</ul>\r\n<h3>2. 包</h3>\r\n上述的接口、类和相关的异常类，以及一系列的实现检测文件，都包含在 psr/log 文件包中。\r\n<h3>3. Psr\\Log\\LoggerInterface</h3>\r\n\r\n[php]\r\n&lt;?php\r\n\r\nnamespace Psr\\Log;\r\n\r\n/**\r\n * 日志记录实例\r\n *\r\n * 日志信息变量 —— message，**必须** 是一个字符串或是实现了 __toString() 方法的对象。\r\n *\r\n * 日志信息变量中 **可以** 包含格式如 “{foo}” (代表 foo) 的占位符，\r\n * 它将会由上下文数组中键名为「foo」的键值替代。\r\n *\r\n * 上下文数组可以携带任意的数据，唯一的限制是，当它携带的是一个 exception 对象时，它的键名 **必须** 是 &quot;exception&quot;。\r\n *\r\n * 详情可参阅： https://github.com/PizzaLiu/PHP-FIG/blob/master/PSR-3-logger-interface-cn.md\r\n */\r\ninterface LoggerInterface\r\n{\r\n    /**\r\n     * 系统不可用\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function emergency($message, array $context = array());\r\n\r\n    /**\r\n     *  **必须** 立刻采取行动\r\n     *\r\n     * 例如：在整个网站都垮掉了、数据库不可用了或者其他的情况下， **应该** 发送一条警报短信把你叫醒。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function alert($message, array $context = array());\r\n\r\n    /**\r\n     * 紧急情况\r\n     *\r\n     * 例如：程序组件不可用或者出现非预期的异常。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function critical($message, array $context = array());\r\n\r\n    /**\r\n     * 运行时出现的错误，不需要立刻采取行动，但必须记录下来以备检测。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function error($message, array $context = array());\r\n\r\n    /**\r\n     * 出现非错误性的异常。\r\n     *\r\n     * 例如：使用了被弃用的API、错误地使用了API或者非预想的不必要错误。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function warning($message, array $context = array());\r\n\r\n    /**\r\n     * 一般性重要的事件。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function notice($message, array $context = array());\r\n\r\n    /**\r\n     * 重要事件\r\n     *\r\n     * 例如：用户登录和SQL记录。\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function info($message, array $context = array());\r\n\r\n    /**\r\n     * debug 详情\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function debug($message, array $context = array());\r\n\r\n    /**\r\n     * 任意等级的日志记录\r\n     *\r\n     * @param mixed $level\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function log($level, $message, array $context = array());\r\n}\r\n[/php]\r\n\r\n<h3>4. Psr\\Log\\LoggerAwareInterface</h3>\r\n\r\n[php]\r\n&lt;?php\r\n\r\nnamespace Psr\\Log;\r\n\r\n/**\r\n * logger-aware 定义实例\r\n */\r\ninterface LoggerAwareInterface\r\n{\r\n    /**\r\n     * 设置一个日志记录实例\r\n     *\r\n     * @param LoggerInterface $logger\r\n     * @return null\r\n     */\r\n    public function setLogger(LoggerInterface $logger);\r\n}\r\n[/php]\r\n\r\n<h3>5. Psr\\Log\\LogLevel</h3>\r\n\r\n[php]\r\n&lt;?php\r\n\r\nnamespace Psr\\Log;\r\n\r\n/**\r\n * 日志等级常量定义\r\n */\r\nclass LogLevel\r\n{\r\n    const EMERGENCY = \'emergency\';\r\n    const ALERT     = \'alert\';\r\n    const CRITICAL  = \'critical\';\r\n    const ERROR     = \'error\';\r\n    const WARNING   = \'warning\';\r\n    const NOTICE    = \'notice\';\r\n    const INFO      = \'info\';\r\n    const DEBUG     = \'debug\';\r\n}\r\n[/php]\r\n\r\n&nbsp;', '「PSR 规范」PSR-3 日志接口规范', '', 'inherit', 'closed', 'closed', '', '1133-revision-v1', '', '', '2017-07-07 17:04:00', '2017-07-07 09:04:00', '', 1133, 'https://www.gzpblog.com/20170707/1137.html', 0, 'revision', '', 0),
(1138, 1, '2017-07-11 17:33:43', '2017-07-11 09:33:43', '<h2>一 关于PSR-4自动加载规范</h2>\r\n本 PSR 是关于由文件路径 <a href=\"http://php.net/autoload\" target=\"_blank\" rel=\"noopener noreferrer\">自动载入</a> 对应类的相关规范， 本规范是可互操作的，可以作为任一自动载入规范的补充，其中包括 PSR-0（已废弃），此外， 本 PSR 还包括自动载入的类对应的文件存放路径规范。\r\n\r\n本篇能愿动词解释：\r\n<ul>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\nPHP-FIG 官网 PSR-4 详解：<a href=\"http://www.php-fig.org/psr/psr-4/\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-4: Autoloader</a>\r\n\r\nPSR-4实现例子：<a href=\"http://www.php-fig.org/psr/psr-4/examples/\" target=\"_blank\" rel=\"noopener noreferrer\">Example Implementations of PSR-4</a>\r\n<h2>二 PSR-4内容</h2>\r\n<h3 id=\"2-详细说明\">1. 详细说明</h3>\r\n1） 此处的「类」泛指所有的「Class类」、「接口」、「traits 可复用代码块」以及其它类似结构。\r\n\r\n2）一个完整的类名需具有以下结构:\r\n\r\n\\&lt;命名空间&gt;(\\&lt;子命名空间&gt;)*\\&lt;类名&gt;\r\n<ul>\r\n 	<li>完整的类名 <strong>必须</strong> 要有一个顶级命名空间，被称为 \"vendor namespace\"；</li>\r\n 	<li>完整的类名 <strong>可以</strong> 有一个或多个子命名空间；</li>\r\n 	<li>完整的类名 <strong>必须</strong> 有一个最终的类名；</li>\r\n 	<li>完整的类名中任意一部分中的下滑线都是没有特殊含义的；</li>\r\n 	<li>完整的类名 <strong>可以</strong> 由任意大小写字母组成；</li>\r\n 	<li>所有类名都 <strong>必须</strong> 是大小写敏感的。</li>\r\n</ul>\r\n3）当根据完整的类名载入相应的文件\r\n<ul>\r\n 	<li>完整的类名中，去掉最前面的命名空间分隔符，前面连续的一个或多个命名空间和子命名空间，作为「命名空间前缀」，其必须与至少一个「文件基目录」相对应；</li>\r\n 	<li>紧接命名空间前缀后的子命名空间 <strong>必须</strong> 与相应的「文件基目录」相匹配，其中的命名空间分隔符将作为目录分隔符。</li>\r\n 	<li>末尾的类名 必须 与对应的以 .php 为后缀的文件同名。</li>\r\n</ul>\r\n4）自动加载器（autoloader）的实现 <strong>一定不可</strong> 抛出异常、<strong>一定不可</strong> 触发任一级别的错误信息以及 不应该 有返回值。\r\n<h3>2. 例子</h3>\r\n下表展示了符合规范完整类名、命名空间前缀和文件基目录所对应的文件路径。\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>完整类名</th>\r\n<th>命名空间前缀</th>\r\n<th>文件基目录</th>\r\n<th>文件路径</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>\\Acme\\Log\\Writer\\File_Writer</td>\r\n<td>Acme\\Log\\Writer</td>\r\n<td>./acme-log-writer/lib/</td>\r\n<td>./acme-log-writer/lib/File_Writer.php</td>\r\n</tr>\r\n<tr>\r\n<td>\\Aura\\Web\\Response\\Status</td>\r\n<td>Aura\\Web</td>\r\n<td>/path/to/aura-web/src/</td>\r\n<td>/path/to/aura-web/src/Response/Status.php</td>\r\n</tr>\r\n<tr>\r\n<td>\\Symfony\\Core\\Request</td>\r\n<td>Symfony\\Core</td>\r\n<td>./vendor/Symfony/Core/</td>\r\n<td>./vendor/Symfony/Core/Request.php</td>\r\n</tr>\r\n<tr>\r\n<td>\\Zend\\Acl</td>\r\n<td>Zend</td>\r\n<td>/usr/includes/Zend/</td>\r\n<td>/usr/includes/Zend/Acl.php</td>\r\n</tr>\r\n</tbody>\r\n</table>', '「PSR 规范」PSR-4 自动加载规范', '', 'publish', 'open', 'closed', '', '%e3%80%8cpsr-%e8%a7%84%e8%8c%83%e3%80%8dpsr-4-%e8%87%aa%e5%8a%a8%e5%8a%a0%e8%bd%bd%e8%a7%84%e8%8c%83', '', '', '2017-07-11 17:33:43', '2017-07-11 09:33:43', '', 0, 'https://www.gzpblog.com/?p=1138', 0, 'post', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1139, 1, '2017-07-11 17:33:43', '2017-07-11 09:33:43', '<h2>一 关于PSR-4自动加载规范</h2>\r\n本 PSR 是关于由文件路径 <a href=\"http://php.net/autoload\" target=\"_blank\" rel=\"noopener noreferrer\">自动载入</a> 对应类的相关规范， 本规范是可互操作的，可以作为任一自动载入规范的补充，其中包括 PSR-0（已废弃），此外， 本 PSR 还包括自动载入的类对应的文件存放路径规范。\r\n\r\n本篇能愿动词解释：\r\n<ul>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\nPHP-FIG 官网 PSR-4 详解：<a href=\"http://www.php-fig.org/psr/psr-4/\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-4: Autoloader</a>\r\n\r\nPSR-4实现例子：<a href=\"http://www.php-fig.org/psr/psr-4/examples/\" target=\"_blank\" rel=\"noopener noreferrer\">Example Implementations of PSR-4</a>\r\n<h2>二 PSR-4内容</h2>\r\n<h3 id=\"2-详细说明\">1. 详细说明</h3>\r\n1） 此处的「类」泛指所有的「Class类」、「接口」、「traits 可复用代码块」以及其它类似结构。\r\n\r\n2）一个完整的类名需具有以下结构:\r\n\r\n\\&lt;命名空间&gt;(\\&lt;子命名空间&gt;)*\\&lt;类名&gt;\r\n<ul>\r\n 	<li>完整的类名 <strong>必须</strong> 要有一个顶级命名空间，被称为 \"vendor namespace\"；</li>\r\n 	<li>完整的类名 <strong>可以</strong> 有一个或多个子命名空间；</li>\r\n 	<li>完整的类名 <strong>必须</strong> 有一个最终的类名；</li>\r\n 	<li>完整的类名中任意一部分中的下滑线都是没有特殊含义的；</li>\r\n 	<li>完整的类名 <strong>可以</strong> 由任意大小写字母组成；</li>\r\n 	<li>所有类名都 <strong>必须</strong> 是大小写敏感的。</li>\r\n</ul>\r\n3）当根据完整的类名载入相应的文件\r\n<ul>\r\n 	<li>完整的类名中，去掉最前面的命名空间分隔符，前面连续的一个或多个命名空间和子命名空间，作为「命名空间前缀」，其必须与至少一个「文件基目录」相对应；</li>\r\n 	<li>紧接命名空间前缀后的子命名空间 <strong>必须</strong> 与相应的「文件基目录」相匹配，其中的命名空间分隔符将作为目录分隔符。</li>\r\n 	<li>末尾的类名 必须 与对应的以 .php 为后缀的文件同名。</li>\r\n</ul>\r\n4）自动加载器（autoloader）的实现 <strong>一定不可</strong> 抛出异常、<strong>一定不可</strong> 触发任一级别的错误信息以及 不应该 有返回值。\r\n<h3>2. 例子</h3>\r\n下表展示了符合规范完整类名、命名空间前缀和文件基目录所对应的文件路径。\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>完整类名</th>\r\n<th>命名空间前缀</th>\r\n<th>文件基目录</th>\r\n<th>文件路径</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>\\Acme\\Log\\Writer\\File_Writer</td>\r\n<td>Acme\\Log\\Writer</td>\r\n<td>./acme-log-writer/lib/</td>\r\n<td>./acme-log-writer/lib/File_Writer.php</td>\r\n</tr>\r\n<tr>\r\n<td>\\Aura\\Web\\Response\\Status</td>\r\n<td>Aura\\Web</td>\r\n<td>/path/to/aura-web/src/</td>\r\n<td>/path/to/aura-web/src/Response/Status.php</td>\r\n</tr>\r\n<tr>\r\n<td>\\Symfony\\Core\\Request</td>\r\n<td>Symfony\\Core</td>\r\n<td>./vendor/Symfony/Core/</td>\r\n<td>./vendor/Symfony/Core/Request.php</td>\r\n</tr>\r\n<tr>\r\n<td>\\Zend\\Acl</td>\r\n<td>Zend</td>\r\n<td>/usr/includes/Zend/</td>\r\n<td>/usr/includes/Zend/Acl.php</td>\r\n</tr>\r\n</tbody>\r\n</table>', '「PSR 规范」PSR-4 自动加载规范', '', 'inherit', 'closed', 'closed', '', '1138-revision-v1', '', '', '2017-07-11 17:33:43', '2017-07-11 09:33:43', '', 1138, 'https://www.gzpblog.com/20170711/1139.html', 0, 'revision', '', 0),
(1141, 1, '2017-07-13 14:35:19', '2017-07-13 06:35:19', '<blockquote>关于PCRE的介绍以及实现正则表达式功能的所有说明，都可以在官方手册中看到：<a href=\"http://php.net/manual/zh/book.pcre.php\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式(兼容 Perl)</a></blockquote>\r\n<h2>一 认识PCRE</h2>\r\n<h3>1. 什么是PCRE</h3>\r\nPCRE 库是一个实现了与 perl 5 在语法和语义上略有差异的正则表达式模式匹配功能的函数集。\r\n<h3>2. PCRE 库介绍</h3>\r\n<div>PCRE 是 PHP 核心扩展，所以总是启用的。</div>\r\n<div>默认情况下，该扩展使用内置的 PCRE library。或者，也可以通过指定 configure 选项 --with-pcre-regex=DIR 设置外部 PCRE library 目录，DIR 是 PCRE 的 include 和 library 文件位置。 PHP 5.6/7.0 推荐使用 PCRE 8.10 或更高版本。</div>\r\n<div>这些函数中使用的模式语法非常类似 perl。表达式必须用分隔符闭合，比如一个正斜杠(/)。 分隔符可以使任意非字母数字，除反斜杠(\\)和空字节之外的非空白 ascii 字符。 如果分隔符 在表达式中使用，需要使用反斜线进行转义。自php 4.0.4开始，可以使用 perl 样式的()、 {}、 [] 以及 &lt;&gt; 作为分隔符。</div>\r\n<h3>3. PCRE正则与POSIX 正则</h3>\r\n<div>除了PCRE正则库，还有POSIX 正则库。 <strong>自PHP 5.3.0起， POSIX 正则表达式扩展被废弃。</strong>所以，这里也没有必要研究 POSIX 正则了，这里我们就看PCRE正则。</div>\r\n<h3>4. 版本特性</h3>\r\n<div>PHP 7.0.0 起 PCRE 默认支持 JIT（just-in-time）编译技术，PHP 7.0.12 起可以通过 --without-pcre-jit 禁用 PCRE 的 JIT 功能。</div>\r\n<div>PHP 的 Windows 版本已内建对此扩展的支持。不需要载入额外的扩展来使用这些函数。</div>\r\n<div>PHP 5.3.0 的之前版本，可通过 --without-pcre-regex 配置选项禁用此扩展。</div>\r\n<h2>二. 预定义常量</h2>\r\n下列常量由此扩展定义，且仅在此扩展编译入 PHP 或在运行时动态载入时可用。\r\n<table style=\"height: 1034px;\" border=\"1\" width=\"943\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td><strong>常量</strong></td>\r\n<td><strong>描述</strong></td>\r\n<td><strong>自哪个版本起</strong></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_PATTERN_ORDER</td>\r\n<td>结果按照”规则”排序，仅用于preg_match_all()，即$matches[0]是完整规则的匹配结果，$matches[1]是第一个子组匹配的结果，等等。</td>\r\n<td>since</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SET_ORDER</td>\r\n<td>结果按照”集合”排序，仅用于preg_match_all()，即$matches[0]保存第一次匹配结果的所有结果(包含子组)信息, $matches[1]保存第二次的结果信息，等等。</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_OFFSET_CAPTURE</td>\r\n<td>查看PREG_SPLIT_OFFSET_CAPTURE的描述。</td>\r\n<td>4.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_NO_EMPTY</td>\r\n<td>这个标记告诉preg_split()仅返回非空部分。</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_DELIM_CAPTURE</td>\r\n<td>这个标记告诉preg_split()同时捕获括号表达式匹配到的内容。</td>\r\n<td>4.0.5</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_OFFSET_CAPTURE</td>\r\n<td>如果设置了这个标记，每次出现的匹配子串的偏移量也会被返回。注意，这会改变返回数组中的值，每个元素都是由匹配子串作为第0个元素，它相对目标字符串的偏移量作为第1个元素的数组。这个标记只能用于preg_split()。</td>\r\n<td>4.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_NO_ERROR</td>\r\n<td>没有匹配错误时调用 preg_last_error() 返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_INTERNAL_ERROR</td>\r\n<td>如果有PCRE内部错误时调用 preg_last_error() 返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BACKTRACK_LIMIT_ERROR</td>\r\n<td>如果调用回溯限制超出，调用preg_last_error()时返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_RECURSION_LIMIT_ERROR</td>\r\n<td>如果递归限制超出，调用preg_last_error()时返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BAD_UTF8_ERROR</td>\r\n<td>如果最后一个错误时由于异常的utf-8数据(仅在运行在UTF-8 模式正则表达式下可用)。导致的，调用preg_last_error()返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BAD_UTF8_OFFSET_ERROR</td>\r\n<td>如果偏移量与合法的urf-8代码不匹配(仅在运行在UTF-8 模式正则表达式下可用)。调用preg_last_error()返回。</td>\r\n<td>5.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_JIT_STACKLIMIT_ERROR</td>\r\n<td>当 PCRE 函数因 JIT 栈空间限制而失败， preg_last_error() 就会返回此常量。</td>\r\n<td>7.0.0</td>\r\n</tr>\r\n<tr>\r\n<td>PCRE_VERSION</td>\r\n<td>PCRE版本号和发布日期(比如： \"7.0 18-Dec-2006\")。</td>\r\n<td>5.2.4</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2>三 正则语法</h2>\r\n1. 详细的正则语法可以参考：<a href=\"http://php.net/manual/zh/reference.pcre.pattern.syntax.php\" target=\"_blank\" rel=\"noopener noreferrer\">http://php.net/manual/zh/reference.pcre.pattern.syntax.php</a>\r\n\r\n2. 之前的一个总结，正则表达式字符表和常用正则表达式：<a href=\"https://www.gzpblog.com/20161009/278.html\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式</a>\r\n<h2>四 PCRE 函数</h2>\r\n这篇文章的关注重点将在于函数，和函数的应用，即是正则在PHP中的具体实现。加下来一个一个看。\r\n<h3>1. preg_filter() 执行一个正则表达式搜索和替换</h3>\r\n语法：mixed preg_filter ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：preg_filter()等价于preg_replace() 除了它仅仅返回(可能经过转化)与目标匹配的结果。\r\n\r\n返回值： 如果subject是一个数组，返回一个数组， 其他情况返回一个字符串。如果没有找到匹配或者发生了错误，当subject是数组 时返回一个空数组，其他情况返回NULL。\r\n\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n$subject = array(\'1\', \'a\', \'2\', \'b\', \'3\', \'A\', \'B\', \'4\'); \r\n$pattern = array(\'/\\d/\', \'/[a-z]/\', \'/[1a]/\'); \r\n$replace = array(\'A:$0\', \'B:$0\', \'C:$0\'); \r\n\r\nprint_r(preg_filter($pattern, $replace, $subject)); //使用filter\r\n\r\nprint_r(preg_replace($pattern, $replace, $subject)); //使用replace\r\n\r\n/*\r\n返回： \r\nArray\r\n(\r\n    [0] =&gt; A:C:1\r\n    [1] =&gt; B:C:a\r\n    [2] =&gt; A:2\r\n    [3] =&gt; B:b\r\n    [4] =&gt; A:3\r\n    [7] =&gt; A:4\r\n)\r\nArray\r\n(\r\n    [0] =&gt; A:C:1\r\n    [1] =&gt; B:C:a\r\n    [2] =&gt; A:2\r\n    [3] =&gt; B:b\r\n    [4] =&gt; A:3\r\n    [5] =&gt; A\r\n    [6] =&gt; B\r\n    [7] =&gt; A:4\r\n)\r\npreg_filter()只返回匹配到的；preg_replace() 返回所有\r\n*/\r\n[/php]\r\n\r\n<h3>2. preg_grep() 返回匹配模式的数组条目；正则检索一个数组的所有元素</h3>\r\n语法：array preg_grep ( string $pattern , array $input [, int $flags = 0 ] )\r\n\r\n说明：返回给定数组input中与模式pattern 匹配的元素组成的数组.\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式, 字符串形式.</li>\r\n 	<li>input，输入数组.</li>\r\n 	<li>flags，如果设置为PREG_GREP_INVERT, 这个函数返回输入数组中与 给定模式pattern不匹配的元素组成的数组\r\n返回值：返回使用input中key做索引的数组。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n// 找出有p的\r\n$foods = array(&quot;pasta&quot;, &quot;steak&quot;, &quot;fish&quot;, &quot;potatoes&quot;);\r\n$p_foods = preg_grep(&quot;/p(\\w+)/&quot;, $foods);\r\nprint_r($p_foods)\r\n// 输出\r\n// Array ( [0] =&gt; pasta [3] =&gt; potatoes )\r\n[/php]\r\n\r\n<h3>3. preg_last_error() 返回最后一个PCRE正则执行产生的错误代码</h3>\r\n语法：int preg_last_error ( void )\r\n\r\n返回值：返回最后一次PCRE正则执行的错误代码。\r\n<ul>\r\n 	<li>PREG_NO_ERROR 没有匹配错误</li>\r\n 	<li>PREG_INTERNAL_ERROR 有PCRE内部错误</li>\r\n 	<li>PREG_BACKTRACK_LIMIT_ERROR 调用回溯限制超出</li>\r\n 	<li>PREG_RECURSION_LIMIT_ERROR 递归限制超出</li>\r\n 	<li>PREG_BAD_UTF8_ERROR 异常的utf-8数据导致</li>\r\n 	<li>PREG_BAD_UTF8_OFFSET_ERROR （自 PHP 5.3.0 起） 偏移量与合法的urf-8代码不匹配</li>\r\n 	<li>PREG_JIT_STACKLIMIT_ERROR (自 PHP 7.0.0 起) 因 JIT 栈空间限制而失败</li>\r\n</ul>\r\n具体错误代码的详情在上面预定义常量部分。\r\n\r\n例子：\r\n\r\n[php]&lt;/pre&gt;\r\n&lt;?php\r\n$a = preg_match(\'/(?:\\D+|&lt;\\d+&gt;)*[!?]/\', \'foobar foobar foobar\');\r\nprint_r($a);\r\n\r\nif (preg_last_error() == PREG_BACKTRACK_LIMIT_ERROR) {\r\nprint \'Backtrack limit was exhausted!\';\r\n}\r\n// 输出：Backtrack limit was exhausted!\r\n\r\n[/php]\r\n\r\n<h3>4. preg_match() 执行匹配正则表达式</h3>\r\n语法：int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags = 0 [, int $offset = 0 ]]] )\r\n\r\n说明：搜索subject与pattern给定的正则表达式的一个匹配。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，字符串类型。</li>\r\n 	<li>subject，输入字符串。</li>\r\n 	<li>matches，如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。</li>\r\n 	<li>flags，flags可以被设置为以下标记值：\r\n○ PREG_OFFSET_CAPTURE，如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</li>\r\n 	<li>offset，通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个位置开始搜索(单位是字节)。\r\n返回值：preg_match()返回 pattern 的匹配次数。 它的值将是0次（不匹配）或1次，因为preg_match()在第一次匹配后 将会停止搜索。preg_match_all()不同于此，它会一直搜索subject 直到到达结尾。 如果发生错误preg_match()返回 FALSE。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n//从URL中获取主机名称\r\npreg_match(\'@^(?:http://)?([^/]+)@i\', &quot;http://www.php.net/index.html&quot;, $matches);\r\nprint_r($matches);\r\n// 输出 Array ( [0] =&gt; http://www.php.net [1] =&gt; www.php.net )\r\n\r\npreg_match(\'/[^.]+\\.[^.]+$/\', $matches[1], $matches);\r\nprint_r($matches);\r\n// 输出 Array ( [0] =&gt; php.net )\r\n[/php]\r\n\r\n<h3>5. preg_match_all() 执行一个全局正则表达式匹配</h3>\r\n语法：int preg_match_all ( string $pattern , string $subject [, array &amp;$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0 ]]] )\r\n\r\n说明： 搜索subject中所有匹配pattern给定正则表达式的匹配结果并且将它们以flag指定顺序输出到matches中。在第一个匹配找到后，子序列继续从最后一次匹配位置搜索。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，字符串形式。</li>\r\n 	<li>subject，输入字符串。</li>\r\n 	<li>matches，多维数组，作为输出参数输出所有匹配结果, 数组排序通过flags指定。</li>\r\n 	<li>flags，可以结合下面标记使用(注意不能同时使用PREG_PATTERN_ORDER和PREG_SET_ORDER)\r\n○ PREG_PATTERN_ORDER 结果排序为$matches[0]保存完整模式的所有匹配, $matches[1] 保存第一个子组的所有匹配，以此类推。\r\n○ PREG_SET_ORDER 结果排序为$matches[0]包含第一次匹配得到的所有匹配(包含子组)， $matches[1]是包含第二次匹配到的所有匹配(包含子组)的数组，以此类推。\r\n○ PREG_OFFSET_CAPTURE 如果这个标记被传递，每个发现的匹配返回时会增加它相对目标字符串的偏移量。 注意这会改变matches中的每一个匹配结果字符串元素，使其 成为一个第0个元素为匹配结果字符串，第1个元素为 匹配结果字符串在subject中的偏移量。\r\n○ 如果没有给定排序标记，假定设置为PREG_PATTERN_ORDER。</li>\r\n 	<li>offset，通常， 查找时从目标字符串的开始位置开始。可选参数offset用于 从目标字符串中指定位置开始搜索(单位是字节)。\r\n返回值：返回完整匹配次数（可能是0），或者如果发生错误返回FALSE。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n// \\\\2是一个后向引用的示例. 这会告诉pcre它必须匹配正则表达式中第二个圆括号(这里是([\\w]+))\r\n// 匹配到的结果. 这里使用两个反斜线是因为这里使用了双引号.\r\n$html = &quot;&lt;b&gt;bold text&lt;/b&gt;&lt;a href=howdy.html&gt;click me&lt;/a&gt;&quot;;\r\npreg_match_all(&quot;/(&lt;([\\w]+)[^&gt;]*&gt;)(.*?)(&lt;\\/\\\\2&gt;)/&quot;, $html, $matches, PREG_SET_ORDER);\r\nprint_r($matches);\r\n/*\r\n输出\r\nArray\r\n(\r\n    [0] =&gt; Array\r\n        (\r\n            [0] =&gt; &lt;b&gt;bold text&lt;/b&gt;\r\n            [1] =&gt; &lt;b&gt;\r\n            [2] =&gt; b\r\n            [3] =&gt; bold text\r\n            [4] =&gt; &lt;/b&gt;\r\n        )\r\n\r\n    [1] =&gt; Array\r\n        (\r\n            [0] =&gt; &lt;a href=howdy.html&gt;click me&lt;/a&gt;\r\n            [1] =&gt; &lt;a href=howdy.html&gt;\r\n            [2] =&gt; a\r\n            [3] =&gt; click me\r\n            [4] =&gt; &lt;/a&gt;\r\n        )\r\n\r\n)\r\n*/\r\n[/php]\r\n\r\n<h3>6. preg_quote() 转义正则表达式字符</h3>\r\n语法：string preg_quote ( string $str [, string $delimiter = NULL ] )\r\n\r\n说明： preg_quote()需要参数 str 并向其中每个正则表达式语法中的字符前增加一个反斜线。 这通常用于你有一些运行时字符串需要作为正则表达式进行匹配的时候。\r\n<ul>\r\n 	<li>正则表达式特殊字符有： . \\ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | : -</li>\r\n 	<li>注意 / 不是正则表达式特殊字符。</li>\r\n</ul>\r\n注意：preg_quote() 的应用场景不是用于 preg_replace() 的 $replacement 字符串参数。\r\n\r\n参数：\r\n<ul>\r\n 	<li>str，输入字符串</li>\r\n 	<li>delimiter，如果指定了可选参数 delimiter，它也会被转义。这通常用于 转义PCRE函数使用的分隔符。 / 是最常见的分隔符。\r\n返回值：返回转义后的字符串。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n$keywords = \'$40 for a g3/400\';\r\n$keywords = preg_quote($keywords, \'/\');\r\necho $keywords; \r\n// 返回 \\$40 for a g3\\/400\r\n// $是正则表达式特殊字符, /被当参数传入也转义\r\n[/php]\r\n\r\n<h3>7. preg_replace_callback() 执行一个正则表达式搜索并且使用一个回调进行替换</h3>\r\n语法：mixed preg_replace_callback ( mixed $pattern , callable $callback , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：这个函数的行为除了 可以指定一个 callback 替代 replacement 进行替换 字符串的计算，其他方面等同于 preg_replace()。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，可以使字符串或一个字符串数组。</li>\r\n 	<li>callback， 一个回调函数，在每次需要替换时调用，调用时函数得到的参数是从subject 中匹配到的结果。回调函数返回真正参与替换的字符串。这是该回调函数的签名：string handler ( array $matches ) 。你可能经常会需要callback函数而 仅用于preg_replace_callback()一个地方的调用。在这种情况下，你可以 使用匿名函数来定义一个匿名函数作 为preg_replace_callback()调用时的回调。 这样做你可以保留所有 调用信息在同一个位置并且不会因为一个不在任何其他地方使用的回调函数名称而污染函数名称空间。\r\n● subject，要搜索替换的目标字符串或字符串数组。\r\n● limit，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。\r\n● count，如果指定，这个变量将被填充为替换执行的次数。\r\n返回值： 如果subject是一个数组， preg_replace_callback()返回一个数组，其他情况返回字符串。 错误发生时返回 NULL。如果查找到了匹配，返回替换后的目标字符串（或字符串数组）， 其他情况subject 将会无变化返回。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n/* 将文本中的年份增加一年 */\r\n$text = &quot;April fools day is 04/01/2002\\n&quot;;\r\n$text.= &quot;Last christmas was 12/24/2001\\n&quot;;\r\n// 回调函数\r\nfunction next_year($matches)\r\n{\r\n    /*\r\n    print_r($matches);$matches为:\r\n    Array\r\n    (\r\n        [0] =&gt; 04/01/2002\r\n        [1] =&gt; 04/01/\r\n        [2] =&gt; 2002\r\n    )\r\n    Array\r\n    (\r\n        [0] =&gt; 12/24/2001\r\n        [1] =&gt; 12/24/\r\n        [2] =&gt; 2001\r\n    )\r\n    说明匹配到一个就扔进来一次\r\n    */\r\n    return $matches[1].($matches[2]+1);\r\n}\r\n$text = preg_replace_callback(&quot;|(\\d{2}/\\d{2}/)(\\d{4})|&quot;, &quot;next_year&quot;, $text);\r\necho $text;\r\n/*\r\n输出\r\nApril fools day is 04/01/2003\r\nLast christmas was 12/24/2002\r\n*/\r\n[/php]\r\n\r\n<h3>8. preg_replace_callback_array() 执行一个正则表达式搜索并且使用多个回调进行替换</h3>\r\n语法：mixed preg_replace_callback_array ( array $patterns_and_callbacks , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：类似于 preg_replace_callback(), 除了回调函数是基于每个参数。\r\n\r\n参数：\r\n<ul>\r\n 	<li>patterns_and_callbacks，参数（keys）对应回调函数（values）的数组。</li>\r\n 	<li>subject，要搜索替换的目标字符串或字符串数组。</li>\r\n 	<li>limit，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。</li>\r\n 	<li>count，如果指定，这个变量将被填充为替换执行的次数。</li>\r\n</ul>\r\n返回值：\r\npreg_replace_callback_array() 如果参数是数组则会返回一个数组，否则为字符串。出错时返回 NULL；如果匹配到，会返回一个新的subject，否则\r\n\r\n例子：\r\n\r\n[php]\r\n&lt;?php \r\n$subject = \'Aaaaaa Bbb\';\r\npreg_replace_callback_array(\r\n    [\r\n        \'~[a]+~i\' =&gt; function ($match) {\r\n            echo strlen($match[0]), \' matches for &quot;a&quot; found\', PHP_EOL;\r\n        },\r\n        \'~[b]+~i\' =&gt; function ($match) {\r\n            echo strlen($match[0]), \' matches for &quot;b&quot; found\', PHP_EOL;\r\n        }\r\n    ],\r\n    $subject\r\n);\r\n/*\r\n输出\r\n6 matches for &quot;a&quot; found\r\n3 matches for &quot;b&quot; found\r\n*/\r\n[/php]\r\n\r\n<h3>9. preg_replace() 执行一个正则表达式的搜索和替换</h3>\r\n语法：mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：搜索subject中匹配pattern的部分， 以replacement进行替换。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式。可以使一个字符串或字符串数组。 可以使用一些PCRE修饰符。</li>\r\n 	<li>replacement，用于替换的字符串或字符串数组。如果这个参数是一个字符串，并且pattern 是一个数组，那么所有的模式都使用这个字符串进行替换。如果pattern和replacement 都是数组，每个pattern使用replacement中对应的 元素进行替换。如果replacement中的元素比pattern中的少， 多出来的pattern使用空字符串进行替换。replacement中可以包含后向引用\\\\n 或$n，语法上首选后者。 每个 这样的引用将被匹配到的第n个捕获子组捕获到的文本替换。 n 可以是0-99，\\\\0和$0代表完整的模式匹配文本。 捕获子组的序号计数方式为：代表捕获子组的左括号从左到右， 从1开始数。如果要在replacement 中使用反斜线，必须使用4个(\"\\\\\\\\\"，译注：因为这首先是php的字符串，经过转义后，是两个，再经过 正则表达式引擎后才被认为是一个原文反斜线)。当在替换模式下工作并且后向引用后面紧跟着需要是另外一个数字(比如：在一个匹配模式后紧接着增加一个原文数字)， 不能使用\\\\1这样的语法来描述后向引用。比如， \\\\11将会使preg_replace() 不能理解你希望的是一个\\\\1后向引用紧跟一个原文1，还是 一个\\\\11后向引用后面不跟任何东西。 这种情况下解决方案是使用${1}1。 这创建了一个独立的$1后向引用, 一个独立的原文1。当使用被弃用的 e 修饰符时, 这个函数会转义一些字符(即：\'、\"、 \\ 和 NULL) 然后进行后向引用替换。当这些完成后请确保后向引用解析完后没有单引号或 双引号引起的语法错误(比如： \'strlen(\\\'$1\\\')+strlen(\"$2\")\')。确保符合PHP的 字符串语法，并且符合eval语法。因为在完成替换后， 引擎会将结果字符串作为php代码使用eval方式进行评估并将返回值作为最终参与替换的字符串。</li>\r\n 	<li>subject，要进行搜索和替换的字符串或字符串数组。如果subject是一个数组，搜索和替换回在subject 的每一个元素上进行, 并且返回值也会是一个数组。</li>\r\n 	<li>limit，每个模式在每个subject上进行替换的最大次数。默认是 -1(无限)。</li>\r\n 	<li>count，如果指定，将会被填充为完成的替换次数。\r\n返回值： 如果subject是一个数组， preg_replace()返回一个数组， 其他情况下返回一个字符串。如果匹配被查找到，替换后的subject被返回，其他情况下 返回没有改变的 subject。如果发生错误，返回 NULL 。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php \r\n$patterns = array (\'/(19|20)(\\d{2})-(\\d{1,2})-(\\d{1,2})/\', \'/^\\s*{(\\w+)}\\s*=/\');\r\n$replace = array (\'\\3/\\4/\\1\\2\', \'$\\1 =\');\r\necho preg_replace($patterns, $replace, \'{startDate} = 1999-5-27\');\r\n// 输出: $startDate = 5/27/1999\r\n[/php]\r\n\r\n<h3>10. preg_split() 通过一个正则表达式分隔字符串</h3>\r\n语法：array preg_split ( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]] )\r\n\r\n说明：通过一个正则表达式分隔给定字符串.\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，用于搜索的模式，字符串形式。</li>\r\n 	<li>subject，输入字符串</li>\r\n 	<li>limit，如果指定，将限制分隔得到的子串最多只有limit个，返回的最后一个 子串将包含所有剩余部分。limit值为-1， 0或null时都代表\"不限制\"， 作为php的标准，你可以使用null跳过对flags的设置。</li>\r\n 	<li>flags，flags 可以是任何下面标记的组合(以位或运算 | 组合)：\r\n○ PREG_SPLIT_NO_EMPTY，如果这个标记被设置， preg_split() 将进返回分隔后的非空部分。\r\n○ PREG_SPLIT_DELIM_CAPTURE，如果这个标记设置了，用于分隔的模式中的括号表达式将被捕获并返回。\r\n○ PREG_SPLIT_OFFSET_CAPTURE，如果这个标记被设置, 对于每一个出现的匹配返回时将会附加字符串偏移量. 注意：这将会改变返回数组中的每一个元素, 使其每个元素成为一个由第0 个元素为分隔后的子串，第1个元素为该子串在subject 中的偏移量组成的数组。</li>\r\n</ul>\r\n返回值：返回一个使用 pattern 边界分隔 subject 后得到 的子串组成的数组， 或者在失败时返回 FALSE。\r\n\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n$keywords = preg_split (&quot;/[\\s,]+/&quot;, &quot;hypertext language, programming&quot;); \r\nprint_r($keywords);\r\n// 输出\r\n// Array ( [0] =&gt; hypertext [1] =&gt; language [2] =&gt; programming )\r\n[/php]\r\n', 'PHP正则表达式的应用', '', 'publish', 'open', 'closed', '', 'php%e6%ad%a3%e5%88%99%e8%a1%a8%e8%be%be%e5%bc%8f%e7%9a%84%e5%ba%94%e7%94%a8', '', '', '2017-07-13 14:49:32', '2017-07-13 06:49:32', '', 0, 'https://www.gzpblog.com/?p=1141', 0, 'post', '', 0),
(1144, 1, '2017-07-13 14:41:36', '2017-07-13 06:41:36', '<blockquote>\r\n<div></div>\r\n<div>关于PCRE的介绍以及实现正则表达式功能的所有说明，都可以在官方手册中看到：<a href=\"http://php.net/manual/zh/book.pcre.php\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式(兼容 Perl)</a></div></blockquote>\r\n<h2>一 认识PCRE</h2>\r\n<h3>1. 什么是PCRE</h3>\r\n<h3>PCRE 库是一个实现了与 perl 5 在语法和语义上略有差异的正则表达式模式匹配功能的函数集。</h3>\r\n2. PCRE 库介绍\r\n<div>PCRE 是 PHP 核心扩展，所以总是启用的。</div>\r\n<div>默认情况下，该扩展使用内置的 PCRE library。或者，也可以通过指定 configure 选项 --with-pcre-regex=DIR 设置外部 PCRE library 目录，DIR 是 PCRE 的 include 和 library 文件位置。 PHP 5.6/7.0 推荐使用 PCRE 8.10 或更高版本。</div>\r\n<div>这些函数中使用的模式语法非常类似 perl。表达式必须用分隔符闭合，比如一个正斜杠(/)。 分隔符可以使任意非字母数字，除反斜杠(\\)和空字节之外的非空白 ascii 字符。 如果分隔符 在表达式中使用，需要使用反斜线进行转义。自php 4.0.4开始，可以使用 perl 样式的()、 {}、 [] 以及 &lt;&gt; 作为分隔符。</div>\r\n<h3>3. PCRE正则与POSIX 正则</h3>\r\n<div>除了PCRE正则库，还有POSIX 正则库。 <strong>自PHP 5.3.0起， POSIX 正则表达式扩展被废弃。</strong>所以，这里也没有必要研究 POSIX 正则了，这里我们就看PCRE正则。</div>\r\n<h3>4. 版本特性</h3>\r\n<div>PHP 7.0.0 起 PCRE 默认支持 JIT（just-in-time）编译技术，PHP 7.0.12 起可以通过 --without-pcre-jit 禁用 PCRE 的 JIT 功能。</div>\r\n<div>PHP 的 Windows 版本已内建对此扩展的支持。不需要载入额外的扩展来使用这些函数。</div>\r\n<div>PHP 5.3.0 的之前版本，可通过 --without-pcre-regex 配置选项禁用此扩展。</div>\r\n<h2>二. 预定义常量</h2>\r\n下列常量由此扩展定义，且仅在此扩展编译入 PHP 或在运行时动态载入时可用。\r\n<table style=\"height: 1034px;\" border=\"1\" width=\"943\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td><strong>常量</strong></td>\r\n<td><strong>描述</strong></td>\r\n<td><strong>自哪个版本起</strong></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_PATTERN_ORDER</td>\r\n<td>结果按照”规则”排序，仅用于preg_match_all()，即$matches[0]是完整规则的匹配结果，$matches[1]是第一个子组匹配的结果，等等。</td>\r\n<td>since</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SET_ORDER</td>\r\n<td>结果按照”集合”排序，仅用于preg_match_all()，即$matches[0]保存第一次匹配结果的所有结果(包含子组)信息, $matches[1]保存第二次的结果信息，等等。</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_OFFSET_CAPTURE</td>\r\n<td>查看PREG_SPLIT_OFFSET_CAPTURE的描述。</td>\r\n<td>4.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_NO_EMPTY</td>\r\n<td>这个标记告诉preg_split()仅返回非空部分。</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_DELIM_CAPTURE</td>\r\n<td>这个标记告诉preg_split()同时捕获括号表达式匹配到的内容。</td>\r\n<td>4.0.5</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_OFFSET_CAPTURE</td>\r\n<td>如果设置了这个标记，每次出现的匹配子串的偏移量也会被返回。注意，这会改变返回数组中的值，每个元素都是由匹配子串作为第0个元素，它相对目标字符串的偏移量作为第1个元素的数组。这个标记只能用于preg_split()。</td>\r\n<td>4.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_NO_ERROR</td>\r\n<td>没有匹配错误时调用 preg_last_error() 返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_INTERNAL_ERROR</td>\r\n<td>如果有PCRE内部错误时调用 preg_last_error() 返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BACKTRACK_LIMIT_ERROR</td>\r\n<td>如果调用回溯限制超出，调用preg_last_error()时返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_RECURSION_LIMIT_ERROR</td>\r\n<td>如果递归限制超出，调用preg_last_error()时返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BAD_UTF8_ERROR</td>\r\n<td>如果最后一个错误时由于异常的utf-8数据(仅在运行在UTF-8 模式正则表达式下可用)。导致的，调用preg_last_error()返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BAD_UTF8_OFFSET_ERROR</td>\r\n<td>如果偏移量与合法的urf-8代码不匹配(仅在运行在UTF-8 模式正则表达式下可用)。调用preg_last_error()返回。</td>\r\n<td>5.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_JIT_STACKLIMIT_ERROR</td>\r\n<td>当 PCRE 函数因 JIT 栈空间限制而失败， preg_last_error() 就会返回此常量。</td>\r\n<td>7.0.0</td>\r\n</tr>\r\n<tr>\r\n<td>PCRE_VERSION</td>\r\n<td>PCRE版本号和发布日期(比如： \"7.0 18-Dec-2006\")。</td>\r\n<td>5.2.4</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2>三 正则语法</h2>\r\n1. 详细的正则语法可以参考：<a href=\"http://php.net/manual/zh/reference.pcre.pattern.syntax.php\" target=\"_blank\" rel=\"noopener noreferrer\">http://php.net/manual/zh/reference.pcre.pattern.syntax.php</a>\r\n\r\n2. 之前的一个总结，正则表达式字符表和常用正则表达式：<a href=\"https://www.gzpblog.com/20161009/278.html\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式</a>\r\n<h2>四 PCRE 函数</h2>\r\n这篇文章的关注重点将在于函数，和函数的应用，即是正则在PHP中的具体实现。加下来一个一个看。\r\n<h2>1. preg_filter() 执行一个正则表达式搜索和替换</h2>\r\n语法：mixed preg_filter ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：preg_filter()等价于preg_replace() 除了它仅仅返回(可能经过转化)与目标匹配的结果。\r\n\r\n返回值： 如果subject是一个数组，返回一个数组， 其他情况返回一个字符串。如果没有找到匹配或者发生了错误，当subject是数组 时返回一个空数组，其他情况返回NULL。\r\n\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n$subject = array(\'1\', \'a\', \'2\', \'b\', \'3\', \'A\', \'B\', \'4\'); \r\n$pattern = array(\'/\\d/\', \'/[a-z]/\', \'/[1a]/\'); \r\n$replace = array(\'A:$0\', \'B:$0\', \'C:$0\'); \r\n\r\nprint_r(preg_filter($pattern, $replace, $subject)); //使用filter\r\n\r\nprint_r(preg_replace($pattern, $replace, $subject)); //使用replace\r\n\r\n/*\r\n返回： \r\nArray\r\n(\r\n    [0] =&gt; A:C:1\r\n    [1] =&gt; B:C:a\r\n    [2] =&gt; A:2\r\n    [3] =&gt; B:b\r\n    [4] =&gt; A:3\r\n    [7] =&gt; A:4\r\n)\r\nArray\r\n(\r\n    [0] =&gt; A:C:1\r\n    [1] =&gt; B:C:a\r\n    [2] =&gt; A:2\r\n    [3] =&gt; B:b\r\n    [4] =&gt; A:3\r\n    [5] =&gt; A\r\n    [6] =&gt; B\r\n    [7] =&gt; A:4\r\n)\r\npreg_filter()只返回匹配到的；preg_replace() 返回所有\r\n*/\r\n[/php]\r\n\r\n<h3>2. preg_grep() 返回匹配模式的数组条目；正则检索一个数组的所有元素</h3>\r\n语法：array preg_grep ( string $pattern , array $input [, int $flags = 0 ] )\r\n\r\n说明：返回给定数组input中与模式pattern 匹配的元素组成的数组.\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式, 字符串形式.</li>\r\n 	<li>input，输入数组.</li>\r\n 	<li>flags，如果设置为PREG_GREP_INVERT, 这个函数返回输入数组中与 给定模式pattern不匹配的元素组成的数组\r\n返回值：返回使用input中key做索引的数组。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n// 找出有p的\r\n$foods = array(&quot;pasta&quot;, &quot;steak&quot;, &quot;fish&quot;, &quot;potatoes&quot;);\r\n$p_foods = preg_grep(&quot;/p(\\w+)/&quot;, $foods);\r\nprint_r($p_foods)\r\n// 输出\r\n// Array ( [0] =&gt; pasta [3] =&gt; potatoes )\r\n[/php]\r\n\r\n<h3>3. preg_last_error() 返回最后一个PCRE正则执行产生的错误代码</h3>\r\n语法：int preg_last_error ( void )\r\n\r\n返回值：返回最后一次PCRE正则执行的错误代码。\r\n<ul>\r\n 	<li>PREG_NO_ERROR 没有匹配错误</li>\r\n 	<li>PREG_INTERNAL_ERROR 有PCRE内部错误</li>\r\n 	<li>PREG_BACKTRACK_LIMIT_ERROR 调用回溯限制超出</li>\r\n 	<li>PREG_RECURSION_LIMIT_ERROR 递归限制超出</li>\r\n 	<li>PREG_BAD_UTF8_ERROR 异常的utf-8数据导致</li>\r\n 	<li>PREG_BAD_UTF8_OFFSET_ERROR （自 PHP 5.3.0 起） 偏移量与合法的urf-8代码不匹配</li>\r\n 	<li>PREG_JIT_STACKLIMIT_ERROR (自 PHP 7.0.0 起) 因 JIT 栈空间限制而失败</li>\r\n</ul>\r\n具体错误代码的详情在上面预定义常量部分。\r\n\r\n例子：\r\n\r\n[php]&lt;/pre&gt;\r\n&lt;?php\r\n$a = preg_match(\'/(?:\\D+|&lt;\\d+&gt;)*[!?]/\', \'foobar foobar foobar\');\r\nprint_r($a);\r\n\r\nif (preg_last_error() == PREG_BACKTRACK_LIMIT_ERROR) {\r\nprint \'Backtrack limit was exhausted!\';\r\n}\r\n// 输出：Backtrack limit was exhausted!\r\n\r\n[/php]\r\n\r\n<h3>4. preg_match() 执行匹配正则表达式</h3>\r\n语法：int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags = 0 [, int $offset = 0 ]]] )\r\n\r\n说明：搜索subject与pattern给定的正则表达式的一个匹配。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，字符串类型。</li>\r\n 	<li>subject，输入字符串。</li>\r\n 	<li>matches，如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。</li>\r\n 	<li>flags，flags可以被设置为以下标记值：\r\n○ PREG_OFFSET_CAPTURE，如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</li>\r\n 	<li>offset，通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个位置开始搜索(单位是字节)。\r\n返回值：preg_match()返回 pattern 的匹配次数。 它的值将是0次（不匹配）或1次，因为preg_match()在第一次匹配后 将会停止搜索。preg_match_all()不同于此，它会一直搜索subject 直到到达结尾。 如果发生错误preg_match()返回 FALSE。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n//从URL中获取主机名称\r\npreg_match(\'@^(?:http://)?([^/]+)@i\', &quot;http://www.php.net/index.html&quot;, $matches);\r\nprint_r($matches);\r\n// 输出 Array ( [0] =&gt; http://www.php.net [1] =&gt; www.php.net )\r\n\r\npreg_match(\'/[^.]+\\.[^.]+$/\', $matches[1], $matches);\r\nprint_r($matches);\r\n// 输出 Array ( [0] =&gt; php.net )\r\n[/php]\r\n\r\n<h3>5. preg_match_all() 执行一个全局正则表达式匹配</h3>\r\n语法：int preg_match_all ( string $pattern , string $subject [, array &amp;$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0 ]]] )\r\n\r\n说明： 搜索subject中所有匹配pattern给定正则表达式的匹配结果并且将它们以flag指定顺序输出到matches中。在第一个匹配找到后，子序列继续从最后一次匹配位置搜索。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，字符串形式。</li>\r\n 	<li>subject，输入字符串。</li>\r\n 	<li>matches，多维数组，作为输出参数输出所有匹配结果, 数组排序通过flags指定。</li>\r\n 	<li>flags，可以结合下面标记使用(注意不能同时使用PREG_PATTERN_ORDER和PREG_SET_ORDER)\r\n○ PREG_PATTERN_ORDER 结果排序为$matches[0]保存完整模式的所有匹配, $matches[1] 保存第一个子组的所有匹配，以此类推。\r\n○ PREG_SET_ORDER 结果排序为$matches[0]包含第一次匹配得到的所有匹配(包含子组)， $matches[1]是包含第二次匹配到的所有匹配(包含子组)的数组，以此类推。\r\n○ PREG_OFFSET_CAPTURE 如果这个标记被传递，每个发现的匹配返回时会增加它相对目标字符串的偏移量。 注意这会改变matches中的每一个匹配结果字符串元素，使其 成为一个第0个元素为匹配结果字符串，第1个元素为 匹配结果字符串在subject中的偏移量。\r\n○ 如果没有给定排序标记，假定设置为PREG_PATTERN_ORDER。</li>\r\n 	<li>offset，通常， 查找时从目标字符串的开始位置开始。可选参数offset用于 从目标字符串中指定位置开始搜索(单位是字节)。\r\n返回值：返回完整匹配次数（可能是0），或者如果发生错误返回FALSE。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n// \\\\2是一个后向引用的示例. 这会告诉pcre它必须匹配正则表达式中第二个圆括号(这里是([\\w]+))\r\n// 匹配到的结果. 这里使用两个反斜线是因为这里使用了双引号.\r\n$html = &quot;&lt;b&gt;bold text&lt;/b&gt;&lt;a href=howdy.html&gt;click me&lt;/a&gt;&quot;;\r\npreg_match_all(&quot;/(&lt;([\\w]+)[^&gt;]*&gt;)(.*?)(&lt;\\/\\\\2&gt;)/&quot;, $html, $matches, PREG_SET_ORDER);\r\nprint_r($matches);\r\n/*\r\n输出\r\nArray\r\n(\r\n    [0] =&gt; Array\r\n        (\r\n            [0] =&gt; &lt;b&gt;bold text&lt;/b&gt;\r\n            [1] =&gt; &lt;b&gt;\r\n            [2] =&gt; b\r\n            [3] =&gt; bold text\r\n            [4] =&gt; &lt;/b&gt;\r\n        )\r\n\r\n    [1] =&gt; Array\r\n        (\r\n            [0] =&gt; &lt;a href=howdy.html&gt;click me&lt;/a&gt;\r\n            [1] =&gt; &lt;a href=howdy.html&gt;\r\n            [2] =&gt; a\r\n            [3] =&gt; click me\r\n            [4] =&gt; &lt;/a&gt;\r\n        )\r\n\r\n)\r\n*/\r\n[/php]\r\n\r\n<h3>6. preg_quote() 转义正则表达式字符</h3>\r\n语法：string preg_quote ( string $str [, string $delimiter = NULL ] )\r\n\r\n说明： preg_quote()需要参数 str 并向其中每个正则表达式语法中的字符前增加一个反斜线。 这通常用于你有一些运行时字符串需要作为正则表达式进行匹配的时候。\r\n<ul>\r\n 	<li>正则表达式特殊字符有： . \\ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | : -</li>\r\n 	<li>注意 / 不是正则表达式特殊字符。</li>\r\n</ul>\r\n注意：preg_quote() 的应用场景不是用于 preg_replace() 的 $replacement 字符串参数。\r\n\r\n参数：\r\n<ul>\r\n 	<li>str，输入字符串</li>\r\n 	<li>delimiter，如果指定了可选参数 delimiter，它也会被转义。这通常用于 转义PCRE函数使用的分隔符。 / 是最常见的分隔符。\r\n返回值：返回转义后的字符串。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n$keywords = \'$40 for a g3/400\';\r\n$keywords = preg_quote($keywords, \'/\');\r\necho $keywords; \r\n// 返回 \\$40 for a g3\\/400\r\n// $是正则表达式特殊字符, /被当参数传入也转义\r\n[/php]\r\n\r\n<h3>7. preg_replace_callback() 执行一个正则表达式搜索并且使用一个回调进行替换</h3>\r\n语法：mixed preg_replace_callback ( mixed $pattern , callable $callback , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：这个函数的行为除了 可以指定一个 callback 替代 replacement 进行替换 字符串的计算，其他方面等同于 preg_replace()。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，可以使字符串或一个字符串数组。</li>\r\n 	<li>callback， 一个回调函数，在每次需要替换时调用，调用时函数得到的参数是从subject 中匹配到的结果。回调函数返回真正参与替换的字符串。这是该回调函数的签名：string handler ( array $matches ) 。你可能经常会需要callback函数而 仅用于preg_replace_callback()一个地方的调用。在这种情况下，你可以 使用匿名函数来定义一个匿名函数作 为preg_replace_callback()调用时的回调。 这样做你可以保留所有 调用信息在同一个位置并且不会因为一个不在任何其他地方使用的回调函数名称而污染函数名称空间。\r\n● subject，要搜索替换的目标字符串或字符串数组。\r\n● limit，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。\r\n● count，如果指定，这个变量将被填充为替换执行的次数。\r\n返回值： 如果subject是一个数组， preg_replace_callback()返回一个数组，其他情况返回字符串。 错误发生时返回 NULL。如果查找到了匹配，返回替换后的目标字符串（或字符串数组）， 其他情况subject 将会无变化返回。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n/* 将文本中的年份增加一年 */\r\n$text = &quot;April fools day is 04/01/2002\\n&quot;;\r\n$text.= &quot;Last christmas was 12/24/2001\\n&quot;;\r\n// 回调函数\r\nfunction next_year($matches)\r\n{\r\n    /*\r\n    print_r($matches);$matches为:\r\n    Array\r\n    (\r\n        [0] =&gt; 04/01/2002\r\n        [1] =&gt; 04/01/\r\n        [2] =&gt; 2002\r\n    )\r\n    Array\r\n    (\r\n        [0] =&gt; 12/24/2001\r\n        [1] =&gt; 12/24/\r\n        [2] =&gt; 2001\r\n    )\r\n    说明匹配到一个就扔进来一次\r\n    */\r\n    return $matches[1].($matches[2]+1);\r\n}\r\n$text = preg_replace_callback(&quot;|(\\d{2}/\\d{2}/)(\\d{4})|&quot;, &quot;next_year&quot;, $text);\r\necho $text;\r\n/*\r\n输出\r\nApril fools day is 04/01/2003\r\nLast christmas was 12/24/2002\r\n*/\r\n[/php]\r\n\r\n<h3>8. preg_replace_callback_array() 执行一个正则表达式搜索并且使用多个回调进行替换</h3>\r\n语法：mixed preg_replace_callback_array ( array $patterns_and_callbacks , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：类似于 preg_replace_callback(), 除了回调函数是基于每个参数。\r\n\r\n参数：\r\n<ul>\r\n 	<li>patterns_and_callbacks，参数（keys）对应回调函数（values）的数组。</li>\r\n 	<li>subject，要搜索替换的目标字符串或字符串数组。</li>\r\n 	<li>limit，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。</li>\r\n 	<li>count，如果指定，这个变量将被填充为替换执行的次数。</li>\r\n</ul>\r\n返回值：\r\npreg_replace_callback_array() 如果参数是数组则会返回一个数组，否则为字符串。出错时返回 NULL；如果匹配到，会返回一个新的subject，否则\r\n\r\n例子：\r\n\r\n[php]\r\n&lt;?php \r\n$subject = \'Aaaaaa Bbb\';\r\npreg_replace_callback_array(\r\n    [\r\n        \'~[a]+~i\' =&gt; function ($match) {\r\n            echo strlen($match[0]), \' matches for &quot;a&quot; found\', PHP_EOL;\r\n        },\r\n        \'~[b]+~i\' =&gt; function ($match) {\r\n            echo strlen($match[0]), \' matches for &quot;b&quot; found\', PHP_EOL;\r\n        }\r\n    ],\r\n    $subject\r\n);\r\n/*\r\n输出\r\n6 matches for &quot;a&quot; found\r\n3 matches for &quot;b&quot; found\r\n*/\r\n[/php]\r\n\r\n<h3>9. preg_replace() 执行一个正则表达式的搜索和替换</h3>\r\n语法：mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：搜索subject中匹配pattern的部分， 以replacement进行替换。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式。可以使一个字符串或字符串数组。 可以使用一些PCRE修饰符。</li>\r\n 	<li>replacement，用于替换的字符串或字符串数组。如果这个参数是一个字符串，并且pattern 是一个数组，那么所有的模式都使用这个字符串进行替换。如果pattern和replacement 都是数组，每个pattern使用replacement中对应的 元素进行替换。如果replacement中的元素比pattern中的少， 多出来的pattern使用空字符串进行替换。replacement中可以包含后向引用\\\\n 或$n，语法上首选后者。 每个 这样的引用将被匹配到的第n个捕获子组捕获到的文本替换。 n 可以是0-99，\\\\0和$0代表完整的模式匹配文本。 捕获子组的序号计数方式为：代表捕获子组的左括号从左到右， 从1开始数。如果要在replacement 中使用反斜线，必须使用4个(\"\\\\\\\\\"，译注：因为这首先是php的字符串，经过转义后，是两个，再经过 正则表达式引擎后才被认为是一个原文反斜线)。当在替换模式下工作并且后向引用后面紧跟着需要是另外一个数字(比如：在一个匹配模式后紧接着增加一个原文数字)， 不能使用\\\\1这样的语法来描述后向引用。比如， \\\\11将会使preg_replace() 不能理解你希望的是一个\\\\1后向引用紧跟一个原文1，还是 一个\\\\11后向引用后面不跟任何东西。 这种情况下解决方案是使用${1}1。 这创建了一个独立的$1后向引用, 一个独立的原文1。当使用被弃用的 e 修饰符时, 这个函数会转义一些字符(即：\'、\"、 \\ 和 NULL) 然后进行后向引用替换。当这些完成后请确保后向引用解析完后没有单引号或 双引号引起的语法错误(比如： \'strlen(\\\'$1\\\')+strlen(\"$2\")\')。确保符合PHP的 字符串语法，并且符合eval语法。因为在完成替换后， 引擎会将结果字符串作为php代码使用eval方式进行评估并将返回值作为最终参与替换的字符串。</li>\r\n 	<li>subject，要进行搜索和替换的字符串或字符串数组。如果subject是一个数组，搜索和替换回在subject 的每一个元素上进行, 并且返回值也会是一个数组。</li>\r\n 	<li>limit，每个模式在每个subject上进行替换的最大次数。默认是 -1(无限)。</li>\r\n 	<li>count，如果指定，将会被填充为完成的替换次数。\r\n返回值： 如果subject是一个数组， preg_replace()返回一个数组， 其他情况下返回一个字符串。如果匹配被查找到，替换后的subject被返回，其他情况下 返回没有改变的 subject。如果发生错误，返回 NULL 。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php \r\n$patterns = array (\'/(19|20)(\\d{2})-(\\d{1,2})-(\\d{1,2})/\', \'/^\\s*{(\\w+)}\\s*=/\');\r\n$replace = array (\'\\3/\\4/\\1\\2\', \'$\\1 =\');\r\necho preg_replace($patterns, $replace, \'{startDate} = 1999-5-27\');\r\n// 输出: $startDate = 5/27/1999\r\n[/php]\r\n\r\n<h3>10. preg_split() 通过一个正则表达式分隔字符串</h3>\r\n语法：array preg_split ( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]] )\r\n\r\n说明：通过一个正则表达式分隔给定字符串.\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，用于搜索的模式，字符串形式。</li>\r\n 	<li>subject，输入字符串</li>\r\n 	<li>limit，如果指定，将限制分隔得到的子串最多只有limit个，返回的最后一个 子串将包含所有剩余部分。limit值为-1， 0或null时都代表\"不限制\"， 作为php的标准，你可以使用null跳过对flags的设置。</li>\r\n 	<li>flags，flags 可以是任何下面标记的组合(以位或运算 | 组合)：\r\n○ PREG_SPLIT_NO_EMPTY，如果这个标记被设置， preg_split() 将进返回分隔后的非空部分。\r\n○ PREG_SPLIT_DELIM_CAPTURE，如果这个标记设置了，用于分隔的模式中的括号表达式将被捕获并返回。\r\n○ PREG_SPLIT_OFFSET_CAPTURE，如果这个标记被设置, 对于每一个出现的匹配返回时将会附加字符串偏移量. 注意：这将会改变返回数组中的每一个元素, 使其每个元素成为一个由第0 个元素为分隔后的子串，第1个元素为该子串在subject 中的偏移量组成的数组。</li>\r\n</ul>\r\n返回值：返回一个使用 pattern 边界分隔 subject 后得到 的子串组成的数组， 或者在失败时返回 FALSE。\r\n\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n$keywords = preg_split (&quot;/[\\s,]+/&quot;, &quot;hypertext language, programming&quot;); \r\nprint_r($keywords);\r\n// 输出\r\n// Array ( [0] =&gt; hypertext [1] =&gt; language [2] =&gt; programming )\r\n[/php]\r\n', 'PHP正则表达式的应用', '', 'inherit', 'closed', 'closed', '', '1141-revision-v1', '', '', '2017-07-13 14:41:36', '2017-07-13 06:41:36', '', 1141, 'https://www.gzpblog.com/20170713/1144.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1142, 1, '2017-07-13 14:35:19', '2017-07-13 06:35:19', '<blockquote>\r\n<div></div>\r\n<div>关于PCRE的介绍以及实现正则表达式功能的所有说明，都可以在官方手册中看到：<a href=\"http://php.net/manual/zh/book.pcre.php\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式(兼容 Perl)</a></div></blockquote>\r\n<h2>一 认识PCRE</h2>\r\n<h3>1. 什么是PCRE</h3>\r\n<h3>PCRE 库是一个实现了与 perl 5 在语法和语义上略有差异的正则表达式模式匹配功能的函数集。</h3>\r\n2. PCRE 库介绍\r\n<div>PCRE 是 PHP 核心扩展，所以总是启用的。</div>\r\n<div>默认情况下，该扩展使用内置的 PCRE library。或者，也可以通过指定 configure 选项 --with-pcre-regex=DIR 设置外部 PCRE library 目录，DIR 是 PCRE 的 include 和 library 文件位置。 PHP 5.6/7.0 推荐使用 PCRE 8.10 或更高版本。</div>\r\n<div>这些函数中使用的模式语法非常类似 perl。表达式必须用分隔符闭合，比如一个正斜杠(/)。 分隔符可以使任意非字母数字，除反斜杠(\\)和空字节之外的非空白 ascii 字符。 如果分隔符 在表达式中使用，需要使用反斜线进行转义。自php 4.0.4开始，可以使用 perl 样式的()、 {}、 [] 以及 &lt;&gt; 作为分隔符。</div>\r\n<h3>3. PCRE正则与POSIX 正则</h3>\r\n<div>除了PCRE正则库，还有POSIX 正则库。 <strong>自PHP 5.3.0起， POSIX 正则表达式扩展被废弃。</strong>所以，这里也没有必要研究 POSIX 正则了，这里我们就看PCRE正则。</div>\r\n<h3>4. 版本特性</h3>\r\n<div>PHP 7.0.0 起 PCRE 默认支持 JIT（just-in-time）编译技术，PHP 7.0.12 起可以通过 --without-pcre-jit 禁用 PCRE 的 JIT 功能。</div>\r\n<div>PHP 的 Windows 版本已内建对此扩展的支持。不需要载入额外的扩展来使用这些函数。</div>\r\n<div>PHP 5.3.0 的之前版本，可通过 --without-pcre-regex 配置选项禁用此扩展。</div>\r\n<h2>二. 预定义常量</h2>\r\n下列常量由此扩展定义，且仅在此扩展编译入 PHP 或在运行时动态载入时可用。\r\n<table style=\"height: 1034px;\" border=\"1\" width=\"943\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td><strong>常量</strong></td>\r\n<td><strong>描述</strong></td>\r\n<td><strong>自哪个版本起</strong></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_PATTERN_ORDER</td>\r\n<td>结果按照”规则”排序，仅用于preg_match_all()，即$matches[0]是完整规则的匹配结果，$matches[1]是第一个子组匹配的结果，等等。</td>\r\n<td>since</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SET_ORDER</td>\r\n<td>结果按照”集合”排序，仅用于preg_match_all()，即$matches[0]保存第一次匹配结果的所有结果(包含子组)信息, $matches[1]保存第二次的结果信息，等等。</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_OFFSET_CAPTURE</td>\r\n<td>查看PREG_SPLIT_OFFSET_CAPTURE的描述。</td>\r\n<td>4.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_NO_EMPTY</td>\r\n<td>这个标记告诉preg_split()仅返回非空部分。</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_DELIM_CAPTURE</td>\r\n<td>这个标记告诉preg_split()同时捕获括号表达式匹配到的内容。</td>\r\n<td>4.0.5</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_OFFSET_CAPTURE</td>\r\n<td>如果设置了这个标记，每次出现的匹配子串的偏移量也会被返回。注意，这会改变返回数组中的值，每个元素都是由匹配子串作为第0个元素，它相对目标字符串的偏移量作为第1个元素的数组。这个标记只能用于preg_split()。</td>\r\n<td>4.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_NO_ERROR</td>\r\n<td>没有匹配错误时调用 preg_last_error() 返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_INTERNAL_ERROR</td>\r\n<td>如果有PCRE内部错误时调用 preg_last_error() 返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BACKTRACK_LIMIT_ERROR</td>\r\n<td>如果调用回溯限制超出，调用preg_last_error()时返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_RECURSION_LIMIT_ERROR</td>\r\n<td>如果递归限制超出，调用preg_last_error()时返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BAD_UTF8_ERROR</td>\r\n<td>如果最后一个错误时由于异常的utf-8数据(仅在运行在UTF-8 模式正则表达式下可用)。导致的，调用preg_last_error()返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BAD_UTF8_OFFSET_ERROR</td>\r\n<td>如果偏移量与合法的urf-8代码不匹配(仅在运行在UTF-8 模式正则表达式下可用)。调用preg_last_error()返回。</td>\r\n<td>5.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_JIT_STACKLIMIT_ERROR</td>\r\n<td>当 PCRE 函数因 JIT 栈空间限制而失败， preg_last_error() 就会返回此常量。</td>\r\n<td>7.0.0</td>\r\n</tr>\r\n<tr>\r\n<td>PCRE_VERSION</td>\r\n<td>PCRE版本号和发布日期(比如： \"7.0 18-Dec-2006\")。</td>\r\n<td>5.2.4</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2>三 正则语法</h2>\r\n1. 详细的正则语法可以参考：<a href=\"http://php.net/manual/zh/reference.pcre.pattern.syntax.php\" target=\"_blank\" rel=\"noopener noreferrer\">http://php.net/manual/zh/reference.pcre.pattern.syntax.php</a>\r\n\r\n2. 之前的一个总结，正则表达式字符表和常用正则表达式：<a href=\"https://www.gzpblog.com/20161009/278.html\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式</a>\r\n<h2>四 PCRE 函数</h2>\r\n这篇文章的关注重点将在于函数，和函数的应用，即是正则在PHP中的具体实现。加下来一个一个看。\r\n<h2>1. preg_filter() 执行一个正则表达式搜索和替换</h2>\r\n语法：mixed preg_filter ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：preg_filter()等价于preg_replace() 除了它仅仅返回(可能经过转化)与目标匹配的结果。\r\n\r\n返回值： 如果subject是一个数组，返回一个数组， 其他情况返回一个字符串。如果没有找到匹配或者发生了错误，当subject是数组 时返回一个空数组，其他情况返回NULL。\r\n\r\n例子：\r\n\r\n[php]&amp;lt;?php\r\n$subject = array(\'1\', \'a\', \'2\', \'b\', \'3\', \'A\', \'B\', \'4\'); \r\n$pattern = array(\'/\\d/\', \'/[a-z]/\', \'/[1a]/\'); \r\n$replace = array(\'A:$0\', \'B:$0\', \'C:$0\'); \r\n\r\nprint_r(preg_filter($pattern, $replace, $subject)); //使用filter\r\n\r\nprint_r(preg_replace($pattern, $replace, $subject)); //使用replace\r\n\r\n/*\r\n返回： \r\nArray\r\n(\r\n [0] =&amp;gt; A:C:1\r\n [1] =&amp;gt; B:C:a\r\n [2] =&amp;gt; A:2\r\n [3] =&amp;gt; B:b\r\n [4] =&amp;gt; A:3\r\n [7] =&amp;gt; A:4\r\n)\r\nArray\r\n(\r\n [0] =&amp;gt; A:C:1\r\n [1] =&amp;gt; B:C:a\r\n [2] =&amp;gt; A:2\r\n [3] =&amp;gt; B:b\r\n [4] =&amp;gt; A:3\r\n [5] =&amp;gt; A\r\n [6] =&amp;gt; B\r\n [7] =&amp;gt; A:4\r\n)\r\npreg_filter()只返回匹配到的；preg_replace() 返回所有\r\n*/\r\n[/php]\r\n\r\n<h3>2. preg_grep() 返回匹配模式的数组条目；正则检索一个数组的所有元素</h3>\r\n语法：array preg_grep ( string $pattern , array $input [, int $flags = 0 ] )\r\n\r\n说明：返回给定数组input中与模式pattern 匹配的元素组成的数组.\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式, 字符串形式.</li>\r\n 	<li>input，输入数组.</li>\r\n 	<li>flags，如果设置为PREG_GREP_INVERT, 这个函数返回输入数组中与 给定模式pattern不匹配的元素组成的数组\r\n返回值：返回使用input中key做索引的数组。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&amp;lt;?php\r\n// 找出有p的\r\n$foods = array(&quot;pasta&quot;, &quot;steak&quot;, &quot;fish&quot;, &quot;potatoes&quot;);\r\n$p_foods = preg_grep(&quot;/p(\\w+)/&quot;, $foods);\r\nprint_r($p_foods)\r\n// 输出\r\n// Array ( [0] =&amp;gt; pasta [3] =&amp;gt; potatoes )\r\n[/php]\r\n\r\n<h3>3. preg_last_error() 返回最后一个PCRE正则执行产生的错误代码</h3>\r\n语法：int preg_last_error ( void )\r\n\r\n返回值：返回最后一次PCRE正则执行的错误代码。\r\n<ul>\r\n 	<li>PREG_NO_ERROR 没有匹配错误</li>\r\n 	<li>PREG_INTERNAL_ERROR 有PCRE内部错误</li>\r\n 	<li>PREG_BACKTRACK_LIMIT_ERROR 调用回溯限制超出</li>\r\n 	<li>PREG_RECURSION_LIMIT_ERROR 递归限制超出</li>\r\n 	<li>PREG_BAD_UTF8_ERROR 异常的utf-8数据导致</li>\r\n 	<li>PREG_BAD_UTF8_OFFSET_ERROR （自 PHP 5.3.0 起） 偏移量与合法的urf-8代码不匹配</li>\r\n 	<li>PREG_JIT_STACKLIMIT_ERROR (自 PHP 7.0.0 起) 因 JIT 栈空间限制而失败</li>\r\n</ul>\r\n具体错误代码的详情在上面预定义常量部分。\r\n\r\n例子：\r\n\r\n[php]&lt;br data-mce-bogus=&quot;1&quot;&gt;\r\n&lt;div&gt;&amp;lt;?php&lt;/div&gt;&lt;div&gt;$a = preg_match(\'/(?:\\D+|&amp;lt;\\d+&amp;gt;)*[!?]/\', \'foobar foobar foobar\');&lt;/div&gt;&lt;div&gt;print_r($a);&lt;/div&gt;&lt;div&gt;\r\n&lt;/div&gt;&lt;div&gt;if (preg_last_error() == PREG_BACKTRACK_LIMIT_ERROR) {&lt;/div&gt;&lt;div&gt;print \'Backtrack limit was exhausted!\';&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;div&gt;// 输出：Backtrack limit was exhausted!&lt;/div&gt;\r\n[/php]\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n<h3>4. preg_match() 执行匹配正则表达式</h3>\r\n语法：int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags = 0 [, int $offset = 0 ]]] )\r\n\r\n说明：搜索subject与pattern给定的正则表达式的一个匹配。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，字符串类型。</li>\r\n 	<li>subject，输入字符串。</li>\r\n 	<li>matches，如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。</li>\r\n 	<li>flags，flags可以被设置为以下标记值：\r\n○ PREG_OFFSET_CAPTURE，如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</li>\r\n 	<li>offset，通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个位置开始搜索(单位是字节)。\r\n返回值：preg_match()返回 pattern 的匹配次数。 它的值将是0次（不匹配）或1次，因为preg_match()在第一次匹配后 将会停止搜索。preg_match_all()不同于此，它会一直搜索subject 直到到达结尾。 如果发生错误preg_match()返回 FALSE。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;div&gt;&amp;lt;?php&lt;/div&gt;&lt;div&gt;//从URL中获取主机名称&lt;/div&gt;&lt;div&gt;preg_match(\'@^(?:http://)?([^/]+)@i\', &quot;http://www.php.net/index.html&quot;, $matches);&lt;/div&gt;&lt;div&gt;print_r($matches);&lt;/div&gt;&lt;div&gt;// 输出 Array ( [0] =&amp;gt; http://www.php.net [1] =&amp;gt; www.php.net )&lt;/div&gt;&lt;div&gt;\r\n&lt;/div&gt;&lt;div&gt;preg_match(\'/[^.]+\\.[^.]+$/\', $matches[1], $matches);&lt;/div&gt;&lt;div&gt;print_r($matches);&lt;/div&gt;&lt;div&gt;// 输出 Array ( [0] =&amp;gt; php.net )&lt;/div&gt;\r\n[/php]\r\n\r\n<h3>5. preg_match_all() 执行一个全局正则表达式匹配</h3>\r\n语法：int preg_match_all ( string $pattern , string $subject [, array &amp;$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0 ]]] )\r\n\r\n说明： 搜索subject中所有匹配pattern给定正则表达式的匹配结果并且将它们以flag指定顺序输出到matches中。在第一个匹配找到后，子序列继续从最后一次匹配位置搜索。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，字符串形式。</li>\r\n 	<li>subject，输入字符串。</li>\r\n 	<li>matches，多维数组，作为输出参数输出所有匹配结果, 数组排序通过flags指定。</li>\r\n 	<li>flags，可以结合下面标记使用(注意不能同时使用PREG_PATTERN_ORDER和PREG_SET_ORDER)\r\n○ PREG_PATTERN_ORDER 结果排序为$matches[0]保存完整模式的所有匹配, $matches[1] 保存第一个子组的所有匹配，以此类推。\r\n○ PREG_SET_ORDER 结果排序为$matches[0]包含第一次匹配得到的所有匹配(包含子组)， $matches[1]是包含第二次匹配到的所有匹配(包含子组)的数组，以此类推。\r\n○ PREG_OFFSET_CAPTURE 如果这个标记被传递，每个发现的匹配返回时会增加它相对目标字符串的偏移量。 注意这会改变matches中的每一个匹配结果字符串元素，使其 成为一个第0个元素为匹配结果字符串，第1个元素为 匹配结果字符串在subject中的偏移量。\r\n○ 如果没有给定排序标记，假定设置为PREG_PATTERN_ORDER。</li>\r\n 	<li>offset，通常， 查找时从目标字符串的开始位置开始。可选参数offset用于 从目标字符串中指定位置开始搜索(单位是字节)。\r\n返回值：返回完整匹配次数（可能是0），或者如果发生错误返回FALSE。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]&lt;br data-mce-bogus=&quot;1&quot;&gt;\r\n\r\n&amp;lt;?php\r\n//\\\\2是一个后向引用的示例. 这会告诉pcre它必须匹配正则表达式中第二个圆括号(这里是([\\w]+))\r\n//匹配到的结果. 这里使用两个反斜线是因为这里使用了双引号.\r\n$html = &quot;&amp;lt;b&amp;gt;bold text&amp;lt;/b&amp;gt;&amp;lt;a href=howdy.html&amp;gt;click me&amp;lt;/a&amp;gt;&quot;;\r\npreg_match_all(&quot;/(&amp;lt;([\\w]+)[^&amp;gt;]*&amp;gt;)(.*?)(&amp;lt;\\/\\\\2&amp;gt;)/&quot;, $html, $matches, PREG_SET_ORDER);\r\nprint_r($matches);\r\n/*\r\n输出\r\nArray\r\n(\r\n [0] =&amp;gt; Array\r\n (\r\n [0] =&amp;gt; &amp;lt;b&amp;gt;bold text&amp;lt;/b&amp;gt;\r\n [1] =&amp;gt; &amp;lt;b&amp;gt;\r\n [2] =&amp;gt; b\r\n [3] =&amp;gt; bold text\r\n [4] =&amp;gt; &amp;lt;/b&amp;gt;\r\n )\r\n\r\n [1] =&amp;gt; Array\r\n (\r\n [0] =&amp;gt; &amp;lt;a href=howdy.html&amp;gt;click me&amp;lt;/a&amp;gt;\r\n [1] =&amp;gt; &amp;lt;a href=howdy.html&amp;gt;\r\n [2] =&amp;gt; a\r\n [3] =&amp;gt; click me\r\n [4] =&amp;gt; &amp;lt;/a&amp;gt;\r\n )\r\n\r\n)\r\n*/\r\n\r\n[/php]\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n<h3>6. preg_quote() 转义正则表达式字符</h3>\r\n语法：string preg_quote ( string $str [, string $delimiter = NULL ] )\r\n\r\n说明： preg_quote()需要参数 str 并向其中每个正则表达式语法中的字符前增加一个反斜线。 这通常用于你有一些运行时字符串需要作为正则表达式进行匹配的时候。\r\n<ul>\r\n 	<li>正则表达式特殊字符有： . \\ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | : -</li>\r\n 	<li>注意 / 不是正则表达式特殊字符。</li>\r\n</ul>\r\n注意：preg_quote() 的应用场景不是用于 preg_replace() 的 $replacement 字符串参数。\r\n\r\n参数：\r\n<ul>\r\n 	<li>str，输入字符串</li>\r\n 	<li>delimiter，如果指定了可选参数 delimiter，它也会被转义。这通常用于 转义PCRE函数使用的分隔符。 / 是最常见的分隔符。\r\n返回值：返回转义后的字符串。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]&lt;/pre&gt;\r\n&lt;div&gt;$keywords = \'$40 for a g3/400\';&lt;/div&gt;\r\n&lt;div&gt;$keywords = preg_quote($keywords, \'/\');&lt;/div&gt;\r\n&lt;div&gt;echo $keywords;&lt;/div&gt;\r\n&lt;div&gt;// 返回 \\$40 for a g3\\/400&lt;/div&gt;\r\n&lt;div&gt;// $是正则表达式特殊字符, /被当参数传入也转义&lt;/div&gt;\r\n&lt;pre&gt;[/php]\r\n\r\n<h3>7. preg_replace_callback() 执行一个正则表达式搜索并且使用一个回调进行替换</h3>\r\n语法：mixed preg_replace_callback ( mixed $pattern , callable $callback , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：这个函数的行为除了 可以指定一个 callback 替代 replacement 进行替换 字符串的计算，其他方面等同于 preg_replace()。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，可以使字符串或一个字符串数组。</li>\r\n 	<li>callback， 一个回调函数，在每次需要替换时调用，调用时函数得到的参数是从subject 中匹配到的结果。回调函数返回真正参与替换的字符串。这是该回调函数的签名：string handler ( array $matches ) 。你可能经常会需要callback函数而 仅用于preg_replace_callback()一个地方的调用。在这种情况下，你可以 使用匿名函数来定义一个匿名函数作 为preg_replace_callback()调用时的回调。 这样做你可以保留所有 调用信息在同一个位置并且不会因为一个不在任何其他地方使用的回调函数名称而污染函数名称空间。\r\n● subject，要搜索替换的目标字符串或字符串数组。\r\n● limit，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。\r\n● count，如果指定，这个变量将被填充为替换执行的次数。\r\n返回值： 如果subject是一个数组， preg_replace_callback()返回一个数组，其他情况返回字符串。 错误发生时返回 NULL。如果查找到了匹配，返回替换后的目标字符串（或字符串数组）， 其他情况subject 将会无变化返回。</li>\r\n</ul>\r\n例子：\r\n\r\n\r\n[php]\r\n&lt;div&gt;&lt;?php&lt;/div&gt;\r\n&lt;div&gt;/* 将文本中的年份增加一年 */&lt;/div&gt;\r\n&lt;div&gt;$text = &quot;April fools day is 04/01/2002\\n&quot;;&lt;/div&gt;\r\n&lt;div&gt;$text.= &quot;Last christmas was 12/24/2001\\n&quot;;&lt;/div&gt;\r\n&lt;div&gt;// 回调函数&lt;/div&gt;\r\n&lt;div&gt;function next_year($matches)&lt;/div&gt;\r\n&lt;div&gt;{&lt;/div&gt;\r\n&lt;div&gt;/*&lt;/div&gt;\r\n&lt;div&gt;print_r($matches);$matches为:&lt;/div&gt;\r\n&lt;div&gt;Array&lt;/div&gt;\r\n&lt;div&gt;(&lt;/div&gt;\r\n&lt;div&gt;[0] =&gt; 04/01/2002&lt;/div&gt;\r\n&lt;div&gt;[1] =&gt; 04/01/&lt;/div&gt;\r\n&lt;div&gt;[2] =&gt; 2002&lt;/div&gt;\r\n&lt;div&gt;)&lt;/div&gt;\r\n&lt;div&gt;Array&lt;/div&gt;\r\n&lt;div&gt;(&lt;/div&gt;\r\n&lt;div&gt;[0] =&gt; 12/24/2001&lt;/div&gt;\r\n&lt;div&gt;[1] =&gt; 12/24/&lt;/div&gt;\r\n&lt;div&gt;[2] =&gt; 2001&lt;/div&gt;\r\n&lt;div&gt;)&lt;/div&gt;\r\n&lt;div&gt;说明匹配到一个就扔进来一次&lt;/div&gt;\r\n&lt;div&gt;*/&lt;/div&gt;\r\n&lt;div&gt;return $matches[1].($matches[2]+1);&lt;/div&gt;\r\n&lt;div&gt;}&lt;/div&gt;\r\n&lt;div&gt;$text = preg_replace_callback(&quot;|(\\d{2}/\\d{2}/)(\\d{4})|&quot;, &quot;next_year&quot;, $text);&lt;/div&gt;\r\n&lt;div&gt;echo $text;&lt;/div&gt;\r\n&lt;div&gt;/*&lt;/div&gt;\r\n&lt;div&gt;输出&lt;/div&gt;\r\n&lt;div&gt;April fools day is 04/01/2003&lt;/div&gt;\r\n&lt;div&gt;Last christmas was 12/24/2002&lt;/div&gt;\r\n&lt;div&gt;*/&lt;/div&gt;\r\n[/php]\r\n\r\n<h3>8. preg_replace_callback_array() 执行一个正则表达式搜索并且使用多个回调进行替换</h3>\r\n语法：mixed preg_replace_callback_array ( array $patterns_and_callbacks , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：类似于 preg_replace_callback(), 除了回调函数是基于每个参数。\r\n\r\n参数：\r\n<ul>\r\n 	<li>patterns_and_callbacks，参数（keys）对应回调函数（values）的数组。</li>\r\n 	<li>subject，要搜索替换的目标字符串或字符串数组。</li>\r\n 	<li>limit，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。</li>\r\n 	<li>count，如果指定，这个变量将被填充为替换执行的次数。</li>\r\n</ul>\r\n返回值：\r\npreg_replace_callback_array() 如果参数是数组则会返回一个数组，否则为字符串。出错时返回 NULL；如果匹配到，会返回一个新的subject，否则\r\n\r\n例子：\r\n\r\n\r\n[php]\r\n&lt;div&gt;&lt;?php&lt;/div&gt;\r\n&lt;div&gt;$subject = \'Aaaaaa Bbb\';&lt;/div&gt;\r\n&lt;div&gt;preg_replace_callback_array(&lt;/div&gt;\r\n&lt;div&gt;[&lt;/div&gt;\r\n&lt;div&gt;\'~[a]+~i\' =&gt; function ($match) {&lt;/div&gt;\r\n&lt;div&gt;echo strlen($match[0]), \' matches for &quot;a&quot; found\', PHP_EOL;&lt;/div&gt;\r\n&lt;div&gt;},&lt;/div&gt;\r\n&lt;div&gt;\'~[b]+~i\' =&gt; function ($match) {&lt;/div&gt;\r\n&lt;div&gt;echo strlen($match[0]), \' matches for &quot;b&quot; found\', PHP_EOL;&lt;/div&gt;\r\n&lt;div&gt;}&lt;/div&gt;\r\n&lt;div&gt;],&lt;/div&gt;\r\n&lt;div&gt;$subject&lt;/div&gt;\r\n&lt;div&gt;);&lt;/div&gt;\r\n&lt;div&gt;/*&lt;/div&gt;\r\n&lt;div&gt;输出&lt;/div&gt;\r\n&lt;div&gt;6 matches for &quot;a&quot; found&lt;/div&gt;\r\n&lt;div&gt;3 matches for &quot;b&quot; found&lt;/div&gt;\r\n&lt;div&gt;*/&lt;/div&gt;\r\n[/php]\r\n\r\n<h3>9. preg_replace() 执行一个正则表达式的搜索和替换</h3>\r\n语法：mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：搜索subject中匹配pattern的部分， 以replacement进行替换。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式。可以使一个字符串或字符串数组。 可以使用一些PCRE修饰符。</li>\r\n 	<li>replacement，用于替换的字符串或字符串数组。如果这个参数是一个字符串，并且pattern 是一个数组，那么所有的模式都使用这个字符串进行替换。如果pattern和replacement 都是数组，每个pattern使用replacement中对应的 元素进行替换。如果replacement中的元素比pattern中的少， 多出来的pattern使用空字符串进行替换。replacement中可以包含后向引用\\\\n 或$n，语法上首选后者。 每个 这样的引用将被匹配到的第n个捕获子组捕获到的文本替换。 n 可以是0-99，\\\\0和$0代表完整的模式匹配文本。 捕获子组的序号计数方式为：代表捕获子组的左括号从左到右， 从1开始数。如果要在replacement 中使用反斜线，必须使用4个(\"\\\\\\\\\"，译注：因为这首先是php的字符串，经过转义后，是两个，再经过 正则表达式引擎后才被认为是一个原文反斜线)。当在替换模式下工作并且后向引用后面紧跟着需要是另外一个数字(比如：在一个匹配模式后紧接着增加一个原文数字)， 不能使用\\\\1这样的语法来描述后向引用。比如， \\\\11将会使preg_replace() 不能理解你希望的是一个\\\\1后向引用紧跟一个原文1，还是 一个\\\\11后向引用后面不跟任何东西。 这种情况下解决方案是使用${1}1。 这创建了一个独立的$1后向引用, 一个独立的原文1。当使用被弃用的 e 修饰符时, 这个函数会转义一些字符(即：\'、\"、 \\ 和 NULL) 然后进行后向引用替换。当这些完成后请确保后向引用解析完后没有单引号或 双引号引起的语法错误(比如： \'strlen(\\\'$1\\\')+strlen(\"$2\")\')。确保符合PHP的 字符串语法，并且符合eval语法。因为在完成替换后， 引擎会将结果字符串作为php代码使用eval方式进行评估并将返回值作为最终参与替换的字符串。</li>\r\n 	<li>subject，要进行搜索和替换的字符串或字符串数组。如果subject是一个数组，搜索和替换回在subject 的每一个元素上进行, 并且返回值也会是一个数组。</li>\r\n 	<li>limit，每个模式在每个subject上进行替换的最大次数。默认是 -1(无限)。</li>\r\n 	<li>count，如果指定，将会被填充为完成的替换次数。\r\n返回值： 如果subject是一个数组， preg_replace()返回一个数组， 其他情况下返回一个字符串。如果匹配被查找到，替换后的subject被返回，其他情况下 返回没有改变的 subject。如果发生错误，返回 NULL 。</li>\r\n</ul>\r\n例子：\r\n\r\n\r\n[php]\r\n&lt;div&gt;&lt;?php&lt;/div&gt;\r\n&lt;div&gt;$patterns = array (\'/(19|20)(\\d{2})-(\\d{1,2})-(\\d{1,2})/\', \'/^\\s*{(\\w+)}\\s*=/\');&lt;/div&gt;\r\n&lt;div&gt;$replace = array (\'\\3/\\4/\\1\\2\', \'$\\1 =\');&lt;/div&gt;\r\n&lt;div&gt;echo preg_replace($patterns, $replace, \'{startDate} = 1999-5-27\');&lt;/div&gt;\r\n&lt;div&gt;// 输出: $startDate = 5/27/1999&lt;/div&gt;\r\n[/php]\r\n\r\n<h3>10. preg_split() 通过一个正则表达式分隔字符串</h3>\r\n语法：array preg_split ( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]] )\r\n\r\n说明：通过一个正则表达式分隔给定字符串.\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，用于搜索的模式，字符串形式。</li>\r\n 	<li>subject，输入字符串</li>\r\n 	<li>limit，如果指定，将限制分隔得到的子串最多只有limit个，返回的最后一个 子串将包含所有剩余部分。limit值为-1， 0或null时都代表\"不限制\"， 作为php的标准，你可以使用null跳过对flags的设置。</li>\r\n 	<li>flags，flags 可以是任何下面标记的组合(以位或运算 | 组合)：\r\n○ PREG_SPLIT_NO_EMPTY，如果这个标记被设置， preg_split() 将进返回分隔后的非空部分。\r\n○ PREG_SPLIT_DELIM_CAPTURE，如果这个标记设置了，用于分隔的模式中的括号表达式将被捕获并返回。\r\n○ PREG_SPLIT_OFFSET_CAPTURE，如果这个标记被设置, 对于每一个出现的匹配返回时将会附加字符串偏移量. 注意：这将会改变返回数组中的每一个元素, 使其每个元素成为一个由第0 个元素为分隔后的子串，第1个元素为该子串在subject 中的偏移量组成的数组。</li>\r\n</ul>\r\n返回值：返回一个使用 pattern 边界分隔 subject 后得到 的子串组成的数组， 或者在失败时返回 FALSE。\r\n\r\n例子：\r\n\r\n\r\n[php]\r\n&lt;div&gt;&lt;?php&lt;/div&gt;\r\n&lt;div&gt;$keywords = preg_split (&quot;/[\\s,]+/&quot;, &quot;hypertext language, programming&quot;);&lt;/div&gt;\r\n&lt;div&gt;print_r($keywords);&lt;/div&gt;\r\n&lt;div&gt;// 输出&lt;/div&gt;\r\n&lt;div&gt;// Array ( [0] =&gt; hypertext [1] =&gt; language [2] =&gt; programming )&lt;/div&gt;\r\n[/php]\r\n\r\n\r\n&nbsp;', 'PHP正则表达式的应用', '', 'inherit', 'closed', 'closed', '', '1141-revision-v1', '', '', '2017-07-13 14:35:19', '2017-07-13 06:35:19', '', 1141, 'https://www.gzpblog.com/20170713/1142.html', 0, 'revision', '', 0),
(1143, 1, '2017-07-13 14:49:28', '2017-07-13 06:49:28', '<blockquote>关于PCRE的介绍以及实现正则表达式功能的所有说明，都可以在官方手册中看到：<a href=\"http://php.net/manual/zh/book.pcre.php\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式(兼容 Perl)</a></blockquote>\r\n<h2>一 认识PCRE</h2>\r\n<h3>1. 什么是PCRE</h3>\r\nPCRE 库是一个实现了与 perl 5 在语法和语义上略有差异的正则表达式模式匹配功能的函数集。\r\n<h3>2. PCRE 库介绍</h3>\r\n<div>PCRE 是 PHP 核心扩展，所以总是启用的。</div>\r\n<div>默认情况下，该扩展使用内置的 PCRE library。或者，也可以通过指定 configure 选项 --with-pcre-regex=DIR 设置外部 PCRE library 目录，DIR 是 PCRE 的 include 和 library 文件位置。 PHP 5.6/7.0 推荐使用 PCRE 8.10 或更高版本。</div>\r\n<div>这些函数中使用的模式语法非常类似 perl。表达式必须用分隔符闭合，比如一个正斜杠(/)。 分隔符可以使任意非字母数字，除反斜杠(\\)和空字节之外的非空白 ascii 字符。 如果分隔符 在表达式中使用，需要使用反斜线进行转义。自php 4.0.4开始，可以使用 perl 样式的()、 {}、 [] 以及 &lt;&gt; 作为分隔符。</div>\r\n<h3>3. PCRE正则与POSIX 正则</h3>\r\n<div>除了PCRE正则库，还有POSIX 正则库。 <strong>自PHP 5.3.0起， POSIX 正则表达式扩展被废弃。</strong>所以，这里也没有必要研究 POSIX 正则了，这里我们就看PCRE正则。</div>\r\n<h3>4. 版本特性</h3>\r\n<div>PHP 7.0.0 起 PCRE 默认支持 JIT（just-in-time）编译技术，PHP 7.0.12 起可以通过 --without-pcre-jit 禁用 PCRE 的 JIT 功能。</div>\r\n<div>PHP 的 Windows 版本已内建对此扩展的支持。不需要载入额外的扩展来使用这些函数。</div>\r\n<div>PHP 5.3.0 的之前版本，可通过 --without-pcre-regex 配置选项禁用此扩展。</div>\r\n<h2>二. 预定义常量</h2>\r\n下列常量由此扩展定义，且仅在此扩展编译入 PHP 或在运行时动态载入时可用。\r\n<table style=\"height: 1034px;\" border=\"1\" width=\"943\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td><strong>常量</strong></td>\r\n<td><strong>描述</strong></td>\r\n<td><strong>自哪个版本起</strong></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_PATTERN_ORDER</td>\r\n<td>结果按照”规则”排序，仅用于preg_match_all()，即$matches[0]是完整规则的匹配结果，$matches[1]是第一个子组匹配的结果，等等。</td>\r\n<td>since</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SET_ORDER</td>\r\n<td>结果按照”集合”排序，仅用于preg_match_all()，即$matches[0]保存第一次匹配结果的所有结果(包含子组)信息, $matches[1]保存第二次的结果信息，等等。</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_OFFSET_CAPTURE</td>\r\n<td>查看PREG_SPLIT_OFFSET_CAPTURE的描述。</td>\r\n<td>4.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_NO_EMPTY</td>\r\n<td>这个标记告诉preg_split()仅返回非空部分。</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_DELIM_CAPTURE</td>\r\n<td>这个标记告诉preg_split()同时捕获括号表达式匹配到的内容。</td>\r\n<td>4.0.5</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_OFFSET_CAPTURE</td>\r\n<td>如果设置了这个标记，每次出现的匹配子串的偏移量也会被返回。注意，这会改变返回数组中的值，每个元素都是由匹配子串作为第0个元素，它相对目标字符串的偏移量作为第1个元素的数组。这个标记只能用于preg_split()。</td>\r\n<td>4.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_NO_ERROR</td>\r\n<td>没有匹配错误时调用 preg_last_error() 返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_INTERNAL_ERROR</td>\r\n<td>如果有PCRE内部错误时调用 preg_last_error() 返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BACKTRACK_LIMIT_ERROR</td>\r\n<td>如果调用回溯限制超出，调用preg_last_error()时返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_RECURSION_LIMIT_ERROR</td>\r\n<td>如果递归限制超出，调用preg_last_error()时返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BAD_UTF8_ERROR</td>\r\n<td>如果最后一个错误时由于异常的utf-8数据(仅在运行在UTF-8 模式正则表达式下可用)。导致的，调用preg_last_error()返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BAD_UTF8_OFFSET_ERROR</td>\r\n<td>如果偏移量与合法的urf-8代码不匹配(仅在运行在UTF-8 模式正则表达式下可用)。调用preg_last_error()返回。</td>\r\n<td>5.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_JIT_STACKLIMIT_ERROR</td>\r\n<td>当 PCRE 函数因 JIT 栈空间限制而失败， preg_last_error() 就会返回此常量。</td>\r\n<td>7.0.0</td>\r\n</tr>\r\n<tr>\r\n<td>PCRE_VERSION</td>\r\n<td>PCRE版本号和发布日期(比如： \"7.0 18-Dec-2006\")。</td>\r\n<td>5.2.4</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2>三 正则语法</h2>\r\n1. 详细的正则语法可以参考：<a href=\"http://php.net/manual/zh/reference.pcre.pattern.syntax.php\" target=\"_blank\" rel=\"noopener noreferrer\">http://php.net/manual/zh/reference.pcre.pattern.syntax.php</a>\r\n\r\n2. 之前的一个总结，正则表达式字符表和常用正则表达式：<a href=\"https://www.gzpblog.com/20161009/278.html\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式</a>\r\n<h2>四 PCRE 函数</h2>\r\n这篇文章的关注重点将在于函数，和函数的应用，即是正则在PHP中的具体实现。加下来一个一个看。\r\n<h3>1. preg_filter() 执行一个正则表达式搜索和替换</h3>\r\n语法：mixed preg_filter ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：preg_filter()等价于preg_replace() 除了它仅仅返回(可能经过转化)与目标匹配的结果。\r\n\r\n返回值： 如果subject是一个数组，返回一个数组， 其他情况返回一个字符串。如果没有找到匹配或者发生了错误，当subject是数组 时返回一个空数组，其他情况返回NULL。\r\n\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n$subject = array(\'1\', \'a\', \'2\', \'b\', \'3\', \'A\', \'B\', \'4\'); \r\n$pattern = array(\'/\\d/\', \'/[a-z]/\', \'/[1a]/\'); \r\n$replace = array(\'A:$0\', \'B:$0\', \'C:$0\'); \r\n\r\nprint_r(preg_filter($pattern, $replace, $subject)); //使用filter\r\n\r\nprint_r(preg_replace($pattern, $replace, $subject)); //使用replace\r\n\r\n/*\r\n返回： \r\nArray\r\n(\r\n    [0] =&gt; A:C:1\r\n    [1] =&gt; B:C:a\r\n    [2] =&gt; A:2\r\n    [3] =&gt; B:b\r\n    [4] =&gt; A:3\r\n    [7] =&gt; A:4\r\n)\r\nArray\r\n(\r\n    [0] =&gt; A:C:1\r\n    [1] =&gt; B:C:a\r\n    [2] =&gt; A:2\r\n    [3] =&gt; B:b\r\n    [4] =&gt; A:3\r\n    [5] =&gt; A\r\n    [6] =&gt; B\r\n    [7] =&gt; A:4\r\n)\r\npreg_filter()只返回匹配到的；preg_replace() 返回所有\r\n*/\r\n[/php]\r\n\r\n<h3>2. preg_grep() 返回匹配模式的数组条目；正则检索一个数组的所有元素</h3>\r\n语法：array preg_grep ( string $pattern , array $input [, int $flags = 0 ] )\r\n\r\n说明：返回给定数组input中与模式pattern 匹配的元素组成的数组.\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式, 字符串形式.</li>\r\n 	<li>input，输入数组.</li>\r\n 	<li>flags，如果设置为PREG_GREP_INVERT, 这个函数返回输入数组中与 给定模式pattern不匹配的元素组成的数组\r\n返回值：返回使用input中key做索引的数组。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n// 找出有p的\r\n$foods = array(&quot;pasta&quot;, &quot;steak&quot;, &quot;fish&quot;, &quot;potatoes&quot;);\r\n$p_foods = preg_grep(&quot;/p(\\w+)/&quot;, $foods);\r\nprint_r($p_foods)\r\n// 输出\r\n// Array ( [0] =&gt; pasta [3] =&gt; potatoes )\r\n[/php]\r\n\r\n<h3>3. preg_last_error() 返回最后一个PCRE正则执行产生的错误代码</h3>\r\n语法：int preg_last_error ( void )\r\n\r\n返回值：返回最后一次PCRE正则执行的错误代码。\r\n<ul>\r\n 	<li>PREG_NO_ERROR 没有匹配错误</li>\r\n 	<li>PREG_INTERNAL_ERROR 有PCRE内部错误</li>\r\n 	<li>PREG_BACKTRACK_LIMIT_ERROR 调用回溯限制超出</li>\r\n 	<li>PREG_RECURSION_LIMIT_ERROR 递归限制超出</li>\r\n 	<li>PREG_BAD_UTF8_ERROR 异常的utf-8数据导致</li>\r\n 	<li>PREG_BAD_UTF8_OFFSET_ERROR （自 PHP 5.3.0 起） 偏移量与合法的urf-8代码不匹配</li>\r\n 	<li>PREG_JIT_STACKLIMIT_ERROR (自 PHP 7.0.0 起) 因 JIT 栈空间限制而失败</li>\r\n</ul>\r\n具体错误代码的详情在上面预定义常量部分。\r\n\r\n例子：\r\n\r\n[php]&lt;/pre&gt;\r\n&lt;?php\r\n$a = preg_match(\'/(?:\\D+|&lt;\\d+&gt;)*[!?]/\', \'foobar foobar foobar\');\r\nprint_r($a);\r\n\r\nif (preg_last_error() == PREG_BACKTRACK_LIMIT_ERROR) {\r\nprint \'Backtrack limit was exhausted!\';\r\n}\r\n// 输出：Backtrack limit was exhausted!\r\n\r\n[/php]\r\n\r\n<h3>4. preg_match() 执行匹配正则表达式</h3>\r\n语法：int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags = 0 [, int $offset = 0 ]]] )\r\n\r\n说明：搜索subject与pattern给定的正则表达式的一个匹配。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，字符串类型。</li>\r\n 	<li>subject，输入字符串。</li>\r\n 	<li>matches，如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。</li>\r\n 	<li>flags，flags可以被设置为以下标记值：\r\n○ PREG_OFFSET_CAPTURE，如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</li>\r\n 	<li>offset，通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个位置开始搜索(单位是字节)。\r\n返回值：preg_match()返回 pattern 的匹配次数。 它的值将是0次（不匹配）或1次，因为preg_match()在第一次匹配后 将会停止搜索。preg_match_all()不同于此，它会一直搜索subject 直到到达结尾。 如果发生错误preg_match()返回 FALSE。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n//从URL中获取主机名称\r\npreg_match(\'@^(?:http://)?([^/]+)@i\', &quot;http://www.php.net/index.html&quot;, $matches);\r\nprint_r($matches);\r\n// 输出 Array ( [0] =&gt; http://www.php.net [1] =&gt; www.php.net )\r\n\r\npreg_match(\'/[^.]+\\.[^.]+$/\', $matches[1], $matches);\r\nprint_r($matches);\r\n// 输出 Array ( [0] =&gt; php.net )\r\n[/php]\r\n\r\n<h3>5. preg_match_all() 执行一个全局正则表达式匹配</h3>\r\n语法：int preg_match_all ( string $pattern , string $subject [, array &amp;$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0 ]]] )\r\n\r\n说明： 搜索subject中所有匹配pattern给定正则表达式的匹配结果并且将它们以flag指定顺序输出到matches中。在第一个匹配找到后，子序列继续从最后一次匹配位置搜索。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，字符串形式。</li>\r\n 	<li>subject，输入字符串。</li>\r\n 	<li>matches，多维数组，作为输出参数输出所有匹配结果, 数组排序通过flags指定。</li>\r\n 	<li>flags，可以结合下面标记使用(注意不能同时使用PREG_PATTERN_ORDER和PREG_SET_ORDER)\r\n○ PREG_PATTERN_ORDER 结果排序为$matches[0]保存完整模式的所有匹配, $matches[1] 保存第一个子组的所有匹配，以此类推。\r\n○ PREG_SET_ORDER 结果排序为$matches[0]包含第一次匹配得到的所有匹配(包含子组)， $matches[1]是包含第二次匹配到的所有匹配(包含子组)的数组，以此类推。\r\n○ PREG_OFFSET_CAPTURE 如果这个标记被传递，每个发现的匹配返回时会增加它相对目标字符串的偏移量。 注意这会改变matches中的每一个匹配结果字符串元素，使其 成为一个第0个元素为匹配结果字符串，第1个元素为 匹配结果字符串在subject中的偏移量。\r\n○ 如果没有给定排序标记，假定设置为PREG_PATTERN_ORDER。</li>\r\n 	<li>offset，通常， 查找时从目标字符串的开始位置开始。可选参数offset用于 从目标字符串中指定位置开始搜索(单位是字节)。\r\n返回值：返回完整匹配次数（可能是0），或者如果发生错误返回FALSE。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n// \\\\2是一个后向引用的示例. 这会告诉pcre它必须匹配正则表达式中第二个圆括号(这里是([\\w]+))\r\n// 匹配到的结果. 这里使用两个反斜线是因为这里使用了双引号.\r\n$html = &quot;&lt;b&gt;bold text&lt;/b&gt;&lt;a href=howdy.html&gt;click me&lt;/a&gt;&quot;;\r\npreg_match_all(&quot;/(&lt;([\\w]+)[^&gt;]*&gt;)(.*?)(&lt;\\/\\\\2&gt;)/&quot;, $html, $matches, PREG_SET_ORDER);\r\nprint_r($matches);\r\n/*\r\n输出\r\nArray\r\n(\r\n    [0] =&gt; Array\r\n        (\r\n            [0] =&gt; &lt;b&gt;bold text&lt;/b&gt;\r\n            [1] =&gt; &lt;b&gt;\r\n            [2] =&gt; b\r\n            [3] =&gt; bold text\r\n            [4] =&gt; &lt;/b&gt;\r\n        )\r\n\r\n    [1] =&gt; Array\r\n        (\r\n            [0] =&gt; &lt;a href=howdy.html&gt;click me&lt;/a&gt;\r\n            [1] =&gt; &lt;a href=howdy.html&gt;\r\n            [2] =&gt; a\r\n            [3] =&gt; click me\r\n            [4] =&gt; &lt;/a&gt;\r\n        )\r\n\r\n)\r\n*/\r\n[/php]\r\n\r\n<h3>6. preg_quote() 转义正则表达式字符</h3>\r\n语法：string preg_quote ( string $str [, string $delimiter = NULL ] )\r\n\r\n说明： preg_quote()需要参数 str 并向其中每个正则表达式语法中的字符前增加一个反斜线。 这通常用于你有一些运行时字符串需要作为正则表达式进行匹配的时候。\r\n<ul>\r\n 	<li>正则表达式特殊字符有： . \\ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | : -</li>\r\n 	<li>注意 / 不是正则表达式特殊字符。</li>\r\n</ul>\r\n注意：preg_quote() 的应用场景不是用于 preg_replace() 的 $replacement 字符串参数。\r\n\r\n参数：\r\n<ul>\r\n 	<li>str，输入字符串</li>\r\n 	<li>delimiter，如果指定了可选参数 delimiter，它也会被转义。这通常用于 转义PCRE函数使用的分隔符。 / 是最常见的分隔符。\r\n返回值：返回转义后的字符串。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n$keywords = \'$40 for a g3/400\';\r\n$keywords = preg_quote($keywords, \'/\');\r\necho $keywords; \r\n// 返回 \\$40 for a g3\\/400\r\n// $是正则表达式特殊字符, /被当参数传入也转义\r\n[/php]\r\n\r\n<h3>7. preg_replace_callback() 执行一个正则表达式搜索并且使用一个回调进行替换</h3>\r\n语法：mixed preg_replace_callback ( mixed $pattern , callable $callback , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：这个函数的行为除了 可以指定一个 callback 替代 replacement 进行替换 字符串的计算，其他方面等同于 preg_replace()。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，可以使字符串或一个字符串数组。</li>\r\n 	<li>callback， 一个回调函数，在每次需要替换时调用，调用时函数得到的参数是从subject 中匹配到的结果。回调函数返回真正参与替换的字符串。这是该回调函数的签名：string handler ( array $matches ) 。你可能经常会需要callback函数而 仅用于preg_replace_callback()一个地方的调用。在这种情况下，你可以 使用匿名函数来定义一个匿名函数作 为preg_replace_callback()调用时的回调。 这样做你可以保留所有 调用信息在同一个位置并且不会因为一个不在任何其他地方使用的回调函数名称而污染函数名称空间。\r\n● subject，要搜索替换的目标字符串或字符串数组。\r\n● limit，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。\r\n● count，如果指定，这个变量将被填充为替换执行的次数。\r\n返回值： 如果subject是一个数组， preg_replace_callback()返回一个数组，其他情况返回字符串。 错误发生时返回 NULL。如果查找到了匹配，返回替换后的目标字符串（或字符串数组）， 其他情况subject 将会无变化返回。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n/* 将文本中的年份增加一年 */\r\n$text = &quot;April fools day is 04/01/2002\\n&quot;;\r\n$text.= &quot;Last christmas was 12/24/2001\\n&quot;;\r\n// 回调函数\r\nfunction next_year($matches)\r\n{\r\n    /*\r\n    print_r($matches);$matches为:\r\n    Array\r\n    (\r\n        [0] =&gt; 04/01/2002\r\n        [1] =&gt; 04/01/\r\n        [2] =&gt; 2002\r\n    )\r\n    Array\r\n    (\r\n        [0] =&gt; 12/24/2001\r\n        [1] =&gt; 12/24/\r\n        [2] =&gt; 2001\r\n    )\r\n    说明匹配到一个就扔进来一次\r\n    */\r\n    return $matches[1].($matches[2]+1);\r\n}\r\n$text = preg_replace_callback(&quot;|(\\d{2}/\\d{2}/)(\\d{4})|&quot;, &quot;next_year&quot;, $text);\r\necho $text;\r\n/*\r\n输出\r\nApril fools day is 04/01/2003\r\nLast christmas was 12/24/2002\r\n*/\r\n[/php]\r\n\r\n<h3>8. preg_replace_callback_array() 执行一个正则表达式搜索并且使用多个回调进行替换</h3>\r\n语法：mixed preg_replace_callback_array ( array $patterns_and_callbacks , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：类似于 preg_replace_callback(), 除了回调函数是基于每个参数。\r\n\r\n参数：\r\n<ul>\r\n 	<li>patterns_and_callbacks，参数（keys）对应回调函数（values）的数组。</li>\r\n 	<li>subject，要搜索替换的目标字符串或字符串数组。</li>\r\n 	<li>limit，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。</li>\r\n 	<li>count，如果指定，这个变量将被填充为替换执行的次数。</li>\r\n</ul>\r\n返回值：\r\npreg_replace_callback_array() 如果参数是数组则会返回一个数组，否则为字符串。出错时返回 NULL；如果匹配到，会返回一个新的subject，否则\r\n\r\n例子：\r\n\r\n[php]\r\n&lt;?php \r\n$subject = \'Aaaaaa Bbb\';\r\npreg_replace_callback_array(\r\n    [\r\n        \'~[a]+~i\' =&gt; function ($match) {\r\n            echo strlen($match[0]), \' matches for &quot;a&quot; found\', PHP_EOL;\r\n        },\r\n        \'~[b]+~i\' =&gt; function ($match) {\r\n            echo strlen($match[0]), \' matches for &quot;b&quot; found\', PHP_EOL;\r\n        }\r\n    ],\r\n    $subject\r\n);\r\n/*\r\n输出\r\n6 matches for &quot;a&quot; found\r\n3 matches for &quot;b&quot; found\r\n*/\r\n[/php]\r\n\r\n<h3>9. preg_replace() 执行一个正则表达式的搜索和替换</h3>\r\n语法：mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：搜索subject中匹配pattern的部分， 以replacement进行替换。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式。可以使一个字符串或字符串数组。 可以使用一些PCRE修饰符。</li>\r\n 	<li>replacement，用于替换的字符串或字符串数组。如果这个参数是一个字符串，并且pattern 是一个数组，那么所有的模式都使用这个字符串进行替换。如果pattern和replacement 都是数组，每个pattern使用replacement中对应的 元素进行替换。如果replacement中的元素比pattern中的少， 多出来的pattern使用空字符串进行替换。replacement中可以包含后向引用\\\\n 或$n，语法上首选后者。 每个 这样的引用将被匹配到的第n个捕获子组捕获到的文本替换。 n 可以是0-99，\\\\0和$0代表完整的模式匹配文本。 捕获子组的序号计数方式为：代表捕获子组的左括号从左到右， 从1开始数。如果要在replacement 中使用反斜线，必须使用4个(\"\\\\\\\\\"，译注：因为这首先是php的字符串，经过转义后，是两个，再经过 正则表达式引擎后才被认为是一个原文反斜线)。当在替换模式下工作并且后向引用后面紧跟着需要是另外一个数字(比如：在一个匹配模式后紧接着增加一个原文数字)， 不能使用\\\\1这样的语法来描述后向引用。比如， \\\\11将会使preg_replace() 不能理解你希望的是一个\\\\1后向引用紧跟一个原文1，还是 一个\\\\11后向引用后面不跟任何东西。 这种情况下解决方案是使用${1}1。 这创建了一个独立的$1后向引用, 一个独立的原文1。当使用被弃用的 e 修饰符时, 这个函数会转义一些字符(即：\'、\"、 \\ 和 NULL) 然后进行后向引用替换。当这些完成后请确保后向引用解析完后没有单引号或 双引号引起的语法错误(比如： \'strlen(\\\'$1\\\')+strlen(\"$2\")\')。确保符合PHP的 字符串语法，并且符合eval语法。因为在完成替换后， 引擎会将结果字符串作为php代码使用eval方式进行评估并将返回值作为最终参与替换的字符串。</li>\r\n 	<li>subject，要进行搜索和替换的字符串或字符串数组。如果subject是一个数组，搜索和替换回在subject 的每一个元素上进行, 并且返回值也会是一个数组。</li>\r\n 	<li>limit，每个模式在每个subject上进行替换的最大次数。默认是 -1(无限)。</li>\r\n 	<li>count，如果指定，将会被填充为完成的替换次数。\r\n返回值： 如果subject是一个数组， preg_replace()返回一个数组， 其他情况下返回一个字符串。如果匹配被查找到，替换后的subject被返回，其他情况下 返回没有改变的 subject。如果发生错误，返回 NULL 。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php \r\n$patterns = array (\'/(19|20)(\\d{2})-(\\d{1,2})-(\\d{1,2})/\', \'/^\\s*{(\\w+)}\\s*=/\');\r\n$replace = array (\'\\3/\\4/\\1\\2\', \'$\\1 =\');\r\necho preg_replace($patterns, $replace, \'{startDate} = 1999-5-27\');\r\n// 输出: $startDate = 5/27/1999\r\n[/php]\r\n\r\n<h3>10. preg_split() 通过一个正则表达式分隔字符串</h3>\r\n语法：array preg_split ( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]] )\r\n\r\n说明：通过一个正则表达式分隔给定字符串.\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，用于搜索的模式，字符串形式。</li>\r\n 	<li>subject，输入字符串</li>\r\n 	<li>limit，如果指定，将限制分隔得到的子串最多只有limit个，返回的最后一个 子串将包含所有剩余部分。limit值为-1， 0或null时都代表\"不限制\"， 作为php的标准，你可以使用null跳过对flags的设置。</li>\r\n 	<li>flags，flags 可以是任何下面标记的组合(以位或运算 | 组合)：\r\n○ PREG_SPLIT_NO_EMPTY，如果这个标记被设置， preg_split() 将进返回分隔后的非空部分。\r\n○ PREG_SPLIT_DELIM_CAPTURE，如果这个标记设置了，用于分隔的模式中的括号表达式将被捕获并返回。\r\n○ PREG_SPLIT_OFFSET_CAPTURE，如果这个标记被设置, 对于每一个出现的匹配返回时将会附加字符串偏移量. 注意：这将会改变返回数组中的每一个元素, 使其每个元素成为一个由第0 个元素为分隔后的子串，第1个元素为该子串在subject 中的偏移量组成的数组。</li>\r\n</ul>\r\n返回值：返回一个使用 pattern 边界分隔 subject 后得到 的子串组成的数组， 或者在失败时返回 FALSE。\r\n\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n$keywords = preg_split (&quot;/[\\s,]+/&quot;, &quot;hypertext language, programming&quot;); \r\nprint_r($keywords);\r\n// 输出\r\n// Array ( [0] =&gt; hypertext [1] =&gt; language [2] =&gt; programming )\r\n[/php]\r\n', 'PHP正则表达式的应用', '', 'inherit', 'closed', 'closed', '', '1141-autosave-v1', '', '', '2017-07-13 14:49:28', '2017-07-13 06:49:28', '', 1141, 'https://www.gzpblog.com/20170713/1143.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1145, 1, '2017-07-13 14:47:45', '2017-07-13 06:47:45', '<blockquote>\r\n<div>关于PCRE的介绍以及实现正则表达式功能的所有说明，都可以在官方手册中看到：<a href=\"http://php.net/manual/zh/book.pcre.php\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式(兼容 Perl)</a></div></blockquote>\r\n<h2>一 认识PCRE</h2>\r\n<h3>1. 什么是PCRE</h3>\r\nPCRE 库是一个实现了与 perl 5 在语法和语义上略有差异的正则表达式模式匹配功能的函数集。\r\n<h3>2. PCRE 库介绍</h3>\r\n<div>PCRE 是 PHP 核心扩展，所以总是启用的。</div>\r\n<div>默认情况下，该扩展使用内置的 PCRE library。或者，也可以通过指定 configure 选项 --with-pcre-regex=DIR 设置外部 PCRE library 目录，DIR 是 PCRE 的 include 和 library 文件位置。 PHP 5.6/7.0 推荐使用 PCRE 8.10 或更高版本。</div>\r\n<div>这些函数中使用的模式语法非常类似 perl。表达式必须用分隔符闭合，比如一个正斜杠(/)。 分隔符可以使任意非字母数字，除反斜杠(\\)和空字节之外的非空白 ascii 字符。 如果分隔符 在表达式中使用，需要使用反斜线进行转义。自php 4.0.4开始，可以使用 perl 样式的()、 {}、 [] 以及 &lt;&gt; 作为分隔符。</div>\r\n<h3>3. PCRE正则与POSIX 正则</h3>\r\n<div>除了PCRE正则库，还有POSIX 正则库。 <strong>自PHP 5.3.0起， POSIX 正则表达式扩展被废弃。</strong>所以，这里也没有必要研究 POSIX 正则了，这里我们就看PCRE正则。</div>\r\n<h3>4. 版本特性</h3>\r\n<div>PHP 7.0.0 起 PCRE 默认支持 JIT（just-in-time）编译技术，PHP 7.0.12 起可以通过 --without-pcre-jit 禁用 PCRE 的 JIT 功能。</div>\r\n<div>PHP 的 Windows 版本已内建对此扩展的支持。不需要载入额外的扩展来使用这些函数。</div>\r\n<div>PHP 5.3.0 的之前版本，可通过 --without-pcre-regex 配置选项禁用此扩展。</div>\r\n<h2>二. 预定义常量</h2>\r\n下列常量由此扩展定义，且仅在此扩展编译入 PHP 或在运行时动态载入时可用。\r\n<table style=\"height: 1034px;\" border=\"1\" width=\"943\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td><strong>常量</strong></td>\r\n<td><strong>描述</strong></td>\r\n<td><strong>自哪个版本起</strong></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_PATTERN_ORDER</td>\r\n<td>结果按照”规则”排序，仅用于preg_match_all()，即$matches[0]是完整规则的匹配结果，$matches[1]是第一个子组匹配的结果，等等。</td>\r\n<td>since</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SET_ORDER</td>\r\n<td>结果按照”集合”排序，仅用于preg_match_all()，即$matches[0]保存第一次匹配结果的所有结果(包含子组)信息, $matches[1]保存第二次的结果信息，等等。</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_OFFSET_CAPTURE</td>\r\n<td>查看PREG_SPLIT_OFFSET_CAPTURE的描述。</td>\r\n<td>4.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_NO_EMPTY</td>\r\n<td>这个标记告诉preg_split()仅返回非空部分。</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_DELIM_CAPTURE</td>\r\n<td>这个标记告诉preg_split()同时捕获括号表达式匹配到的内容。</td>\r\n<td>4.0.5</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_OFFSET_CAPTURE</td>\r\n<td>如果设置了这个标记，每次出现的匹配子串的偏移量也会被返回。注意，这会改变返回数组中的值，每个元素都是由匹配子串作为第0个元素，它相对目标字符串的偏移量作为第1个元素的数组。这个标记只能用于preg_split()。</td>\r\n<td>4.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_NO_ERROR</td>\r\n<td>没有匹配错误时调用 preg_last_error() 返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_INTERNAL_ERROR</td>\r\n<td>如果有PCRE内部错误时调用 preg_last_error() 返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BACKTRACK_LIMIT_ERROR</td>\r\n<td>如果调用回溯限制超出，调用preg_last_error()时返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_RECURSION_LIMIT_ERROR</td>\r\n<td>如果递归限制超出，调用preg_last_error()时返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BAD_UTF8_ERROR</td>\r\n<td>如果最后一个错误时由于异常的utf-8数据(仅在运行在UTF-8 模式正则表达式下可用)。导致的，调用preg_last_error()返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BAD_UTF8_OFFSET_ERROR</td>\r\n<td>如果偏移量与合法的urf-8代码不匹配(仅在运行在UTF-8 模式正则表达式下可用)。调用preg_last_error()返回。</td>\r\n<td>5.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_JIT_STACKLIMIT_ERROR</td>\r\n<td>当 PCRE 函数因 JIT 栈空间限制而失败， preg_last_error() 就会返回此常量。</td>\r\n<td>7.0.0</td>\r\n</tr>\r\n<tr>\r\n<td>PCRE_VERSION</td>\r\n<td>PCRE版本号和发布日期(比如： \"7.0 18-Dec-2006\")。</td>\r\n<td>5.2.4</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2>三 正则语法</h2>\r\n1. 详细的正则语法可以参考：<a href=\"http://php.net/manual/zh/reference.pcre.pattern.syntax.php\" target=\"_blank\" rel=\"noopener noreferrer\">http://php.net/manual/zh/reference.pcre.pattern.syntax.php</a>\r\n\r\n2. 之前的一个总结，正则表达式字符表和常用正则表达式：<a href=\"https://www.gzpblog.com/20161009/278.html\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式</a>\r\n<h2>四 PCRE 函数</h2>\r\n这篇文章的关注重点将在于函数，和函数的应用，即是正则在PHP中的具体实现。加下来一个一个看。\r\n<h3>1. preg_filter() 执行一个正则表达式搜索和替换</h3>\r\n语法：mixed preg_filter ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：preg_filter()等价于preg_replace() 除了它仅仅返回(可能经过转化)与目标匹配的结果。\r\n\r\n返回值： 如果subject是一个数组，返回一个数组， 其他情况返回一个字符串。如果没有找到匹配或者发生了错误，当subject是数组 时返回一个空数组，其他情况返回NULL。\r\n\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n$subject = array(\'1\', \'a\', \'2\', \'b\', \'3\', \'A\', \'B\', \'4\'); \r\n$pattern = array(\'/\\d/\', \'/[a-z]/\', \'/[1a]/\'); \r\n$replace = array(\'A:$0\', \'B:$0\', \'C:$0\'); \r\n\r\nprint_r(preg_filter($pattern, $replace, $subject)); //使用filter\r\n\r\nprint_r(preg_replace($pattern, $replace, $subject)); //使用replace\r\n\r\n/*\r\n返回： \r\nArray\r\n(\r\n    [0] =&gt; A:C:1\r\n    [1] =&gt; B:C:a\r\n    [2] =&gt; A:2\r\n    [3] =&gt; B:b\r\n    [4] =&gt; A:3\r\n    [7] =&gt; A:4\r\n)\r\nArray\r\n(\r\n    [0] =&gt; A:C:1\r\n    [1] =&gt; B:C:a\r\n    [2] =&gt; A:2\r\n    [3] =&gt; B:b\r\n    [4] =&gt; A:3\r\n    [5] =&gt; A\r\n    [6] =&gt; B\r\n    [7] =&gt; A:4\r\n)\r\npreg_filter()只返回匹配到的；preg_replace() 返回所有\r\n*/\r\n[/php]\r\n\r\n<h3>2. preg_grep() 返回匹配模式的数组条目；正则检索一个数组的所有元素</h3>\r\n语法：array preg_grep ( string $pattern , array $input [, int $flags = 0 ] )\r\n\r\n说明：返回给定数组input中与模式pattern 匹配的元素组成的数组.\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式, 字符串形式.</li>\r\n 	<li>input，输入数组.</li>\r\n 	<li>flags，如果设置为PREG_GREP_INVERT, 这个函数返回输入数组中与 给定模式pattern不匹配的元素组成的数组\r\n返回值：返回使用input中key做索引的数组。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n// 找出有p的\r\n$foods = array(&quot;pasta&quot;, &quot;steak&quot;, &quot;fish&quot;, &quot;potatoes&quot;);\r\n$p_foods = preg_grep(&quot;/p(\\w+)/&quot;, $foods);\r\nprint_r($p_foods)\r\n// 输出\r\n// Array ( [0] =&gt; pasta [3] =&gt; potatoes )\r\n[/php]\r\n\r\n<h3>3. preg_last_error() 返回最后一个PCRE正则执行产生的错误代码</h3>\r\n语法：int preg_last_error ( void )\r\n\r\n返回值：返回最后一次PCRE正则执行的错误代码。\r\n<ul>\r\n 	<li>PREG_NO_ERROR 没有匹配错误</li>\r\n 	<li>PREG_INTERNAL_ERROR 有PCRE内部错误</li>\r\n 	<li>PREG_BACKTRACK_LIMIT_ERROR 调用回溯限制超出</li>\r\n 	<li>PREG_RECURSION_LIMIT_ERROR 递归限制超出</li>\r\n 	<li>PREG_BAD_UTF8_ERROR 异常的utf-8数据导致</li>\r\n 	<li>PREG_BAD_UTF8_OFFSET_ERROR （自 PHP 5.3.0 起） 偏移量与合法的urf-8代码不匹配</li>\r\n 	<li>PREG_JIT_STACKLIMIT_ERROR (自 PHP 7.0.0 起) 因 JIT 栈空间限制而失败</li>\r\n</ul>\r\n具体错误代码的详情在上面预定义常量部分。\r\n\r\n例子：\r\n\r\n[php]&lt;/pre&gt;\r\n&lt;?php\r\n$a = preg_match(\'/(?:\\D+|&lt;\\d+&gt;)*[!?]/\', \'foobar foobar foobar\');\r\nprint_r($a);\r\n\r\nif (preg_last_error() == PREG_BACKTRACK_LIMIT_ERROR) {\r\nprint \'Backtrack limit was exhausted!\';\r\n}\r\n// 输出：Backtrack limit was exhausted!\r\n\r\n[/php]\r\n\r\n<h3>4. preg_match() 执行匹配正则表达式</h3>\r\n语法：int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags = 0 [, int $offset = 0 ]]] )\r\n\r\n说明：搜索subject与pattern给定的正则表达式的一个匹配。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，字符串类型。</li>\r\n 	<li>subject，输入字符串。</li>\r\n 	<li>matches，如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。</li>\r\n 	<li>flags，flags可以被设置为以下标记值：\r\n○ PREG_OFFSET_CAPTURE，如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</li>\r\n 	<li>offset，通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个位置开始搜索(单位是字节)。\r\n返回值：preg_match()返回 pattern 的匹配次数。 它的值将是0次（不匹配）或1次，因为preg_match()在第一次匹配后 将会停止搜索。preg_match_all()不同于此，它会一直搜索subject 直到到达结尾。 如果发生错误preg_match()返回 FALSE。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n//从URL中获取主机名称\r\npreg_match(\'@^(?:http://)?([^/]+)@i\', &quot;http://www.php.net/index.html&quot;, $matches);\r\nprint_r($matches);\r\n// 输出 Array ( [0] =&gt; http://www.php.net [1] =&gt; www.php.net )\r\n\r\npreg_match(\'/[^.]+\\.[^.]+$/\', $matches[1], $matches);\r\nprint_r($matches);\r\n// 输出 Array ( [0] =&gt; php.net )\r\n[/php]\r\n\r\n<h3>5. preg_match_all() 执行一个全局正则表达式匹配</h3>\r\n语法：int preg_match_all ( string $pattern , string $subject [, array &amp;$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0 ]]] )\r\n\r\n说明： 搜索subject中所有匹配pattern给定正则表达式的匹配结果并且将它们以flag指定顺序输出到matches中。在第一个匹配找到后，子序列继续从最后一次匹配位置搜索。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，字符串形式。</li>\r\n 	<li>subject，输入字符串。</li>\r\n 	<li>matches，多维数组，作为输出参数输出所有匹配结果, 数组排序通过flags指定。</li>\r\n 	<li>flags，可以结合下面标记使用(注意不能同时使用PREG_PATTERN_ORDER和PREG_SET_ORDER)\r\n○ PREG_PATTERN_ORDER 结果排序为$matches[0]保存完整模式的所有匹配, $matches[1] 保存第一个子组的所有匹配，以此类推。\r\n○ PREG_SET_ORDER 结果排序为$matches[0]包含第一次匹配得到的所有匹配(包含子组)， $matches[1]是包含第二次匹配到的所有匹配(包含子组)的数组，以此类推。\r\n○ PREG_OFFSET_CAPTURE 如果这个标记被传递，每个发现的匹配返回时会增加它相对目标字符串的偏移量。 注意这会改变matches中的每一个匹配结果字符串元素，使其 成为一个第0个元素为匹配结果字符串，第1个元素为 匹配结果字符串在subject中的偏移量。\r\n○ 如果没有给定排序标记，假定设置为PREG_PATTERN_ORDER。</li>\r\n 	<li>offset，通常， 查找时从目标字符串的开始位置开始。可选参数offset用于 从目标字符串中指定位置开始搜索(单位是字节)。\r\n返回值：返回完整匹配次数（可能是0），或者如果发生错误返回FALSE。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n// \\\\2是一个后向引用的示例. 这会告诉pcre它必须匹配正则表达式中第二个圆括号(这里是([\\w]+))\r\n// 匹配到的结果. 这里使用两个反斜线是因为这里使用了双引号.\r\n$html = &quot;&lt;b&gt;bold text&lt;/b&gt;&lt;a href=howdy.html&gt;click me&lt;/a&gt;&quot;;\r\npreg_match_all(&quot;/(&lt;([\\w]+)[^&gt;]*&gt;)(.*?)(&lt;\\/\\\\2&gt;)/&quot;, $html, $matches, PREG_SET_ORDER);\r\nprint_r($matches);\r\n/*\r\n输出\r\nArray\r\n(\r\n    [0] =&gt; Array\r\n        (\r\n            [0] =&gt; &lt;b&gt;bold text&lt;/b&gt;\r\n            [1] =&gt; &lt;b&gt;\r\n            [2] =&gt; b\r\n            [3] =&gt; bold text\r\n            [4] =&gt; &lt;/b&gt;\r\n        )\r\n\r\n    [1] =&gt; Array\r\n        (\r\n            [0] =&gt; &lt;a href=howdy.html&gt;click me&lt;/a&gt;\r\n            [1] =&gt; &lt;a href=howdy.html&gt;\r\n            [2] =&gt; a\r\n            [3] =&gt; click me\r\n            [4] =&gt; &lt;/a&gt;\r\n        )\r\n\r\n)\r\n*/\r\n[/php]\r\n\r\n<h3>6. preg_quote() 转义正则表达式字符</h3>\r\n语法：string preg_quote ( string $str [, string $delimiter = NULL ] )\r\n\r\n说明： preg_quote()需要参数 str 并向其中每个正则表达式语法中的字符前增加一个反斜线。 这通常用于你有一些运行时字符串需要作为正则表达式进行匹配的时候。\r\n<ul>\r\n 	<li>正则表达式特殊字符有： . \\ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | : -</li>\r\n 	<li>注意 / 不是正则表达式特殊字符。</li>\r\n</ul>\r\n注意：preg_quote() 的应用场景不是用于 preg_replace() 的 $replacement 字符串参数。\r\n\r\n参数：\r\n<ul>\r\n 	<li>str，输入字符串</li>\r\n 	<li>delimiter，如果指定了可选参数 delimiter，它也会被转义。这通常用于 转义PCRE函数使用的分隔符。 / 是最常见的分隔符。\r\n返回值：返回转义后的字符串。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n$keywords = \'$40 for a g3/400\';\r\n$keywords = preg_quote($keywords, \'/\');\r\necho $keywords; \r\n// 返回 \\$40 for a g3\\/400\r\n// $是正则表达式特殊字符, /被当参数传入也转义\r\n[/php]\r\n\r\n<h3>7. preg_replace_callback() 执行一个正则表达式搜索并且使用一个回调进行替换</h3>\r\n语法：mixed preg_replace_callback ( mixed $pattern , callable $callback , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：这个函数的行为除了 可以指定一个 callback 替代 replacement 进行替换 字符串的计算，其他方面等同于 preg_replace()。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，可以使字符串或一个字符串数组。</li>\r\n 	<li>callback， 一个回调函数，在每次需要替换时调用，调用时函数得到的参数是从subject 中匹配到的结果。回调函数返回真正参与替换的字符串。这是该回调函数的签名：string handler ( array $matches ) 。你可能经常会需要callback函数而 仅用于preg_replace_callback()一个地方的调用。在这种情况下，你可以 使用匿名函数来定义一个匿名函数作 为preg_replace_callback()调用时的回调。 这样做你可以保留所有 调用信息在同一个位置并且不会因为一个不在任何其他地方使用的回调函数名称而污染函数名称空间。\r\n● subject，要搜索替换的目标字符串或字符串数组。\r\n● limit，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。\r\n● count，如果指定，这个变量将被填充为替换执行的次数。\r\n返回值： 如果subject是一个数组， preg_replace_callback()返回一个数组，其他情况返回字符串。 错误发生时返回 NULL。如果查找到了匹配，返回替换后的目标字符串（或字符串数组）， 其他情况subject 将会无变化返回。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n/* 将文本中的年份增加一年 */\r\n$text = &quot;April fools day is 04/01/2002\\n&quot;;\r\n$text.= &quot;Last christmas was 12/24/2001\\n&quot;;\r\n// 回调函数\r\nfunction next_year($matches)\r\n{\r\n    /*\r\n    print_r($matches);$matches为:\r\n    Array\r\n    (\r\n        [0] =&gt; 04/01/2002\r\n        [1] =&gt; 04/01/\r\n        [2] =&gt; 2002\r\n    )\r\n    Array\r\n    (\r\n        [0] =&gt; 12/24/2001\r\n        [1] =&gt; 12/24/\r\n        [2] =&gt; 2001\r\n    )\r\n    说明匹配到一个就扔进来一次\r\n    */\r\n    return $matches[1].($matches[2]+1);\r\n}\r\n$text = preg_replace_callback(&quot;|(\\d{2}/\\d{2}/)(\\d{4})|&quot;, &quot;next_year&quot;, $text);\r\necho $text;\r\n/*\r\n输出\r\nApril fools day is 04/01/2003\r\nLast christmas was 12/24/2002\r\n*/\r\n[/php]\r\n\r\n<h3>8. preg_replace_callback_array() 执行一个正则表达式搜索并且使用多个回调进行替换</h3>\r\n语法：mixed preg_replace_callback_array ( array $patterns_and_callbacks , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：类似于 preg_replace_callback(), 除了回调函数是基于每个参数。\r\n\r\n参数：\r\n<ul>\r\n 	<li>patterns_and_callbacks，参数（keys）对应回调函数（values）的数组。</li>\r\n 	<li>subject，要搜索替换的目标字符串或字符串数组。</li>\r\n 	<li>limit，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。</li>\r\n 	<li>count，如果指定，这个变量将被填充为替换执行的次数。</li>\r\n</ul>\r\n返回值：\r\npreg_replace_callback_array() 如果参数是数组则会返回一个数组，否则为字符串。出错时返回 NULL；如果匹配到，会返回一个新的subject，否则\r\n\r\n例子：\r\n\r\n[php]\r\n&lt;?php \r\n$subject = \'Aaaaaa Bbb\';\r\npreg_replace_callback_array(\r\n    [\r\n        \'~[a]+~i\' =&gt; function ($match) {\r\n            echo strlen($match[0]), \' matches for &quot;a&quot; found\', PHP_EOL;\r\n        },\r\n        \'~[b]+~i\' =&gt; function ($match) {\r\n            echo strlen($match[0]), \' matches for &quot;b&quot; found\', PHP_EOL;\r\n        }\r\n    ],\r\n    $subject\r\n);\r\n/*\r\n输出\r\n6 matches for &quot;a&quot; found\r\n3 matches for &quot;b&quot; found\r\n*/\r\n[/php]\r\n\r\n<h3>9. preg_replace() 执行一个正则表达式的搜索和替换</h3>\r\n语法：mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：搜索subject中匹配pattern的部分， 以replacement进行替换。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式。可以使一个字符串或字符串数组。 可以使用一些PCRE修饰符。</li>\r\n 	<li>replacement，用于替换的字符串或字符串数组。如果这个参数是一个字符串，并且pattern 是一个数组，那么所有的模式都使用这个字符串进行替换。如果pattern和replacement 都是数组，每个pattern使用replacement中对应的 元素进行替换。如果replacement中的元素比pattern中的少， 多出来的pattern使用空字符串进行替换。replacement中可以包含后向引用\\\\n 或$n，语法上首选后者。 每个 这样的引用将被匹配到的第n个捕获子组捕获到的文本替换。 n 可以是0-99，\\\\0和$0代表完整的模式匹配文本。 捕获子组的序号计数方式为：代表捕获子组的左括号从左到右， 从1开始数。如果要在replacement 中使用反斜线，必须使用4个(\"\\\\\\\\\"，译注：因为这首先是php的字符串，经过转义后，是两个，再经过 正则表达式引擎后才被认为是一个原文反斜线)。当在替换模式下工作并且后向引用后面紧跟着需要是另外一个数字(比如：在一个匹配模式后紧接着增加一个原文数字)， 不能使用\\\\1这样的语法来描述后向引用。比如， \\\\11将会使preg_replace() 不能理解你希望的是一个\\\\1后向引用紧跟一个原文1，还是 一个\\\\11后向引用后面不跟任何东西。 这种情况下解决方案是使用${1}1。 这创建了一个独立的$1后向引用, 一个独立的原文1。当使用被弃用的 e 修饰符时, 这个函数会转义一些字符(即：\'、\"、 \\ 和 NULL) 然后进行后向引用替换。当这些完成后请确保后向引用解析完后没有单引号或 双引号引起的语法错误(比如： \'strlen(\\\'$1\\\')+strlen(\"$2\")\')。确保符合PHP的 字符串语法，并且符合eval语法。因为在完成替换后， 引擎会将结果字符串作为php代码使用eval方式进行评估并将返回值作为最终参与替换的字符串。</li>\r\n 	<li>subject，要进行搜索和替换的字符串或字符串数组。如果subject是一个数组，搜索和替换回在subject 的每一个元素上进行, 并且返回值也会是一个数组。</li>\r\n 	<li>limit，每个模式在每个subject上进行替换的最大次数。默认是 -1(无限)。</li>\r\n 	<li>count，如果指定，将会被填充为完成的替换次数。\r\n返回值： 如果subject是一个数组， preg_replace()返回一个数组， 其他情况下返回一个字符串。如果匹配被查找到，替换后的subject被返回，其他情况下 返回没有改变的 subject。如果发生错误，返回 NULL 。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php \r\n$patterns = array (\'/(19|20)(\\d{2})-(\\d{1,2})-(\\d{1,2})/\', \'/^\\s*{(\\w+)}\\s*=/\');\r\n$replace = array (\'\\3/\\4/\\1\\2\', \'$\\1 =\');\r\necho preg_replace($patterns, $replace, \'{startDate} = 1999-5-27\');\r\n// 输出: $startDate = 5/27/1999\r\n[/php]\r\n\r\n<h3>10. preg_split() 通过一个正则表达式分隔字符串</h3>\r\n语法：array preg_split ( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]] )\r\n\r\n说明：通过一个正则表达式分隔给定字符串.\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，用于搜索的模式，字符串形式。</li>\r\n 	<li>subject，输入字符串</li>\r\n 	<li>limit，如果指定，将限制分隔得到的子串最多只有limit个，返回的最后一个 子串将包含所有剩余部分。limit值为-1， 0或null时都代表\"不限制\"， 作为php的标准，你可以使用null跳过对flags的设置。</li>\r\n 	<li>flags，flags 可以是任何下面标记的组合(以位或运算 | 组合)：\r\n○ PREG_SPLIT_NO_EMPTY，如果这个标记被设置， preg_split() 将进返回分隔后的非空部分。\r\n○ PREG_SPLIT_DELIM_CAPTURE，如果这个标记设置了，用于分隔的模式中的括号表达式将被捕获并返回。\r\n○ PREG_SPLIT_OFFSET_CAPTURE，如果这个标记被设置, 对于每一个出现的匹配返回时将会附加字符串偏移量. 注意：这将会改变返回数组中的每一个元素, 使其每个元素成为一个由第0 个元素为分隔后的子串，第1个元素为该子串在subject 中的偏移量组成的数组。</li>\r\n</ul>\r\n返回值：返回一个使用 pattern 边界分隔 subject 后得到 的子串组成的数组， 或者在失败时返回 FALSE。\r\n\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n$keywords = preg_split (&quot;/[\\s,]+/&quot;, &quot;hypertext language, programming&quot;); \r\nprint_r($keywords);\r\n// 输出\r\n// Array ( [0] =&gt; hypertext [1] =&gt; language [2] =&gt; programming )\r\n[/php]\r\n', 'PHP正则表达式的应用', '', 'inherit', 'closed', 'closed', '', '1141-revision-v1', '', '', '2017-07-13 14:47:45', '2017-07-13 06:47:45', '', 1141, 'https://www.gzpblog.com/20170713/1145.html', 0, 'revision', '', 0),
(1146, 1, '2017-07-13 14:49:32', '2017-07-13 06:49:32', '<blockquote>关于PCRE的介绍以及实现正则表达式功能的所有说明，都可以在官方手册中看到：<a href=\"http://php.net/manual/zh/book.pcre.php\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式(兼容 Perl)</a></blockquote>\r\n<h2>一 认识PCRE</h2>\r\n<h3>1. 什么是PCRE</h3>\r\nPCRE 库是一个实现了与 perl 5 在语法和语义上略有差异的正则表达式模式匹配功能的函数集。\r\n<h3>2. PCRE 库介绍</h3>\r\n<div>PCRE 是 PHP 核心扩展，所以总是启用的。</div>\r\n<div>默认情况下，该扩展使用内置的 PCRE library。或者，也可以通过指定 configure 选项 --with-pcre-regex=DIR 设置外部 PCRE library 目录，DIR 是 PCRE 的 include 和 library 文件位置。 PHP 5.6/7.0 推荐使用 PCRE 8.10 或更高版本。</div>\r\n<div>这些函数中使用的模式语法非常类似 perl。表达式必须用分隔符闭合，比如一个正斜杠(/)。 分隔符可以使任意非字母数字，除反斜杠(\\)和空字节之外的非空白 ascii 字符。 如果分隔符 在表达式中使用，需要使用反斜线进行转义。自php 4.0.4开始，可以使用 perl 样式的()、 {}、 [] 以及 &lt;&gt; 作为分隔符。</div>\r\n<h3>3. PCRE正则与POSIX 正则</h3>\r\n<div>除了PCRE正则库，还有POSIX 正则库。 <strong>自PHP 5.3.0起， POSIX 正则表达式扩展被废弃。</strong>所以，这里也没有必要研究 POSIX 正则了，这里我们就看PCRE正则。</div>\r\n<h3>4. 版本特性</h3>\r\n<div>PHP 7.0.0 起 PCRE 默认支持 JIT（just-in-time）编译技术，PHP 7.0.12 起可以通过 --without-pcre-jit 禁用 PCRE 的 JIT 功能。</div>\r\n<div>PHP 的 Windows 版本已内建对此扩展的支持。不需要载入额外的扩展来使用这些函数。</div>\r\n<div>PHP 5.3.0 的之前版本，可通过 --without-pcre-regex 配置选项禁用此扩展。</div>\r\n<h2>二. 预定义常量</h2>\r\n下列常量由此扩展定义，且仅在此扩展编译入 PHP 或在运行时动态载入时可用。\r\n<table style=\"height: 1034px;\" border=\"1\" width=\"943\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td><strong>常量</strong></td>\r\n<td><strong>描述</strong></td>\r\n<td><strong>自哪个版本起</strong></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_PATTERN_ORDER</td>\r\n<td>结果按照”规则”排序，仅用于preg_match_all()，即$matches[0]是完整规则的匹配结果，$matches[1]是第一个子组匹配的结果，等等。</td>\r\n<td>since</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SET_ORDER</td>\r\n<td>结果按照”集合”排序，仅用于preg_match_all()，即$matches[0]保存第一次匹配结果的所有结果(包含子组)信息, $matches[1]保存第二次的结果信息，等等。</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_OFFSET_CAPTURE</td>\r\n<td>查看PREG_SPLIT_OFFSET_CAPTURE的描述。</td>\r\n<td>4.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_NO_EMPTY</td>\r\n<td>这个标记告诉preg_split()仅返回非空部分。</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_DELIM_CAPTURE</td>\r\n<td>这个标记告诉preg_split()同时捕获括号表达式匹配到的内容。</td>\r\n<td>4.0.5</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_SPLIT_OFFSET_CAPTURE</td>\r\n<td>如果设置了这个标记，每次出现的匹配子串的偏移量也会被返回。注意，这会改变返回数组中的值，每个元素都是由匹配子串作为第0个元素，它相对目标字符串的偏移量作为第1个元素的数组。这个标记只能用于preg_split()。</td>\r\n<td>4.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_NO_ERROR</td>\r\n<td>没有匹配错误时调用 preg_last_error() 返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_INTERNAL_ERROR</td>\r\n<td>如果有PCRE内部错误时调用 preg_last_error() 返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BACKTRACK_LIMIT_ERROR</td>\r\n<td>如果调用回溯限制超出，调用preg_last_error()时返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_RECURSION_LIMIT_ERROR</td>\r\n<td>如果递归限制超出，调用preg_last_error()时返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BAD_UTF8_ERROR</td>\r\n<td>如果最后一个错误时由于异常的utf-8数据(仅在运行在UTF-8 模式正则表达式下可用)。导致的，调用preg_last_error()返回。</td>\r\n<td>5.2.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_BAD_UTF8_OFFSET_ERROR</td>\r\n<td>如果偏移量与合法的urf-8代码不匹配(仅在运行在UTF-8 模式正则表达式下可用)。调用preg_last_error()返回。</td>\r\n<td>5.3.0</td>\r\n</tr>\r\n<tr>\r\n<td>PREG_JIT_STACKLIMIT_ERROR</td>\r\n<td>当 PCRE 函数因 JIT 栈空间限制而失败， preg_last_error() 就会返回此常量。</td>\r\n<td>7.0.0</td>\r\n</tr>\r\n<tr>\r\n<td>PCRE_VERSION</td>\r\n<td>PCRE版本号和发布日期(比如： \"7.0 18-Dec-2006\")。</td>\r\n<td>5.2.4</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2>三 正则语法</h2>\r\n1. 详细的正则语法可以参考：<a href=\"http://php.net/manual/zh/reference.pcre.pattern.syntax.php\" target=\"_blank\" rel=\"noopener noreferrer\">http://php.net/manual/zh/reference.pcre.pattern.syntax.php</a>\r\n\r\n2. 之前的一个总结，正则表达式字符表和常用正则表达式：<a href=\"https://www.gzpblog.com/20161009/278.html\" target=\"_blank\" rel=\"noopener noreferrer\">正则表达式</a>\r\n<h2>四 PCRE 函数</h2>\r\n这篇文章的关注重点将在于函数，和函数的应用，即是正则在PHP中的具体实现。加下来一个一个看。\r\n<h3>1. preg_filter() 执行一个正则表达式搜索和替换</h3>\r\n语法：mixed preg_filter ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：preg_filter()等价于preg_replace() 除了它仅仅返回(可能经过转化)与目标匹配的结果。\r\n\r\n返回值： 如果subject是一个数组，返回一个数组， 其他情况返回一个字符串。如果没有找到匹配或者发生了错误，当subject是数组 时返回一个空数组，其他情况返回NULL。\r\n\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n$subject = array(\'1\', \'a\', \'2\', \'b\', \'3\', \'A\', \'B\', \'4\'); \r\n$pattern = array(\'/\\d/\', \'/[a-z]/\', \'/[1a]/\'); \r\n$replace = array(\'A:$0\', \'B:$0\', \'C:$0\'); \r\n\r\nprint_r(preg_filter($pattern, $replace, $subject)); //使用filter\r\n\r\nprint_r(preg_replace($pattern, $replace, $subject)); //使用replace\r\n\r\n/*\r\n返回： \r\nArray\r\n(\r\n    [0] =&gt; A:C:1\r\n    [1] =&gt; B:C:a\r\n    [2] =&gt; A:2\r\n    [3] =&gt; B:b\r\n    [4] =&gt; A:3\r\n    [7] =&gt; A:4\r\n)\r\nArray\r\n(\r\n    [0] =&gt; A:C:1\r\n    [1] =&gt; B:C:a\r\n    [2] =&gt; A:2\r\n    [3] =&gt; B:b\r\n    [4] =&gt; A:3\r\n    [5] =&gt; A\r\n    [6] =&gt; B\r\n    [7] =&gt; A:4\r\n)\r\npreg_filter()只返回匹配到的；preg_replace() 返回所有\r\n*/\r\n[/php]\r\n\r\n<h3>2. preg_grep() 返回匹配模式的数组条目；正则检索一个数组的所有元素</h3>\r\n语法：array preg_grep ( string $pattern , array $input [, int $flags = 0 ] )\r\n\r\n说明：返回给定数组input中与模式pattern 匹配的元素组成的数组.\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式, 字符串形式.</li>\r\n 	<li>input，输入数组.</li>\r\n 	<li>flags，如果设置为PREG_GREP_INVERT, 这个函数返回输入数组中与 给定模式pattern不匹配的元素组成的数组\r\n返回值：返回使用input中key做索引的数组。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n// 找出有p的\r\n$foods = array(&quot;pasta&quot;, &quot;steak&quot;, &quot;fish&quot;, &quot;potatoes&quot;);\r\n$p_foods = preg_grep(&quot;/p(\\w+)/&quot;, $foods);\r\nprint_r($p_foods)\r\n// 输出\r\n// Array ( [0] =&gt; pasta [3] =&gt; potatoes )\r\n[/php]\r\n\r\n<h3>3. preg_last_error() 返回最后一个PCRE正则执行产生的错误代码</h3>\r\n语法：int preg_last_error ( void )\r\n\r\n返回值：返回最后一次PCRE正则执行的错误代码。\r\n<ul>\r\n 	<li>PREG_NO_ERROR 没有匹配错误</li>\r\n 	<li>PREG_INTERNAL_ERROR 有PCRE内部错误</li>\r\n 	<li>PREG_BACKTRACK_LIMIT_ERROR 调用回溯限制超出</li>\r\n 	<li>PREG_RECURSION_LIMIT_ERROR 递归限制超出</li>\r\n 	<li>PREG_BAD_UTF8_ERROR 异常的utf-8数据导致</li>\r\n 	<li>PREG_BAD_UTF8_OFFSET_ERROR （自 PHP 5.3.0 起） 偏移量与合法的urf-8代码不匹配</li>\r\n 	<li>PREG_JIT_STACKLIMIT_ERROR (自 PHP 7.0.0 起) 因 JIT 栈空间限制而失败</li>\r\n</ul>\r\n具体错误代码的详情在上面预定义常量部分。\r\n\r\n例子：\r\n\r\n[php]&lt;/pre&gt;\r\n&lt;?php\r\n$a = preg_match(\'/(?:\\D+|&lt;\\d+&gt;)*[!?]/\', \'foobar foobar foobar\');\r\nprint_r($a);\r\n\r\nif (preg_last_error() == PREG_BACKTRACK_LIMIT_ERROR) {\r\nprint \'Backtrack limit was exhausted!\';\r\n}\r\n// 输出：Backtrack limit was exhausted!\r\n\r\n[/php]\r\n\r\n<h3>4. preg_match() 执行匹配正则表达式</h3>\r\n语法：int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags = 0 [, int $offset = 0 ]]] )\r\n\r\n说明：搜索subject与pattern给定的正则表达式的一个匹配。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，字符串类型。</li>\r\n 	<li>subject，输入字符串。</li>\r\n 	<li>matches，如果提供了参数matches，它将被填充为搜索结果。 $matches[0]将包含完整模式匹配到的文本， $matches[1] 将包含第一个捕获子组匹配到的文本，以此类推。</li>\r\n 	<li>flags，flags可以被设置为以下标记值：\r\n○ PREG_OFFSET_CAPTURE，如果传递了这个标记，对于每一个出现的匹配返回时会附加字符串偏移量(相对于目标字符串的)。 注意：这会改变填充到matches参数的数组，使其每个元素成为一个由 第0个元素是匹配到的字符串，第1个元素是该匹配字符串 在目标字符串subject中的偏移量。</li>\r\n 	<li>offset，通常，搜索从目标字符串的开始位置开始。可选参数 offset 用于 指定从目标字符串的某个位置开始搜索(单位是字节)。\r\n返回值：preg_match()返回 pattern 的匹配次数。 它的值将是0次（不匹配）或1次，因为preg_match()在第一次匹配后 将会停止搜索。preg_match_all()不同于此，它会一直搜索subject 直到到达结尾。 如果发生错误preg_match()返回 FALSE。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n//从URL中获取主机名称\r\npreg_match(\'@^(?:http://)?([^/]+)@i\', &quot;http://www.php.net/index.html&quot;, $matches);\r\nprint_r($matches);\r\n// 输出 Array ( [0] =&gt; http://www.php.net [1] =&gt; www.php.net )\r\n\r\npreg_match(\'/[^.]+\\.[^.]+$/\', $matches[1], $matches);\r\nprint_r($matches);\r\n// 输出 Array ( [0] =&gt; php.net )\r\n[/php]\r\n\r\n<h3>5. preg_match_all() 执行一个全局正则表达式匹配</h3>\r\n语法：int preg_match_all ( string $pattern , string $subject [, array &amp;$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0 ]]] )\r\n\r\n说明： 搜索subject中所有匹配pattern给定正则表达式的匹配结果并且将它们以flag指定顺序输出到matches中。在第一个匹配找到后，子序列继续从最后一次匹配位置搜索。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，字符串形式。</li>\r\n 	<li>subject，输入字符串。</li>\r\n 	<li>matches，多维数组，作为输出参数输出所有匹配结果, 数组排序通过flags指定。</li>\r\n 	<li>flags，可以结合下面标记使用(注意不能同时使用PREG_PATTERN_ORDER和PREG_SET_ORDER)\r\n○ PREG_PATTERN_ORDER 结果排序为$matches[0]保存完整模式的所有匹配, $matches[1] 保存第一个子组的所有匹配，以此类推。\r\n○ PREG_SET_ORDER 结果排序为$matches[0]包含第一次匹配得到的所有匹配(包含子组)， $matches[1]是包含第二次匹配到的所有匹配(包含子组)的数组，以此类推。\r\n○ PREG_OFFSET_CAPTURE 如果这个标记被传递，每个发现的匹配返回时会增加它相对目标字符串的偏移量。 注意这会改变matches中的每一个匹配结果字符串元素，使其 成为一个第0个元素为匹配结果字符串，第1个元素为 匹配结果字符串在subject中的偏移量。\r\n○ 如果没有给定排序标记，假定设置为PREG_PATTERN_ORDER。</li>\r\n 	<li>offset，通常， 查找时从目标字符串的开始位置开始。可选参数offset用于 从目标字符串中指定位置开始搜索(单位是字节)。\r\n返回值：返回完整匹配次数（可能是0），或者如果发生错误返回FALSE。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n// \\\\2是一个后向引用的示例. 这会告诉pcre它必须匹配正则表达式中第二个圆括号(这里是([\\w]+))\r\n// 匹配到的结果. 这里使用两个反斜线是因为这里使用了双引号.\r\n$html = &quot;&lt;b&gt;bold text&lt;/b&gt;&lt;a href=howdy.html&gt;click me&lt;/a&gt;&quot;;\r\npreg_match_all(&quot;/(&lt;([\\w]+)[^&gt;]*&gt;)(.*?)(&lt;\\/\\\\2&gt;)/&quot;, $html, $matches, PREG_SET_ORDER);\r\nprint_r($matches);\r\n/*\r\n输出\r\nArray\r\n(\r\n    [0] =&gt; Array\r\n        (\r\n            [0] =&gt; &lt;b&gt;bold text&lt;/b&gt;\r\n            [1] =&gt; &lt;b&gt;\r\n            [2] =&gt; b\r\n            [3] =&gt; bold text\r\n            [4] =&gt; &lt;/b&gt;\r\n        )\r\n\r\n    [1] =&gt; Array\r\n        (\r\n            [0] =&gt; &lt;a href=howdy.html&gt;click me&lt;/a&gt;\r\n            [1] =&gt; &lt;a href=howdy.html&gt;\r\n            [2] =&gt; a\r\n            [3] =&gt; click me\r\n            [4] =&gt; &lt;/a&gt;\r\n        )\r\n\r\n)\r\n*/\r\n[/php]\r\n\r\n<h3>6. preg_quote() 转义正则表达式字符</h3>\r\n语法：string preg_quote ( string $str [, string $delimiter = NULL ] )\r\n\r\n说明： preg_quote()需要参数 str 并向其中每个正则表达式语法中的字符前增加一个反斜线。 这通常用于你有一些运行时字符串需要作为正则表达式进行匹配的时候。\r\n<ul>\r\n 	<li>正则表达式特殊字符有： . \\ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | : -</li>\r\n 	<li>注意 / 不是正则表达式特殊字符。</li>\r\n</ul>\r\n注意：preg_quote() 的应用场景不是用于 preg_replace() 的 $replacement 字符串参数。\r\n\r\n参数：\r\n<ul>\r\n 	<li>str，输入字符串</li>\r\n 	<li>delimiter，如果指定了可选参数 delimiter，它也会被转义。这通常用于 转义PCRE函数使用的分隔符。 / 是最常见的分隔符。\r\n返回值：返回转义后的字符串。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n$keywords = \'$40 for a g3/400\';\r\n$keywords = preg_quote($keywords, \'/\');\r\necho $keywords; \r\n// 返回 \\$40 for a g3\\/400\r\n// $是正则表达式特殊字符, /被当参数传入也转义\r\n[/php]\r\n\r\n<h3>7. preg_replace_callback() 执行一个正则表达式搜索并且使用一个回调进行替换</h3>\r\n语法：mixed preg_replace_callback ( mixed $pattern , callable $callback , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：这个函数的行为除了 可以指定一个 callback 替代 replacement 进行替换 字符串的计算，其他方面等同于 preg_replace()。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式，可以使字符串或一个字符串数组。</li>\r\n 	<li>callback， 一个回调函数，在每次需要替换时调用，调用时函数得到的参数是从subject 中匹配到的结果。回调函数返回真正参与替换的字符串。这是该回调函数的签名：string handler ( array $matches ) 。你可能经常会需要callback函数而 仅用于preg_replace_callback()一个地方的调用。在这种情况下，你可以 使用匿名函数来定义一个匿名函数作 为preg_replace_callback()调用时的回调。 这样做你可以保留所有 调用信息在同一个位置并且不会因为一个不在任何其他地方使用的回调函数名称而污染函数名称空间。\r\n● subject，要搜索替换的目标字符串或字符串数组。\r\n● limit，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。\r\n● count，如果指定，这个变量将被填充为替换执行的次数。\r\n返回值： 如果subject是一个数组， preg_replace_callback()返回一个数组，其他情况返回字符串。 错误发生时返回 NULL。如果查找到了匹配，返回替换后的目标字符串（或字符串数组）， 其他情况subject 将会无变化返回。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n/* 将文本中的年份增加一年 */\r\n$text = &quot;April fools day is 04/01/2002\\n&quot;;\r\n$text.= &quot;Last christmas was 12/24/2001\\n&quot;;\r\n// 回调函数\r\nfunction next_year($matches)\r\n{\r\n    /*\r\n    print_r($matches);$matches为:\r\n    Array\r\n    (\r\n        [0] =&gt; 04/01/2002\r\n        [1] =&gt; 04/01/\r\n        [2] =&gt; 2002\r\n    )\r\n    Array\r\n    (\r\n        [0] =&gt; 12/24/2001\r\n        [1] =&gt; 12/24/\r\n        [2] =&gt; 2001\r\n    )\r\n    说明匹配到一个就扔进来一次\r\n    */\r\n    return $matches[1].($matches[2]+1);\r\n}\r\n$text = preg_replace_callback(&quot;|(\\d{2}/\\d{2}/)(\\d{4})|&quot;, &quot;next_year&quot;, $text);\r\necho $text;\r\n/*\r\n输出\r\nApril fools day is 04/01/2003\r\nLast christmas was 12/24/2002\r\n*/\r\n[/php]\r\n\r\n<h3>8. preg_replace_callback_array() 执行一个正则表达式搜索并且使用多个回调进行替换</h3>\r\n语法：mixed preg_replace_callback_array ( array $patterns_and_callbacks , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：类似于 preg_replace_callback(), 除了回调函数是基于每个参数。\r\n\r\n参数：\r\n<ul>\r\n 	<li>patterns_and_callbacks，参数（keys）对应回调函数（values）的数组。</li>\r\n 	<li>subject，要搜索替换的目标字符串或字符串数组。</li>\r\n 	<li>limit，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。</li>\r\n 	<li>count，如果指定，这个变量将被填充为替换执行的次数。</li>\r\n</ul>\r\n返回值：\r\npreg_replace_callback_array() 如果参数是数组则会返回一个数组，否则为字符串。出错时返回 NULL；如果匹配到，会返回一个新的subject，否则\r\n\r\n例子：\r\n\r\n[php]\r\n&lt;?php \r\n$subject = \'Aaaaaa Bbb\';\r\npreg_replace_callback_array(\r\n    [\r\n        \'~[a]+~i\' =&gt; function ($match) {\r\n            echo strlen($match[0]), \' matches for &quot;a&quot; found\', PHP_EOL;\r\n        },\r\n        \'~[b]+~i\' =&gt; function ($match) {\r\n            echo strlen($match[0]), \' matches for &quot;b&quot; found\', PHP_EOL;\r\n        }\r\n    ],\r\n    $subject\r\n);\r\n/*\r\n输出\r\n6 matches for &quot;a&quot; found\r\n3 matches for &quot;b&quot; found\r\n*/\r\n[/php]\r\n\r\n<h3>9. preg_replace() 执行一个正则表达式的搜索和替换</h3>\r\n语法：mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )\r\n\r\n说明：搜索subject中匹配pattern的部分， 以replacement进行替换。\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，要搜索的模式。可以使一个字符串或字符串数组。 可以使用一些PCRE修饰符。</li>\r\n 	<li>replacement，用于替换的字符串或字符串数组。如果这个参数是一个字符串，并且pattern 是一个数组，那么所有的模式都使用这个字符串进行替换。如果pattern和replacement 都是数组，每个pattern使用replacement中对应的 元素进行替换。如果replacement中的元素比pattern中的少， 多出来的pattern使用空字符串进行替换。replacement中可以包含后向引用\\\\n 或$n，语法上首选后者。 每个 这样的引用将被匹配到的第n个捕获子组捕获到的文本替换。 n 可以是0-99，\\\\0和$0代表完整的模式匹配文本。 捕获子组的序号计数方式为：代表捕获子组的左括号从左到右， 从1开始数。如果要在replacement 中使用反斜线，必须使用4个(\"\\\\\\\\\"，译注：因为这首先是php的字符串，经过转义后，是两个，再经过 正则表达式引擎后才被认为是一个原文反斜线)。当在替换模式下工作并且后向引用后面紧跟着需要是另外一个数字(比如：在一个匹配模式后紧接着增加一个原文数字)， 不能使用\\\\1这样的语法来描述后向引用。比如， \\\\11将会使preg_replace() 不能理解你希望的是一个\\\\1后向引用紧跟一个原文1，还是 一个\\\\11后向引用后面不跟任何东西。 这种情况下解决方案是使用${1}1。 这创建了一个独立的$1后向引用, 一个独立的原文1。当使用被弃用的 e 修饰符时, 这个函数会转义一些字符(即：\'、\"、 \\ 和 NULL) 然后进行后向引用替换。当这些完成后请确保后向引用解析完后没有单引号或 双引号引起的语法错误(比如： \'strlen(\\\'$1\\\')+strlen(\"$2\")\')。确保符合PHP的 字符串语法，并且符合eval语法。因为在完成替换后， 引擎会将结果字符串作为php代码使用eval方式进行评估并将返回值作为最终参与替换的字符串。</li>\r\n 	<li>subject，要进行搜索和替换的字符串或字符串数组。如果subject是一个数组，搜索和替换回在subject 的每一个元素上进行, 并且返回值也会是一个数组。</li>\r\n 	<li>limit，每个模式在每个subject上进行替换的最大次数。默认是 -1(无限)。</li>\r\n 	<li>count，如果指定，将会被填充为完成的替换次数。\r\n返回值： 如果subject是一个数组， preg_replace()返回一个数组， 其他情况下返回一个字符串。如果匹配被查找到，替换后的subject被返回，其他情况下 返回没有改变的 subject。如果发生错误，返回 NULL 。</li>\r\n</ul>\r\n例子：\r\n\r\n[php]\r\n&lt;?php \r\n$patterns = array (\'/(19|20)(\\d{2})-(\\d{1,2})-(\\d{1,2})/\', \'/^\\s*{(\\w+)}\\s*=/\');\r\n$replace = array (\'\\3/\\4/\\1\\2\', \'$\\1 =\');\r\necho preg_replace($patterns, $replace, \'{startDate} = 1999-5-27\');\r\n// 输出: $startDate = 5/27/1999\r\n[/php]\r\n\r\n<h3>10. preg_split() 通过一个正则表达式分隔字符串</h3>\r\n语法：array preg_split ( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]] )\r\n\r\n说明：通过一个正则表达式分隔给定字符串.\r\n\r\n参数：\r\n<ul>\r\n 	<li>pattern，用于搜索的模式，字符串形式。</li>\r\n 	<li>subject，输入字符串</li>\r\n 	<li>limit，如果指定，将限制分隔得到的子串最多只有limit个，返回的最后一个 子串将包含所有剩余部分。limit值为-1， 0或null时都代表\"不限制\"， 作为php的标准，你可以使用null跳过对flags的设置。</li>\r\n 	<li>flags，flags 可以是任何下面标记的组合(以位或运算 | 组合)：\r\n○ PREG_SPLIT_NO_EMPTY，如果这个标记被设置， preg_split() 将进返回分隔后的非空部分。\r\n○ PREG_SPLIT_DELIM_CAPTURE，如果这个标记设置了，用于分隔的模式中的括号表达式将被捕获并返回。\r\n○ PREG_SPLIT_OFFSET_CAPTURE，如果这个标记被设置, 对于每一个出现的匹配返回时将会附加字符串偏移量. 注意：这将会改变返回数组中的每一个元素, 使其每个元素成为一个由第0 个元素为分隔后的子串，第1个元素为该子串在subject 中的偏移量组成的数组。</li>\r\n</ul>\r\n返回值：返回一个使用 pattern 边界分隔 subject 后得到 的子串组成的数组， 或者在失败时返回 FALSE。\r\n\r\n例子：\r\n\r\n[php]\r\n&lt;?php\r\n$keywords = preg_split (&quot;/[\\s,]+/&quot;, &quot;hypertext language, programming&quot;); \r\nprint_r($keywords);\r\n// 输出\r\n// Array ( [0] =&gt; hypertext [1] =&gt; language [2] =&gt; programming )\r\n[/php]\r\n', 'PHP正则表达式的应用', '', 'inherit', 'closed', 'closed', '', '1141-revision-v1', '', '', '2017-07-13 14:49:32', '2017-07-13 06:49:32', '', 1141, 'https://www.gzpblog.com/20170713/1146.html', 0, 'revision', '', 0),
(1147, 1, '2017-07-14 10:23:17', '2017-07-14 02:23:17', '<h2>一 关于PSR-6缓存接口规范</h2>\r\n缓存是提升应用性能的常用手段，为框架中最通用的功能，每个框架也都推出专属的、功能多 样的缓存库。这些差别使得开发人员不得不学习多种系统，而很多可能是他们并不需要的功能。 此外，缓存库的开发者同样面临着一个窘境，是只支持有限数量的几个框架还是创建一堆庞 大的适配器类。\r\n\r\n一个通用的缓存系统接口可以解决掉这些问题。库和框架的开发人员能够知道缓存系统会按照他们所 预期的方式工作，缓存系统的开发人员只需要实现单一的接口，而不用去开发各种各样的适配器。\r\n\r\n本 PSR 的目标是：创建一套通用的接口规范，能够让开发人员整合到现有框架和系统，而不需要去 开发框架专属的适配器类。\r\n\r\n本篇能愿动词解释：\r\n<ul>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\nPHP-FIG 官网 PSR-6 详解：<a href=\"http://www.php-fig.org/psr/psr-6/\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-6: Caching Interface</a>\r\n<h2>二 PSR-6内容</h2>\r\n<h3>1. 定义</h3>\r\n<ul>\r\n 	<li>调用类库 (Calling Library) - 调用者，使用缓存服务的类库，这个类库调用缓存服务，调用的 是此缓存接口规范的具体「实现类库」，调用者不需要知道任何「缓存服务」的具体实现。</li>\r\n 	<li>实现类库 (Implementing Library) - 此类库是对「缓存接口规范」的具体实现，封装起来的缓存服务，供「调用类库」使用。实现类库 <strong>必须</strong> 提供 PHP 类来实现 Cache\\CacheItemPoolInterface 和 Cache\\CacheItemInterface 接口。 实现类库 <strong>必须</strong> 支持最小的如下描述的 TTL 功能，秒级别的精准度。</li>\r\n 	<li>生存时间值 (TTL - Time To Live) - 定义了缓存可以存活的时间，以秒为单位的整数值。</li>\r\n 	<li>过期时间 (Expiration) - 定义准确的过期时间点，一般为缓存存储发生的时间点加上 TTL 时 间值，也可以指定一个 DateTime 对象。假如一个缓存项的 TTL 设置为 300 秒，保存于 1:30:00 ，那么缓存项的过期时间为 1:35:00。实现类库 <strong>可以</strong> 让缓存项提前过期，但是<strong> 必须</strong> 在到达过期时间时立即把缓存项标示为 过期。如果调用类库在保存一个缓存项的时候未设置「过期时间」、或者设置了 null 作为过期 时间（或者 TTL 设置为 null），实现类库 可以 使用默认自行配置的一个时间。如果没 有默认时间，实现类库 必须把存储时间当做 永久性 存储，或者按照底层驱动能支持的 最长时间作为保持时间。</li>\r\n 	<li>键 (KEY) - 长度大于 1 的字串，用作缓存项在缓存系统里的唯一标识符。实现类库 <strong>必须</strong> 支持「键」规则 A-Z, a-z, 0-9, _, 和 . 任何顺序的 UTF-8 编码，长度 小于 64 位。实现类库 <strong>可以</strong> 支持更多的编码或者更长的长度，不过 <strong>必须</strong> 支持至少以上指定 的编码和长度。实现类库可自行实现对「键」的转义，但是 <strong>必须</strong> 保证能够无损的返回「键」字串。以下 的字串作为系统保留: {}()/\\@:，一定不可 作为「键」的命名支持。</li>\r\n 	<li>命中 (Hit) - 一个缓存的命中，指的是当调用类库使用「键」在请求一个缓存项的时候，在缓存 池里能找到对应的缓存项，并且此缓存项还未过期，并且此数据不会因为任何原因出现错误。调用类 库 <strong>应该</strong> 确保先验证下 isHit() 有命中后才调用 get() 获取数据。</li>\r\n 	<li>未命中 (Miss) - 一个缓存未命中，是完全的上面描述的「命中」的相反。指的是当调用类库使用「键」在请求一个缓存项的时候，在缓存池里未能找到对应的缓存项，或者此缓存项已经过期，或者此数据因为任何原因出现错误。一个过期的缓存项，<strong>必须</strong> 被当做 未命中 来对待。</li>\r\n 	<li>延迟 (Deferred) - 一个延迟的缓存，指的是这个缓存项可能不会立刻被存储到物理缓存池里。一个 缓存池对象 <strong>可以</strong> 对一个指定延迟的缓存项进行延迟存储，这样做的好处是可以利用一些缓存服务器提供 的批量插入功能。缓存池 <strong>必须</strong> 能对所有延迟缓存最终能持久化，并且不会丢失。<strong>可以</strong> 在调用类库还未发起保存请求之前就做持久化。当调用类库调用 commit() 方法时，所有的延迟缓存都 必须 做持久化。实现类库 可以 自行决定使用什么逻辑来触发数据持久化，如对象的 析构方法 (destructor) 内、调用 save() 时持久化、倒计时保存或者触及最大数量时保存等。当请求一个延迟 缓存项时，<strong>必须</strong> 返回一个延迟，未持久化的缓存项对象。</li>\r\n</ul>\r\n<h3>2. 数据</h3>\r\n实现类库 <strong>必须</strong> 支持所有的可序列化的 PHP 数据类型，包含：\r\n<ul>\r\n 	<li>字符串 - 任何大小的 PHP 兼容字符串</li>\r\n 	<li>整数 - PHP 支持的低于 64 位的有符号整数值</li>\r\n 	<li>浮点数 - 所有的有符号浮点数</li>\r\n 	<li>布尔 - true 和 false.</li>\r\n 	<li>Null - null 值</li>\r\n 	<li>数组 - 各种形式的 PHP 数组</li>\r\n 	<li>对象（Object） - 所有的支持无损序列化和反序列化的对象，如：$o == unserialize(serialize($o)) 。对象 可以 使用 PHP 的 Serializable 接口，__sleep() 或者 __wakeup() 魔术方法，或者在合适的情况下，使用其他类似的语言特性。</li>\r\n</ul>\r\n所有存进实现类库的数据，都 <strong>必须</strong> 能做到原封不动的取出。连类型也 <strong>必须</strong> 是完全一致，如果 存进缓存的是字符串 5，取出来的却是整数值 5 的话，可以算作严重的错误。实现类库 <strong>可以</strong> 使用 PHP 的「serialize()/unserialize() 方法」作为底层实现，不过不强迫这样做。对于他们的兼容性，以能支持所有数据类型作为基准线。\r\n\r\n实在无法「完整取出」存入的数据的话，实现类库 <strong>必须</strong> 把「缓存丢失」标示作为返回，而不是损坏了的数据。\r\n<h3>3. 主要概念</h3>\r\n<h4>缓存池 Pool</h4>\r\n缓存池包含缓存系统里所有缓存数据的集合。缓存池逻辑上是所有缓存项存储的仓库，所有存储进去的数据， 都能从缓存池里取出来，所有的对缓存的操作，都发生在缓存池子里。\r\n<h4>缓存项 Items</h4>\r\n一条缓存项在缓存池里代表了一对「键/值」对应的数据，「键」被视为每一个缓存项主键，是缓存项的 唯一标识符，<strong>必须</strong> 是不可变更的，当然，「值」<strong>可以</strong> 任意变更。\r\n<h3>4. 错误处理</h3>\r\n缓存对应用性能起着至关重要的作用，但是，无论在任何情况下，缓存 一定不可 作为应用程序不 可或缺的核心功能。\r\n\r\n缓存系统里的错误 一定不可 导致应用程序故障，所以，实现类库 一定不可 抛出任何除了 此接口规范定义的以外的异常，并且 必须 捕捉包括底层存储驱动抛出的异常，不让其冒泡至超 出缓存系统内。\r\n\r\n实现类库 应该 对此类错误进行记录，或者以任何形式通知管理员。\r\n\r\n调用类库发起删除缓存项的请求，或者清空整个缓冲池子的请求，「键」不存在的话 必须 不能 当成是有错误发生。后置条件是一样的，如果取数据时，「键」不存在的话 必须 不能当成是有错误发生。\r\n<h3>5. 接口</h3>\r\n<h4>CacheItemInterface</h4>\r\nCacheItemInterface 定义了缓存系统里的一个缓存项。每一个缓存项 必须 有一个「键」与之相 关联，此「键」通常是通过 Cache\\CacheItemPoolInterface 来设置。\r\n\r\nCache\\CacheItemInterface 对象把缓存项的存储进行了封装，每一个 Cache\\CacheItemInterface 由一个 Cache\\CacheItemPoolInterface 对象生成，CacheItemPoolInterface 负责一些必须的设置，并且给对象设置具有 唯一性 的「键」。\r\n\r\nCache\\CacheItemInterface 对象 必须 能够存储和取出任何类型的，在「数据」章节定义的 PHP 数值。\r\n\r\n调用类库 一定不可 擅自初始化「CacheItemInterface」对象，「缓存项」只能使用「CacheItemPoolInterface」对象的 getItem() 方法来获取。调用类库 一定不可 假设 由一个实现类库创建的「缓存项」能被另一个实现类库完全兼容。\r\n\r\n[php]\r\nnamespace Psr\\Cache;\r\n\r\n/**\r\n * CacheItemInterface 定了缓存系统里对缓存项操作的接口\r\n */\r\ninterface CacheItemInterface\r\n{\r\n    /**\r\n     * 返回当前缓存项的「键」\r\n     * \r\n     * 「键」由实现类库来加载，并且高层的调用者（如：CacheItemPoolInterface）\r\n     *  **应该** 能使用此方法来获取到「键」的信息。\r\n     *\r\n     * @return string\r\n     *   当前缓存项的「键」\r\n     */\r\n    public function getKey();\r\n\r\n    /**\r\n     * 凭借此缓存项的「键」从缓存系统里面取出缓存项。\r\n     *\r\n     * 取出的数据 **必须** 跟使用 `set()` 存进去的数据是一模一样的。\r\n     *\r\n     * 如果 `isHit()` 返回 false 的话，此方法必须返回 `null`，需要注意的是 `null` \r\n     * 本来就是一个合法的缓存数据，所以你 **应该** 使用 `isHit()` 方法来辨别到底是\r\n     * &quot;返回 null 数据&quot; 还是 &quot;缓存里没有此数据&quot;。\r\n     *\r\n     * @return mixed\r\n     *   此缓存项的「键」对应的「值」，如果找不到的话，返回 `null`\r\n     */\r\n    public function get();\r\n\r\n    /**\r\n     * 确认缓存项的检查是否命中。\r\n     * \r\n     * 注意: 调用此方法和调用 `get()` 时 **一定不可** 有先后顺序之分。\r\n     *\r\n     * @return bool\r\n     *   如果缓冲池里有命中的话，返回 `true`，反之返回 `false`\r\n     */\r\n    public function isHit();\r\n\r\n    /**\r\n     * 为此缓存项设置「值」。\r\n     *\r\n     * 参数 $value 可以是所有能被 PHP 序列化的数据，序列化的逻辑\r\n     * 需要在实现类库里书写。\r\n     *\r\n     * @param mixed $value\r\n     *   将被存储的可序列化的数据。\r\n     *\r\n     * @return static\r\n     *   返回当前对象。\r\n     */\r\n    public function set($value);\r\n\r\n    /**\r\n     * 设置缓存项的准确过期时间点。\r\n     *\r\n     * @param \\DateTimeInterface $expiration\r\n     * \r\n     *   过期的准确时间点，过了这个时间点后，缓存项就 **必须** 被认为是过期了的。\r\n     *   如果明确的传参 `null` 的话，**可以** 使用一个默认的时间。\r\n     *   如果没有设置的话，缓存 **应该** 存储到底层实现的最大允许时间。\r\n     *\r\n     * @return static\r\n     *   返回当前对象。\r\n     */\r\n    public function expiresAt($expiration);\r\n\r\n    /**\r\n     * 设置缓存项的过期时间。\r\n     *\r\n     * @param int|\\DateInterval $time\r\n     *   以秒为单位的过期时长，过了这段时间后，缓存项就 **必须** 被认为是过期了的。\r\n     *   如果明确的传参 `null` 的话，**可以** 使用一个默认的时间。\r\n     *   如果没有设置的话，缓存 **应该** 存储到底层实现的最大允许时间。\r\n     *\r\n     * @return static\r\n     *   返回当前对象\r\n     */\r\n    public function expiresAfter($time);\r\n\r\n}\r\n[/php]\r\n\r\n<h4>CacheItemPoolInterface</h4>\r\nCache\\CacheItemPoolInterface 的主要目的是从调用类库接收「键」，然后返回对应的 Cache\\CacheItemInterface 对象。\r\n\r\n此接口也是作为主要的，与整个缓存集合交互的方式。所有的配置和初始化由实现类库自行实现。\r\n\r\n[php]\r\nnamespace Psr\\Cache;\r\n\r\n/**\r\n * CacheItemPoolInterface 生成 CacheItemInterface 对象\r\n */\r\ninterface CacheItemPoolInterface\r\n{\r\n    /**\r\n     * 返回「键」对应的一个缓存项。\r\n     *\r\n     * 此方法 **必须** 返回一个 CacheItemInterface 对象，即使是找不到对应的缓存项\r\n     * 也 **一定不可** 返回 `null`。\r\n     *\r\n     * @param string $key\r\n     *   用来搜索缓存项的「键」。\r\n     *\r\n     * @throws InvalidArgumentException\r\n     *   如果 $key 不是合法的值，\\Psr\\Cache\\InvalidArgumentException 异常会被抛出。\r\n     *\r\n     * @return CacheItemInterface\r\n     *   对应的缓存项。\r\n     */\r\n    public function getItem($key);\r\n\r\n    /**\r\n     * 返回一个可供遍历的缓存项集合。\r\n     *\r\n     * @param array $keys\r\n     *   由一个或者多个「键」组成的数组。\r\n     *\r\n     * @throws InvalidArgumentException\r\n     *   如果 $keys 里面有哪个「键」不是合法，\\Psr\\Cache\\InvalidArgumentException 异常\r\n     *   会被抛出。\r\n     *   \r\n     * @return array|\\Traversable\r\n     *   返回一个可供遍历的缓存项集合，集合里每个元素的标识符由「键」组成，即使即使是找不到对\r\n     *   的缓存项，也要返回一个「CacheItemInterface」对象到对应的「键」中。\r\n     *   如果传参的数组为空，也需要返回一个空的可遍历的集合。\r\n     */\r\n    public function getItems(array $keys = array());\r\n\r\n    /**\r\n     * 检查缓存系统中是否有「键」对应的缓存项。\r\n     *\r\n     * 注意: 此方法应该调用 `CacheItemInterface::isHit()` 来做检查操作，而不是\r\n     * `CacheItemInterface::get()`\r\n     *\r\n     * @param string $key\r\n     *   用来搜索缓存项的「键」。\r\n     *\r\n     * @throws InvalidArgumentException\r\n     *   如果 $key 不是合法的值，\\Psr\\Cache\\InvalidArgumentException 异常会被抛出。\r\n     *\r\n     * @return bool\r\n     *   如果存在「键」对应的缓存项即返回 true，否则 false\r\n     */\r\n    public function hasItem($key);\r\n\r\n    /**\r\n     * 清空缓冲池\r\n     *\r\n     * @return bool\r\n     *   成功返回 true，有错误发生返回 false\r\n     */\r\n    public function clear();\r\n\r\n    /**\r\n     * 从缓冲池里移除某个缓存项\r\n     *\r\n     * @param string $key\r\n     *   用来搜索缓存项的「键」。\r\n     *\r\n     * @throws InvalidArgumentException\r\n     *   如果 $key 不是合法的值，\\Psr\\Cache\\InvalidArgumentException 异常会被抛出。\r\n     *\r\n     * @return bool\r\n     *   成功返回 true，有错误发生返回 false\r\n     */\r\n    public function deleteItem($key);\r\n\r\n    /**\r\n     * 从缓冲池里移除多个缓存项\r\n     *\r\n     * @param array $keys\r\n     *   由一个或者多个「键」组成的数组。\r\n     *   \r\n     * @throws InvalidArgumentException\r\n     *   如果 $keys 里面有哪个「键」不是合法，\\Psr\\Cache\\InvalidArgumentException 异常\r\n     *   会被抛出。\r\n     *\r\n     * @return bool\r\n     *   成功返回 true，有错误发生返回 false\r\n     */\r\n    public function deleteItems(array $keys);\r\n\r\n    /**\r\n     * 立刻为「CacheItemInterface」对象做数据持久化。\r\n     *\r\n     * @param CacheItemInterface $item\r\n     *   将要被存储的缓存项\r\n     *\r\n     * @return bool\r\n     *   成功返回 true，有错误发生返回 false\r\n     */\r\n    public function save(CacheItemInterface $item);\r\n\r\n    /**\r\n     * 稍后为「CacheItemInterface」对象做数据持久化。\r\n     *\r\n     * @param CacheItemInterface $item\r\n     *   将要被存储的缓存项\r\n     *\r\n     * @return bool\r\n     *   成功返回 true，有错误发生返回 false\r\n     */\r\n    public function saveDeferred(CacheItemInterface $item);\r\n\r\n    /**\r\n     * 提交所有的正在队列里等待的请求到数据持久层，配合 `saveDeferred()` 使用\r\n     *\r\n     * @return bool\r\n     *  成功返回 true，有错误发生返回 false\r\n     */\r\n    public function commit();\r\n}\r\n[/php]\r\n\r\n<h4>CacheException</h4>\r\n此异常用于缓存系统发生的所有严重错误，包括但不限制于 缓存系统配置，如连接到缓存服务器出错、错 误的用户身份认证等。\r\n\r\n所有的实现类库抛出的异常都 必须 实现此接口。\r\n\r\n[php]\r\nnamespace Psr\\Cache;\r\n\r\n/**\r\n * 被所有的实现类库抛出的异常继承的「异常接口」\r\n */\r\ninterface CacheException\r\n{\r\n}\r\n[/php]\r\n\r\n<h4>InvalidArgumentException</h4>\r\n\r\n[php]\r\nnamespace Psr\\Cache;\r\n\r\n/**\r\n * 传参错误抛出的异常接口\r\n *\r\n * 当一个错误或者非法的传参发生时，**必须** 抛出一个继承了\r\n * Psr\\Cache\\InvalidArgumentException 的异常\r\n */\r\ninterface InvalidArgumentException extends CacheException\r\n{\r\n}\r\n[/php]\r\n', '「PSR 规范」PSR-6 缓存接口规范', '', 'publish', 'open', 'closed', '', '%e3%80%8cpsr-%e8%a7%84%e8%8c%83%e3%80%8dpsr-6-%e7%bc%93%e5%ad%98%e6%8e%a5%e5%8f%a3%e8%a7%84%e8%8c%83', '', '', '2017-07-14 10:32:15', '2017-07-14 02:32:15', '', 0, 'https://www.gzpblog.com/?p=1147', 0, 'post', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1148, 1, '2017-07-14 10:23:17', '2017-07-14 02:23:17', '<h2>一 关于PSR-6缓存接口规范</h2>\r\n缓存是提升应用性能的常用手段，为框架中最通用的功能，每个框架也都推出专属的、功能多 样的缓存库。这些差别使得开发人员不得不学习多种系统，而很多可能是他们并不需要的功能。 此外，缓存库的开发者同样面临着一个窘境，是只支持有限数量的几个框架还是创建一堆庞 大的适配器类。\r\n\r\n一个通用的缓存系统接口可以解决掉这些问题。库和框架的开发人员能够知道缓存系统会按照他们所 预期的方式工作，缓存系统的开发人员只需要实现单一的接口，而不用去开发各种各样的适配器。\r\n\r\n本 PSR 的目标是：创建一套通用的接口规范，能够让开发人员整合到现有框架和系统，而不需要去 开发框架专属的适配器类。\r\n\r\n本篇能愿动词解释：\r\n<ul>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\nPHP-FIG 官网 PSR-6 详解：<a href=\"http://www.php-fig.org/psr/psr-6/\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-6: Caching Interface</a>\r\n<h2>二 PSR-6内容</h2>\r\n<h3>1. 定义</h3>\r\n<ul>\r\n 	<li>调用类库 (Calling Library) - 调用者，使用缓存服务的类库，这个类库调用缓存服务，调用的 是此缓存接口规范的具体「实现类库」，调用者不需要知道任何「缓存服务」的具体实现。</li>\r\n 	<li>实现类库 (Implementing Library) - 此类库是对「缓存接口规范」的具体实现，封装起来的缓存服务，供「调用类库」使用。实现类库 必须 提供 PHP 类来实现 Cache\\CacheItemPoolInterface 和 Cache\\CacheItemInterface 接口。 实现类库 必须 支持最小的如下描述的 TTL 功能，秒级别的精准度。</li>\r\n 	<li>生存时间值 (TTL - Time To Live) - 定义了缓存可以存活的时间，以秒为单位的整数值。</li>\r\n 	<li>过期时间 (Expiration) - 定义准确的过期时间点，一般为缓存存储发生的时间点加上 TTL 时 间值，也可以指定一个 DateTime 对象。假如一个缓存项的 TTL 设置为 300 秒，保存于 1:30:00 ，那么缓存项的过期时间为 1:35:00。实现类库 可以 让缓存项提前过期，但是 必须 在到达过期时间时立即把缓存项标示为 过期。如果调用类库在保存一个缓存项的时候未设置「过期时间」、或者设置了 null 作为过期 时间（或者 TTL 设置为 null），实现类库 可以 使用默认自行配置的一个时间。如果没 有默认时间，实现类库 必须把存储时间当做 永久性 存储，或者按照底层驱动能支持的 最长时间作为保持时间。</li>\r\n 	<li>键 (KEY) - 长度大于 1 的字串，用作缓存项在缓存系统里的唯一标识符。实现类库 必须 支持「键」规则 A-Z, a-z, 0-9, _, 和 . 任何顺序的 UTF-8 编码，长度 小于 64 位。实现类库 可以 支持更多的编码或者更长的长度，不过 必须 支持至少以上指定 的编码和长度。实现类库可自行实现对「键」的转义，但是 必须 保证能够无损的返回「键」字串。以下 的字串作为系统保留: {}()/\\@:，一定不可 作为「键」的命名支持。</li>\r\n 	<li>命中 (Hit) - 一个缓存的命中，指的是当调用类库使用「键」在请求一个缓存项的时候，在缓存 池里能找到对应的缓存项，并且此缓存项还未过期，并且此数据不会因为任何原因出现错误。调用类 库 应该 确保先验证下 isHit() 有命中后才调用 get() 获取数据。</li>\r\n 	<li>未命中 (Miss) - 一个缓存未命中，是完全的上面描述的「命中」的相反。指的是当调用类库使用「键」在请求一个缓存项的时候，在缓存池里未能找到对应的缓存项，或者此缓存项已经过期，或者此数据因为任何原因出现错误。一个过期的缓存项，必须 被当做 未命中 来对待。</li>\r\n 	<li>延迟 (Deferred) - 一个延迟的缓存，指的是这个缓存项可能不会立刻被存储到物理缓存池里。一个 缓存池对象 可以 对一个指定延迟的缓存项进行延迟存储，这样做的好处是可以利用一些缓存服务器提供 的批量插入功能。缓存池 必须 能对所有延迟缓存最终能持久化，并且不会丢失。可以 在调用类库还未发起保存请求之前就做持久化。当调用类库调用 commit() 方法时，所有的延迟缓存都 必须 做持久化。实现类库 可以 自行决定使用什么逻辑来触发数据持久化，如对象的 析构方法 (destructor) 内、调用 save() 时持久化、倒计时保存或者触及最大数量时保存等。当请求一个延迟 缓存项时，必须 返回一个延迟，未持久化的缓存项对象。</li>\r\n</ul>\r\n<h3>2. 数据</h3>\r\n实现类库 必须 支持所有的可序列化的 PHP 数据类型，包含：\r\n<ul>\r\n 	<li>字符串 - 任何大小的 PHP 兼容字符串</li>\r\n 	<li>整数 - PHP 支持的低于 64 位的有符号整数值</li>\r\n 	<li>浮点数 - 所有的有符号浮点数</li>\r\n 	<li>布尔 - true 和 false.</li>\r\n 	<li>Null - null 值</li>\r\n 	<li>数组 - 各种形式的 PHP 数组</li>\r\n 	<li>对象（Object） - 所有的支持无损序列化和反序列化的对象，如：$o == unserialize(serialize($o)) 。对象 可以 使用 PHP 的 Serializable 接口，__sleep() 或者 __wakeup() 魔术方法，或者在合适的情况下，使用其他类似的语言特性。</li>\r\n</ul>\r\n所有存进实现类库的数据，都 必须 能做到原封不动的取出。连类型也 必须 是完全一致，如果 存进缓存的是字符串 5，取出来的却是整数值 5 的话，可以算作严重的错误。实现类库 可以 使用 PHP 的「serialize()/unserialize() 方法」作为底层实现，不过不强迫这样做。对于他们的兼容性，以能支持所有数据类型作为基准线。\r\n\r\n实在无法「完整取出」存入的数据的话，实现类库 必须 把「缓存丢失」标示作为返回，而不是损坏了的数据。\r\n<h3>3. 主要概念</h3>\r\n<h4>缓存池 Pool</h4>\r\n缓存池包含缓存系统里所有缓存数据的集合。缓存池逻辑上是所有缓存项存储的仓库，所有存储进去的数据， 都能从缓存池里取出来，所有的对缓存的操作，都发生在缓存池子里。\r\n<h4>缓存项 Items</h4>\r\n一条缓存项在缓存池里代表了一对「键/值」对应的数据，「键」被视为每一个缓存项主键，是缓存项的 唯一标识符，必须 是不可变更的，当然，「值」可以 任意变更。\r\n<h3>4. 错误处理</h3>\r\n缓存对应用性能起着至关重要的作用，但是，无论在任何情况下，缓存 一定不可 作为应用程序不 可或缺的核心功能。\r\n\r\n缓存系统里的错误 一定不可 导致应用程序故障，所以，实现类库 一定不可 抛出任何除了 此接口规范定义的以外的异常，并且 必须 捕捉包括底层存储驱动抛出的异常，不让其冒泡至超 出缓存系统内。\r\n\r\n实现类库 应该 对此类错误进行记录，或者以任何形式通知管理员。\r\n\r\n调用类库发起删除缓存项的请求，或者清空整个缓冲池子的请求，「键」不存在的话 必须 不能 当成是有错误发生。后置条件是一样的，如果取数据时，「键」不存在的话 必须 不能当成是有错误发生。\r\n<h3>5. 接口</h3>\r\n<h4>CacheItemInterface</h4>\r\nCacheItemInterface 定义了缓存系统里的一个缓存项。每一个缓存项 必须 有一个「键」与之相 关联，此「键」通常是通过 Cache\\CacheItemPoolInterface 来设置。\r\n\r\nCache\\CacheItemInterface 对象把缓存项的存储进行了封装，每一个 Cache\\CacheItemInterface 由一个 Cache\\CacheItemPoolInterface 对象生成，CacheItemPoolInterface 负责一些必须的设置，并且给对象设置具有 唯一性 的「键」。\r\n\r\nCache\\CacheItemInterface 对象 必须 能够存储和取出任何类型的，在「数据」章节定义的 PHP 数值。\r\n\r\n调用类库 一定不可 擅自初始化「CacheItemInterface」对象，「缓存项」只能使用「CacheItemPoolInterface」对象的 getItem() 方法来获取。调用类库 一定不可 假设 由一个实现类库创建的「缓存项」能被另一个实现类库完全兼容。\r\n\r\n\r\n[php]namespace Psr\\Cache;\r\n\r\n/**\r\n* CacheItemInterface 定了缓存系统里对缓存项操作的接口\r\n*/\r\ninterface CacheItemInterface\r\n{\r\n/**\r\n* 返回当前缓存项的「键」\r\n*\r\n* 「键」由实现类库来加载，并且高层的调用者（如：CacheItemPoolInterface）\r\n*  **应该** 能使用此方法来获取到「键」的信息。\r\n*\r\n* @return string\r\n*   当前缓存项的「键」\r\n*/\r\npublic function getKey();\r\n\r\n/**\r\n* 凭借此缓存项的「键」从缓存系统里面取出缓存项。\r\n*\r\n* 取出的数据 **必须** 跟使用 `set()` 存进去的数据是一模一样的。\r\n*\r\n* 如果 `isHit()` 返回 false 的话，此方法必须返回 `null`，需要注意的是 `null`\r\n* 本来就是一个合法的缓存数据，所以你 **应该** 使用 `isHit()` 方法来辨别到底是\r\n* &quot;返回 null 数据&quot; 还是 &quot;缓存里没有此数据&quot;。\r\n*\r\n* @return mixed\r\n*   此缓存项的「键」对应的「值」，如果找不到的话，返回 `null`\r\n*/\r\npublic function get();\r\n\r\n/**\r\n* 确认缓存项的检查是否命中。\r\n*\r\n* 注意: 调用此方法和调用 `get()` 时 **一定不可** 有先后顺序之分。\r\n*\r\n* @return bool\r\n*   如果缓冲池里有命中的话，返回 `true`，反之返回 `false`\r\n*/\r\npublic function isHit();\r\n\r\n/**\r\n* 为此缓存项设置「值」。\r\n*\r\n* 参数 $value 可以是所有能被 PHP 序列化的数据，序列化的逻辑\r\n* 需要在实现类库里书写。\r\n*\r\n* @param mixed $value\r\n*   将被存储的可序列化的数据。\r\n*\r\n* @return static\r\n*   返回当前对象。\r\n*/\r\npublic function set($value);\r\n\r\n/**\r\n* 设置缓存项的准确过期时间点。\r\n*\r\n* @param \\DateTimeInterface $expiration\r\n*\r\n*   过期的准确时间点，过了这个时间点后，缓存项就 **必须** 被认为是过期了的。\r\n*   如果明确的传参 `null` 的话，**可以** 使用一个默认的时间。\r\n*   如果没有设置的话，缓存 **应该** 存储到底层实现的最大允许时间。\r\n*\r\n* @return static\r\n*   返回当前对象。\r\n*/\r\npublic function expiresAt($expiration);\r\n\r\n/**\r\n* 设置缓存项的过期时间。\r\n*\r\n* @param int|\\DateInterval $time\r\n*   以秒为单位的过期时长，过了这段时间后，缓存项就 **必须** 被认为是过期了的。\r\n*   如果明确的传参 `null` 的话，**可以** 使用一个默认的时间。\r\n*   如果没有设置的话，缓存 **应该** 存储到底层实现的最大允许时间。\r\n*\r\n* @return static\r\n*   返回当前对象\r\n*/\r\npublic function expiresAfter($time);\r\n\r\n}[/php]\r\n\r\n<h4>CacheItemPoolInterface</h4>\r\nCache\\CacheItemPoolInterface 的主要目的是从调用类库接收「键」，然后返回对应的 Cache\\CacheItemInterface 对象。\r\n\r\n此接口也是作为主要的，与整个缓存集合交互的方式。所有的配置和初始化由实现类库自行实现。\r\n\r\n\r\n[php]namespace Psr\\Cache;\r\n\r\n/**\r\n* CacheItemPoolInterface 生成 CacheItemInterface 对象\r\n*/\r\ninterface CacheItemPoolInterface\r\n{\r\n/**\r\n* 返回「键」对应的一个缓存项。\r\n*\r\n* 此方法 **必须** 返回一个 CacheItemInterface 对象，即使是找不到对应的缓存项\r\n* 也 **一定不可** 返回 `null`。\r\n*\r\n* @param string $key\r\n*   用来搜索缓存项的「键」。\r\n*\r\n* @throws InvalidArgumentException\r\n*   如果 $key 不是合法的值，\\Psr\\Cache\\InvalidArgumentException 异常会被抛出。\r\n*\r\n* @return CacheItemInterface\r\n*   对应的缓存项。\r\n*/\r\npublic function getItem($key);\r\n\r\n/**\r\n* 返回一个可供遍历的缓存项集合。\r\n*\r\n* @param array $keys\r\n*   由一个或者多个「键」组成的数组。\r\n*\r\n* @throws InvalidArgumentException\r\n*   如果 $keys 里面有哪个「键」不是合法，\\Psr\\Cache\\InvalidArgumentException 异常\r\n*   会被抛出。\r\n*\r\n* @return array|\\Traversable\r\n*   返回一个可供遍历的缓存项集合，集合里每个元素的标识符由「键」组成，即使即使是找不到对\r\n*   的缓存项，也要返回一个「CacheItemInterface」对象到对应的「键」中。\r\n*   如果传参的数组为空，也需要返回一个空的可遍历的集合。\r\n*/\r\npublic function getItems(array $keys = array());\r\n\r\n/**\r\n* 检查缓存系统中是否有「键」对应的缓存项。\r\n*\r\n* 注意: 此方法应该调用 `CacheItemInterface::isHit()` 来做检查操作，而不是\r\n* `CacheItemInterface::get()`\r\n*\r\n* @param string $key\r\n*   用来搜索缓存项的「键」。\r\n*\r\n* @throws InvalidArgumentException\r\n*   如果 $key 不是合法的值，\\Psr\\Cache\\InvalidArgumentException 异常会被抛出。\r\n*\r\n* @return bool\r\n*   如果存在「键」对应的缓存项即返回 true，否则 false\r\n*/\r\npublic function hasItem($key);\r\n\r\n/**\r\n* 清空缓冲池\r\n*\r\n* @return bool\r\n*   成功返回 true，有错误发生返回 false\r\n*/\r\npublic function clear();\r\n\r\n/**\r\n* 从缓冲池里移除某个缓存项\r\n*\r\n* @param string $key\r\n*   用来搜索缓存项的「键」。\r\n*\r\n* @throws InvalidArgumentException\r\n*   如果 $key 不是合法的值，\\Psr\\Cache\\InvalidArgumentException 异常会被抛出。\r\n*\r\n* @return bool\r\n*   成功返回 true，有错误发生返回 false\r\n*/\r\npublic function deleteItem($key);\r\n\r\n/**\r\n* 从缓冲池里移除多个缓存项\r\n*\r\n* @param array $keys\r\n*   由一个或者多个「键」组成的数组。\r\n*\r\n* @throws InvalidArgumentException\r\n*   如果 $keys 里面有哪个「键」不是合法，\\Psr\\Cache\\InvalidArgumentException 异常\r\n*   会被抛出。\r\n*\r\n* @return bool\r\n*   成功返回 true，有错误发生返回 false\r\n*/\r\npublic function deleteItems(array $keys);\r\n\r\n/**\r\n* 立刻为「CacheItemInterface」对象做数据持久化。\r\n*\r\n* @param CacheItemInterface $item\r\n*   将要被存储的缓存项\r\n*\r\n* @return bool\r\n*   成功返回 true，有错误发生返回 false\r\n*/\r\npublic function save(CacheItemInterface $item);\r\n\r\n/**\r\n* 稍后为「CacheItemInterface」对象做数据持久化。\r\n*\r\n* @param CacheItemInterface $item\r\n*   将要被存储的缓存项\r\n*\r\n* @return bool\r\n*   成功返回 true，有错误发生返回 false\r\n*/\r\npublic function saveDeferred(CacheItemInterface $item);\r\n\r\n/**\r\n* 提交所有的正在队列里等待的请求到数据持久层，配合 `saveDeferred()` 使用\r\n*\r\n* @return bool\r\n*  成功返回 true，有错误发生返回 false\r\n*/\r\npublic function commit();\r\n}[/php]\r\n\r\n<h4>CacheException</h4>\r\n此异常用于缓存系统发生的所有严重错误，包括但不限制于 缓存系统配置，如连接到缓存服务器出错、错 误的用户身份认证等。\r\n\r\n所有的实现类库抛出的异常都 必须 实现此接口。\r\n\r\n\r\n[php]namespace Psr\\Cache;\r\n\r\n/**\r\n* 被所有的实现类库抛出的异常继承的「异常接口」\r\n*/\r\ninterface CacheException\r\n{\r\n}[/php]\r\n\r\n<h4>InvalidArgumentException</h4>\r\n\r\n[php]namespace Psr\\Cache;\r\n\r\n/**\r\n* 传参错误抛出的异常接口\r\n*\r\n* 当一个错误或者非法的传参发生时，**必须** 抛出一个继承了\r\n* Psr\\Cache\\InvalidArgumentException 的异常\r\n*/\r\ninterface InvalidArgumentException extends CacheException\r\n{\r\n}[/php]\r\n', '「PSR 规范」PSR-6 缓存接口规范', '', 'inherit', 'closed', 'closed', '', '1147-revision-v1', '', '', '2017-07-14 10:23:17', '2017-07-14 02:23:17', '', 1147, 'https://www.gzpblog.com/20170714/1148.html', 0, 'revision', '', 0),
(1149, 1, '2017-07-14 10:30:20', '2017-07-14 02:30:20', '<h2>一 关于PSR-6缓存接口规范</h2>\n缓存是提升应用性能的常用手段，为框架中最通用的功能，每个框架也都推出专属的、功能多 样的缓存库。这些差别使得开发人员不得不学习多种系统，而很多可能是他们并不需要的功能。 此外，缓存库的开发者同样面临着一个窘境，是只支持有限数量的几个框架还是创建一堆庞 大的适配器类。\n\n一个通用的缓存系统接口可以解决掉这些问题。库和框架的开发人员能够知道缓存系统会按照他们所 预期的方式工作，缓存系统的开发人员只需要实现单一的接口，而不用去开发各种各样的适配器。\n\n本 PSR 的目标是：创建一套通用的接口规范，能够让开发人员整合到现有框架和系统，而不需要去 开发框架专属的适配器类。\n\n本篇能愿动词解释：\n<ul>\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\n</ul>\nPHP-FIG 官网 PSR-6 详解：<a href=\"http://www.php-fig.org/psr/psr-6/\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-6: Caching Interface</a>\n<h2>二 PSR-6内容</h2>\n<h3>1. 定义</h3>\n<ul>\n 	<li>调用类库 (Calling Library) - 调用者，使用缓存服务的类库，这个类库调用缓存服务，调用的 是此缓存接口规范的具体「实现类库」，调用者不需要知道任何「缓存服务」的具体实现。</li>\n 	<li>实现类库 (Implementing Library) - 此类库是对「缓存接口规范」的具体实现，封装起来的缓存服务，供「调用类库」使用。实现类库 <strong>必须</strong> 提供 PHP 类来实现 Cache\\CacheItemPoolInterface 和 Cache\\CacheItemInterface 接口。 实现类库 <strong>必须</strong> 支持最小的如下描述的 TTL 功能，秒级别的精准度。</li>\n 	<li>生存时间值 (TTL - Time To Live) - 定义了缓存可以存活的时间，以秒为单位的整数值。</li>\n 	<li>过期时间 (Expiration) - 定义准确的过期时间点，一般为缓存存储发生的时间点加上 TTL 时 间值，也可以指定一个 DateTime 对象。假如一个缓存项的 TTL 设置为 300 秒，保存于 1:30:00 ，那么缓存项的过期时间为 1:35:00。实现类库 <strong>可以</strong> 让缓存项提前过期，但是<strong> 必须</strong> 在到达过期时间时立即把缓存项标示为 过期。如果调用类库在保存一个缓存项的时候未设置「过期时间」、或者设置了 null 作为过期 时间（或者 TTL 设置为 null），实现类库 可以 使用默认自行配置的一个时间。如果没 有默认时间，实现类库 必须把存储时间当做 永久性 存储，或者按照底层驱动能支持的 最长时间作为保持时间。</li>\n 	<li>键 (KEY) - 长度大于 1 的字串，用作缓存项在缓存系统里的唯一标识符。实现类库 <strong>必须</strong> 支持「键」规则 A-Z, a-z, 0-9, _, 和 . 任何顺序的 UTF-8 编码，长度 小于 64 位。实现类库 <strong>可以</strong> 支持更多的编码或者更长的长度，不过 <strong>必须</strong> 支持至少以上指定 的编码和长度。实现类库可自行实现对「键」的转义，但是 <strong>必须</strong> 保证能够无损的返回「键」字串。以下 的字串作为系统保留: {}()/\\@:，一定不可 作为「键」的命名支持。</li>\n 	<li>命中 (Hit) - 一个缓存的命中，指的是当调用类库使用「键」在请求一个缓存项的时候，在缓存 池里能找到对应的缓存项，并且此缓存项还未过期，并且此数据不会因为任何原因出现错误。调用类 库 <strong>应该</strong> 确保先验证下 isHit() 有命中后才调用 get() 获取数据。</li>\n 	<li>未命中 (Miss) - 一个缓存未命中，是完全的上面描述的「命中」的相反。指的是当调用类库使用「键」在请求一个缓存项的时候，在缓存池里未能找到对应的缓存项，或者此缓存项已经过期，或者此数据因为任何原因出现错误。一个过期的缓存项，<strong>必须</strong> 被当做 未命中 来对待。</li>\n 	<li>延迟 (Deferred) - 一个延迟的缓存，指的是这个缓存项可能不会立刻被存储到物理缓存池里。一个 缓存池对象 <strong>可以</strong> 对一个指定延迟的缓存项进行延迟存储，这样做的好处是可以利用一些缓存服务器提供 的批量插入功能。缓存池 <strong>必须</strong> 能对所有延迟缓存最终能持久化，并且不会丢失。<strong>可以</strong> 在调用类库还未发起保存请求之前就做持久化。当调用类库调用 commit() 方法时，所有的延迟缓存都 必须 做持久化。实现类库 可以 自行决定使用什么逻辑来触发数据持久化，如对象的 析构方法 (destructor) 内、调用 save() 时持久化、倒计时保存或者触及最大数量时保存等。当请求一个延迟 缓存项时，<strong>必须</strong> 返回一个延迟，未持久化的缓存项对象。</li>\n</ul>\n<h3>2. 数据</h3>\n实现类库 <strong>必须</strong> 支持所有的可序列化的 PHP 数据类型，包含：\n<ul>\n 	<li>字符串 - 任何大小的 PHP 兼容字符串</li>\n 	<li>整数 - PHP 支持的低于 64 位的有符号整数值</li>\n 	<li>浮点数 - 所有的有符号浮点数</li>\n 	<li>布尔 - true 和 false.</li>\n 	<li>Null - null 值</li>\n 	<li>数组 - 各种形式的 PHP 数组</li>\n 	<li>对象（Object） - 所有的支持无损序列化和反序列化的对象，如：$o == unserialize(serialize($o)) 。对象 可以 使用 PHP 的 Serializable 接口，__sleep() 或者 __wakeup() 魔术方法，或者在合适的情况下，使用其他类似的语言特性。</li>\n</ul>\n所有存进实现类库的数据，都 <strong>必须</strong> 能做到原封不动的取出。连类型也 <strong>必须</strong> 是完全一致，如果 存进缓存的是字符串 5，取出来的却是整数值 5 的话，可以算作严重的错误。实现类库 <strong>可以</strong> 使用 PHP 的「serialize()/unserialize() 方法」作为底层实现，不过不强迫这样做。对于他们的兼容性，以能支持所有数据类型作为基准线。\n\n实在无法「完整取出」存入的数据的话，实现类库 <strong>必须</strong> 把「缓存丢失」标示作为返回，而不是损坏了的数据。\n<h3>3. 主要概念</h3>\n<h4>缓存池 Pool</h4>\n缓存池包含缓存系统里所有缓存数据的集合。缓存池逻辑上是所有缓存项存储的仓库，所有存储进去的数据， 都能从缓存池里取出来，所有的对缓存的操作，都发生在缓存池子里。\n<h4>缓存项 Items</h4>\n一条缓存项在缓存池里代表了一对「键/值」对应的数据，「键」被视为每一个缓存项主键，是缓存项的 唯一标识符，<strong>必须</strong> 是不可变更的，当然，「值」<strong>可以</strong> 任意变更。\n<h3>4. 错误处理</h3>\n缓存对应用性能起着至关重要的作用，但是，无论在任何情况下，缓存 一定不可 作为应用程序不 可或缺的核心功能。\n\n缓存系统里的错误 一定不可 导致应用程序故障，所以，实现类库 一定不可 抛出任何除了 此接口规范定义的以外的异常，并且 必须 捕捉包括底层存储驱动抛出的异常，不让其冒泡至超 出缓存系统内。\n\n实现类库 应该 对此类错误进行记录，或者以任何形式通知管理员。\n\n调用类库发起删除缓存项的请求，或者清空整个缓冲池子的请求，「键」不存在的话 必须 不能 当成是有错误发生。后置条件是一样的，如果取数据时，「键」不存在的话 必须 不能当成是有错误发生。\n<h3>5. 接口</h3>\n<h4>CacheItemInterface</h4>\nCacheItemInterface 定义了缓存系统里的一个缓存项。每一个缓存项 必须 有一个「键」与之相 关联，此「键」通常是通过 Cache\\CacheItemPoolInterface 来设置。\n\nCache\\CacheItemInterface 对象把缓存项的存储进行了封装，每一个 Cache\\CacheItemInterface 由一个 Cache\\CacheItemPoolInterface 对象生成，CacheItemPoolInterface 负责一些必须的设置，并且给对象设置具有 唯一性 的「键」。\n\nCache\\CacheItemInterface 对象 必须 能够存储和取出任何类型的，在「数据」章节定义的 PHP 数值。\n\n调用类库 一定不可 擅自初始化「CacheItemInterface」对象，「缓存项」只能使用「CacheItemPoolInterface」对象的 getItem() 方法来获取。调用类库 一定不可 假设 由一个实现类库创建的「缓存项」能被另一个实现类库完全兼容。\n\n[php]namespace Psr\\Cache;\n\n/**\n* CacheItemInterface 定了缓存系统里对缓存项操作的接口\n*/\ninterface CacheItemInterface\n{\n/**\n* 返回当前缓存项的「键」\n*\n* 「键」由实现类库来加载，并且高层的调用者（如：CacheItemPoolInterface）\n*  **应该** 能使用此方法来获取到「键」的信息。\n*\n* @return string\n*   当前缓存项的「键」\n*/\npublic function getKey();\n\n/**\n* 凭借此缓存项的「键」从缓存系统里面取出缓存项。\n*\n* 取出的数据 **必须** 跟使用 `set()` 存进去的数据是一模一样的。\n*\n* 如果 `isHit()` 返回 false 的话，此方法必须返回 `null`，需要注意的是 `null`\n* 本来就是一个合法的缓存数据，所以你 **应该** 使用 `isHit()` 方法来辨别到底是\n* &quot;返回 null 数据&quot; 还是 &quot;缓存里没有此数据&quot;。\n*\n* @return mixed\n*   此缓存项的「键」对应的「值」，如果找不到的话，返回 `null`\n*/\npublic function get();\n\n/**\n* 确认缓存项的检查是否命中。\n*\n* 注意: 调用此方法和调用 `get()` 时 **一定不可** 有先后顺序之分。\n*\n* @return bool\n*   如果缓冲池里有命中的话，返回 `true`，反之返回 `false`\n*/\npublic function isHit();\n\n/**\n* 为此缓存项设置「值」。\n*\n* 参数 $value 可以是所有能被 PHP 序列化的数据，序列化的逻辑\n* 需要在实现类库里书写。\n*\n* @param mixed $value\n*   将被存储的可序列化的数据。\n*\n* @return static\n*   返回当前对象。\n*/\npublic function set($value);\n\n/**\n* 设置缓存项的准确过期时间点。\n*\n* @param \\DateTimeInterface $expiration\n*\n*   过期的准确时间点，过了这个时间点后，缓存项就 **必须** 被认为是过期了的。\n*   如果明确的传参 `null` 的话，**可以** 使用一个默认的时间。\n*   如果没有设置的话，缓存 **应该** 存储到底层实现的最大允许时间。\n*\n* @return static\n*   返回当前对象。\n*/\npublic function expiresAt($expiration);\n\n/**\n* 设置缓存项的过期时间。\n*\n* @param int|\\DateInterval $time\n*   以秒为单位的过期时长，过了这段时间后，缓存项就 **必须** 被认为是过期了的。\n*   如果明确的传参 `null` 的话，**可以** 使用一个默认的时间。\n*   如果没有设置的话，缓存 **应该** 存储到底层实现的最大允许时间。\n*\n* @return static\n*   返回当前对象\n*/\npublic function expiresAfter($time);\n\n}[/php]\n\n<h4>CacheItemPoolInterface</h4>\nCache\\CacheItemPoolInterface 的主要目的是从调用类库接收「键」，然后返回对应的 Cache\\CacheItemInterface 对象。\n\n此接口也是作为主要的，与整个缓存集合交互的方式。所有的配置和初始化由实现类库自行实现。\n\n[php]namespace Psr\\Cache;\n\n/**\n* CacheItemPoolInterface 生成 CacheItemInterface 对象\n*/\ninterface CacheItemPoolInterface\n{\n/**\n* 返回「键」对应的一个缓存项。\n*\n* 此方法 **必须** 返回一个 CacheItemInterface 对象，即使是找不到对应的缓存项\n* 也 **一定不可** 返回 `null`。\n*\n* @param string $key\n*   用来搜索缓存项的「键」。\n*\n* @throws InvalidArgumentException\n*   如果 $key 不是合法的值，\\Psr\\Cache\\InvalidArgumentException 异常会被抛出。\n*\n* @return CacheItemInterface\n*   对应的缓存项。\n*/\npublic function getItem($key);\n\n/**\n* 返回一个可供遍历的缓存项集合。\n*\n* @param array $keys\n*   由一个或者多个「键」组成的数组。\n*\n* @throws InvalidArgumentException\n*   如果 $keys 里面有哪个「键」不是合法，\\Psr\\Cache\\InvalidArgumentException 异常\n*   会被抛出。\n*\n* @return array|\\Traversable\n*   返回一个可供遍历的缓存项集合，集合里每个元素的标识符由「键」组成，即使即使是找不到对\n*   的缓存项，也要返回一个「CacheItemInterface」对象到对应的「键」中。\n*   如果传参的数组为空，也需要返回一个空的可遍历的集合。\n*/\npublic function getItems(array $keys = array());\n\n/**\n* 检查缓存系统中是否有「键」对应的缓存项。\n*\n* 注意: 此方法应该调用 `CacheItemInterface::isHit()` 来做检查操作，而不是\n* `CacheItemInterface::get()`\n*\n* @param string $key\n*   用来搜索缓存项的「键」。\n*\n* @throws InvalidArgumentException\n*   如果 $key 不是合法的值，\\Psr\\Cache\\InvalidArgumentException 异常会被抛出。\n*\n* @return bool\n*   如果存在「键」对应的缓存项即返回 true，否则 false\n*/\npublic function hasItem($key);\n\n/**\n* 清空缓冲池\n*\n* @return bool\n*   成功返回 true，有错误发生返回 false\n*/\npublic function clear();\n\n/**\n* 从缓冲池里移除某个缓存项\n*\n* @param string $key\n*   用来搜索缓存项的「键」。\n*\n* @throws InvalidArgumentException\n*   如果 $key 不是合法的值，\\Psr\\Cache\\InvalidArgumentException 异常会被抛出。\n*\n* @return bool\n*   成功返回 true，有错误发生返回 false\n*/\npublic function deleteItem($key);\n\n/**\n* 从缓冲池里移除多个缓存项\n*\n* @param array $keys\n*   由一个或者多个「键」组成的数组。\n*\n* @throws InvalidArgumentException\n*   如果 $keys 里面有哪个「键」不是合法，\\Psr\\Cache\\InvalidArgumentException 异常\n*   会被抛出。\n*\n* @return bool\n*   成功返回 true，有错误发生返回 false\n*/\npublic function deleteItems(array $keys);\n\n/**\n* 立刻为「CacheItemInterface」对象做数据持久化。\n*\n* @param CacheItemInterface $item\n*   将要被存储的缓存项\n*\n* @return bool\n*   成功返回 true，有错误发生返回 false\n*/\npublic function save(CacheItemInterface $item);\n\n/**\n* 稍后为「CacheItemInterface」对象做数据持久化。\n*\n* @param CacheItemInterface $item\n*   将要被存储的缓存项\n*\n* @return bool\n*   成功返回 true，有错误发生返回 false\n*/\npublic function saveDeferred(CacheItemInterface $item);\n\n/**\n* 提交所有的正在队列里等待的请求到数据持久层，配合 `saveDeferred()` 使用\n*\n* @return bool\n*  成功返回 true，有错误发生返回 false\n*/\npublic function commit();\n}[/php]\n\n<h4>CacheException</h4>\n此异常用于缓存系统发生的所有严重错误，包括但不限制于 缓存系统配置，如连接到缓存服务器出错、错 误的用户身份认证等。\n\n所有的实现类库抛出的异常都 必须 实现此接口。\n\n[php]namespace Psr\\Cache;\n\n/**\n* 被所有的实现类库抛出的异常继承的「异常接口」\n*/\ninterface CacheException\n{\n}[/php]\n\n<h4>InvalidArgumentException</h4>\n\n[php]namespace Psr\\Cache;\n\n/**\n* 传参错误抛出的异常接口\n*\n* 当一个错误或者非法的传参发生时，**必须** 抛出一个继承了\n* Psr\\Cache\\InvalidArgumentException 的异常\n*/\ninterface InvalidArgumentException extends CacheException\n{\n}[/php]\n', '「PSR 规范」PSR-6 缓存接口规范', '', 'inherit', 'closed', 'closed', '', '1147-autosave-v1', '', '', '2017-07-14 10:30:20', '2017-07-14 02:30:20', '', 1147, 'https://www.gzpblog.com/20170714/1149.html', 0, 'revision', '', 0),
(1150, 1, '2017-07-14 10:32:15', '2017-07-14 02:32:15', '<h2>一 关于PSR-6缓存接口规范</h2>\r\n缓存是提升应用性能的常用手段，为框架中最通用的功能，每个框架也都推出专属的、功能多 样的缓存库。这些差别使得开发人员不得不学习多种系统，而很多可能是他们并不需要的功能。 此外，缓存库的开发者同样面临着一个窘境，是只支持有限数量的几个框架还是创建一堆庞 大的适配器类。\r\n\r\n一个通用的缓存系统接口可以解决掉这些问题。库和框架的开发人员能够知道缓存系统会按照他们所 预期的方式工作，缓存系统的开发人员只需要实现单一的接口，而不用去开发各种各样的适配器。\r\n\r\n本 PSR 的目标是：创建一套通用的接口规范，能够让开发人员整合到现有框架和系统，而不需要去 开发框架专属的适配器类。\r\n\r\n本篇能愿动词解释：\r\n<ul>\r\n 	<li>必须 (MUST)：绝对，严格遵循，请照做，无条件遵守；</li>\r\n 	<li>一定不可 (MUST NOT)：禁令，严令禁止；</li>\r\n 	<li>应该 (SHOULD) ：强烈建议这样做，但是不强求；</li>\r\n 	<li>不该 (SHOULD NOT)：强烈不建议这样做，但是不强求；</li>\r\n 	<li>可以 (MAY) 和 可选 (OPTIONAL) ：选择性高一点，在这个文档内，此词语使用较少；</li>\r\n</ul>\r\nPHP-FIG 官网 PSR-6 详解：<a href=\"http://www.php-fig.org/psr/psr-6/\" target=\"_blank\" rel=\"noopener noreferrer\">PSR-6: Caching Interface</a>\r\n<h2>二 PSR-6内容</h2>\r\n<h3>1. 定义</h3>\r\n<ul>\r\n 	<li>调用类库 (Calling Library) - 调用者，使用缓存服务的类库，这个类库调用缓存服务，调用的 是此缓存接口规范的具体「实现类库」，调用者不需要知道任何「缓存服务」的具体实现。</li>\r\n 	<li>实现类库 (Implementing Library) - 此类库是对「缓存接口规范」的具体实现，封装起来的缓存服务，供「调用类库」使用。实现类库 <strong>必须</strong> 提供 PHP 类来实现 Cache\\CacheItemPoolInterface 和 Cache\\CacheItemInterface 接口。 实现类库 <strong>必须</strong> 支持最小的如下描述的 TTL 功能，秒级别的精准度。</li>\r\n 	<li>生存时间值 (TTL - Time To Live) - 定义了缓存可以存活的时间，以秒为单位的整数值。</li>\r\n 	<li>过期时间 (Expiration) - 定义准确的过期时间点，一般为缓存存储发生的时间点加上 TTL 时 间值，也可以指定一个 DateTime 对象。假如一个缓存项的 TTL 设置为 300 秒，保存于 1:30:00 ，那么缓存项的过期时间为 1:35:00。实现类库 <strong>可以</strong> 让缓存项提前过期，但是<strong> 必须</strong> 在到达过期时间时立即把缓存项标示为 过期。如果调用类库在保存一个缓存项的时候未设置「过期时间」、或者设置了 null 作为过期 时间（或者 TTL 设置为 null），实现类库 可以 使用默认自行配置的一个时间。如果没 有默认时间，实现类库 必须把存储时间当做 永久性 存储，或者按照底层驱动能支持的 最长时间作为保持时间。</li>\r\n 	<li>键 (KEY) - 长度大于 1 的字串，用作缓存项在缓存系统里的唯一标识符。实现类库 <strong>必须</strong> 支持「键」规则 A-Z, a-z, 0-9, _, 和 . 任何顺序的 UTF-8 编码，长度 小于 64 位。实现类库 <strong>可以</strong> 支持更多的编码或者更长的长度，不过 <strong>必须</strong> 支持至少以上指定 的编码和长度。实现类库可自行实现对「键」的转义，但是 <strong>必须</strong> 保证能够无损的返回「键」字串。以下 的字串作为系统保留: {}()/\\@:，一定不可 作为「键」的命名支持。</li>\r\n 	<li>命中 (Hit) - 一个缓存的命中，指的是当调用类库使用「键」在请求一个缓存项的时候，在缓存 池里能找到对应的缓存项，并且此缓存项还未过期，并且此数据不会因为任何原因出现错误。调用类 库 <strong>应该</strong> 确保先验证下 isHit() 有命中后才调用 get() 获取数据。</li>\r\n 	<li>未命中 (Miss) - 一个缓存未命中，是完全的上面描述的「命中」的相反。指的是当调用类库使用「键」在请求一个缓存项的时候，在缓存池里未能找到对应的缓存项，或者此缓存项已经过期，或者此数据因为任何原因出现错误。一个过期的缓存项，<strong>必须</strong> 被当做 未命中 来对待。</li>\r\n 	<li>延迟 (Deferred) - 一个延迟的缓存，指的是这个缓存项可能不会立刻被存储到物理缓存池里。一个 缓存池对象 <strong>可以</strong> 对一个指定延迟的缓存项进行延迟存储，这样做的好处是可以利用一些缓存服务器提供 的批量插入功能。缓存池 <strong>必须</strong> 能对所有延迟缓存最终能持久化，并且不会丢失。<strong>可以</strong> 在调用类库还未发起保存请求之前就做持久化。当调用类库调用 commit() 方法时，所有的延迟缓存都 必须 做持久化。实现类库 可以 自行决定使用什么逻辑来触发数据持久化，如对象的 析构方法 (destructor) 内、调用 save() 时持久化、倒计时保存或者触及最大数量时保存等。当请求一个延迟 缓存项时，<strong>必须</strong> 返回一个延迟，未持久化的缓存项对象。</li>\r\n</ul>\r\n<h3>2. 数据</h3>\r\n实现类库 <strong>必须</strong> 支持所有的可序列化的 PHP 数据类型，包含：\r\n<ul>\r\n 	<li>字符串 - 任何大小的 PHP 兼容字符串</li>\r\n 	<li>整数 - PHP 支持的低于 64 位的有符号整数值</li>\r\n 	<li>浮点数 - 所有的有符号浮点数</li>\r\n 	<li>布尔 - true 和 false.</li>\r\n 	<li>Null - null 值</li>\r\n 	<li>数组 - 各种形式的 PHP 数组</li>\r\n 	<li>对象（Object） - 所有的支持无损序列化和反序列化的对象，如：$o == unserialize(serialize($o)) 。对象 可以 使用 PHP 的 Serializable 接口，__sleep() 或者 __wakeup() 魔术方法，或者在合适的情况下，使用其他类似的语言特性。</li>\r\n</ul>\r\n所有存进实现类库的数据，都 <strong>必须</strong> 能做到原封不动的取出。连类型也 <strong>必须</strong> 是完全一致，如果 存进缓存的是字符串 5，取出来的却是整数值 5 的话，可以算作严重的错误。实现类库 <strong>可以</strong> 使用 PHP 的「serialize()/unserialize() 方法」作为底层实现，不过不强迫这样做。对于他们的兼容性，以能支持所有数据类型作为基准线。\r\n\r\n实在无法「完整取出」存入的数据的话，实现类库 <strong>必须</strong> 把「缓存丢失」标示作为返回，而不是损坏了的数据。\r\n<h3>3. 主要概念</h3>\r\n<h4>缓存池 Pool</h4>\r\n缓存池包含缓存系统里所有缓存数据的集合。缓存池逻辑上是所有缓存项存储的仓库，所有存储进去的数据， 都能从缓存池里取出来，所有的对缓存的操作，都发生在缓存池子里。\r\n<h4>缓存项 Items</h4>\r\n一条缓存项在缓存池里代表了一对「键/值」对应的数据，「键」被视为每一个缓存项主键，是缓存项的 唯一标识符，<strong>必须</strong> 是不可变更的，当然，「值」<strong>可以</strong> 任意变更。\r\n<h3>4. 错误处理</h3>\r\n缓存对应用性能起着至关重要的作用，但是，无论在任何情况下，缓存 一定不可 作为应用程序不 可或缺的核心功能。\r\n\r\n缓存系统里的错误 一定不可 导致应用程序故障，所以，实现类库 一定不可 抛出任何除了 此接口规范定义的以外的异常，并且 必须 捕捉包括底层存储驱动抛出的异常，不让其冒泡至超 出缓存系统内。\r\n\r\n实现类库 应该 对此类错误进行记录，或者以任何形式通知管理员。\r\n\r\n调用类库发起删除缓存项的请求，或者清空整个缓冲池子的请求，「键」不存在的话 必须 不能 当成是有错误发生。后置条件是一样的，如果取数据时，「键」不存在的话 必须 不能当成是有错误发生。\r\n<h3>5. 接口</h3>\r\n<h4>CacheItemInterface</h4>\r\nCacheItemInterface 定义了缓存系统里的一个缓存项。每一个缓存项 必须 有一个「键」与之相 关联，此「键」通常是通过 Cache\\CacheItemPoolInterface 来设置。\r\n\r\nCache\\CacheItemInterface 对象把缓存项的存储进行了封装，每一个 Cache\\CacheItemInterface 由一个 Cache\\CacheItemPoolInterface 对象生成，CacheItemPoolInterface 负责一些必须的设置，并且给对象设置具有 唯一性 的「键」。\r\n\r\nCache\\CacheItemInterface 对象 必须 能够存储和取出任何类型的，在「数据」章节定义的 PHP 数值。\r\n\r\n调用类库 一定不可 擅自初始化「CacheItemInterface」对象，「缓存项」只能使用「CacheItemPoolInterface」对象的 getItem() 方法来获取。调用类库 一定不可 假设 由一个实现类库创建的「缓存项」能被另一个实现类库完全兼容。\r\n\r\n[php]\r\nnamespace Psr\\Cache;\r\n\r\n/**\r\n * CacheItemInterface 定了缓存系统里对缓存项操作的接口\r\n */\r\ninterface CacheItemInterface\r\n{\r\n    /**\r\n     * 返回当前缓存项的「键」\r\n     * \r\n     * 「键」由实现类库来加载，并且高层的调用者（如：CacheItemPoolInterface）\r\n     *  **应该** 能使用此方法来获取到「键」的信息。\r\n     *\r\n     * @return string\r\n     *   当前缓存项的「键」\r\n     */\r\n    public function getKey();\r\n\r\n    /**\r\n     * 凭借此缓存项的「键」从缓存系统里面取出缓存项。\r\n     *\r\n     * 取出的数据 **必须** 跟使用 `set()` 存进去的数据是一模一样的。\r\n     *\r\n     * 如果 `isHit()` 返回 false 的话，此方法必须返回 `null`，需要注意的是 `null` \r\n     * 本来就是一个合法的缓存数据，所以你 **应该** 使用 `isHit()` 方法来辨别到底是\r\n     * &quot;返回 null 数据&quot; 还是 &quot;缓存里没有此数据&quot;。\r\n     *\r\n     * @return mixed\r\n     *   此缓存项的「键」对应的「值」，如果找不到的话，返回 `null`\r\n     */\r\n    public function get();\r\n\r\n    /**\r\n     * 确认缓存项的检查是否命中。\r\n     * \r\n     * 注意: 调用此方法和调用 `get()` 时 **一定不可** 有先后顺序之分。\r\n     *\r\n     * @return bool\r\n     *   如果缓冲池里有命中的话，返回 `true`，反之返回 `false`\r\n     */\r\n    public function isHit();\r\n\r\n    /**\r\n     * 为此缓存项设置「值」。\r\n     *\r\n     * 参数 $value 可以是所有能被 PHP 序列化的数据，序列化的逻辑\r\n     * 需要在实现类库里书写。\r\n     *\r\n     * @param mixed $value\r\n     *   将被存储的可序列化的数据。\r\n     *\r\n     * @return static\r\n     *   返回当前对象。\r\n     */\r\n    public function set($value);\r\n\r\n    /**\r\n     * 设置缓存项的准确过期时间点。\r\n     *\r\n     * @param \\DateTimeInterface $expiration\r\n     * \r\n     *   过期的准确时间点，过了这个时间点后，缓存项就 **必须** 被认为是过期了的。\r\n     *   如果明确的传参 `null` 的话，**可以** 使用一个默认的时间。\r\n     *   如果没有设置的话，缓存 **应该** 存储到底层实现的最大允许时间。\r\n     *\r\n     * @return static\r\n     *   返回当前对象。\r\n     */\r\n    public function expiresAt($expiration);\r\n\r\n    /**\r\n     * 设置缓存项的过期时间。\r\n     *\r\n     * @param int|\\DateInterval $time\r\n     *   以秒为单位的过期时长，过了这段时间后，缓存项就 **必须** 被认为是过期了的。\r\n     *   如果明确的传参 `null` 的话，**可以** 使用一个默认的时间。\r\n     *   如果没有设置的话，缓存 **应该** 存储到底层实现的最大允许时间。\r\n     *\r\n     * @return static\r\n     *   返回当前对象\r\n     */\r\n    public function expiresAfter($time);\r\n\r\n}\r\n[/php]\r\n\r\n<h4>CacheItemPoolInterface</h4>\r\nCache\\CacheItemPoolInterface 的主要目的是从调用类库接收「键」，然后返回对应的 Cache\\CacheItemInterface 对象。\r\n\r\n此接口也是作为主要的，与整个缓存集合交互的方式。所有的配置和初始化由实现类库自行实现。\r\n\r\n[php]\r\nnamespace Psr\\Cache;\r\n\r\n/**\r\n * CacheItemPoolInterface 生成 CacheItemInterface 对象\r\n */\r\ninterface CacheItemPoolInterface\r\n{\r\n    /**\r\n     * 返回「键」对应的一个缓存项。\r\n     *\r\n     * 此方法 **必须** 返回一个 CacheItemInterface 对象，即使是找不到对应的缓存项\r\n     * 也 **一定不可** 返回 `null`。\r\n     *\r\n     * @param string $key\r\n     *   用来搜索缓存项的「键」。\r\n     *\r\n     * @throws InvalidArgumentException\r\n     *   如果 $key 不是合法的值，\\Psr\\Cache\\InvalidArgumentException 异常会被抛出。\r\n     *\r\n     * @return CacheItemInterface\r\n     *   对应的缓存项。\r\n     */\r\n    public function getItem($key);\r\n\r\n    /**\r\n     * 返回一个可供遍历的缓存项集合。\r\n     *\r\n     * @param array $keys\r\n     *   由一个或者多个「键」组成的数组。\r\n     *\r\n     * @throws InvalidArgumentException\r\n     *   如果 $keys 里面有哪个「键」不是合法，\\Psr\\Cache\\InvalidArgumentException 异常\r\n     *   会被抛出。\r\n     *   \r\n     * @return array|\\Traversable\r\n     *   返回一个可供遍历的缓存项集合，集合里每个元素的标识符由「键」组成，即使即使是找不到对\r\n     *   的缓存项，也要返回一个「CacheItemInterface」对象到对应的「键」中。\r\n     *   如果传参的数组为空，也需要返回一个空的可遍历的集合。\r\n     */\r\n    public function getItems(array $keys = array());\r\n\r\n    /**\r\n     * 检查缓存系统中是否有「键」对应的缓存项。\r\n     *\r\n     * 注意: 此方法应该调用 `CacheItemInterface::isHit()` 来做检查操作，而不是\r\n     * `CacheItemInterface::get()`\r\n     *\r\n     * @param string $key\r\n     *   用来搜索缓存项的「键」。\r\n     *\r\n     * @throws InvalidArgumentException\r\n     *   如果 $key 不是合法的值，\\Psr\\Cache\\InvalidArgumentException 异常会被抛出。\r\n     *\r\n     * @return bool\r\n     *   如果存在「键」对应的缓存项即返回 true，否则 false\r\n     */\r\n    public function hasItem($key);\r\n\r\n    /**\r\n     * 清空缓冲池\r\n     *\r\n     * @return bool\r\n     *   成功返回 true，有错误发生返回 false\r\n     */\r\n    public function clear();\r\n\r\n    /**\r\n     * 从缓冲池里移除某个缓存项\r\n     *\r\n     * @param string $key\r\n     *   用来搜索缓存项的「键」。\r\n     *\r\n     * @throws InvalidArgumentException\r\n     *   如果 $key 不是合法的值，\\Psr\\Cache\\InvalidArgumentException 异常会被抛出。\r\n     *\r\n     * @return bool\r\n     *   成功返回 true，有错误发生返回 false\r\n     */\r\n    public function deleteItem($key);\r\n\r\n    /**\r\n     * 从缓冲池里移除多个缓存项\r\n     *\r\n     * @param array $keys\r\n     *   由一个或者多个「键」组成的数组。\r\n     *   \r\n     * @throws InvalidArgumentException\r\n     *   如果 $keys 里面有哪个「键」不是合法，\\Psr\\Cache\\InvalidArgumentException 异常\r\n     *   会被抛出。\r\n     *\r\n     * @return bool\r\n     *   成功返回 true，有错误发生返回 false\r\n     */\r\n    public function deleteItems(array $keys);\r\n\r\n    /**\r\n     * 立刻为「CacheItemInterface」对象做数据持久化。\r\n     *\r\n     * @param CacheItemInterface $item\r\n     *   将要被存储的缓存项\r\n     *\r\n     * @return bool\r\n     *   成功返回 true，有错误发生返回 false\r\n     */\r\n    public function save(CacheItemInterface $item);\r\n\r\n    /**\r\n     * 稍后为「CacheItemInterface」对象做数据持久化。\r\n     *\r\n     * @param CacheItemInterface $item\r\n     *   将要被存储的缓存项\r\n     *\r\n     * @return bool\r\n     *   成功返回 true，有错误发生返回 false\r\n     */\r\n    public function saveDeferred(CacheItemInterface $item);\r\n\r\n    /**\r\n     * 提交所有的正在队列里等待的请求到数据持久层，配合 `saveDeferred()` 使用\r\n     *\r\n     * @return bool\r\n     *  成功返回 true，有错误发生返回 false\r\n     */\r\n    public function commit();\r\n}\r\n[/php]\r\n\r\n<h4>CacheException</h4>\r\n此异常用于缓存系统发生的所有严重错误，包括但不限制于 缓存系统配置，如连接到缓存服务器出错、错 误的用户身份认证等。\r\n\r\n所有的实现类库抛出的异常都 必须 实现此接口。\r\n\r\n[php]\r\nnamespace Psr\\Cache;\r\n\r\n/**\r\n * 被所有的实现类库抛出的异常继承的「异常接口」\r\n */\r\ninterface CacheException\r\n{\r\n}\r\n[/php]\r\n\r\n<h4>InvalidArgumentException</h4>\r\n\r\n[php]\r\nnamespace Psr\\Cache;\r\n\r\n/**\r\n * 传参错误抛出的异常接口\r\n *\r\n * 当一个错误或者非法的传参发生时，**必须** 抛出一个继承了\r\n * Psr\\Cache\\InvalidArgumentException 的异常\r\n */\r\ninterface InvalidArgumentException extends CacheException\r\n{\r\n}\r\n[/php]\r\n', '「PSR 规范」PSR-6 缓存接口规范', '', 'inherit', 'closed', 'closed', '', '1147-revision-v1', '', '', '2017-07-14 10:32:15', '2017-07-14 02:32:15', '', 1147, 'https://www.gzpblog.com/20170714/1150.html', 0, 'revision', '', 0),
(1151, 1, '2017-07-18 11:48:35', '2017-07-18 03:48:35', '<blockquote>本文总结自慕课网的一个教程：<a href=\"http://www.imooc.com/learn/852\" target=\"_blank\" rel=\"noopener noreferrer\">PHP消息队列实现及应用</a>；这个教程非常适合新手刚接触消息队列，我觉得蛮不错。</blockquote>\r\n<h2>1. 关于消息队列</h2>\r\n<h3>1.1 基础模式</h3>\r\n一个基础的消息队列应该是这样的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/消息队列.png\"><img class=\"size-full wp-image-1155 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/消息队列.png\" alt=\"\" width=\"561\" height=\"136\" /></a>\r\n<h3>1.2 应用场景</h3>\r\n消息队列的应用场景大概可以是以下几种：\r\n<ul>\r\n 	<li>冗余；</li>\r\n 	<li>解耦（比如业务系统和队列处理系统一方奔溃不会影响另一方）；</li>\r\n 	<li>流量削峰（抢购，秒杀等场景）；</li>\r\n 	<li>异步通信；</li>\r\n 	<li>拓展性；</li>\r\n 	<li>排序保证（比如做成单进程单线程单进单出）；</li>\r\n</ul>\r\n<h3>1.3 队列介质</h3>\r\n实现消息队列的方式有很多，这里介绍三种模式的实现：\r\n\r\nMysql：可靠性高、易实现，速度慢\r\n\r\nRedis：速度快，单条大消息包时效率低\r\n\r\n消息系统：专业性强，可靠，学习成本高（RabbitMQ）\r\n<h3>1.4 消息处理触发机制</h3>\r\n<strong>死循环方式读取</strong>：易实现，故障时无法及时恢复（适合比如秒杀系统）\r\n\r\n<strong>定时任务</strong>：压分均分，有处理上限（要控制好进程，防止上一个任务还没完成就开始了下一个）\r\n\r\n<strong>守护进程</strong>：类似于PHP-FPM和PHP-CG，需要shell基础\r\n<h2>2. 案例</h2>\r\n<h3>2.1 解耦案例：处理订单系统和配送系统（Mysql实现）</h3>\r\n<h4>2.1.1 案例架构</h4>\r\n订单系统和配送系统是解耦的，通过MySQL队列表做队列：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/消息队列解耦案例.png\"><img class=\"size-full wp-image-1156 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/消息队列解耦案例.png\" alt=\"\" width=\"638\" height=\"274\" /></a>\r\n<h4>2.1.2 案例流程</h4>\r\n程序的大概流程：\r\n<h4><a href=\"https://files.gzpblog.com/wp/2017/07/消息队列解耦案例程序流程.png\"><img class=\"size-full wp-image-1157 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/消息队列解耦案例程序流程.png\" alt=\"\" width=\"591\" height=\"288\" /></a>2.1.3 开发流程</h4>\r\n1）创建一个示例MySQL队列表：\r\n\r\n[sql]CREATE TABLE `order_queue`(\r\n    `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT `id号`,\r\n    `order_id` int(11) NOT NULL,\r\n    `mobile` varchar(20) NOT NULL COMMENT `用户的手机号`,\r\n    `address` varchar(100) NOT NULL COMMENT `用户的地址`,\r\n    `created_at` datetime NOT NULL DEFAULT `0000-00-00 00:00:00` COMMENT `订单创建时间`,\r\n    `updated_at` datetime NOT NULL DEFAULT `0000-00-00 00:00:00` COMMENT `处理完成时间`,\r\n    `status` tinyint(2) NOT NULL COMMENT `当前状态, 0未处理, 1已处理, 2处理中`,\r\n    PRIMARY KEY(`id`)\r\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;[/sql]\r\n\r\n\r\n2）接受用户订单order.php\r\n\r\n[php]&lt;?php\r\ninclude \'../include/db.php\'; //引入一个DB类用来操作数据库\r\n\r\nif (!empty($_GET[\'mobile\'])) {\r\n    // 订单处理流程\r\n    // ......\r\n    // 过滤从用户获取的数据\r\n\r\n    $order_id = rand (10000, 99999); // 示例生成订单\r\n    // 要插入的数据\r\n    $insert_data = array(\r\n        \'order_id\' =&gt; $order_id,\r\n        \'mobile\'   =&gt; $_GET[\'mobile\'],\r\n        \'created_time\' =&gt; date(\'Y-m-d H:i:s\', time()),\r\n        \'status\' =&gt; 0\r\n    );\r\n\r\n    // 插入数据\r\n    $db = DB::getIntance();\r\n    $res = $db -&gt; insert(\'order_queue\', $insert_data);\r\n    if ($res) {\r\n        echo $insert_data[\'order_id\'].&quot;保存成功&quot;;\r\n    } else {\r\n        echo \'保存失败\';\r\n    }\r\n}[/php]\r\n\r\n\r\n3）配送处理goods.php\r\n\r\n[php]&lt;?php\r\n// 配送系统处理队列中的订单并进行标记的一个文件\r\ninclude \'../include/db.php\'; //引入一个DB类用来操作数据库\r\n\r\n$db = DB::getIntance();\r\n// 1. 先把要处理的记录更新为等待处理; 这一步是为了实现一个锁的机制,防止其它程序操作数据冲突\r\n$waiting = array(\'status\' =&gt; 0);\r\n$lock = array(\'status\' =&gt; 2);\r\n$res_lock = $db-&gt;update(\'order_queue\', $lock, $waiting, 2);\r\n\r\n// 2. 选择出刚刚更新的这些数据, 然后进行配送系统的处理\r\nif ($res_lock) {\r\n    $res = $db-&gt;selectAll(\'order_queue\', $lock);\r\n\r\n    // 然后由配送系统进行处理\r\n    // ......\r\n\r\n    // 3. 把这些处理过的程序更新为已完成\r\n    $success = array(\r\n        \'status\' =&gt; 1,\r\n        \'update_time\' =&gt; date(\'Y-m-d H:i:s\'),\r\n    );\r\n    $res_last = $db-&gt;update(\'order_queue\', $success, $lock);\r\n    if ($res_last) {\r\n        echo \'success:\'.$res_last;\r\n    } else {\r\n        echo \'Fail:\'.$res_last;\r\n    }\r\n} else {\r\n    echo \'All Finished!\';\r\n}\r\n[/php]\r\n\r\n\r\n4）定时脚本good.sh\r\n\r\n[code]#!/bin/bash\r\n\r\ndate &quot;+%G-%m-%d %H:$M:S&quot;\r\ncd /home/path/to/queue_demo/\r\nphp goods.php[/code]\r\n\r\n5）设置corntab定时任务\r\n\r\n设定为每一分钟执行goods.sh一次并记录到log.log中：\r\n\r\n*/1 * * * * /home/path/to/queue_demo/goods.sh &gt;&gt; /home/path/to/queue_demo/log.log 2&gt;&amp;1\r\n\r\n创建log文件：\r\n\r\ntouch /home/path/to/queue_demo/log.log\r\n\r\n6）运行，测试\r\n\r\n调用order.php接收用户的订单信息；查看mysql表中是否插入数据；\r\n\r\n定时任务已执行，查看数据status是否改变；\r\n\r\n进行测试时，实时查看log文件：\r\n\r\ntail -f log.log\r\n<h3>2.2 流量削峰案例：通过 Redis 的 List 类型实现秒杀</h3>\r\n<h4>2.2.1 了解 Redis 的 list 类型数据</h4>\r\nRedis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。一个列表最多可以包含 4294967295 个元素 (每个列表超过40亿个元素)。\r\n\r\n常用命令：\r\n<ul>\r\n 	<li>LPUSH/LPUSHX：将值插入到（/存在的）列表头部</li>\r\n 	<li>RPUSH/RPUSHX：将值插入到（/存在的）列表尾部</li>\r\n 	<li>LPOP：移出并获取列表的第一个元素</li>\r\n 	<li>RPOP：移出并获取列表的最后一个元素</li>\r\n 	<li>LTRIM：保留指定区间内的元素</li>\r\n 	<li>LLEN：获取列表长度</li>\r\n 	<li>LSET：通过索引设置列表元素的值</li>\r\n 	<li>LINDEX：通过索引获取列表中的元素</li>\r\n 	<li>LRANGE：获取列表指定范围的元素</li>\r\n</ul>\r\n<h4>2.2.2 案例架构</h4>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/秒杀案例架构设计.png\"><img class=\"size-full wp-image-1152 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/秒杀案例架构设计.png\" alt=\"\" width=\"495\" height=\"203\" /></a>\r\n<h4>2.2.3 代码设计</h4>\r\n<ul>\r\n 	<li>秒杀程序把请求写入Redis。（Uid，time_stamp）</li>\r\n 	<li>检查Redis已存放数据的长度，超出上限直接丢弃。（比如秒杀限制为100个，超过100个的数据直接丢弃返回秒杀已结束）</li>\r\n 	<li>死循环处理存入Redis的数据库并入库。</li>\r\n</ul>\r\n<h4>2.2.4 开发流程</h4>\r\n1）创建一个示例MySQL秒杀表：\r\n\r\n[sql]CREATE TABLE `redis_queue`(\r\n    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n    `uid` int(11) NOT NULL DEFAULT `0`,\r\n    `time_stamp` varchar(24) NOT NULL,    \r\n    PRIMARY KEY(`id`)\r\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;[/sql]\r\n\r\n2）接收用户请求的user.php\r\n\r\n[php]&lt;?php\r\n// 加载redis组件\r\n$redis = new Redis();\r\n$redis -&gt; connect(\'127.0.0.1\', 6379);\r\n$redis_name = \'miaosha\';\r\n\r\n// 接收用户的id\r\n$uid = $_GET[\'uid\'];\r\n// 获取一下redis里面已有的数量\r\n$num = $redis-&gt;lLen($redis_name);\r\n// 如果当天人数少于10的时候,则加入这个队列\r\nif ($num &lt; 10) {\r\n    $redis-&gt;rPush($redis_name, $uid.\'%\'.microtime());\r\n    echo $uid.\'秒杀成功\';\r\n} else{\r\n    // 如果当天人数已经达到了10个人,则返回秒杀已完成\r\n    echo \'秒杀已结束\';\r\n}\r\n\r\n$redis-&gt;close();[/php]\r\n\r\n3）处理队列的入库程序\r\n\r\n[php]&lt;?php\r\ninclude \'../include/db.php\';\r\n\r\n// 加载redis组件\r\n$redis = new Redis();\r\n$redis -&gt; connect(\'127.0.0.1\', 6379);\r\n$redis_name = \'miaosha\';\r\n$db= DB::getIntance();\r\n\r\n// 死循环\r\nwhile (1) {\r\n    // 从队列最左取出一个值来\r\n    $user = $redis-&gt;lPop($redis_name);\r\n    // 然后判断这个值是否存在\r\n    if (!$user || $user==\'nil\') {\r\n        sleep(2);\r\n        continue;\r\n    }\r\n    // 切割出时间\r\n    $user_arr = explode(\'%\', $user);\r\n    $insert_data = array(\r\n        \'uid\' =&gt; $user_arr[0],\r\n        \'time_stamp\' =&gt; $user_arr[1], \r\n        );\r\n    // 保存到数据库中\r\n    $res = $db-&gt;insert(\'redis_queue\', $insert_data);\r\n    // 数据库插入失败的时候的回滚机制\r\n    if (!$res) {\r\n        $redis-&gt;rPush($redis_name, $user);\r\n    }\r\n    sleep(2);\r\n}\r\n//释放redis\r\n$redis -&gt; close();\r\n[/php]\r\n\r\n<h2>3. 其它消息系统</h2>\r\n<h3>3.1 RabbitMQ</h3>\r\n<h4>3.1.1 关于RabbitMQ</h4>\r\n官网：<a href=\"http://www.rabbitmq.com/\" target=\"_blank\" rel=\"noopener noreferrer\">RabbitMQ</a>\r\n文档：<a href=\"http://www.rabbitmq.com/documentation.html\" target=\"_blank\" rel=\"noopener noreferrer\">RabbitMQ Documentation</a>\r\n<h4>3.1.2 RabbitMQ架构和原理</h4>\r\nRabbitMQ完整的实现了AMQP、集群简化、持久化、跨平台。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/RabbitMQ架构和原理.png\"><img class=\" wp-image-1153 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/RabbitMQ架构和原理.png\" alt=\"\" width=\"529\" height=\"344\" /></a>\r\n<h4>3.1.3 RabbitMQ使用</h4>\r\n1） 安装RabbitMQ（rabbitmq-server、php-amqplib）\r\n\r\n2）生产者向消息通道发送消息\r\n\r\n3）消费者处理消息\r\n<h4>3.1.4 工作队列模式</h4>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/RabbitMQ-work-queues.png\"><img class=\"size-full wp-image-1154 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/RabbitMQ-work-queues.png\" alt=\"\" width=\"332\" height=\"111\" /></a>\r\n\r\n更多模式参考：<a href=\"http://previous.rabbitmq.com/v3_5_7/getstarted.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://previous.rabbitmq.com/v3_5_7/getstarted.html</a>', '消息队列及PHP中的简单实现与应用', '', 'publish', 'open', 'closed', '', '%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e5%8f%8aphp%e4%b8%ad%e7%9a%84%e7%ae%80%e5%8d%95%e5%ae%9e%e7%8e%b0%e4%b8%8e%e5%ba%94%e7%94%a8', '', '', '2017-07-18 12:00:44', '2017-07-18 04:00:44', '', 0, 'https://www.gzpblog.com/?p=1151', 0, 'post', '', 0),
(1152, 1, '2017-07-18 11:10:09', '2017-07-18 03:10:09', '', '秒杀案例架构设计', '', 'inherit', 'open', 'closed', '', '%e7%a7%92%e6%9d%80%e6%a1%88%e4%be%8b%e6%9e%b6%e6%9e%84%e8%ae%be%e8%ae%a1', '', '', '2017-07-18 11:10:09', '2017-07-18 03:10:09', '', 1151, 'https://www.gzpblog.com/wp-content/uploads/2017/07/秒杀案例架构设计.png', 0, 'attachment', 'image/png', 0),
(1153, 1, '2017-07-18 11:10:10', '2017-07-18 03:10:10', '', 'RabbitMQ架构和原理', '', 'inherit', 'open', 'closed', '', 'rabbitmq%e6%9e%b6%e6%9e%84%e5%92%8c%e5%8e%9f%e7%90%86', '', '', '2017-07-18 11:10:10', '2017-07-18 03:10:10', '', 1151, 'https://www.gzpblog.com/wp-content/uploads/2017/07/RabbitMQ架构和原理.png', 0, 'attachment', 'image/png', 0),
(1154, 1, '2017-07-18 11:10:11', '2017-07-18 03:10:11', '', 'RabbitMQ work queues', '', 'inherit', 'open', 'closed', '', 'rabbitmq-work-queues', '', '', '2017-07-18 11:10:11', '2017-07-18 03:10:11', '', 1151, 'https://www.gzpblog.com/wp-content/uploads/2017/07/RabbitMQ-work-queues.png', 0, 'attachment', 'image/png', 0),
(1155, 1, '2017-07-18 11:10:12', '2017-07-18 03:10:12', '', '消息队列', '', 'inherit', 'open', 'closed', '', '%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97', '', '', '2017-07-18 11:10:12', '2017-07-18 03:10:12', '', 1151, 'https://www.gzpblog.com/wp-content/uploads/2017/07/消息队列.png', 0, 'attachment', 'image/png', 0),
(1156, 1, '2017-07-18 11:10:13', '2017-07-18 03:10:13', '', '消息队列解耦案例', '', 'inherit', 'open', 'closed', '', '%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e8%a7%a3%e8%80%a6%e6%a1%88%e4%be%8b', '', '', '2017-07-18 11:10:13', '2017-07-18 03:10:13', '', 1151, 'https://www.gzpblog.com/wp-content/uploads/2017/07/消息队列解耦案例.png', 0, 'attachment', 'image/png', 0),
(1157, 1, '2017-07-18 11:10:14', '2017-07-18 03:10:14', '', '消息队列解耦案例程序流程', '', 'inherit', 'open', 'closed', '', '%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e8%a7%a3%e8%80%a6%e6%a1%88%e4%be%8b%e7%a8%8b%e5%ba%8f%e6%b5%81%e7%a8%8b', '', '', '2017-07-18 11:10:14', '2017-07-18 03:10:14', '', 1151, 'https://www.gzpblog.com/wp-content/uploads/2017/07/消息队列解耦案例程序流程.png', 0, 'attachment', 'image/png', 0),
(1158, 1, '2017-07-18 11:48:35', '2017-07-18 03:48:35', '<blockquote>本文总结自慕课网的一个教程：<a href=\"http://www.imooc.com/learn/852\" target=\"_blank\" rel=\"noopener noreferrer\">PHP消息队列实现及应用</a>；这个教程非常适合新手刚接触消息队列，我觉得蛮不错。</blockquote>\r\n<h2>1. 关于消息队列</h2>\r\n<h3>1.1 基础模式</h3>\r\n一个基础的消息队列应该是这样的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/消息队列.png\"><img class=\"size-full wp-image-1155 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/消息队列.png\" alt=\"\" width=\"561\" height=\"136\" /></a>\r\n<h3>1.2 应用场景</h3>\r\n消息队列的应用场景大概可以是以下几种：\r\n<ul>\r\n 	<li>冗余；</li>\r\n 	<li>解耦（比如业务系统和队列处理系统一方奔溃不会影响另一方）；</li>\r\n 	<li>流量削峰（抢购，秒杀等场景）；</li>\r\n 	<li>异步通信；</li>\r\n 	<li>拓展性；</li>\r\n 	<li>排序保证（比如做成单进程单线程单进单出）；</li>\r\n</ul>\r\n<h3>1.3 队列介质</h3>\r\n实现消息队列的方式有很多，这里介绍三种模式的实现：\r\n\r\nMysql：可靠性高、易实现，速度慢\r\n\r\nRedis：速度快，单条大消息包时效率低\r\n\r\n消息系统：专业性强，可靠，学习成本高（RabbitMQ）\r\n<h3>1.4 消息处理触发机制</h3>\r\n<strong>死循环方式读取</strong>：易实现，故障时无法及时恢复（适合比如秒杀系统）\r\n\r\n<strong>定时任务</strong>：压分均分，有处理上限（要控制好进程，防止上一个任务还没完成就开始了下一个）\r\n\r\n<strong>守护进程</strong>：类似于PHP-FPM和PHP-CG，需要shell基础\r\n<h2>2. 案例</h2>\r\n<h3>2.1 解耦案例：处理订单系统和配送系统（Mysql实现）</h3>\r\n<h4>2.1.1 案例架构</h4>\r\n订单系统和配送系统是解耦的，通过MySQL队列表做队列：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/消息队列解耦案例.png\"><img class=\"size-full wp-image-1156 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/消息队列解耦案例.png\" alt=\"\" width=\"638\" height=\"274\" /></a>\r\n<h4>2.1.2 案例流程</h4>\r\n程序的大概流程：\r\n<h4><a href=\"https://files.gzpblog.com/wp/2017/07/消息队列解耦案例程序流程.png\"><img class=\"size-full wp-image-1157 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/消息队列解耦案例程序流程.png\" alt=\"\" width=\"591\" height=\"288\" /></a>2.1.3 开发流程</h4>\r\n1）创建一个示例MySQL队列表：\r\n\r\n\r\n[code]CREATE TABLE `order_queue`(\r\n`id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT `id号`,\r\n`order_id` int(11) NOT NULL,\r\n`mobile` varchar(20) NOT NULL COMMENT `用户的手机号`,\r\n`address` varchar(100) NOT NULL COMMENT `用户的地址`,\r\n`created_at` datetime NOT NULL DEFAULT `0000-00-00 00:00:00` COMMENT `订单创建时间`,\r\n`updated_at` datetime NOT NULL DEFAULT `0000-00-00 00:00:00` COMMENT `处理完成时间`,\r\n`status` tinyint(2) NOT NULL COMMENT `当前状态, 0未处理, 1已处理, 2处理中`,\r\nPRIMARY KEY(`id`)\r\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;[code/]\r\n\r\n2）接受用户订单order.php\r\n\r\n[php]&lt;?php\r\ninclude \'../include/db.php\'; //引入一个DB类用来操作数据库\r\n\r\nif (!empty($_GET[\'mobile\'])) {\r\n// 订单处理流程\r\n// ......\r\n// 过滤从用户获取的数据\r\n\r\n$order_id = rand (10000, 99999); // 示例生成订单\r\n// 要插入的数据\r\n$insert_data = array(\r\n\'order_id\' =&gt; $order_id,\r\n\'mobile\'   =&gt; $_GET[\'mobile\'],\r\n\'created_time\' =&gt; date(\'Y-m-d H:i:s\', time()),\r\n\'status\' =&gt; 0\r\n);\r\n\r\n// 插入数据\r\n$db = DB::getIntance();\r\n$res = $db -&gt; insert(\'order_queue\', $insert_data);\r\nif ($res) {\r\necho $insert_data[\'order_id\'].&quot;保存成功&quot;;\r\n} else {\r\necho \'保存失败\';\r\n}\r\n}[/php]\r\n\r\n3）配送处理goods.php\r\n\r\n[php]&lt;?php\r\n// 配送系统处理队列中的订单并进行标记的一个文件\r\ninclude \'../include/db.php\'; //引入一个DB类用来操作数据库\r\n\r\n$db = DB::getIntance();\r\n// 1. 先把要处理的记录更新为等待处理; 这一步是为了实现一个锁的机制,防止其它程序操作数据冲突\r\n$waiting = array(\'status\' =&gt; 0);\r\n$lock = array(\'status\' =&gt; 2);\r\n$res_lock = $db-&gt;update(\'order_queue\', $lock, $waiting, 2);\r\n\r\n// 2. 选择出刚刚更新的这些数据, 然后进行配送系统的处理\r\nif ($res_lock) {\r\n$res = $db-&gt;selectAll(\'order_queue\', $lock);\r\n\r\n// 然后由配送系统进行处理\r\n// ......\r\n\r\n// 3. 把这些处理过的程序更新为已完成\r\n$success = array(\r\n\'status\' =&gt; 1,\r\n\'update_time\' =&gt; date(\'Y-m-d H:i:s\'),\r\n);\r\n$res_last = $db-&gt;update(\'order_queue\', $success, $lock);\r\nif ($res_last) {\r\necho \'success:\'.$res_last;\r\n} else {\r\necho \'Fail:\'.$res_last;\r\n}\r\n} else {\r\necho \'All Finished!\';\r\n}\r\n[/php]\r\n\r\n4）定时脚本good.sh\r\n\r\n[code]#!/bin/bash\r\n\r\ndate &quot;+%G-%m-%d %H:$M:S&quot;\r\ncd /home/path/to/queue_demo/\r\nphp goods.php[/code]\r\n\r\n\r\n5）设置corntab定时任务\r\n\r\n设定为每一分钟执行goods.sh一次并记录到log.log中：\r\n\r\n*/1 * * * * /home/path/to/queue_demo/goods.sh &gt;&gt; /home/path/to/queue_demo/log.log 2&gt;&amp;1\r\n\r\n创建log文件：\r\n\r\ntouch /home/path/to/queue_demo/log.log\r\n\r\n6）运行，测试\r\n\r\n调用order.php接收用户的订单信息；查看mysql表中是否插入数据；\r\n\r\n定时任务已执行，查看数据status是否改变；\r\n\r\n进行测试时，实时查看log文件：\r\n\r\ntail -f log.log\r\n<h3>2.2 流量削峰案例：通过 Redis 的 List 类型实现秒杀</h3>\r\n<h4>2.2.1 了解 Redis 的 list 类型数据</h4>\r\nRedis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。一个列表最多可以包含 4294967295 个元素 (每个列表超过40亿个元素)。\r\n\r\n常用命令：\r\n<ul>\r\n 	<li>LPUSH/LPUSHX：将值插入到（/存在的）列表头部</li>\r\n 	<li>RPUSH/RPUSHX：将值插入到（/存在的）列表尾部</li>\r\n 	<li>LPOP：移出并获取列表的第一个元素</li>\r\n 	<li>RPOP：移出并获取列表的最后一个元素</li>\r\n 	<li>LTRIM：保留指定区间内的元素</li>\r\n 	<li>LLEN：获取列表长度</li>\r\n 	<li>LSET：通过索引设置列表元素的值</li>\r\n 	<li>LINDEX：通过索引获取列表中的元素</li>\r\n 	<li>LRANGE：获取列表指定范围的元素</li>\r\n</ul>\r\n<h4>2.2.2 案例架构</h4>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/秒杀案例架构设计.png\"><img class=\"size-full wp-image-1152 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/秒杀案例架构设计.png\" alt=\"\" width=\"495\" height=\"203\" /></a>\r\n<h4>2.2.3 代码设计</h4>\r\n<ul>\r\n 	<li>秒杀程序把请求写入Redis。（Uid，time_stamp）</li>\r\n 	<li>检查Redis已存放数据的长度，超出上限直接丢弃。（比如秒杀限制为100个，超过100个的数据直接丢弃返回秒杀已结束）</li>\r\n 	<li>死循环处理存入Redis的数据库并入库。</li>\r\n</ul>\r\n<h4>2.2.4 开发流程</h4>\r\n1）创建一个示例MySQL秒杀表：\r\n\r\n\r\n[sql]CREATE TABLE `redis_queue`(\r\n`id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n`uid` int(11) NOT NULL DEFAULT `0`,\r\n`time_stamp` varchar(24) NOT NULL,\r\nPRIMARY KEY(`id`)\r\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;\r\n[/sql]\r\n\r\n\r\n2）接收用户请求的user.php\r\n\r\n\r\n[php]&lt;?php\r\n// 加载redis组件\r\n$redis = new Redis();\r\n$redis -&gt; connect(\'127.0.0.1\', 6379);\r\n$redis_name = \'miaosha\';\r\n\r\n// 接收用户的id\r\n$uid = $_GET[\'uid\'];\r\n// 获取一下redis里面已有的数量\r\n$num = $redis-&gt;lLen($redis_name);\r\n// 如果当天人数少于10的时候,则加入这个队列\r\nif ($num &lt; 10) {\r\n$redis-&gt;rPush($redis_name, $uid.\'%\'.microtime());\r\necho $uid.\'秒杀成功\';\r\n} else{\r\n// 如果当天人数已经达到了10个人,则返回秒杀已完成\r\necho \'秒杀已结束\';\r\n}\r\n\r\n$redis-&gt;close();\r\n[/php]\r\n\r\n\r\n3）处理队列的入库程序\r\n\r\n\r\n[php]&lt;?php\r\ninclude \'../include/db.php\';\r\n\r\n// 加载redis组件\r\n$redis = new Redis();\r\n$redis -&gt; connect(\'127.0.0.1\', 6379);\r\n$redis_name = \'miaosha\';\r\n$db= DB::getIntance();\r\n\r\n// 死循环\r\nwhile (1) {\r\n// 从队列最左取出一个值来\r\n$user = $redis-&gt;lPop($redis_name);\r\n// 然后判断这个值是否存在\r\nif (!$user || $user==\'nil\') {\r\nsleep(2);\r\ncontinue;\r\n}\r\n// 切割出时间\r\n$user_arr = explode(\'%\', $user);\r\n$insert_data = array(\r\n\'uid\' =&gt; $user_arr[0],\r\n\'time_stamp\' =&gt; $user_arr[1],\r\n);\r\n// 保存到数据库中\r\n$res = $db-&gt;insert(\'redis_queue\', $insert_data);\r\n// 数据库插入失败的时候的回滚机制\r\nif (!$res) {\r\n$redis-&gt;rPush($redis_name, $user);\r\n}\r\nsleep(2);\r\n}\r\n//释放redis\r\n$redis -&gt; close();\r\n[/php]\r\n\r\n<h2>3. 其它消息系统</h2>\r\n<h3>3.1 RabbitMQ</h3>\r\n<h4>3.1.1 关于RabbitMQ</h4>\r\n官网：<a href=\"http://www.rabbitmq.com/\" target=\"_blank\" rel=\"noopener noreferrer\">RabbitMQ</a>\r\n文档：<a href=\"http://www.rabbitmq.com/documentation.html\" target=\"_blank\" rel=\"noopener noreferrer\">RabbitMQ Documentation</a>\r\n<h4>3.1.2 RabbitMQ架构和原理</h4>\r\nRabbitMQ完整的实现了AMQP、集群简化、持久化、跨平台。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/RabbitMQ架构和原理.png\"><img class=\" wp-image-1153 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/RabbitMQ架构和原理.png\" alt=\"\" width=\"529\" height=\"344\" /></a>\r\n<h4>3.1.3 RabbitMQ使用</h4>\r\n1） 安装RabbitMQ（rabbitmq-server、php-amqplib）\r\n\r\n2）生产者向消息通道发送消息\r\n\r\n3）消费者处理消息\r\n<h4>3.1.4 工作队列模式</h4>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/RabbitMQ-work-queues.png\"><img class=\"size-full wp-image-1154 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/RabbitMQ-work-queues.png\" alt=\"\" width=\"332\" height=\"111\" /></a>\r\n\r\n更多模式参考：<a href=\"http://previous.rabbitmq.com/v3_5_7/getstarted.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://previous.rabbitmq.com/v3_5_7/getstarted.html</a>', '消息队列及PHP中的简单实现与应用', '', 'inherit', 'closed', 'closed', '', '1151-revision-v1', '', '', '2017-07-18 11:48:35', '2017-07-18 03:48:35', '', 1151, 'https://www.gzpblog.com/20170718/1158.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1159, 1, '2017-07-18 11:59:49', '2017-07-18 03:59:49', '<blockquote>本文总结自慕课网的一个教程：<a href=\"http://www.imooc.com/learn/852\" target=\"_blank\" rel=\"noopener noreferrer\">PHP消息队列实现及应用</a>；这个教程非常适合新手刚接触消息队列，我觉得蛮不错。</blockquote>\n<h2>1. 关于消息队列</h2>\n<h3>1.1 基础模式</h3>\n一个基础的消息队列应该是这样的：\n\n<a href=\"https://files.gzpblog.com/wp/2017/07/消息队列.png\"><img class=\"size-full wp-image-1155 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/消息队列.png\" alt=\"\" width=\"561\" height=\"136\" /></a>\n<h3>1.2 应用场景</h3>\n消息队列的应用场景大概可以是以下几种：\n<ul>\n 	<li>冗余；</li>\n 	<li>解耦（比如业务系统和队列处理系统一方奔溃不会影响另一方）；</li>\n 	<li>流量削峰（抢购，秒杀等场景）；</li>\n 	<li>异步通信；</li>\n 	<li>拓展性；</li>\n 	<li>排序保证（比如做成单进程单线程单进单出）；</li>\n</ul>\n<h3>1.3 队列介质</h3>\n实现消息队列的方式有很多，这里介绍三种模式的实现：\n\nMysql：可靠性高、易实现，速度慢\n\nRedis：速度快，单条大消息包时效率低\n\n消息系统：专业性强，可靠，学习成本高（RabbitMQ）\n<h3>1.4 消息处理触发机制</h3>\n<strong>死循环方式读取</strong>：易实现，故障时无法及时恢复（适合比如秒杀系统）\n\n<strong>定时任务</strong>：压分均分，有处理上限（要控制好进程，防止上一个任务还没完成就开始了下一个）\n\n<strong>守护进程</strong>：类似于PHP-FPM和PHP-CG，需要shell基础\n<h2>2. 案例</h2>\n<h3>2.1 解耦案例：处理订单系统和配送系统（Mysql实现）</h3>\n<h4>2.1.1 案例架构</h4>\n订单系统和配送系统是解耦的，通过MySQL队列表做队列：\n\n<a href=\"https://files.gzpblog.com/wp/2017/07/消息队列解耦案例.png\"><img class=\"size-full wp-image-1156 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/消息队列解耦案例.png\" alt=\"\" width=\"638\" height=\"274\" /></a>\n<h4>2.1.2 案例流程</h4>\n程序的大概流程：\n<h4><a href=\"https://files.gzpblog.com/wp/2017/07/消息队列解耦案例程序流程.png\"><img class=\"size-full wp-image-1157 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/消息队列解耦案例程序流程.png\" alt=\"\" width=\"591\" height=\"288\" /></a>2.1.3 开发流程</h4>\n1）创建一个示例MySQL队列表：\n\n[sql]CREATE TABLE `order_queue`(\n    `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT `id号`,\n    `order_id` int(11) NOT NULL,\n    `mobile` varchar(20) NOT NULL COMMENT `用户的手机号`,\n    `address` varchar(100) NOT NULL COMMENT `用户的地址`,\n    `created_at` datetime NOT NULL DEFAULT `0000-00-00 00:00:00` COMMENT `订单创建时间`,\n    `updated_at` datetime NOT NULL DEFAULT `0000-00-00 00:00:00` COMMENT `处理完成时间`,\n    `status` tinyint(2) NOT NULL COMMENT `当前状态, 0未处理, 1已处理, 2处理中`,\n    PRIMARY KEY(`id`)\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;[/sql]\n\n\n2）接受用户订单order.php\n\n[php]&lt;?php\ninclude \'../include/db.php\'; //引入一个DB类用来操作数据库\n\nif (!empty($_GET[\'mobile\'])) {\n    // 订单处理流程\n    // ......\n    // 过滤从用户获取的数据\n\n    $order_id = rand (10000, 99999); // 示例生成订单\n    // 要插入的数据\n    $insert_data = array(\n        \'order_id\' =&gt; $order_id,\n        \'mobile\'   =&gt; $_GET[\'mobile\'],\n        \'created_time\' =&gt; date(\'Y-m-d H:i:s\', time()),\n        \'status\' =&gt; 0\n    );\n\n    // 插入数据\n    $db = DB::getIntance();\n    $res = $db -&gt; insert(\'order_queue\', $insert_data);\n    if ($res) {\n        echo $insert_data[\'order_id\'].&quot;保存成功&quot;;\n    } else {\n        echo \'保存失败\';\n    }\n}[/php]\n\n\n3）配送处理goods.php\n\n[php]&lt;?php\n// 配送系统处理队列中的订单并进行标记的一个文件\ninclude \'../include/db.php\'; //引入一个DB类用来操作数据库\n\n$db = DB::getIntance();\n// 1. 先把要处理的记录更新为等待处理; 这一步是为了实现一个锁的机制,防止其它程序操作数据冲突\n$waiting = array(\'status\' =&gt; 0);\n$lock = array(\'status\' =&gt; 2);\n$res_lock = $db-&gt;update(\'order_queue\', $lock, $waiting, 2);\n\n// 2. 选择出刚刚更新的这些数据, 然后进行配送系统的处理\nif ($res_lock) {\n    $res = $db-&gt;selectAll(\'order_queue\', $lock);\n\n    // 然后由配送系统进行处理\n    // ......\n\n    // 3. 把这些处理过的程序更新为已完成\n    $success = array(\n        \'status\' =&gt; 1,\n        \'update_time\' =&gt; date(\'Y-m-d H:i:s\'),\n    );\n    $res_last = $db-&gt;update(\'order_queue\', $success, $lock);\n    if ($res_last) {\n        echo \'success:\'.$res_last;\n    } else {\n        echo \'Fail:\'.$res_last;\n    }\n} else {\n    echo \'All Finished!\';\n}\n[/php]\n\n\n4）定时脚本good.sh\n\n[code]#!/bin/bash\n\ndate &quot;+%G-%m-%d %H:$M:S&quot;\ncd /home/path/to/queue_demo/\nphp goods.php[/code]\n\n5）设置corntab定时任务\n\n设定为每一分钟执行goods.sh一次并记录到log.log中：\n\n*/1 * * * * /home/path/to/queue_demo/goods.sh &gt;&gt; /home/path/to/queue_demo/log.log 2&gt;&amp;1\n\n创建log文件：\n\ntouch /home/path/to/queue_demo/log.log\n\n6）运行，测试\n\n调用order.php接收用户的订单信息；查看mysql表中是否插入数据；\n\n定时任务已执行，查看数据status是否改变；\n\n进行测试时，实时查看log文件：\n\ntail -f log.log\n<h3>2.2 流量削峰案例：通过 Redis 的 List 类型实现秒杀</h3>\n<h4>2.2.1 了解 Redis 的 list 类型数据</h4>\nRedis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。一个列表最多可以包含 4294967295 个元素 (每个列表超过40亿个元素)。\n\n常用命令：\n<ul>\n 	<li>LPUSH/LPUSHX：将值插入到（/存在的）列表头部</li>\n 	<li>RPUSH/RPUSHX：将值插入到（/存在的）列表尾部</li>\n 	<li>LPOP：移出并获取列表的第一个元素</li>\n 	<li>RPOP：移出并获取列表的最后一个元素</li>\n 	<li>LTRIM：保留指定区间内的元素</li>\n 	<li>LLEN：获取列表长度</li>\n 	<li>LSET：通过索引设置列表元素的值</li>\n 	<li>LINDEX：通过索引获取列表中的元素</li>\n 	<li>LRANGE：获取列表指定范围的元素</li>\n</ul>\n<h4>2.2.2 案例架构</h4>\n<a href=\"https://files.gzpblog.com/wp/2017/07/秒杀案例架构设计.png\"><img class=\"size-full wp-image-1152 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/秒杀案例架构设计.png\" alt=\"\" width=\"495\" height=\"203\" /></a>\n<h4>2.2.3 代码设计</h4>\n<ul>\n 	<li>秒杀程序把请求写入Redis。（Uid，time_stamp）</li>\n 	<li>检查Redis已存放数据的长度，超出上限直接丢弃。（比如秒杀限制为100个，超过100个的数据直接丢弃返回秒杀已结束）</li>\n 	<li>死循环处理存入Redis的数据库并入库。</li>\n</ul>\n<h4>2.2.4 开发流程</h4>\n1）创建一个示例MySQL秒杀表：\n\n[sql]CREATE TABLE `redis_queue`(\n    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\n    `uid` int(11) NOT NULL DEFAULT `0`,\n    `time_stamp` varchar(24) NOT NULL,    \n    PRIMARY KEY(`id`)\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;[/sql]\n\n2）接收用户请求的user.php\n\n[php]&lt;?php\n// 加载redis组件\n$redis = new Redis();\n$redis -&gt; connect(\'127.0.0.1\', 6379);\n$redis_name = \'miaosha\';\n\n// 接收用户的id\n$uid = $_GET[\'uid\'];\n// 获取一下redis里面已有的数量\n$num = $redis-&gt;lLen($redis_name);\n// 如果当天人数少于10的时候,则加入这个队列\nif ($num &lt; 10) {\n$redis-&gt;rPush($redis_name, $uid.\'%\'.microtime());\necho $uid.\'秒杀成功\';\n} else{\n// 如果当天人数已经达到了10个人,则返回秒杀已完成\necho \'秒杀已结束\';\n}\n\n$redis-&gt;close();\n[/php]\n\n3）处理队列的入库程序\n\n[php]&lt;?php\ninclude \'../include/db.php\';\n\n// 加载redis组件\n$redis = new Redis();\n$redis -&gt; connect(\'127.0.0.1\', 6379);\n$redis_name = \'miaosha\';\n$db= DB::getIntance();\n\n// 死循环\nwhile (1) {\n// 从队列最左取出一个值来\n$user = $redis-&gt;lPop($redis_name);\n// 然后判断这个值是否存在\nif (!$user || $user==\'nil\') {\nsleep(2);\ncontinue;\n}\n// 切割出时间\n$user_arr = explode(\'%\', $user);\n$insert_data = array(\n\'uid\' =&gt; $user_arr[0],\n\'time_stamp\' =&gt; $user_arr[1],\n);\n// 保存到数据库中\n$res = $db-&gt;insert(\'redis_queue\', $insert_data);\n// 数据库插入失败的时候的回滚机制\nif (!$res) {\n$redis-&gt;rPush($redis_name, $user);\n}\nsleep(2);\n}\n//释放redis\n$redis -&gt; close();\n[/php]\n\n<h2>3. 其它消息系统</h2>\n<h3>3.1 RabbitMQ</h3>\n<h4>3.1.1 关于RabbitMQ</h4>\n官网：<a href=\"http://www.rabbitmq.com/\" target=\"_blank\" rel=\"noopener noreferrer\">RabbitMQ</a>\n文档：<a href=\"http://www.rabbitmq.com/documentation.html\" target=\"_blank\" rel=\"noopener noreferrer\">RabbitMQ Documentation</a>\n<h4>3.1.2 RabbitMQ架构和原理</h4>\nRabbitMQ完整的实现了AMQP、集群简化、持久化、跨平台。\n\n<a href=\"https://files.gzpblog.com/wp/2017/07/RabbitMQ架构和原理.png\"><img class=\" wp-image-1153 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/RabbitMQ架构和原理.png\" alt=\"\" width=\"529\" height=\"344\" /></a>\n<h4>3.1.3 RabbitMQ使用</h4>\n1） 安装RabbitMQ（rabbitmq-server、php-amqplib）\n\n2）生产者向消息通道发送消息\n\n3）消费者处理消息\n<h4>3.1.4 工作队列模式</h4>\n<a href=\"https://files.gzpblog.com/wp/2017/07/RabbitMQ-work-queues.png\"><img class=\"size-full wp-image-1154 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/RabbitMQ-work-queues.png\" alt=\"\" width=\"332\" height=\"111\" /></a>\n\n更多模式参考：<a href=\"http://previous.rabbitmq.com/v3_5_7/getstarted.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://previous.rabbitmq.com/v3_5_7/getstarted.html</a>', '消息队列及PHP中的简单实现与应用', '', 'inherit', 'closed', 'closed', '', '1151-autosave-v1', '', '', '2017-07-18 11:59:49', '2017-07-18 03:59:49', '', 1151, 'https://www.gzpblog.com/20170718/1159.html', 0, 'revision', '', 0),
(1160, 1, '2017-07-18 12:00:44', '2017-07-18 04:00:44', '<blockquote>本文总结自慕课网的一个教程：<a href=\"http://www.imooc.com/learn/852\" target=\"_blank\" rel=\"noopener noreferrer\">PHP消息队列实现及应用</a>；这个教程非常适合新手刚接触消息队列，我觉得蛮不错。</blockquote>\r\n<h2>1. 关于消息队列</h2>\r\n<h3>1.1 基础模式</h3>\r\n一个基础的消息队列应该是这样的：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/消息队列.png\"><img class=\"size-full wp-image-1155 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/消息队列.png\" alt=\"\" width=\"561\" height=\"136\" /></a>\r\n<h3>1.2 应用场景</h3>\r\n消息队列的应用场景大概可以是以下几种：\r\n<ul>\r\n 	<li>冗余；</li>\r\n 	<li>解耦（比如业务系统和队列处理系统一方奔溃不会影响另一方）；</li>\r\n 	<li>流量削峰（抢购，秒杀等场景）；</li>\r\n 	<li>异步通信；</li>\r\n 	<li>拓展性；</li>\r\n 	<li>排序保证（比如做成单进程单线程单进单出）；</li>\r\n</ul>\r\n<h3>1.3 队列介质</h3>\r\n实现消息队列的方式有很多，这里介绍三种模式的实现：\r\n\r\nMysql：可靠性高、易实现，速度慢\r\n\r\nRedis：速度快，单条大消息包时效率低\r\n\r\n消息系统：专业性强，可靠，学习成本高（RabbitMQ）\r\n<h3>1.4 消息处理触发机制</h3>\r\n<strong>死循环方式读取</strong>：易实现，故障时无法及时恢复（适合比如秒杀系统）\r\n\r\n<strong>定时任务</strong>：压分均分，有处理上限（要控制好进程，防止上一个任务还没完成就开始了下一个）\r\n\r\n<strong>守护进程</strong>：类似于PHP-FPM和PHP-CG，需要shell基础\r\n<h2>2. 案例</h2>\r\n<h3>2.1 解耦案例：处理订单系统和配送系统（Mysql实现）</h3>\r\n<h4>2.1.1 案例架构</h4>\r\n订单系统和配送系统是解耦的，通过MySQL队列表做队列：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/消息队列解耦案例.png\"><img class=\"size-full wp-image-1156 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/消息队列解耦案例.png\" alt=\"\" width=\"638\" height=\"274\" /></a>\r\n<h4>2.1.2 案例流程</h4>\r\n程序的大概流程：\r\n<h4><a href=\"https://files.gzpblog.com/wp/2017/07/消息队列解耦案例程序流程.png\"><img class=\"size-full wp-image-1157 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/消息队列解耦案例程序流程.png\" alt=\"\" width=\"591\" height=\"288\" /></a>2.1.3 开发流程</h4>\r\n1）创建一个示例MySQL队列表：\r\n\r\n[sql]CREATE TABLE `order_queue`(\r\n    `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT `id号`,\r\n    `order_id` int(11) NOT NULL,\r\n    `mobile` varchar(20) NOT NULL COMMENT `用户的手机号`,\r\n    `address` varchar(100) NOT NULL COMMENT `用户的地址`,\r\n    `created_at` datetime NOT NULL DEFAULT `0000-00-00 00:00:00` COMMENT `订单创建时间`,\r\n    `updated_at` datetime NOT NULL DEFAULT `0000-00-00 00:00:00` COMMENT `处理完成时间`,\r\n    `status` tinyint(2) NOT NULL COMMENT `当前状态, 0未处理, 1已处理, 2处理中`,\r\n    PRIMARY KEY(`id`)\r\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;[/sql]\r\n\r\n\r\n2）接受用户订单order.php\r\n\r\n[php]&lt;?php\r\ninclude \'../include/db.php\'; //引入一个DB类用来操作数据库\r\n\r\nif (!empty($_GET[\'mobile\'])) {\r\n    // 订单处理流程\r\n    // ......\r\n    // 过滤从用户获取的数据\r\n\r\n    $order_id = rand (10000, 99999); // 示例生成订单\r\n    // 要插入的数据\r\n    $insert_data = array(\r\n        \'order_id\' =&gt; $order_id,\r\n        \'mobile\'   =&gt; $_GET[\'mobile\'],\r\n        \'created_time\' =&gt; date(\'Y-m-d H:i:s\', time()),\r\n        \'status\' =&gt; 0\r\n    );\r\n\r\n    // 插入数据\r\n    $db = DB::getIntance();\r\n    $res = $db -&gt; insert(\'order_queue\', $insert_data);\r\n    if ($res) {\r\n        echo $insert_data[\'order_id\'].&quot;保存成功&quot;;\r\n    } else {\r\n        echo \'保存失败\';\r\n    }\r\n}[/php]\r\n\r\n\r\n3）配送处理goods.php\r\n\r\n[php]&lt;?php\r\n// 配送系统处理队列中的订单并进行标记的一个文件\r\ninclude \'../include/db.php\'; //引入一个DB类用来操作数据库\r\n\r\n$db = DB::getIntance();\r\n// 1. 先把要处理的记录更新为等待处理; 这一步是为了实现一个锁的机制,防止其它程序操作数据冲突\r\n$waiting = array(\'status\' =&gt; 0);\r\n$lock = array(\'status\' =&gt; 2);\r\n$res_lock = $db-&gt;update(\'order_queue\', $lock, $waiting, 2);\r\n\r\n// 2. 选择出刚刚更新的这些数据, 然后进行配送系统的处理\r\nif ($res_lock) {\r\n    $res = $db-&gt;selectAll(\'order_queue\', $lock);\r\n\r\n    // 然后由配送系统进行处理\r\n    // ......\r\n\r\n    // 3. 把这些处理过的程序更新为已完成\r\n    $success = array(\r\n        \'status\' =&gt; 1,\r\n        \'update_time\' =&gt; date(\'Y-m-d H:i:s\'),\r\n    );\r\n    $res_last = $db-&gt;update(\'order_queue\', $success, $lock);\r\n    if ($res_last) {\r\n        echo \'success:\'.$res_last;\r\n    } else {\r\n        echo \'Fail:\'.$res_last;\r\n    }\r\n} else {\r\n    echo \'All Finished!\';\r\n}\r\n[/php]\r\n\r\n\r\n4）定时脚本good.sh\r\n\r\n[code]#!/bin/bash\r\n\r\ndate &quot;+%G-%m-%d %H:$M:S&quot;\r\ncd /home/path/to/queue_demo/\r\nphp goods.php[/code]\r\n\r\n5）设置corntab定时任务\r\n\r\n设定为每一分钟执行goods.sh一次并记录到log.log中：\r\n\r\n*/1 * * * * /home/path/to/queue_demo/goods.sh &gt;&gt; /home/path/to/queue_demo/log.log 2&gt;&amp;1\r\n\r\n创建log文件：\r\n\r\ntouch /home/path/to/queue_demo/log.log\r\n\r\n6）运行，测试\r\n\r\n调用order.php接收用户的订单信息；查看mysql表中是否插入数据；\r\n\r\n定时任务已执行，查看数据status是否改变；\r\n\r\n进行测试时，实时查看log文件：\r\n\r\ntail -f log.log\r\n<h3>2.2 流量削峰案例：通过 Redis 的 List 类型实现秒杀</h3>\r\n<h4>2.2.1 了解 Redis 的 list 类型数据</h4>\r\nRedis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。一个列表最多可以包含 4294967295 个元素 (每个列表超过40亿个元素)。\r\n\r\n常用命令：\r\n<ul>\r\n 	<li>LPUSH/LPUSHX：将值插入到（/存在的）列表头部</li>\r\n 	<li>RPUSH/RPUSHX：将值插入到（/存在的）列表尾部</li>\r\n 	<li>LPOP：移出并获取列表的第一个元素</li>\r\n 	<li>RPOP：移出并获取列表的最后一个元素</li>\r\n 	<li>LTRIM：保留指定区间内的元素</li>\r\n 	<li>LLEN：获取列表长度</li>\r\n 	<li>LSET：通过索引设置列表元素的值</li>\r\n 	<li>LINDEX：通过索引获取列表中的元素</li>\r\n 	<li>LRANGE：获取列表指定范围的元素</li>\r\n</ul>\r\n<h4>2.2.2 案例架构</h4>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/秒杀案例架构设计.png\"><img class=\"size-full wp-image-1152 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/秒杀案例架构设计.png\" alt=\"\" width=\"495\" height=\"203\" /></a>\r\n<h4>2.2.3 代码设计</h4>\r\n<ul>\r\n 	<li>秒杀程序把请求写入Redis。（Uid，time_stamp）</li>\r\n 	<li>检查Redis已存放数据的长度，超出上限直接丢弃。（比如秒杀限制为100个，超过100个的数据直接丢弃返回秒杀已结束）</li>\r\n 	<li>死循环处理存入Redis的数据库并入库。</li>\r\n</ul>\r\n<h4>2.2.4 开发流程</h4>\r\n1）创建一个示例MySQL秒杀表：\r\n\r\n[sql]CREATE TABLE `redis_queue`(\r\n    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,\r\n    `uid` int(11) NOT NULL DEFAULT `0`,\r\n    `time_stamp` varchar(24) NOT NULL,    \r\n    PRIMARY KEY(`id`)\r\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;[/sql]\r\n\r\n2）接收用户请求的user.php\r\n\r\n[php]&lt;?php\r\n// 加载redis组件\r\n$redis = new Redis();\r\n$redis -&gt; connect(\'127.0.0.1\', 6379);\r\n$redis_name = \'miaosha\';\r\n\r\n// 接收用户的id\r\n$uid = $_GET[\'uid\'];\r\n// 获取一下redis里面已有的数量\r\n$num = $redis-&gt;lLen($redis_name);\r\n// 如果当天人数少于10的时候,则加入这个队列\r\nif ($num &lt; 10) {\r\n    $redis-&gt;rPush($redis_name, $uid.\'%\'.microtime());\r\n    echo $uid.\'秒杀成功\';\r\n} else{\r\n    // 如果当天人数已经达到了10个人,则返回秒杀已完成\r\n    echo \'秒杀已结束\';\r\n}\r\n\r\n$redis-&gt;close();[/php]\r\n\r\n3）处理队列的入库程序\r\n\r\n[php]&lt;?php\r\ninclude \'../include/db.php\';\r\n\r\n// 加载redis组件\r\n$redis = new Redis();\r\n$redis -&gt; connect(\'127.0.0.1\', 6379);\r\n$redis_name = \'miaosha\';\r\n$db= DB::getIntance();\r\n\r\n// 死循环\r\nwhile (1) {\r\n    // 从队列最左取出一个值来\r\n    $user = $redis-&gt;lPop($redis_name);\r\n    // 然后判断这个值是否存在\r\n    if (!$user || $user==\'nil\') {\r\n        sleep(2);\r\n        continue;\r\n    }\r\n    // 切割出时间\r\n    $user_arr = explode(\'%\', $user);\r\n    $insert_data = array(\r\n        \'uid\' =&gt; $user_arr[0],\r\n        \'time_stamp\' =&gt; $user_arr[1], \r\n        );\r\n    // 保存到数据库中\r\n    $res = $db-&gt;insert(\'redis_queue\', $insert_data);\r\n    // 数据库插入失败的时候的回滚机制\r\n    if (!$res) {\r\n        $redis-&gt;rPush($redis_name, $user);\r\n    }\r\n    sleep(2);\r\n}\r\n//释放redis\r\n$redis -&gt; close();\r\n[/php]\r\n\r\n<h2>3. 其它消息系统</h2>\r\n<h3>3.1 RabbitMQ</h3>\r\n<h4>3.1.1 关于RabbitMQ</h4>\r\n官网：<a href=\"http://www.rabbitmq.com/\" target=\"_blank\" rel=\"noopener noreferrer\">RabbitMQ</a>\r\n文档：<a href=\"http://www.rabbitmq.com/documentation.html\" target=\"_blank\" rel=\"noopener noreferrer\">RabbitMQ Documentation</a>\r\n<h4>3.1.2 RabbitMQ架构和原理</h4>\r\nRabbitMQ完整的实现了AMQP、集群简化、持久化、跨平台。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/RabbitMQ架构和原理.png\"><img class=\" wp-image-1153 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/RabbitMQ架构和原理.png\" alt=\"\" width=\"529\" height=\"344\" /></a>\r\n<h4>3.1.3 RabbitMQ使用</h4>\r\n1） 安装RabbitMQ（rabbitmq-server、php-amqplib）\r\n\r\n2）生产者向消息通道发送消息\r\n\r\n3）消费者处理消息\r\n<h4>3.1.4 工作队列模式</h4>\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/RabbitMQ-work-queues.png\"><img class=\"size-full wp-image-1154 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/RabbitMQ-work-queues.png\" alt=\"\" width=\"332\" height=\"111\" /></a>\r\n\r\n更多模式参考：<a href=\"http://previous.rabbitmq.com/v3_5_7/getstarted.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://previous.rabbitmq.com/v3_5_7/getstarted.html</a>', '消息队列及PHP中的简单实现与应用', '', 'inherit', 'closed', 'closed', '', '1151-revision-v1', '', '', '2017-07-18 12:00:44', '2017-07-18 04:00:44', '', 1151, 'https://www.gzpblog.com/20170718/1160.html', 0, 'revision', '', 0),
(1161, 1, '2017-07-18 15:03:26', '2017-07-18 07:03:26', '<blockquote>PSR标准规范不是官方的规范，意味着不是所有的PHP程序都会遵循这个规范，有可能你接手的项目，或者你自己开始写一个项目，不会用到PSR规范。但是PSR规范提供了一个标准参考，能大大提高我们的工作效率。</blockquote>\r\n<h3>1. 什么是 PSR ?</h3>\r\nPSR 是 PHP Standard Recommendations 的简写，由 PHP FIG 组织制定的 PHP 规范，是 PHP 开发的实践标准。\r\n\r\nPHP FIG，FIG 是 Framework Interoperability Group（框架可互用性小组）的缩写，由几位开源框架的开发者成立于 2009 年，从那开始也选取了很多其他成员进来，虽然不是「官方」组织，但也代表了大部分的 PHP 社区。\r\n\r\n项目的目的在于：通过框架作者或者框架的代表之间讨论，以最低程度的限制，制定一个协作标准，各个框架遵循统一的编码规范，避免各家自行发展的风格阻碍了 PHP 的发展，解决这个程序设计师由来已久的困扰。\r\n\r\n目前已表决通过了 8 套标准，已经得到大部分 PHP 框架的支持和认可。\r\n<h3>2. FIG 成员</h3>\r\n官方列表中的成员可以在这里看到：<a href=\"http://www.php-fig.org/members/\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.php-fig.org/members/</a>；许多PHP比较流行的框架，不乏一些现代化的项目也都加入到了其中。\r\n\r\n比较有名的有<a href=\"http://cakephp.org/\">CakePHP</a>、<a href=\"http://getcomposer.org/\">Composer</a>、<a href=\"http://drupal.org\">Drupal</a>、<a href=\"http://www.joomla.org/\">Joomla</a>、<a href=\"http://magento.com/\">Magento</a>、<a href=\"http://pear.php.net/\">PEAR</a>、<a href=\"http://www.phalconphp.com/\">Phalcon</a>、<a href=\"http://reactphp.org/\">ReactPHP</a>、<a href=\"http://www.slimframework.com\">Slim</a>、<a href=\"http://www.symfony.com/\">Symfony</a>、<a href=\"http://www.yiiframework.com/\">Yii framework</a>、<a href=\"http://framework.zend.com/\">Zend Framework 2</a>等都在这份官方列表中。\r\n\r\n很多框架虽然不在这份名单中，但是也引入了 PSR 的一些标准，像现在非常热门的Laravel，以及国内重度使用的Thinkphp5等。\r\n<h3>3. PSR 标准</h3>\r\n目前已通过的标准规范（2017/6/15）：\r\n<table style=\"height: 194px;\" border=\"1\" width=\"886\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td>序号</td>\r\n<td>标题</td>\r\n<td>撰稿者</td>\r\n<td>协调者</td>\r\n<td>发起人</td>\r\n</tr>\r\n<tr>\r\n<td>1</td>\r\n<td><a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">基础编码规范</a></td>\r\n<td>Paul M. Jones</td>\r\n<td>N/A</td>\r\n<td>N/A</td>\r\n</tr>\r\n<tr>\r\n<td>2</td>\r\n<td><a href=\"https://www.gzpblog.com/20170620/1034.html\" target=\"_blank\" rel=\"noopener noreferrer\">编码风格规范</a></td>\r\n<td>Paul M. Jones</td>\r\n<td>N/A</td>\r\n<td>N/A</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td><a href=\"https://www.gzpblog.com/20170707/1133.html\" target=\"_blank\" rel=\"noopener noreferrer\">日志接口规范</a></td>\r\n<td>Jordi Boggiano</td>\r\n<td>N/A</td>\r\n<td>N/A</td>\r\n</tr>\r\n<tr>\r\n<td>4</td>\r\n<td><a href=\"https://www.gzpblog.com/20170711/1138.html\" target=\"_blank\" rel=\"noopener noreferrer\">自动加载规范</a></td>\r\n<td>Paul M. Jones</td>\r\n<td>Phil Sturgeon</td>\r\n<td>Larry Garfield</td>\r\n</tr>\r\n<tr>\r\n<td>6</td>\r\n<td><a href=\"https://www.gzpblog.com/20170714/1147.html\" target=\"_blank\" rel=\"noopener noreferrer\">缓存接口规范</a></td>\r\n<td>Larry Garfield</td>\r\n<td>Paul Dragoonis</td>\r\n<td>Robert Hafner</td>\r\n</tr>\r\n<tr>\r\n<td>7</td>\r\n<td>HTTP 消息接口规范</td>\r\n<td>Matthew Weier O\'Phinney</td>\r\n<td>Beau Simensen</td>\r\n<td>Paul M. Jones</td>\r\n</tr>\r\n<tr>\r\n<td>13</td>\r\n<td>超媒体链接</td>\r\n<td>Larry Garfield</td>\r\n<td>Matthew Weier O’Phinney</td>\r\n<td>Marc Alexander</td>\r\n</tr>\r\n<tr>\r\n<td>16</td>\r\n<td>缓存库通用接口</td>\r\n<td>Paul Dragoonis</td>\r\n<td>Jordi Boggiano</td>\r\n<td>Fabien Potencier</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n审核中的标准规范（2017/6/15）：\r\n<table style=\"height: 41px;\" border=\"1\" width=\"879\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td>序号</td>\r\n<td>标题</td>\r\n<td>撰稿者</td>\r\n<td>协调者</td>\r\n<td>发起人</td>\r\n</tr>\r\n<tr>\r\n<td>11</td>\r\n<td>服务容器接口</td>\r\n<td>Matthieu Napoli, David Négrier</td>\r\n<td>Matthew Weier O’Phinney</td>\r\n<td>Korvin Szanto</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n起草中的标准（2017/6/15）：\r\n<table style=\"height: 191px;\" border=\"1\" width=\"877\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td>序号</td>\r\n<td>标题</td>\r\n<td>撰稿者</td>\r\n<td>协调者</td>\r\n<td>发起人</td>\r\n</tr>\r\n<tr>\r\n<td>5</td>\r\n<td>PHPDoc 标准</td>\r\n<td>Mike van Riel</td>\r\n<td>Vacant</td>\r\n<td>Vacant</td>\r\n</tr>\r\n<tr>\r\n<td>8</td>\r\n<td>Huggable 接口</td>\r\n<td>Larry Garfield</td>\r\n<td>Vacant</td>\r\n<td>Vacant</td>\r\n</tr>\r\n<tr>\r\n<td>9</td>\r\n<td>项目安全问题公示</td>\r\n<td>Michael Hess</td>\r\n<td>Korvin Szanto</td>\r\n<td>Larry Garfield</td>\r\n</tr>\r\n<tr>\r\n<td>10</td>\r\n<td>项目安全上报方法</td>\r\n<td>Michael Hess</td>\r\n<td>Larry Garfield</td>\r\n<td>Korvin Szanto</td>\r\n</tr>\r\n<tr>\r\n<td>12</td>\r\n<td>全量编码风格规范</td>\r\n<td>Korvin Szanto</td>\r\n<td>Alexander Makarov</td>\r\n<td>Robert Deutz</td>\r\n</tr>\r\n<tr>\r\n<td>14</td>\r\n<td>事件管理</td>\r\n<td>Chuck Reeves</td>\r\n<td>Brian Retterer</td>\r\n<td>Roman Tsiupa</td>\r\n</tr>\r\n<tr>\r\n<td>15</td>\r\n<td>HTTP 中间件</td>\r\n<td>Woody Gilk</td>\r\n<td>Paul M Jones</td>\r\n<td>Jason Coward</td>\r\n</tr>\r\n<tr>\r\n<td>17</td>\r\n<td>HTTP 工厂标准</td>\r\n<td>Woody Gilk</td>\r\n<td>Roman Tsiupa</td>\r\n<td>Paul M Jones</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3>4. 认识RFC</h3>\r\n在PSR规范中，很多都参考了RFC文件。RFC是什么呢？\r\n\r\nRequest For Comments (RFC），是一系列以编号排定的文件。文件收集了有关因特网相关资讯，以及UNIX和因特网社群的软件文件。\r\n\r\n基本的因特网通讯协定都有在RFC文件内详细说明。RFC文件还在标准内额外加入了许多的论题，例如对于因特网新开发的协定及发展中所有的记录。因此几乎所有的因特网标准都收录在RFC文件之中。', '「PSR 规范」关于PHP标准规范', '', 'publish', 'open', 'closed', '', '%e3%80%8cpsr-%e8%a7%84%e8%8c%83%e3%80%8d%e5%85%b3%e4%ba%8ephp%e6%a0%87%e5%87%86%e8%a7%84%e8%8c%83', '', '', '2017-07-18 15:03:26', '2017-07-18 07:03:26', '', 0, 'https://www.gzpblog.com/?p=1161', 0, 'post', '', 0),
(1162, 1, '2017-07-18 14:54:04', '2017-07-18 06:54:04', '<blockquote>PSR标准规范不是官方的规范，意味着不是所有的PHP程序都会遵循这个规范，有可能你接手的项目，或者你自己开始写一个项目，不会用到PSR规范。但是PSR规范提供了一个标准参考，能大大提高我们的工作效率。</blockquote>\r\n<h3>1. 什么是 PSR ?</h3>\r\nPSR 是 PHP Standard Recommendations 的简写，由 PHP FIG 组织制定的 PHP 规范，是 PHP 开发的实践标准。\r\n\r\nPHP FIG，FIG 是 Framework Interoperability Group（框架可互用性小组）的缩写，由几位开源框架的开发者成立于 2009 年，从那开始也选取了很多其他成员进来，虽然不是「官方」组织，但也代表了大部分的 PHP 社区。\r\n\r\n项目的目的在于：通过框架作者或者框架的代表之间讨论，以最低程度的限制，制定一个协作标准，各个框架遵循统一的编码规范，避免各家自行发展的风格阻碍了 PHP 的发展，解决这个程序设计师由来已久的困扰。\r\n\r\n目前已表决通过了 8 套标准，已经得到大部分 PHP 框架的支持和认可。\r\n<h3>2. FIG 成员</h3>\r\n官方列表中的成员可以在这里看到：<a href=\"http://www.php-fig.org/members/\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.php-fig.org/members/</a>；许多PHP比较流行的框架，不乏一些现代化的项目也都加入到了其中。\r\n\r\n比较有名的有<a href=\"http://cakephp.org/\">CakePHP</a>、<a href=\"http://getcomposer.org/\">Composer</a>、<a href=\"http://drupal.org\">Drupal</a>、<a href=\"http://www.joomla.org/\">Joomla</a>、<a href=\"http://magento.com/\">Magento</a>、<a href=\"http://pear.php.net/\">PEAR</a>、<a href=\"http://www.phalconphp.com/\">Phalcon</a>、<a href=\"http://reactphp.org/\">ReactPHP</a>、<a href=\"http://www.slimframework.com\">Slim</a>、<a href=\"http://www.symfony.com/\">Symfony</a>、<a href=\"http://www.yiiframework.com/\">Yii framework</a>、<a href=\"http://framework.zend.com/\">Zend Framework 2</a>等都在这份官方列表中。\r\n\r\n很多框架虽然不在这份名单中，但是也引入了 PSR 的一些标准，像现在非常热门的Laravel，以及国内重度使用的Thinkphp5等。\r\n<h3>3. PSR 标准</h3>\r\n目前已通过的标准规范（2017/6/15）：\r\n<table style=\"height: 194px;\" border=\"1\" width=\"886\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td>序号</td>\r\n<td>标题</td>\r\n<td>撰稿者</td>\r\n<td>协调者</td>\r\n<td>发起人</td>\r\n</tr>\r\n<tr>\r\n<td>1</td>\r\n<td>基础编码规范</td>\r\n<td>Paul M. Jones</td>\r\n<td>N/A</td>\r\n<td>N/A</td>\r\n</tr>\r\n<tr>\r\n<td>2</td>\r\n<td>编码风格规范</td>\r\n<td>Paul M. Jones</td>\r\n<td>N/A</td>\r\n<td>N/A</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td>日志接口规范</td>\r\n<td>Jordi Boggiano</td>\r\n<td>N/A</td>\r\n<td>N/A</td>\r\n</tr>\r\n<tr>\r\n<td>4</td>\r\n<td>自动加载规范</td>\r\n<td>Paul M. Jones</td>\r\n<td>Phil Sturgeon</td>\r\n<td>Larry Garfield</td>\r\n</tr>\r\n<tr>\r\n<td>6</td>\r\n<td>缓存接口规范</td>\r\n<td>Larry Garfield</td>\r\n<td>Paul Dragoonis</td>\r\n<td>Robert Hafner</td>\r\n</tr>\r\n<tr>\r\n<td>7</td>\r\n<td>HTTP 消息接口规范</td>\r\n<td>Matthew Weier O\'Phinney</td>\r\n<td>Beau Simensen</td>\r\n<td>Paul M. Jones</td>\r\n</tr>\r\n<tr>\r\n<td>13</td>\r\n<td>超媒体链接</td>\r\n<td>Larry Garfield</td>\r\n<td>Matthew Weier O’Phinney</td>\r\n<td>Marc Alexander</td>\r\n</tr>\r\n<tr>\r\n<td>16</td>\r\n<td>缓存库通用接口</td>\r\n<td>Paul Dragoonis</td>\r\n<td>Jordi Boggiano</td>\r\n<td>Fabien Potencier</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n审核中的标准规范（2017/6/15）：\r\n<table style=\"height: 41px;\" border=\"1\" width=\"879\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td>序号</td>\r\n<td>标题</td>\r\n<td>撰稿者</td>\r\n<td>协调者</td>\r\n<td>发起人</td>\r\n</tr>\r\n<tr>\r\n<td>11</td>\r\n<td>服务容器接口</td>\r\n<td>Matthieu Napoli, David Négrier</td>\r\n<td>Matthew Weier O’Phinney</td>\r\n<td>Korvin Szanto</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n起草中的标准（2017/6/15）：\r\n<table style=\"height: 191px;\" border=\"1\" width=\"877\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td>序号</td>\r\n<td>标题</td>\r\n<td>撰稿者</td>\r\n<td>协调者</td>\r\n<td>发起人</td>\r\n</tr>\r\n<tr>\r\n<td>5</td>\r\n<td>PHPDoc 标准</td>\r\n<td>Mike van Riel</td>\r\n<td>Vacant</td>\r\n<td>Vacant</td>\r\n</tr>\r\n<tr>\r\n<td>8</td>\r\n<td>Huggable 接口</td>\r\n<td>Larry Garfield</td>\r\n<td>Vacant</td>\r\n<td>Vacant</td>\r\n</tr>\r\n<tr>\r\n<td>9</td>\r\n<td>项目安全问题公示</td>\r\n<td>Michael Hess</td>\r\n<td>Korvin Szanto</td>\r\n<td>Larry Garfield</td>\r\n</tr>\r\n<tr>\r\n<td>10</td>\r\n<td>项目安全上报方法</td>\r\n<td>Michael Hess</td>\r\n<td>Larry Garfield</td>\r\n<td>Korvin Szanto</td>\r\n</tr>\r\n<tr>\r\n<td>12</td>\r\n<td>全量编码风格规范</td>\r\n<td>Korvin Szanto</td>\r\n<td>Alexander Makarov</td>\r\n<td>Robert Deutz</td>\r\n</tr>\r\n<tr>\r\n<td>14</td>\r\n<td>事件管理</td>\r\n<td>Chuck Reeves</td>\r\n<td>Brian Retterer</td>\r\n<td>Roman Tsiupa</td>\r\n</tr>\r\n<tr>\r\n<td>15</td>\r\n<td>HTTP 中间件</td>\r\n<td>Woody Gilk</td>\r\n<td>Paul M Jones</td>\r\n<td>Jason Coward</td>\r\n</tr>\r\n<tr>\r\n<td>17</td>\r\n<td>HTTP 工厂标准</td>\r\n<td>Woody Gilk</td>\r\n<td>Roman Tsiupa</td>\r\n<td>Paul M Jones</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3>4. 认识RFC</h3>\r\n在PSR规范中，很多都参考了RFC文件。RFC是什么呢？\r\n\r\nRequest For Comments (RFC），是一系列以编号排定的文件。文件收集了有关因特网相关资讯，以及UNIX和因特网社群的软件文件。\r\n\r\n基本的因特网通讯协定都有在RFC文件内详细说明。RFC文件还在标准内额外加入了许多的论题，例如对于因特网新开发的协定及发展中所有的记录。因此几乎所有的因特网标准都收录在RFC文件之中。\r\n\r\n&nbsp;', '「PSR 规范」关于PHP标准规范', '', 'inherit', 'closed', 'closed', '', '1161-revision-v1', '', '', '2017-07-18 14:54:04', '2017-07-18 06:54:04', '', 1161, 'https://www.gzpblog.com/20170718/1162.html', 0, 'revision', '', 0),
(1163, 1, '2017-07-18 15:03:26', '2017-07-18 07:03:26', '<blockquote>PSR标准规范不是官方的规范，意味着不是所有的PHP程序都会遵循这个规范，有可能你接手的项目，或者你自己开始写一个项目，不会用到PSR规范。但是PSR规范提供了一个标准参考，能大大提高我们的工作效率。</blockquote>\r\n<h3>1. 什么是 PSR ?</h3>\r\nPSR 是 PHP Standard Recommendations 的简写，由 PHP FIG 组织制定的 PHP 规范，是 PHP 开发的实践标准。\r\n\r\nPHP FIG，FIG 是 Framework Interoperability Group（框架可互用性小组）的缩写，由几位开源框架的开发者成立于 2009 年，从那开始也选取了很多其他成员进来，虽然不是「官方」组织，但也代表了大部分的 PHP 社区。\r\n\r\n项目的目的在于：通过框架作者或者框架的代表之间讨论，以最低程度的限制，制定一个协作标准，各个框架遵循统一的编码规范，避免各家自行发展的风格阻碍了 PHP 的发展，解决这个程序设计师由来已久的困扰。\r\n\r\n目前已表决通过了 8 套标准，已经得到大部分 PHP 框架的支持和认可。\r\n<h3>2. FIG 成员</h3>\r\n官方列表中的成员可以在这里看到：<a href=\"http://www.php-fig.org/members/\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.php-fig.org/members/</a>；许多PHP比较流行的框架，不乏一些现代化的项目也都加入到了其中。\r\n\r\n比较有名的有<a href=\"http://cakephp.org/\">CakePHP</a>、<a href=\"http://getcomposer.org/\">Composer</a>、<a href=\"http://drupal.org\">Drupal</a>、<a href=\"http://www.joomla.org/\">Joomla</a>、<a href=\"http://magento.com/\">Magento</a>、<a href=\"http://pear.php.net/\">PEAR</a>、<a href=\"http://www.phalconphp.com/\">Phalcon</a>、<a href=\"http://reactphp.org/\">ReactPHP</a>、<a href=\"http://www.slimframework.com\">Slim</a>、<a href=\"http://www.symfony.com/\">Symfony</a>、<a href=\"http://www.yiiframework.com/\">Yii framework</a>、<a href=\"http://framework.zend.com/\">Zend Framework 2</a>等都在这份官方列表中。\r\n\r\n很多框架虽然不在这份名单中，但是也引入了 PSR 的一些标准，像现在非常热门的Laravel，以及国内重度使用的Thinkphp5等。\r\n<h3>3. PSR 标准</h3>\r\n目前已通过的标准规范（2017/6/15）：\r\n<table style=\"height: 194px;\" border=\"1\" width=\"886\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td>序号</td>\r\n<td>标题</td>\r\n<td>撰稿者</td>\r\n<td>协调者</td>\r\n<td>发起人</td>\r\n</tr>\r\n<tr>\r\n<td>1</td>\r\n<td><a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">基础编码规范</a></td>\r\n<td>Paul M. Jones</td>\r\n<td>N/A</td>\r\n<td>N/A</td>\r\n</tr>\r\n<tr>\r\n<td>2</td>\r\n<td><a href=\"https://www.gzpblog.com/20170620/1034.html\" target=\"_blank\" rel=\"noopener noreferrer\">编码风格规范</a></td>\r\n<td>Paul M. Jones</td>\r\n<td>N/A</td>\r\n<td>N/A</td>\r\n</tr>\r\n<tr>\r\n<td>3</td>\r\n<td><a href=\"https://www.gzpblog.com/20170707/1133.html\" target=\"_blank\" rel=\"noopener noreferrer\">日志接口规范</a></td>\r\n<td>Jordi Boggiano</td>\r\n<td>N/A</td>\r\n<td>N/A</td>\r\n</tr>\r\n<tr>\r\n<td>4</td>\r\n<td><a href=\"https://www.gzpblog.com/20170711/1138.html\" target=\"_blank\" rel=\"noopener noreferrer\">自动加载规范</a></td>\r\n<td>Paul M. Jones</td>\r\n<td>Phil Sturgeon</td>\r\n<td>Larry Garfield</td>\r\n</tr>\r\n<tr>\r\n<td>6</td>\r\n<td><a href=\"https://www.gzpblog.com/20170714/1147.html\" target=\"_blank\" rel=\"noopener noreferrer\">缓存接口规范</a></td>\r\n<td>Larry Garfield</td>\r\n<td>Paul Dragoonis</td>\r\n<td>Robert Hafner</td>\r\n</tr>\r\n<tr>\r\n<td>7</td>\r\n<td>HTTP 消息接口规范</td>\r\n<td>Matthew Weier O\'Phinney</td>\r\n<td>Beau Simensen</td>\r\n<td>Paul M. Jones</td>\r\n</tr>\r\n<tr>\r\n<td>13</td>\r\n<td>超媒体链接</td>\r\n<td>Larry Garfield</td>\r\n<td>Matthew Weier O’Phinney</td>\r\n<td>Marc Alexander</td>\r\n</tr>\r\n<tr>\r\n<td>16</td>\r\n<td>缓存库通用接口</td>\r\n<td>Paul Dragoonis</td>\r\n<td>Jordi Boggiano</td>\r\n<td>Fabien Potencier</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n审核中的标准规范（2017/6/15）：\r\n<table style=\"height: 41px;\" border=\"1\" width=\"879\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td>序号</td>\r\n<td>标题</td>\r\n<td>撰稿者</td>\r\n<td>协调者</td>\r\n<td>发起人</td>\r\n</tr>\r\n<tr>\r\n<td>11</td>\r\n<td>服务容器接口</td>\r\n<td>Matthieu Napoli, David Négrier</td>\r\n<td>Matthew Weier O’Phinney</td>\r\n<td>Korvin Szanto</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n起草中的标准（2017/6/15）：\r\n<table style=\"height: 191px;\" border=\"1\" width=\"877\" cellspacing=\"0\" cellpadding=\"0\">\r\n<tbody>\r\n<tr>\r\n<td>序号</td>\r\n<td>标题</td>\r\n<td>撰稿者</td>\r\n<td>协调者</td>\r\n<td>发起人</td>\r\n</tr>\r\n<tr>\r\n<td>5</td>\r\n<td>PHPDoc 标准</td>\r\n<td>Mike van Riel</td>\r\n<td>Vacant</td>\r\n<td>Vacant</td>\r\n</tr>\r\n<tr>\r\n<td>8</td>\r\n<td>Huggable 接口</td>\r\n<td>Larry Garfield</td>\r\n<td>Vacant</td>\r\n<td>Vacant</td>\r\n</tr>\r\n<tr>\r\n<td>9</td>\r\n<td>项目安全问题公示</td>\r\n<td>Michael Hess</td>\r\n<td>Korvin Szanto</td>\r\n<td>Larry Garfield</td>\r\n</tr>\r\n<tr>\r\n<td>10</td>\r\n<td>项目安全上报方法</td>\r\n<td>Michael Hess</td>\r\n<td>Larry Garfield</td>\r\n<td>Korvin Szanto</td>\r\n</tr>\r\n<tr>\r\n<td>12</td>\r\n<td>全量编码风格规范</td>\r\n<td>Korvin Szanto</td>\r\n<td>Alexander Makarov</td>\r\n<td>Robert Deutz</td>\r\n</tr>\r\n<tr>\r\n<td>14</td>\r\n<td>事件管理</td>\r\n<td>Chuck Reeves</td>\r\n<td>Brian Retterer</td>\r\n<td>Roman Tsiupa</td>\r\n</tr>\r\n<tr>\r\n<td>15</td>\r\n<td>HTTP 中间件</td>\r\n<td>Woody Gilk</td>\r\n<td>Paul M Jones</td>\r\n<td>Jason Coward</td>\r\n</tr>\r\n<tr>\r\n<td>17</td>\r\n<td>HTTP 工厂标准</td>\r\n<td>Woody Gilk</td>\r\n<td>Roman Tsiupa</td>\r\n<td>Paul M Jones</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3>4. 认识RFC</h3>\r\n在PSR规范中，很多都参考了RFC文件。RFC是什么呢？\r\n\r\nRequest For Comments (RFC），是一系列以编号排定的文件。文件收集了有关因特网相关资讯，以及UNIX和因特网社群的软件文件。\r\n\r\n基本的因特网通讯协定都有在RFC文件内详细说明。RFC文件还在标准内额外加入了许多的论题，例如对于因特网新开发的协定及发展中所有的记录。因此几乎所有的因特网标准都收录在RFC文件之中。', '「PSR 规范」关于PHP标准规范', '', 'inherit', 'closed', 'closed', '', '1161-revision-v1', '', '', '2017-07-18 15:03:26', '2017-07-18 07:03:26', '', 1161, 'https://www.gzpblog.com/20170718/1163.html', 0, 'revision', '', 0),
(1164, 1, '2017-07-18 15:35:51', '2017-07-18 07:35:51', '<h2>PHP</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170718/1161.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」关于PHP标准规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-1 基础编码规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170620/1034.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-2 编码风格规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170707/1133.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-3 日志接口规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170711/1138.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-4 自动加载规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170714/1147.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-6 缓存接口规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170713/1141.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP正则表达式</a>\r\n<h3>应用</h3>\r\n<a href=\"https://www.gzpblog.com/20170718/1151.html\" target=\"_blank\" rel=\"noopener noreferrer\">消息队列及PHP中的简单实现与应用</a>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20160421/26.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPExcel：PHP导出Excel文件</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1041.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPMailer：PHP的邮件发送类库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1045.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code：生成二维码</a>\r\n<h3>Thinkphp</h3>\r\n<a href=\"https://www.gzpblog.com/20161230/561.html\" target=\"_blank\" rel=\"noopener noreferrer\">基于Thinkphp5的cURL封装类</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170330/850.html\" target=\"_blank\" rel=\"noopener noreferrer\">阿里云Oss+Thinkphp5，Web一站式可拓展包</a>\r\n\r\n&nbsp;\r\n<h2>Javascript</h2>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20170622/1053.html\" target=\"_blank\" rel=\"noopener noreferrer\">QRCode.js：基于JQuery的生成二维码JS库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170623/1059.html\" target=\"_blank\" rel=\"noopener noreferrer\">PACE：页面自动加载进度插件</a>\r\n\r\n&nbsp;\r\n<h2>前端综合</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170623/1062.html\" target=\"_blank\" rel=\"noopener noreferrer\">客户端实现WebSocket</a>\r\n\r\n&nbsp;\r\n<h2>工具</h2>\r\n<h3>版本控制</h3>\r\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\r\n<h3>代码管理</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\r\n<h3>测试相关</h3>\r\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170627/1081.html\" target=\"_blank\" rel=\"noopener noreferrer\">Wireshark基础用法：用Wireshark抓包分析网络通讯</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170629/1104.html\" target=\"_blank\" rel=\"noopener noreferrer\">用 Fiddler 进行HTTP请求调试</a>\r\n<h3>其它</h3>\r\n<a href=\"https://www.gzpblog.com/20170607/1000.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Gitbook编写书籍文档</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-revision-v1', '', '', '2017-07-18 15:35:51', '2017-07-18 07:35:51', '', 978, 'https://www.gzpblog.com/20170718/1164.html', 0, 'revision', '', 0),
(1165, 1, '2017-07-20 14:15:04', '2017-07-20 06:15:04', '<h2>PHP</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170718/1161.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」关于PHP标准规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-1 基础编码规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170620/1034.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-2 编码风格规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170707/1133.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-3 日志接口规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170711/1138.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-4 自动加载规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170714/1147.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-6 缓存接口规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170713/1141.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP正则表达式</a>\r\n<h3>应用</h3>\r\n<a href=\"https://www.gzpblog.com/20170718/1151.html\" target=\"_blank\" rel=\"noopener noreferrer\">消息队列及PHP中的简单实现与应用</a>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20160421/26.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPExcel：PHP导出Excel文件</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1041.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPMailer：PHP的邮件发送类库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1045.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code：生成二维码</a>\r\n<h3>Thinkphp</h3>\r\n<a href=\"https://www.gzpblog.com/20161230/561.html\" target=\"_blank\" rel=\"noopener noreferrer\">基于Thinkphp5的cURL封装类</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170330/850.html\" target=\"_blank\" rel=\"noopener noreferrer\">阿里云Oss+Thinkphp5，Web一站式可拓展包</a>\r\n\r\n&nbsp;\r\n<h2>Javascript</h2>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20170622/1053.html\" target=\"_blank\" rel=\"noopener noreferrer\">QRCode.js：基于JQuery的生成二维码JS库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170623/1059.html\" target=\"_blank\" rel=\"noopener noreferrer\">PACE：页面自动加载进度插件</a>\r\n\r\n&nbsp;\r\n<h2>前端综合</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170623/1062.html\" target=\"_blank\" rel=\"noopener noreferrer\">客户端实现WebSocket</a>\r\n\r\n&nbsp;\r\n<h2>数据库</h2>\r\n<h3>MySQL</h3>\r\n<a href=\"https://www.gzpblog.com/20161115/503.html\" target=\"_blank\" rel=\"noopener noreferrer\">高性能MySQL——MySQL架构</a>\r\n\r\n&nbsp;\r\n<h2>工具</h2>\r\n<h3>版本控制</h3>\r\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\r\n<h3>代码管理</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\r\n<h3>测试相关</h3>\r\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170627/1081.html\" target=\"_blank\" rel=\"noopener noreferrer\">Wireshark基础用法：用Wireshark抓包分析网络通讯</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170629/1104.html\" target=\"_blank\" rel=\"noopener noreferrer\">用 Fiddler 进行HTTP请求调试</a>\r\n<h3>其它</h3>\r\n<a href=\"https://www.gzpblog.com/20170607/1000.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Gitbook编写书籍文档</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-revision-v1', '', '', '2017-07-20 14:15:04', '2017-07-20 06:15:04', '', 978, 'https://www.gzpblog.com/20170720/1165.html', 0, 'revision', '', 0),
(1166, 1, '2017-07-20 16:35:34', '2017-07-20 08:35:34', '<h3>1. 知识储备</h3>\r\n在开始使用workerman之前，可能需要了解这些：\r\n<ul>\r\n 	<li>网络通讯协议（HTTP、TCP等）</li>\r\n 	<li>进程和线程</li>\r\n 	<li>了解workerman是什么</li>\r\n 	<li>Linux与Windows</li>\r\n 	<li>......</li>\r\n</ul>\r\nWorkerman官方的解释：<a href=\"http://doc.workerman.net/315119\" target=\"_blank\" rel=\"noopener noreferrer\">http://doc.workerman.net/315119</a>\r\n<h3>2. Workerman vs Swoole</h3>\r\nSwoole是个好东西，拟补了PHP的很多空白，功能上也会比workerman多，C拓展方式性能也没得说，但是就是相比workerman门槛高一点（官方文档不清晰是一方面）。\r\n\r\nWorkerman纯PHP编写，文档做得很好，上手非常简单，可以快速开发功能，性能也很不错。Workerman还有一个分支项目GatewayWorker，如果项目是长连接并且需要客户端与客户端之间通讯，可以使用GatewayWorker更快速实现功能。\r\n<h3>3. 知识概览</h3>\r\nWorkerMan中有两个重要的类Worker与Connection。\r\n<h4>3.1 Worker类</h4>\r\nWorkerman中的端口监听通过Worker类实现\r\n\r\nWorker类有这么些个回调函数：\r\n<ul>\r\n 	<li>onWorkerStart Worker启动时</li>\r\n 	<li>onWorkerReload Worker收到reload信号后</li>\r\n 	<li>onConnect 建立链接时(TCP三次握手完成后)触发</li>\r\n 	<li>onMessage 客户端通过链接发来数据时(Workerman收到数据时)</li>\r\n 	<li>onClose 客户端连接与Workerman断开时</li>\r\n 	<li>onBufferFull 超过缓冲区大小限制时</li>\r\n 	<li>onBufferDrain 应用层发送缓冲区数据全部发送完毕后</li>\r\n 	<li>onError 当客户端的连接上发生错误时</li>\r\n</ul>\r\nWorker类有这么些个接口：\r\n<ul>\r\n 	<li>runAll 运行所有Worker实例</li>\r\n 	<li>stopAll 停止当前进程（子进程）的所有Worker实例并退出</li>\r\n 	<li>listen 用于实例化Worker后执行监听</li>\r\n</ul>\r\n<h4>3.2 Connection类</h4>\r\n每个客户端连接对应一个Connection对象。\r\n\r\nConnection类有这么些个回调函数：\r\n<ul>\r\n 	<li>onMessage 作用与Worker::$onMessage回调相同，区别是只针对当前连接有效</li>\r\n 	<li>onClose 此回调与Worker::$onClose回调作用相同，区别是只针对当前连接有效</li>\r\n 	<li>onBufferFull 作用与Worker::$onBufferFull回调相同，区别是只针对当前连接起作用</li>\r\n 	<li>onBufferDrain 作用与Worker::$onBufferDrain回调相同，区别是只针对当前连接起作用</li>\r\n 	<li>onError 作用与Worker::$onError回调相同，区别是只针对当前连接起作用</li>\r\n</ul>\r\nConnection类有这么些个接口：\r\n<ul>\r\n 	<li>send 向客户端发送数据</li>\r\n 	<li>getRemoteIp 获得该连接的客户端ip</li>\r\n 	<li>getRemotePort 获得该连接的客户端端口</li>\r\n 	<li>close 全的关闭连接</li>\r\n 	<li>destroy 立刻关闭连接</li>\r\n 	<li>pauseRecv 使当前连接停止接收数据</li>\r\n 	<li>resumeRecv 使当前连接继续接收数据</li>\r\n 	<li>pipe 将当前连接的数据流导入到目标连接</li>\r\n</ul>\r\n<h4>3.3 其它</h4>\r\n<ul>\r\n 	<li>AsyncTcpConnection类</li>\r\n 	<li>Timer定时器类</li>\r\n 	<li>WebServer</li>\r\n</ul>\r\n<h3>4. 开始实现</h3>\r\n<h4>4.1 确定需求</h4>\r\n首先明确需要做什么，要达到什么目的；以之前做过的一个项目为例，实现一个可以通过APP实时控制的音乐播放系统，大概是以下的模式：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/播放器架构.png\"><img class=\"size-full wp-image-1167 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/播放器架构.png\" alt=\"\" width=\"610\" height=\"383\" /></a>\r\n\r\n要做到实时推送操作指令达到控制音乐的播放，首先要接收到移动端发来的指令，然后分析，根据指令操纵H5播放器，返回结果，通知移动端。在这里，我们用了WebSocket在浏览器与Server建立了连接来操纵H5播放器，因为移动端不是我们开发，以及这是一个局域网项目，为了使项目更简单，移动端采用了HTTP接口调用的方式（这种方式，在操纵完播放器返回时，我们需要做点手脚，以及会有一定的性能损失），当然最方便最好的就是移动端跟Server建立长连接。\r\n<h4>4.2 安装准备</h4>\r\n明确了需求，确定了技术方向后，就可以开始干了。虽然workerman有windows版本，不过在windows上是阉割版没，能用Linux还是linux。\r\n\r\n安装流程：<a href=\"http://doc.workerman.net/315114\" target=\"_blank\" rel=\"noopener noreferrer\">http://doc.workerman.net/315114</a>\r\n\r\nwindows版本的说明：<a href=\"http://www.workerman.net/windows\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.workerman.net/windows</a>\r\n<h4>4.3 一个简单Server</h4>\r\n以WebSocket为例新建一个简单的Server：\r\n\r\n<strong>1）新建一个项目目录</strong>\r\n\r\n<strong>2）引入workerman（Workerman/Autoloader.php）</strong>\r\n\r\nrequire_once \'/your/path/Workerman/Autoloader.php\';\r\n\r\n<strong>3）确定协议</strong>\r\n\r\n目前WorkerMan支持HTTP、Websocket、Text文本协议(WorkerMan中自定义的一个协议，格式为文本+换行)，如果需要使用其它协议，可以参照 http://doc.workerman.net/315123协议 一章开发自己的协议。\r\n\r\n这里我们以 Websocket 协议为例。\r\n\r\n<strong>4）编写程序start_websocket.php</strong>\r\n\r\n一个简单的示例：\r\n\r\n[php]&lt;?php\r\nuse Workerman\\Worker;\r\nrequire_once __DIR__ . \'/path/to/Workerman/Autoloader.php\';\r\n\r\n// 创建一个Worker监听端口，使用websocket协议通讯\r\n$ws_worker = new Worker(\'websocket://0.0.0.0:2345\');\r\n\r\n$ws_worker-&gt;count = 1;// 进程数\r\n$ws_worker-&gt;name = \'mPlayer\';// worker名称\r\n\r\n//Worker启动后立即执行的回调函数\r\n$ws_worker-&gt;onWorkerStart = function($ws_worker)\r\n{\r\n    // ...\r\n};\r\n\r\n// 连接建立时触发\r\n$ws_worker-&gt;onConnect = function($connection)use($ws_worker)\r\n{\r\n    // 设置连接的onMessage回调\r\n    $connection-&gt;onMessage = function($connection, $data)\r\n    {\r\n        $connection-&gt;send(\'receive success\');\r\n    };\r\n    // ...\r\n};\r\n\r\n// 当收到客户端发来的数据时\r\n$ws_worker-&gt;onMessage = function($connection, $data)\r\n{\r\n    $connection-&gt;send(\'receive success\');\r\n    // ...\r\n};\r\n\r\n// 如果不是在根目录启动，则运行runAll方法\r\nif(!defined(\'GLOBAL_START\'))\r\n{\r\n    Worker::runAll();\r\n}[/php]\r\n\r\n<strong>5）运行Server</strong>\r\n\r\nLinux下：\r\n\r\n以debug（调试）方式启动：php start.php start\r\n\r\n以daemon（守护进程）方式启动：php start.php start -d\r\n\r\nWindows下：\r\n\r\ncmd命令行启动：php start_websocket.php\r\n\r\n<strong>6）进行测试</strong>\r\n\r\n进行测试，可以抓包看看请求的状况。', '用Workerman快速实现Socket服务', '', 'publish', 'open', 'closed', '', '%e7%94%a8workerman%e5%bf%ab%e9%80%9f%e5%ae%9e%e7%8e%b0socket%e6%9c%8d%e5%8a%a1', '', '', '2017-07-20 16:36:37', '2017-07-20 08:36:37', '', 0, 'https://www.gzpblog.com/?p=1166', 0, 'post', '', 0),
(1167, 1, '2017-07-20 16:30:10', '2017-07-20 08:30:10', '', '播放器架构', '', 'inherit', 'open', 'closed', '', '%e6%92%ad%e6%94%be%e5%99%a8%e6%9e%b6%e6%9e%84', '', '', '2017-07-20 16:30:10', '2017-07-20 08:30:10', '', 1166, 'https://www.gzpblog.com/wp-content/uploads/2017/07/播放器架构.png', 0, 'attachment', 'image/png', 0),
(1168, 1, '2017-07-20 16:35:34', '2017-07-20 08:35:34', '<h3>1. 知识储备</h3>\r\n在开始使用workerman之前，可能需要了解这些：\r\n<ul>\r\n 	<li>网络通讯协议（HTTP、TCP等）</li>\r\n 	<li>进程和线程</li>\r\n 	<li>了解workerman是什么</li>\r\n 	<li>Linux与Windows</li>\r\n 	<li>......</li>\r\n</ul>\r\nWorkerman官方的解释：<a href=\"http://doc.workerman.net/315119\" target=\"_blank\" rel=\"noopener noreferrer\">http://doc.workerman.net/315119</a>\r\n<h3>2. Workerman vs Swoole</h3>\r\nSwoole是个好东西，拟补了PHP的很多空白，功能上也会比workerman多，C拓展方式性能也没得说，但是就是相比workerman门槛高一点（官方文档不清晰是一方面）。\r\n\r\nWorkerman纯PHP编写，文档做得很好，上手非常简单，可以快速开发功能，性能也很不错。Workerman还有一个分支项目GatewayWorker，如果项目是长连接并且需要客户端与客户端之间通讯，可以使用GatewayWorker更快速实现功能。\r\n<h3>3. 知识概览</h3>\r\nWorkerMan中有两个重要的类Worker与Connection。\r\n<h4>3.1 Worker类</h4>\r\nWorkerman中的端口监听通过Worker类实现\r\n\r\nWorker类有这么些个回调函数：\r\n<ul>\r\n 	<li>onWorkerStart Worker启动时</li>\r\n 	<li>onWorkerReload Worker收到reload信号后</li>\r\n 	<li>onConnect 建立链接时(TCP三次握手完成后)触发</li>\r\n 	<li>onMessage 客户端通过链接发来数据时(Workerman收到数据时)</li>\r\n 	<li>onClose 客户端连接与Workerman断开时</li>\r\n 	<li>onBufferFull 超过缓冲区大小限制时</li>\r\n 	<li>onBufferDrain 应用层发送缓冲区数据全部发送完毕后</li>\r\n 	<li>onError 当客户端的连接上发生错误时</li>\r\n</ul>\r\nWorker类有这么些个接口：\r\n<ul>\r\n 	<li>runAll 运行所有Worker实例</li>\r\n 	<li>stopAll 停止当前进程（子进程）的所有Worker实例并退出</li>\r\n 	<li>listen 用于实例化Worker后执行监听</li>\r\n</ul>\r\n<h4>3.2 Connection类</h4>\r\n每个客户端连接对应一个Connection对象。\r\n\r\nConnection类有这么些个回调函数：\r\n<ul>\r\n 	<li>onMessage 作用与Worker::$onMessage回调相同，区别是只针对当前连接有效</li>\r\n 	<li>onClose 此回调与Worker::$onClose回调作用相同，区别是只针对当前连接有效</li>\r\n 	<li>onBufferFull 作用与Worker::$onBufferFull回调相同，区别是只针对当前连接起作用</li>\r\n 	<li>onBufferDrain 作用与Worker::$onBufferDrain回调相同，区别是只针对当前连接起作用</li>\r\n 	<li>onError 作用与Worker::$onError回调相同，区别是只针对当前连接起作用</li>\r\n</ul>\r\nConnection类有这么些个接口：\r\n<ul>\r\n 	<li>send 向客户端发送数据</li>\r\n 	<li>getRemoteIp 获得该连接的客户端ip</li>\r\n 	<li>getRemotePort 获得该连接的客户端端口</li>\r\n 	<li>close 全的关闭连接</li>\r\n 	<li>destroy 立刻关闭连接</li>\r\n 	<li>pauseRecv 使当前连接停止接收数据</li>\r\n 	<li>resumeRecv 使当前连接继续接收数据</li>\r\n 	<li>pipe 将当前连接的数据流导入到目标连接</li>\r\n</ul>\r\n<h4>3.3 其它</h4>\r\n<ul>\r\n 	<li>AsyncTcpConnection类</li>\r\n 	<li>Timer定时器类</li>\r\n 	<li>WebServer</li>\r\n</ul>\r\n<h3>4. 开始实现</h3>\r\n<h4>4.1 确定需求</h4>\r\n首先明确需要做什么，要达到什么目的；以之前做过的一个项目为例，实现一个可以通过APP实时控制的音乐播放系统，大概是以下的模式：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/播放器架构.png\"><img class=\"size-full wp-image-1167 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/播放器架构.png\" alt=\"\" width=\"610\" height=\"383\" /></a>\r\n\r\n要做到实时推送操作指令达到控制音乐的播放，首先要接收到移动端发来的指令，然后分析，根据指令操纵H5播放器，返回结果，通知移动端。在这里，我们用了WebSocket在浏览器与Server建立了连接来操纵H5播放器，因为移动端不是我们开发，以及这是一个局域网项目，为了使项目更简单，移动端采用了HTTP接口调用的方式（这种方式，在操纵完播放器返回时，我们需要做点手脚，以及会有一定的性能损失），当然最方便最好的就是移动端跟Server建立长连接。\r\n<h4>4.2 安装准备</h4>\r\n明确了需求，确定了技术方向后，就可以开始干了。虽然workerman有windows版本，不过在windows上是阉割版没，能用Linux还是linux。\r\n\r\n安装流程：<a href=\"http://doc.workerman.net/315114\" target=\"_blank\" rel=\"noopener noreferrer\">http://doc.workerman.net/315114</a>\r\n\r\nwindows版本的说明：<a href=\"http://www.workerman.net/windows\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.workerman.net/windows</a>\r\n<h4>4.3 一个简单Server</h4>\r\n以WebSocket为例新建一个简单的Server：\r\n\r\n<strong>1）新建一个项目目录</strong>\r\n\r\n<strong>2）引入workerman（Workerman/Autoloader.php）</strong>\r\n\r\nrequire_once \'/your/path/Workerman/Autoloader.php\';\r\n\r\n<strong>3）确定协议</strong>\r\n\r\n目前WorkerMan支持HTTP、Websocket、Text文本协议(WorkerMan中自定义的一个协议，格式为文本+换行)，如果需要使用其它协议，可以参照 http://doc.workerman.net/315123协议 一章开发自己的协议。\r\n\r\n这里我们以 Websocket 协议为例。\r\n\r\n<strong>4）编写程序start_websocket.php</strong>\r\n\r\n一个简单的示例：\r\n\r\n\r\n[php]&lt;?php\r\nuse Workerman\\Worker;\r\nrequire_once __DIR__ . \'/path/to/Workerman/Autoloader.php\';\r\n\r\n// 创建一个Worker监听端口，使用websocket协议通讯\r\n$ws_worker = new Worker(\'websocket://0.0.0.0:2345\');\r\n\r\n$ws_worker-&gt;count = 1;// 进程数\r\n$ws_worker-&gt;name = \'mPlayer\';// worker名称\r\n\r\n//Worker启动后立即执行的回调函数\r\n$ws_worker-&gt;onWorkerStart = function($ws_worker)\r\n{\r\n// ...\r\n};\r\n\r\n// 连接建立时触发\r\n$ws_worker-&gt;onConnect = function($connection)use($ws_worker)\r\n{\r\n// 设置连接的onMessage回调\r\n$connection-&gt;onMessage = function($connection, $data)\r\n{\r\n$connection-&gt;send(\'receive success\');\r\n};\r\n// ...\r\n};\r\n\r\n// 当收到客户端发来的数据时\r\n$ws_worker-&gt;onMessage = function($connection, $data)\r\n{\r\n$connection-&gt;send(\'receive success\');\r\n// ...\r\n};\r\n\r\n// 如果不是在根目录启动，则运行runAll方法\r\nif(!defined(\'GLOBAL_START\'))\r\n{\r\nWorker::runAll();\r\n}[/php]\r\n\r\n\r\n<strong>5）运行Server</strong>\r\n\r\nLinux下：\r\n\r\n以debug（调试）方式启动：php start.php start\r\n\r\n以daemon（守护进程）方式启动：php start.php start -d\r\n\r\nWindows下：\r\n\r\ncmd命令行启动：php start_websocket.php\r\n\r\n<strong>6）进行测试</strong>\r\n\r\n进行测试，可以抓包看看请求的状况。', '用Workerman快速实现Socket服务', '', 'inherit', 'closed', 'closed', '', '1166-revision-v1', '', '', '2017-07-20 16:35:34', '2017-07-20 08:35:34', '', 1166, 'https://www.gzpblog.com/20170720/1168.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1169, 1, '2017-07-20 16:36:37', '2017-07-20 08:36:37', '<h3>1. 知识储备</h3>\r\n在开始使用workerman之前，可能需要了解这些：\r\n<ul>\r\n 	<li>网络通讯协议（HTTP、TCP等）</li>\r\n 	<li>进程和线程</li>\r\n 	<li>了解workerman是什么</li>\r\n 	<li>Linux与Windows</li>\r\n 	<li>......</li>\r\n</ul>\r\nWorkerman官方的解释：<a href=\"http://doc.workerman.net/315119\" target=\"_blank\" rel=\"noopener noreferrer\">http://doc.workerman.net/315119</a>\r\n<h3>2. Workerman vs Swoole</h3>\r\nSwoole是个好东西，拟补了PHP的很多空白，功能上也会比workerman多，C拓展方式性能也没得说，但是就是相比workerman门槛高一点（官方文档不清晰是一方面）。\r\n\r\nWorkerman纯PHP编写，文档做得很好，上手非常简单，可以快速开发功能，性能也很不错。Workerman还有一个分支项目GatewayWorker，如果项目是长连接并且需要客户端与客户端之间通讯，可以使用GatewayWorker更快速实现功能。\r\n<h3>3. 知识概览</h3>\r\nWorkerMan中有两个重要的类Worker与Connection。\r\n<h4>3.1 Worker类</h4>\r\nWorkerman中的端口监听通过Worker类实现\r\n\r\nWorker类有这么些个回调函数：\r\n<ul>\r\n 	<li>onWorkerStart Worker启动时</li>\r\n 	<li>onWorkerReload Worker收到reload信号后</li>\r\n 	<li>onConnect 建立链接时(TCP三次握手完成后)触发</li>\r\n 	<li>onMessage 客户端通过链接发来数据时(Workerman收到数据时)</li>\r\n 	<li>onClose 客户端连接与Workerman断开时</li>\r\n 	<li>onBufferFull 超过缓冲区大小限制时</li>\r\n 	<li>onBufferDrain 应用层发送缓冲区数据全部发送完毕后</li>\r\n 	<li>onError 当客户端的连接上发生错误时</li>\r\n</ul>\r\nWorker类有这么些个接口：\r\n<ul>\r\n 	<li>runAll 运行所有Worker实例</li>\r\n 	<li>stopAll 停止当前进程（子进程）的所有Worker实例并退出</li>\r\n 	<li>listen 用于实例化Worker后执行监听</li>\r\n</ul>\r\n<h4>3.2 Connection类</h4>\r\n每个客户端连接对应一个Connection对象。\r\n\r\nConnection类有这么些个回调函数：\r\n<ul>\r\n 	<li>onMessage 作用与Worker::$onMessage回调相同，区别是只针对当前连接有效</li>\r\n 	<li>onClose 此回调与Worker::$onClose回调作用相同，区别是只针对当前连接有效</li>\r\n 	<li>onBufferFull 作用与Worker::$onBufferFull回调相同，区别是只针对当前连接起作用</li>\r\n 	<li>onBufferDrain 作用与Worker::$onBufferDrain回调相同，区别是只针对当前连接起作用</li>\r\n 	<li>onError 作用与Worker::$onError回调相同，区别是只针对当前连接起作用</li>\r\n</ul>\r\nConnection类有这么些个接口：\r\n<ul>\r\n 	<li>send 向客户端发送数据</li>\r\n 	<li>getRemoteIp 获得该连接的客户端ip</li>\r\n 	<li>getRemotePort 获得该连接的客户端端口</li>\r\n 	<li>close 全的关闭连接</li>\r\n 	<li>destroy 立刻关闭连接</li>\r\n 	<li>pauseRecv 使当前连接停止接收数据</li>\r\n 	<li>resumeRecv 使当前连接继续接收数据</li>\r\n 	<li>pipe 将当前连接的数据流导入到目标连接</li>\r\n</ul>\r\n<h4>3.3 其它</h4>\r\n<ul>\r\n 	<li>AsyncTcpConnection类</li>\r\n 	<li>Timer定时器类</li>\r\n 	<li>WebServer</li>\r\n</ul>\r\n<h3>4. 开始实现</h3>\r\n<h4>4.1 确定需求</h4>\r\n首先明确需要做什么，要达到什么目的；以之前做过的一个项目为例，实现一个可以通过APP实时控制的音乐播放系统，大概是以下的模式：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/07/播放器架构.png\"><img class=\"size-full wp-image-1167 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/07/播放器架构.png\" alt=\"\" width=\"610\" height=\"383\" /></a>\r\n\r\n要做到实时推送操作指令达到控制音乐的播放，首先要接收到移动端发来的指令，然后分析，根据指令操纵H5播放器，返回结果，通知移动端。在这里，我们用了WebSocket在浏览器与Server建立了连接来操纵H5播放器，因为移动端不是我们开发，以及这是一个局域网项目，为了使项目更简单，移动端采用了HTTP接口调用的方式（这种方式，在操纵完播放器返回时，我们需要做点手脚，以及会有一定的性能损失），当然最方便最好的就是移动端跟Server建立长连接。\r\n<h4>4.2 安装准备</h4>\r\n明确了需求，确定了技术方向后，就可以开始干了。虽然workerman有windows版本，不过在windows上是阉割版没，能用Linux还是linux。\r\n\r\n安装流程：<a href=\"http://doc.workerman.net/315114\" target=\"_blank\" rel=\"noopener noreferrer\">http://doc.workerman.net/315114</a>\r\n\r\nwindows版本的说明：<a href=\"http://www.workerman.net/windows\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.workerman.net/windows</a>\r\n<h4>4.3 一个简单Server</h4>\r\n以WebSocket为例新建一个简单的Server：\r\n\r\n<strong>1）新建一个项目目录</strong>\r\n\r\n<strong>2）引入workerman（Workerman/Autoloader.php）</strong>\r\n\r\nrequire_once \'/your/path/Workerman/Autoloader.php\';\r\n\r\n<strong>3）确定协议</strong>\r\n\r\n目前WorkerMan支持HTTP、Websocket、Text文本协议(WorkerMan中自定义的一个协议，格式为文本+换行)，如果需要使用其它协议，可以参照 http://doc.workerman.net/315123协议 一章开发自己的协议。\r\n\r\n这里我们以 Websocket 协议为例。\r\n\r\n<strong>4）编写程序start_websocket.php</strong>\r\n\r\n一个简单的示例：\r\n\r\n[php]&lt;?php\r\nuse Workerman\\Worker;\r\nrequire_once __DIR__ . \'/path/to/Workerman/Autoloader.php\';\r\n\r\n// 创建一个Worker监听端口，使用websocket协议通讯\r\n$ws_worker = new Worker(\'websocket://0.0.0.0:2345\');\r\n\r\n$ws_worker-&gt;count = 1;// 进程数\r\n$ws_worker-&gt;name = \'mPlayer\';// worker名称\r\n\r\n//Worker启动后立即执行的回调函数\r\n$ws_worker-&gt;onWorkerStart = function($ws_worker)\r\n{\r\n    // ...\r\n};\r\n\r\n// 连接建立时触发\r\n$ws_worker-&gt;onConnect = function($connection)use($ws_worker)\r\n{\r\n    // 设置连接的onMessage回调\r\n    $connection-&gt;onMessage = function($connection, $data)\r\n    {\r\n        $connection-&gt;send(\'receive success\');\r\n    };\r\n    // ...\r\n};\r\n\r\n// 当收到客户端发来的数据时\r\n$ws_worker-&gt;onMessage = function($connection, $data)\r\n{\r\n    $connection-&gt;send(\'receive success\');\r\n    // ...\r\n};\r\n\r\n// 如果不是在根目录启动，则运行runAll方法\r\nif(!defined(\'GLOBAL_START\'))\r\n{\r\n    Worker::runAll();\r\n}[/php]\r\n\r\n<strong>5）运行Server</strong>\r\n\r\nLinux下：\r\n\r\n以debug（调试）方式启动：php start.php start\r\n\r\n以daemon（守护进程）方式启动：php start.php start -d\r\n\r\nWindows下：\r\n\r\ncmd命令行启动：php start_websocket.php\r\n\r\n<strong>6）进行测试</strong>\r\n\r\n进行测试，可以抓包看看请求的状况。', '用Workerman快速实现Socket服务', '', 'inherit', 'closed', 'closed', '', '1166-revision-v1', '', '', '2017-07-20 16:36:37', '2017-07-20 08:36:37', '', 1166, 'https://www.gzpblog.com/20170720/1169.html', 0, 'revision', '', 0),
(1171, 1, '2017-07-20 16:40:35', '2017-07-20 08:40:35', '<h2>PHP</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170718/1161.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」关于PHP标准规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170616/1027.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-1 基础编码规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170620/1034.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-2 编码风格规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170707/1133.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-3 日志接口规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170711/1138.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-4 自动加载规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170714/1147.html\" target=\"_blank\" rel=\"noopener noreferrer\">「PSR 规范」PSR-6 缓存接口规范</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170713/1141.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP正则表达式</a>\r\n<h3>应用</h3>\r\n<a href=\"https://www.gzpblog.com/20170718/1151.html\" target=\"_blank\" rel=\"noopener noreferrer\">消息队列及PHP中的简单实现与应用</a>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20160421/26.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPExcel：PHP导出Excel文件</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1041.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHPMailer：PHP的邮件发送类库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170621/1045.html\" target=\"_blank\" rel=\"noopener noreferrer\">PHP QR Code：生成二维码</a>\r\n<h3>Thinkphp</h3>\r\n<a href=\"https://www.gzpblog.com/20161230/561.html\" target=\"_blank\" rel=\"noopener noreferrer\">基于Thinkphp5的cURL封装类</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170330/850.html\" target=\"_blank\" rel=\"noopener noreferrer\">阿里云Oss+Thinkphp5，Web一站式可拓展包</a>\r\n<h3>Workerman</h3>\r\n<a href=\"https://www.gzpblog.com/20170720/1166.html\" target=\"_blank\" rel=\"noopener noreferrer\">用Workerman快速实现Socket服务</a>\r\n\r\n&nbsp;\r\n<h2>Javascript</h2>\r\n<h3>插件和拓展</h3>\r\n<a href=\"https://www.gzpblog.com/20170622/1053.html\" target=\"_blank\" rel=\"noopener noreferrer\">QRCode.js：基于JQuery的生成二维码JS库</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170623/1059.html\" target=\"_blank\" rel=\"noopener noreferrer\">PACE：页面自动加载进度插件</a>\r\n\r\n&nbsp;\r\n<h2>前端综合</h2>\r\n<h3>基础</h3>\r\n<a href=\"https://www.gzpblog.com/20170623/1062.html\" target=\"_blank\" rel=\"noopener noreferrer\">客户端实现WebSocket</a>\r\n\r\n&nbsp;\r\n<h2>数据库</h2>\r\n<h3>MySQL</h3>\r\n<a href=\"https://www.gzpblog.com/20161115/503.html\" target=\"_blank\" rel=\"noopener noreferrer\">高性能MySQL——MySQL架构</a>\r\n\r\n&nbsp;\r\n<h2>工具</h2>\r\n<h3>版本控制</h3>\r\n<a href=\"https://www.gzpblog.com/20170413/864.html\" target=\"_blank\" rel=\"noopener noreferrer\">Git基础之从安装配置到开始工作</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170208/615.html\" target=\"_blank\" rel=\"noopener noreferrer\">常用 Git 命令清单</a>\r\n<h3>代码管理</h3>\r\n<a href=\"https://www.gzpblog.com/20161216/546.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何使用Composer</a>\r\n<h3>测试相关</h3>\r\n<a href=\"https://www.gzpblog.com/20170525/930.html\" target=\"_blank\" rel=\"noopener noreferrer\">用ab（ApacheBench）进行HTTP压力测试</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170627/1081.html\" target=\"_blank\" rel=\"noopener noreferrer\">Wireshark基础用法：用Wireshark抓包分析网络通讯</a>\r\n\r\n<a href=\"https://www.gzpblog.com/20170629/1104.html\" target=\"_blank\" rel=\"noopener noreferrer\">用 Fiddler 进行HTTP请求调试</a>\r\n<h3>其它</h3>\r\n<a href=\"https://www.gzpblog.com/20170607/1000.html\" target=\"_blank\" rel=\"noopener noreferrer\">使用Gitbook编写书籍文档</a>', '编程学习', '', 'inherit', 'closed', 'closed', '', '978-revision-v1', '', '', '2017-07-20 16:40:35', '2017-07-20 08:40:35', '', 978, 'https://www.gzpblog.com/20170720/1171.html', 0, 'revision', '', 0),
(1172, 1, '2017-07-20 16:44:18', '2017-07-20 08:44:18', ' ', '', '', 'publish', 'closed', 'closed', '', '1172', '', '', '2017-07-20 16:44:18', '2017-07-20 08:44:18', '', 70, 'https://www.gzpblog.com/?p=1172', 5, 'nav_menu_item', '', 0),
(1175, 1, '2017-07-31 16:09:22', '2017-07-31 08:09:22', '<h3>1. 什么是Guzzle？</h3>\r\nGuzzle是一个PHP的HTTP客户端，用来轻而易举地发送请求，并集成到我们的WEB服务上。\r\n<ul>\r\n 	<li>接口简单：构建查询语句、POST请求、分流上传下载大文件、使用HTTP cookies、上传JSON数据等等。</li>\r\n 	<li>发送同步或异步的请求均使用相同的接口。</li>\r\n 	<li>使用PSR-7接口来请求、响应、分流，允许你使用其他兼容的PSR-7类库与Guzzle共同开发。</li>\r\n 	<li>抽象了底层的HTTP传输，允许你改变环境以及其他的代码，如：对cURL与PHP的流或socket并非重度依赖，非阻塞事件循环。</li>\r\n 	<li>中间件系统允许你创建构成客户端行为。</li>\r\n</ul>\r\nGithub地址：<a href=\"https://github.com/guzzle/guzzle/\" target=\"_blank\" rel=\"noopener noreferrer\">guzzle/guzzle</a>\r\n\r\n官方文档：<a href=\"http://docs.guzzlephp.org/en/stable/\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/</a>\r\n\r\n中文文档：<a href=\"http://guzzle-cn.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">http://guzzle-cn.readthedocs.io/zh_CN/latest/</a>\r\n<h3>2. 安装Guzzle</h3>\r\n<h4>2.1 通过composer安装</h4>\r\n执行composer命令：\r\n\r\nphp composer.phar require guzzlehttp/guzzle\r\n\r\n引入Composer自动加载类：\r\n\r\nrequire \'vendor/autoload.php\';\r\n\r\n通过Composer更新Guzzle：\r\n\r\ncomposer.phar update\r\n<h3>3. 例子</h3>\r\n\r\n[php]$client = new \\GuzzleHttp\\Client();\r\n$res = $client-&gt;request(\'GET\', \'https://api.github.com/repos/guzzle/guzzle\');\r\necho $res-&gt;getStatusCode();\r\n// 200\r\necho $res-&gt;getHeaderLine(\'content-type\');\r\n// \'application/json; charset=utf8\'\r\necho $res-&gt;getBody();\r\n// \'{&quot;id&quot;: 1420053, &quot;name&quot;: &quot;guzzle&quot;, ...}\'\r\n\r\n// 发送一个异步请求    \r\n$request = new \\GuzzleHttp\\Psr7\\Request(\'GET\', \'http://httpbin.org\');\r\n$promise = $client-&gt;sendAsync($request)-&gt;then(function ($response) {\r\n    echo \'I completed! \' . $response-&gt;getBody();\r\n});\r\n$promise-&gt;wait();[/php]\r\n\r\n<h3>4. 发送请求</h3>\r\n<h4>4.1 创建客户端</h4>\r\n通过实例化Client类创建一个客户端：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Client;\r\n\r\n$client = new Client([\r\n    // 基URI\r\n    \'base_uri\' =&gt; \'http://httpbin.org\',\r\n    // 设置默认请求参数\r\n    \'timeout\'  =&gt; 2.0,\r\n]);[/php]\r\n\r\n<h4>4.2 发送请求</h4>\r\nClient对象的方法可以很容易的发送请求：\r\n\r\n[php]&lt;?php $response = $client-&gt;get(\'http://httpbin.org/get\');\r\n$response = $client-&gt;delete(\'http://httpbin.org/delete\');\r\n$response = $client-&gt;head(\'http://httpbin.org/get\');\r\n$response = $client-&gt;options(\'http://httpbin.org/get\');\r\n$response = $client-&gt;patch(\'http://httpbin.org/patch\');\r\n$response = $client-&gt;post(\'http://httpbin.org/post\');\r\n$response = $client-&gt;put(\'http://httpbin.org/put\');[/php]\r\n\r\n或者创建一个请求，一切就绪后再发送请求：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Psr7\\Request;\r\n\r\n$request = new Request(\'PUT\', \'http://httpbin.org/put\');\r\n$response = $client-&gt;send($request, [\'timeout\' =&gt; 2]);\r\n[/php]\r\n\r\n<h4>4.3 异步请求</h4>\r\n直接用Client提供的方法来创建异步请求：\r\n\r\n[php]&lt;?php $promise = $client-&gt;getAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;deleteAsync(\'http://httpbin.org/delete\');\r\n$promise = $client-&gt;headAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;optionsAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;patchAsync(\'http://httpbin.org/patch\');\r\n$promise = $client-&gt;postAsync(\'http://httpbin.org/post\');\r\n$promise = $client-&gt;putAsync(\'http://httpbin.org/put\');[/php]\r\n\r\n或者使用Client的 sendAsync() and requestAsync() 方法：\r\n\r\n[php]&lt;?php // 创建一个PSR-7请求对象 $headers = [\'X-Foo\' =&gt; \'Bar\'];\r\n$body = \'Hello!\';\r\n$request = new Request(\'HEAD\', \'http://httpbin.org/head\', $headers, $body);\r\n\r\n// 如果不需要进去请求实例\r\n$promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\r\n[/php]\r\n\r\n使用 then() 来调用返回值，成功使用 Psr\\Http\\Message\\ResponseInterface 处理器，否则抛出一个异常：\r\n\r\n[php]&lt;?php \r\nuse Psr\\Http\\Message\\ResponseInterface;\r\nuse GuzzleHttp\\Exception\\RequestException;\r\n\r\n$promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\r\n$promise-&gt;then(\r\n    function (ResponseInterface $res) {\r\n        echo $res-&gt;getStatusCode() . &quot;\\n&quot;;\r\n    },\r\n    function (RequestException $e) {\r\n        echo $e-&gt;getMessage() . &quot;\\n&quot;;\r\n        echo $e-&gt;getRequest()-&gt;getMethod();\r\n    }\r\n);[/php]\r\n\r\n<h4>4.4 并发请求</h4>\r\n使用Promise和异步请求来同时发送多个请求：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Client;\r\nuse GuzzleHttp\\Promise;\r\n\r\n$client = new Client([\'base_uri\' =&gt; \'http://httpbin.org/\']);\r\n\r\n// 初始化每一个非阻塞请求\r\n$promises = [\r\n    \'image\' =&gt; $client-&gt;getAsync(\'/image\'),\r\n    \'png\'   =&gt; $client-&gt;getAsync(\'/image/png\'),\r\n    \'jpeg\'  =&gt; $client-&gt;getAsync(\'/image/jpeg\'),\r\n    \'webp\'  =&gt; $client-&gt;getAsync(\'/image/webp\')\r\n];\r\n\r\n// 等待请求完成\r\n$results = Promise\\unwrap($promises);\r\n\r\n// 通过键名接收每一个结果\r\n// function.\r\necho $results[\'image\']-&gt;getHeader(\'Content-Length\');\r\necho $results[\'png\']-&gt;getHeader(\'Content-Length\');[/php]\r\n\r\n当你想发送不确定数量的请求时，可以使用 GuzzleHttp\\Pool 对象：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Pool;\r\nuse GuzzleHttp\\Client;\r\nuse GuzzleHttp\\Psr7\\Request;\r\n\r\n$client = new Client();\r\n\r\n$requests = function ($total) {\r\n    $uri = \'http://127.0.0.1:8126/guzzle-server/perf\';\r\n    for ($i = 0; $i &lt; $total; $i++) {\r\n        yield new Request(\'GET\', $uri);\r\n    }\r\n};\r\n\r\n$pool = new Pool($client, $requests(100), [\r\n    \'concurrency\' =&gt; 5,\r\n    \'fulfilled\' =&gt; function ($response, $index) {\r\n        // 每个成功的请求\r\n    },\r\n    \'rejected\' =&gt; function ($reason, $index) {\r\n        // 每个失败的请求\r\n    },\r\n]);\r\n\r\n// 初始化传输和创建授权\r\n$promise = $pool-&gt;promise();\r\n\r\n// 等待请求池完成\r\n$promise-&gt;wait();\r\n[/php]\r\n\r\n<h3>5. 响应</h3>\r\n<h4>5.1 获取响应的状态码</h4>\r\n\r\n[php]$code = $response-&gt;getStatusCode(); // 200[/php]\r\n\r\n<h4>5.2 获取原因短语(reason phrase)</h4>\r\n\r\n[php]$reason = $response-&gt;getReasonPhrase(); // OK[/php]\r\n\r\n<h4>5.3 获取头信息(header)</h4>\r\n\r\n[php]// 检查是否存在头信息\r\nif ($response-&gt;hasHeader(\'Content-Length\')) {\r\n    echo &quot;It exists&quot;;\r\n}\r\n\r\n// 获取头信息\r\necho $response-&gt;getHeader(\'Content-Length\');\r\n\r\n// 获取所有响应头信息\r\nforeach ($response-&gt;getHeaders() as $name =&gt; $values) {\r\n    echo $name . \': \' . implode(\', \', $values) . &quot;\\r\\n&quot;;\r\n}\r\n[/php]\r\n\r\n<h4>5.4 获取响应的主体部分(body)</h4>\r\n\r\n[php]$body = $response-&gt;getBody();\r\n// 隐式转换成字符串并输出\r\necho $body;\r\n// 显示转换body成字符串\r\n$stringBody = (string) $body;\r\n// 从body中读取10字节（bytes）\r\n$tenBytes = $body-&gt;read(10);\r\n// 将正文的剩余内容作为字符串读取\r\n$remainingBytes = $body-&gt;getContents();[/php]\r\n\r\n<h3>6. 参数</h3>\r\n<h4>6.1 在请求的URI中设置查询字符串</h4>\r\n\r\n[php]$response = $client-&gt;request(\'GET\', \'http://httpbin.org?foo=bar\');[/php]\r\n\r\n<h4>6.2 使用 query 请求参数来声明查询字符串参数</h4>\r\n\r\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\r\n    \'query\' =&gt; [\'foo\' =&gt; \'bar\']\r\n]);\r\n[/php]\r\n\r\n<h4>6.3 提供一个字符串作为 query 请求参数</h4>\r\n\r\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\'query\' =&gt; \'foo=bar\']);[/php]\r\n\r\n<h3>7. 其它</h3>\r\nGuzzle还提供了一些其它有用的功能\r\n<ul>\r\n 	<li>上传数据（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data</a>）</li>\r\n 	<li>POST/表单请求（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests</a>）</li>\r\n 	<li>Cookies（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#cookies\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#cookies</a>）</li>\r\n 	<li>重定向（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#redirects\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#redirects</a>）</li>\r\n 	<li>异常（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions</a>）</li>\r\n</ul>\r\n具体的可以查看官方文档。', 'Guzzle：PHP的HTTP客户端', '', 'publish', 'open', 'closed', '', 'guzzle%ef%bc%9aphp%e7%9a%84http%e5%ae%a2%e6%88%b7%e7%ab%af', '', '', '2017-07-31 16:21:01', '2017-07-31 08:21:01', '', 0, 'https://www.gzpblog.com/?p=1175', 0, 'post', '', 0),
(1176, 1, '2017-07-31 15:56:36', '2017-07-31 07:56:36', '<h3>1. 什么是Guzzle？</h3>\r\nGuzzle是一个PHP的HTTP客户端，用来轻而易举地发送请求，并集成到我们的WEB服务上。\r\n<ul>\r\n 	<li>接口简单：构建查询语句、POST请求、分流上传下载大文件、使用HTTP cookies、上传JSON数据等等。</li>\r\n 	<li>发送同步或异步的请求均使用相同的接口。</li>\r\n 	<li>使用PSR-7接口来请求、响应、分流，允许你使用其他兼容的PSR-7类库与Guzzle共同开发。</li>\r\n 	<li>抽象了底层的HTTP传输，允许你改变环境以及其他的代码，如：对cURL与PHP的流或socket并非重度依赖，非阻塞事件循环。</li>\r\n 	<li>中间件系统允许你创建构成客户端行为。</li>\r\n</ul>\r\nGithub地址：<a href=\"https://github.com/guzzle/guzzle/\" target=\"_blank\" rel=\"noopener noreferrer\">guzzle/guzzle</a>\r\n\r\n官方文档：<a href=\"http://docs.guzzlephp.org/en/stable/\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/</a>\r\n\r\n中文文档：<a href=\"http://guzzle-cn.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">http://guzzle-cn.readthedocs.io/zh_CN/latest/</a>\r\n<h3>2. 安装Guzzle</h3>\r\n<h4>2.1 通过composer安装</h4>\r\n执行composer命令：\r\n\r\nphp composer.phar require guzzlehttp/guzzle\r\n\r\n引入Composer自动加载类：\r\n\r\nrequire \'vendor/autoload.php\';\r\n\r\n通过Composer更新Guzzle：\r\n\r\ncomposer.phar update\r\n<h3>3. 例子</h3>\r\n\r\n[php]&lt;?php\r\n$client = new \\GuzzleHttp\\Client();\r\n$res = $client-&gt;request(\'GET\', \'https://api.github.com/repos/guzzle/guzzle\');\r\necho $res-&gt;getStatusCode();\r\n// 200\r\necho $res-&gt;getHeaderLine(\'content-type\');\r\n// \'application/json; charset=utf8\'\r\necho $res-&gt;getBody();\r\n// \'{&quot;id&quot;: 1420053, &quot;name&quot;: &quot;guzzle&quot;, ...}\'\r\n\r\n// 发送一个异步请求\r\n$request = new \\GuzzleHttp\\Psr7\\Request(\'GET\', \'http://httpbin.org\');\r\n$promise = $client-&gt;sendAsync($request)-&gt;then(function ($response) {\r\necho \'I completed! \' . $response-&gt;getBody();\r\n});\r\n$promise-&gt;wait();\r\n[/php]\r\n', 'Guzzle：PHP的HTTP客户端', '', 'inherit', 'closed', 'closed', '', '1175-revision-v1', '', '', '2017-07-31 15:56:36', '2017-07-31 07:56:36', '', 1175, 'https://www.gzpblog.com/20170731/1176.html', 0, 'revision', '', 0),
(1177, 1, '2017-07-31 15:57:36', '2017-07-31 07:57:36', '<h3>1. 什么是Guzzle？</h3>\r\nGuzzle是一个PHP的HTTP客户端，用来轻而易举地发送请求，并集成到我们的WEB服务上。\r\n<ul>\r\n 	<li>接口简单：构建查询语句、POST请求、分流上传下载大文件、使用HTTP cookies、上传JSON数据等等。</li>\r\n 	<li>发送同步或异步的请求均使用相同的接口。</li>\r\n 	<li>使用PSR-7接口来请求、响应、分流，允许你使用其他兼容的PSR-7类库与Guzzle共同开发。</li>\r\n 	<li>抽象了底层的HTTP传输，允许你改变环境以及其他的代码，如：对cURL与PHP的流或socket并非重度依赖，非阻塞事件循环。</li>\r\n 	<li>中间件系统允许你创建构成客户端行为。</li>\r\n</ul>\r\nGithub地址：<a href=\"https://github.com/guzzle/guzzle/\" target=\"_blank\" rel=\"noopener noreferrer\">guzzle/guzzle</a>\r\n\r\n官方文档：<a href=\"http://docs.guzzlephp.org/en/stable/\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/</a>\r\n\r\n中文文档：<a href=\"http://guzzle-cn.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">http://guzzle-cn.readthedocs.io/zh_CN/latest/</a>\r\n<h3>2. 安装Guzzle</h3>\r\n<h4>2.1 通过composer安装</h4>\r\n执行composer命令：\r\n\r\nphp composer.phar require guzzlehttp/guzzle\r\n\r\n引入Composer自动加载类：\r\n\r\nrequire \'vendor/autoload.php\';\r\n\r\n通过Composer更新Guzzle：\r\n\r\ncomposer.phar update\r\n<h3>3. 例子</h3>\r\n\r\n[php]&lt;?php\r\n$client = new \\GuzzleHttp\\Client();\r\n$res = $client-&gt;request(\'GET\', \'https://api.github.com/repos/guzzle/guzzle\');\r\necho $res-&gt;getStatusCode();\r\n// 200\r\necho $res-&gt;getHeaderLine(\'content-type\');\r\n// \'application/json; charset=utf8\'\r\necho $res-&gt;getBody();\r\n// \'{&quot;id&quot;: 1420053, &quot;name&quot;: &quot;guzzle&quot;, ...}\'\r\n\r\n// 发送一个异步请求\r\n$request = new \\GuzzleHttp\\Psr7\\Request(\'GET\', \'http://httpbin.org\');\r\n$promise = $client-&gt;sendAsync($request)-&gt;then(function ($response) {\r\necho \'I completed! \' . $response-&gt;getBody();\r\n});\r\n$promise-&gt;wait();\r\n[/php]\r\n\r\n<h3>4. 发送请求</h3>\r\n<h4>4.1 创建客户端</h4>\r\n通过实例化Client类创建一个客户端：\r\n\r\n\r\n[php]\r\n\r\n&lt;?php\r\nuse GuzzleHttp\\Client;\r\n\r\n$client = new Client([\r\n// 基URI\r\n\'base_uri\' =&gt; \'http://httpbin.org\',\r\n// 设置默认请求参数\r\n\'timeout\'  =&gt; 2.0,\r\n]);[/php]\r\n', 'Guzzle：PHP的HTTP客户端', '', 'inherit', 'closed', 'closed', '', '1175-revision-v1', '', '', '2017-07-31 15:57:36', '2017-07-31 07:57:36', '', 1175, 'https://www.gzpblog.com/20170731/1177.html', 0, 'revision', '', 0),
(1178, 1, '2017-07-31 16:06:44', '2017-07-31 08:06:44', '<h3>1. 什么是Guzzle？</h3>\r\nGuzzle是一个PHP的HTTP客户端，用来轻而易举地发送请求，并集成到我们的WEB服务上。\r\n<ul>\r\n 	<li>接口简单：构建查询语句、POST请求、分流上传下载大文件、使用HTTP cookies、上传JSON数据等等。</li>\r\n 	<li>发送同步或异步的请求均使用相同的接口。</li>\r\n 	<li>使用PSR-7接口来请求、响应、分流，允许你使用其他兼容的PSR-7类库与Guzzle共同开发。</li>\r\n 	<li>抽象了底层的HTTP传输，允许你改变环境以及其他的代码，如：对cURL与PHP的流或socket并非重度依赖，非阻塞事件循环。</li>\r\n 	<li>中间件系统允许你创建构成客户端行为。</li>\r\n</ul>\r\nGithub地址：<a href=\"https://github.com/guzzle/guzzle/\" target=\"_blank\" rel=\"noopener noreferrer\">guzzle/guzzle</a>\r\n\r\n官方文档：<a href=\"http://docs.guzzlephp.org/en/stable/\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/</a>\r\n\r\n中文文档：<a href=\"http://guzzle-cn.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">http://guzzle-cn.readthedocs.io/zh_CN/latest/</a>\r\n<h3>2. 安装Guzzle</h3>\r\n<h4>2.1 通过composer安装</h4>\r\n执行composer命令：\r\n\r\nphp composer.phar require guzzlehttp/guzzle\r\n\r\n引入Composer自动加载类：\r\n\r\nrequire \'vendor/autoload.php\';\r\n\r\n通过Composer更新Guzzle：\r\n\r\ncomposer.phar update\r\n<h3>3. 例子</h3>\r\n\r\n[php]&lt;?php\r\n$client = new \\GuzzleHttp\\Client();\r\n$res = $client-&gt;request(\'GET\', \'https://api.github.com/repos/guzzle/guzzle\');\r\necho $res-&gt;getStatusCode();\r\n// 200\r\necho $res-&gt;getHeaderLine(\'content-type\');\r\n// \'application/json; charset=utf8\'\r\necho $res-&gt;getBody();\r\n// \'{&quot;id&quot;: 1420053, &quot;name&quot;: &quot;guzzle&quot;, ...}\'\r\n\r\n// 发送一个异步请求\r\n$request = new \\GuzzleHttp\\Psr7\\Request(\'GET\', \'http://httpbin.org\');\r\n$promise = $client-&gt;sendAsync($request)-&gt;then(function ($response) {\r\necho \'I completed! \' . $response-&gt;getBody();\r\n});\r\n$promise-&gt;wait();\r\n[/php]\r\n\r\n<h3>4. 发送请求</h3>\r\n<h4>4.1 创建客户端</h4>\r\n通过实例化Client类创建一个客户端：\r\n\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Client;\r\n\r\n$client = new Client([\r\n// 基URI\r\n\'base_uri\' =&gt; \'http://httpbin.org\',\r\n// 设置默认请求参数\r\n\'timeout\'  =&gt; 2.0,\r\n]);[/php]\r\n\r\n<h4>4.2 发送请求</h4>\r\nClient对象的方法可以很容易的发送请求：\r\n\r\n\r\n[php]&lt;?php\r\n$response = $client-&gt;get(\'http://httpbin.org/get\');\r\n$response = $client-&gt;delete(\'http://httpbin.org/delete\');\r\n$response = $client-&gt;head(\'http://httpbin.org/get\');\r\n$response = $client-&gt;options(\'http://httpbin.org/get\');\r\n$response = $client-&gt;patch(\'http://httpbin.org/patch\');\r\n$response = $client-&gt;post(\'http://httpbin.org/post\');\r\n$response = $client-&gt;put(\'http://httpbin.org/put\');[/php]\r\n\r\n\r\n或者创建一个请求，一切就绪后再发送请求：\r\n\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Psr7\\Request;\r\n\r\n$request = new Request(\'PUT\', \'http://httpbin.org/put\');\r\n$response = $client-&gt;send($request, [\'timeout\' =&gt; 2]);[/php]\r\n\r\n<h4>4.3 异步请求</h4>\r\n直接用Client提供的方法来创建异步请求：\r\n\r\n\r\n[php]&lt;?php\r\n$promise = $client-&gt;getAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;deleteAsync(\'http://httpbin.org/delete\');\r\n$promise = $client-&gt;headAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;optionsAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;patchAsync(\'http://httpbin.org/patch\');\r\n$promise = $client-&gt;postAsync(\'http://httpbin.org/post\');\r\n$promise = $client-&gt;putAsync(\'http://httpbin.org/put\');[/php]\r\n\r\n\r\n或者使用Client的 sendAsync() and requestAsync() 方法：\r\n\r\n\r\n[php]&lt;?php\r\n// 创建一个PSR-7请求对象\r\n$headers = [\'X-Foo\' =&gt; \'Bar\'];\r\n$body = \'Hello!\';\r\n$request = new Request(\'HEAD\', \'http://httpbin.org/head\', $headers, $body);\r\n\r\n// 如果不需要进去请求实例\r\n$promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\r\n使用 then() 来调用返回值，成功使用 Psr\\Http\\Message\\ResponseInterface 处理器，否则抛出一个异常：\r\n&lt;?php\r\nuse Psr\\Http\\Message\\ResponseInterface;\r\nuse GuzzleHttp\\Exception\\RequestException;\r\n\r\n$promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\r\n$promise-&gt;then(\r\nfunction (ResponseInterface $res) {\r\necho $res-&gt;getStatusCode() . &quot;\\n&quot;;\r\n},\r\nfunction (RequestException $e) {\r\necho $e-&gt;getMessage() . &quot;\\n&quot;;\r\necho $e-&gt;getRequest()-&gt;getMethod();\r\n}\r\n);[/php]\r\n\r\n<h4>4.4 并发请求</h4>\r\n使用Promise和异步请求来同时发送多个请求：\r\n\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Client;\r\nuse GuzzleHttp\\Promise;\r\n\r\n$client = new Client([\'base_uri\' =&gt; \'http://httpbin.org/\']);\r\n\r\n// 初始化每一个非阻塞请求\r\n$promises = [\r\n\'image\' =&gt; $client-&gt;getAsync(\'/image\'),\r\n\'png\'   =&gt; $client-&gt;getAsync(\'/image/png\'),\r\n\'jpeg\'  =&gt; $client-&gt;getAsync(\'/image/jpeg\'),\r\n\'webp\'  =&gt; $client-&gt;getAsync(\'/image/webp\')\r\n];\r\n\r\n// 等待请求完成\r\n$results = Promise\\unwrap($promises);\r\n\r\n// 通过键名接收每一个结果\r\n// function.\r\necho $results[\'image\']-&gt;getHeader(\'Content-Length\');\r\necho $results[\'png\']-&gt;getHeader(\'Content-Length\');[/php]\r\n\r\n\r\n当你想发送不确定数量的请求时，可以使用 GuzzleHttp\\Pool 对象：\r\n\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Pool;\r\nuse GuzzleHttp\\Client;\r\nuse GuzzleHttp\\Psr7\\Request;\r\n\r\n$client = new Client();\r\n\r\n$requests = function ($total) {\r\n$uri = \'http://127.0.0.1:8126/guzzle-server/perf\';\r\nfor ($i = 0; $i &lt; $total; $i++) {\r\nyield new Request(\'GET\', $uri);\r\n}\r\n};\r\n\r\n$pool = new Pool($client, $requests(100), [\r\n\'concurrency\' =&gt; 5,\r\n\'fulfilled\' =&gt; function ($response, $index) {\r\n// 每个成功的请求\r\n},\r\n\'rejected\' =&gt; function ($reason, $index) {\r\n// 每个失败的请求\r\n},\r\n]);\r\n\r\n// 初始化传输和创建授权\r\n$promise = $pool-&gt;promise();\r\n\r\n// 等待请求池完成\r\n$promise-&gt;wait();\r\n[/php]\r\n\r\n<h3>5. 响应</h3>\r\n<h4>5.1 获取响应的状态码</h4>\r\n\r\n[php]$code = $response-&gt;getStatusCode(); // 200[/php]\r\n\r\n<h4>5.2 获取原因短语(reason phrase)</h4>\r\n\r\n[php]$reason = $response-&gt;getReasonPhrase(); // OK[/php]\r\n\r\n<h4>5.3 获取头信息(header)</h4>\r\n\r\n[php]// 检查是否存在头信息\r\nif ($response-&gt;hasHeader(\'Content-Length\')) {\r\necho &quot;It exists&quot;;\r\n}\r\n\r\n// 获取头信息\r\necho $response-&gt;getHeader(\'Content-Length\');\r\n\r\n// 获取所有响应头信息\r\nforeach ($response-&gt;getHeaders() as $name =&gt; $values) {\r\necho $name . \': \' . implode(\', \', $values) . &quot;\\r\\n&quot;;\r\n}\r\n[/php]\r\n\r\n<h4>5.4 获取响应的主体部分(body)</h4>\r\n\r\n[php]$body = $response-&gt;getBody();\r\n// 隐式转换成字符串并输出\r\necho $body;\r\n// 显示转换body成字符串\r\n$stringBody = (string) $body;\r\n// 从body中读取10字节（bytes）\r\n$tenBytes = $body-&gt;read(10);\r\n// 将正文的剩余内容作为字符串读取\r\n$remainingBytes = $body-&gt;getContents();[/php]\r\n\r\n<h3>6. 参数</h3>\r\n<h4>6.1 在请求的URI中设置查询字符串</h4>\r\n\r\n[php]$response = $client-&gt;request(\'GET\', \'http://httpbin.org?foo=bar\');[/php]\r\n\r\n<h4>6.2 使用 query 请求参数来声明查询字符串参数</h4>\r\n\r\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\r\n\'query\' =&gt; [\'foo\' =&gt; \'bar\']\r\n]);\r\n[/php]\r\n\r\n<h4>6.3 提供一个字符串作为 query 请求参数</h4>\r\n\r\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\'query\' =&gt; \'foo=bar\']);[/php]\r\n\r\n<h3>7. 其它</h3>\r\nGuzzle还提供了一些其它有用的功能\r\n<ul>\r\n 	<li>上传数据（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data</a>）</li>\r\n 	<li>POST/表单请求（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests</a>）</li>\r\n 	<li>Cookies（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#cookies\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#cookies</a>）</li>\r\n 	<li>重定向（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#redirects\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#redirects</a>）</li>\r\n 	<li>异常（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions</a>）</li>\r\n</ul>\r\n具体的可以查看官方文档。', 'Guzzle：PHP的HTTP客户端', '', 'inherit', 'closed', 'closed', '', '1175-revision-v1', '', '', '2017-07-31 16:06:44', '2017-07-31 08:06:44', '', 1175, 'https://www.gzpblog.com/20170731/1178.html', 0, 'revision', '', 0),
(1179, 1, '2017-07-31 16:08:34', '2017-07-31 08:08:34', '<h3>1. 什么是Guzzle？</h3>\r\nGuzzle是一个PHP的HTTP客户端，用来轻而易举地发送请求，并集成到我们的WEB服务上。\r\n<ul>\r\n 	<li>接口简单：构建查询语句、POST请求、分流上传下载大文件、使用HTTP cookies、上传JSON数据等等。</li>\r\n 	<li>发送同步或异步的请求均使用相同的接口。</li>\r\n 	<li>使用PSR-7接口来请求、响应、分流，允许你使用其他兼容的PSR-7类库与Guzzle共同开发。</li>\r\n 	<li>抽象了底层的HTTP传输，允许你改变环境以及其他的代码，如：对cURL与PHP的流或socket并非重度依赖，非阻塞事件循环。</li>\r\n 	<li>中间件系统允许你创建构成客户端行为。</li>\r\n</ul>\r\nGithub地址：<a href=\"https://github.com/guzzle/guzzle/\" target=\"_blank\" rel=\"noopener noreferrer\">guzzle/guzzle</a>\r\n\r\n官方文档：<a href=\"http://docs.guzzlephp.org/en/stable/\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/</a>\r\n\r\n中文文档：<a href=\"http://guzzle-cn.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">http://guzzle-cn.readthedocs.io/zh_CN/latest/</a>\r\n<h3>2. 安装Guzzle</h3>\r\n<h4>2.1 通过composer安装</h4>\r\n执行composer命令：\r\n\r\nphp composer.phar require guzzlehttp/guzzle\r\n\r\n引入Composer自动加载类：\r\n\r\nrequire \'vendor/autoload.php\';\r\n\r\n通过Composer更新Guzzle：\r\n\r\ncomposer.phar update\r\n<h3>3. 例子</h3>\r\n\r\n[php]$client = new \\GuzzleHttp\\Client();\r\n$res = $client-&gt;request(\'GET\', \'https://api.github.com/repos/guzzle/guzzle\');\r\necho $res-&gt;getStatusCode();\r\n// 200\r\necho $res-&gt;getHeaderLine(\'content-type\');\r\n// \'application/json; charset=utf8\'\r\necho $res-&gt;getBody();\r\n// \'{&quot;id&quot;: 1420053, &quot;name&quot;: &quot;guzzle&quot;, ...}\'\r\n\r\n// 发送一个异步请求\r\n$request = new \\GuzzleHttp\\Psr7\\Request(\'GET\', \'http://httpbin.org\');\r\n$promise = $client-&gt;sendAsync($request)-&gt;then(function ($response) {\r\necho \'I completed! \' . $response-&gt;getBody();\r\n});\r\n$promise-&gt;wait();[/php]\r\n\r\n<h3>4. 发送请求</h3>\r\n<h4>4.1 创建客户端</h4>\r\n通过实例化Client类创建一个客户端：\r\n\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Client;\r\n\r\n$client = new Client([\r\n// 基URI\r\n\'base_uri\' =&gt; \'http://httpbin.org\',\r\n// 设置默认请求参数\r\n\'timeout\'  =&gt; 2.0,\r\n]);[/php]\r\n\r\n<h4>4.2 发送请求</h4>\r\nClient对象的方法可以很容易的发送请求：\r\n\r\n\r\n[php]&lt;?php\r\n$response = $client-&gt;get(\'http://httpbin.org/get\');\r\n$response = $client-&gt;delete(\'http://httpbin.org/delete\');\r\n$response = $client-&gt;head(\'http://httpbin.org/get\');\r\n$response = $client-&gt;options(\'http://httpbin.org/get\');\r\n$response = $client-&gt;patch(\'http://httpbin.org/patch\');\r\n$response = $client-&gt;post(\'http://httpbin.org/post\');\r\n$response = $client-&gt;put(\'http://httpbin.org/put\');[/php]\r\n\r\n\r\n或者创建一个请求，一切就绪后再发送请求：\r\n\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Psr7\\Request;\r\n\r\n$request = new Request(\'PUT\', \'http://httpbin.org/put\');\r\n$response = $client-&gt;send($request, [\'timeout\' =&gt; 2]);[/php]\r\n\r\n<h4>4.3 异步请求</h4>\r\n直接用Client提供的方法来创建异步请求：\r\n\r\n\r\n[php]&lt;?php\r\n$promise = $client-&gt;getAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;deleteAsync(\'http://httpbin.org/delete\');\r\n$promise = $client-&gt;headAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;optionsAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;patchAsync(\'http://httpbin.org/patch\');\r\n$promise = $client-&gt;postAsync(\'http://httpbin.org/post\');\r\n$promise = $client-&gt;putAsync(\'http://httpbin.org/put\');[/php]\r\n\r\n\r\n或者使用Client的 sendAsync() and requestAsync() 方法：\r\n\r\n\r\n[php]&lt;?php\r\n// 创建一个PSR-7请求对象\r\n$headers = [\'X-Foo\' =&gt; \'Bar\'];\r\n$body = \'Hello!\';\r\n$request = new Request(\'HEAD\', \'http://httpbin.org/head\', $headers, $body);\r\n\r\n// 如果不需要进去请求实例\r\n$promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\r\n使用 then() 来调用返回值，成功使用 Psr\\Http\\Message\\ResponseInterface 处理器，否则抛出一个异常：\r\n&lt;?php\r\nuse Psr\\Http\\Message\\ResponseInterface;\r\nuse GuzzleHttp\\Exception\\RequestException;\r\n\r\n$promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\r\n$promise-&gt;then(\r\nfunction (ResponseInterface $res) {\r\necho $res-&gt;getStatusCode() . &quot;\\n&quot;;\r\n},\r\nfunction (RequestException $e) {\r\necho $e-&gt;getMessage() . &quot;\\n&quot;;\r\necho $e-&gt;getRequest()-&gt;getMethod();\r\n}\r\n);[/php]\r\n\r\n<h4>4.4 并发请求</h4>\r\n使用Promise和异步请求来同时发送多个请求：\r\n\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Client;\r\nuse GuzzleHttp\\Promise;\r\n\r\n$client = new Client([\'base_uri\' =&gt; \'http://httpbin.org/\']);\r\n\r\n// 初始化每一个非阻塞请求\r\n$promises = [\r\n\'image\' =&gt; $client-&gt;getAsync(\'/image\'),\r\n\'png\'   =&gt; $client-&gt;getAsync(\'/image/png\'),\r\n\'jpeg\'  =&gt; $client-&gt;getAsync(\'/image/jpeg\'),\r\n\'webp\'  =&gt; $client-&gt;getAsync(\'/image/webp\')\r\n];\r\n\r\n// 等待请求完成\r\n$results = Promise\\unwrap($promises);\r\n\r\n// 通过键名接收每一个结果\r\n// function.\r\necho $results[\'image\']-&gt;getHeader(\'Content-Length\');\r\necho $results[\'png\']-&gt;getHeader(\'Content-Length\');[/php]\r\n\r\n\r\n当你想发送不确定数量的请求时，可以使用 GuzzleHttp\\Pool 对象：\r\n\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Pool;\r\nuse GuzzleHttp\\Client;\r\nuse GuzzleHttp\\Psr7\\Request;\r\n\r\n$client = new Client();\r\n\r\n$requests = function ($total) {\r\n$uri = \'http://127.0.0.1:8126/guzzle-server/perf\';\r\nfor ($i = 0; $i &lt; $total; $i++) {\r\nyield new Request(\'GET\', $uri);\r\n}\r\n};\r\n\r\n$pool = new Pool($client, $requests(100), [\r\n\'concurrency\' =&gt; 5,\r\n\'fulfilled\' =&gt; function ($response, $index) {\r\n// 每个成功的请求\r\n},\r\n\'rejected\' =&gt; function ($reason, $index) {\r\n// 每个失败的请求\r\n},\r\n]);\r\n\r\n// 初始化传输和创建授权\r\n$promise = $pool-&gt;promise();\r\n\r\n// 等待请求池完成\r\n$promise-&gt;wait();\r\n[/php]\r\n\r\n<h3>5. 响应</h3>\r\n<h4>5.1 获取响应的状态码</h4>\r\n\r\n[php]$code = $response-&gt;getStatusCode(); // 200[/php]\r\n\r\n<h4>5.2 获取原因短语(reason phrase)</h4>\r\n\r\n[php]$reason = $response-&gt;getReasonPhrase(); // OK[/php]\r\n\r\n<h4>5.3 获取头信息(header)</h4>\r\n\r\n[php]// 检查是否存在头信息\r\nif ($response-&gt;hasHeader(\'Content-Length\')) {\r\necho &quot;It exists&quot;;\r\n}\r\n\r\n// 获取头信息\r\necho $response-&gt;getHeader(\'Content-Length\');\r\n\r\n// 获取所有响应头信息\r\nforeach ($response-&gt;getHeaders() as $name =&gt; $values) {\r\necho $name . \': \' . implode(\', \', $values) . &quot;\\r\\n&quot;;\r\n}\r\n[/php]\r\n\r\n<h4>5.4 获取响应的主体部分(body)</h4>\r\n\r\n[php]$body = $response-&gt;getBody();\r\n// 隐式转换成字符串并输出\r\necho $body;\r\n// 显示转换body成字符串\r\n$stringBody = (string) $body;\r\n// 从body中读取10字节（bytes）\r\n$tenBytes = $body-&gt;read(10);\r\n// 将正文的剩余内容作为字符串读取\r\n$remainingBytes = $body-&gt;getContents();[/php]\r\n\r\n<h3>6. 参数</h3>\r\n<h4>6.1 在请求的URI中设置查询字符串</h4>\r\n\r\n[php]$response = $client-&gt;request(\'GET\', \'http://httpbin.org?foo=bar\');[/php]\r\n\r\n<h4>6.2 使用 query 请求参数来声明查询字符串参数</h4>\r\n\r\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\r\n\'query\' =&gt; [\'foo\' =&gt; \'bar\']\r\n]);\r\n[/php]\r\n\r\n<h4>6.3 提供一个字符串作为 query 请求参数</h4>\r\n\r\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\'query\' =&gt; \'foo=bar\']);[/php]\r\n\r\n<h3>7. 其它</h3>\r\nGuzzle还提供了一些其它有用的功能\r\n<ul>\r\n 	<li>上传数据（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data</a>）</li>\r\n 	<li>POST/表单请求（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests</a>）</li>\r\n 	<li>Cookies（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#cookies\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#cookies</a>）</li>\r\n 	<li>重定向（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#redirects\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#redirects</a>）</li>\r\n 	<li>异常（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions</a>）</li>\r\n</ul>\r\n具体的可以查看官方文档。', 'Guzzle：PHP的HTTP客户端', '', 'inherit', 'closed', 'closed', '', '1175-revision-v1', '', '', '2017-07-31 16:08:34', '2017-07-31 08:08:34', '', 1175, 'https://www.gzpblog.com/20170731/1179.html', 0, 'revision', '', 0),
(1180, 1, '2017-07-31 16:19:22', '2017-07-31 08:19:22', '<h3>1. 什么是Guzzle？</h3>\nGuzzle是一个PHP的HTTP客户端，用来轻而易举地发送请求，并集成到我们的WEB服务上。\n<ul>\n 	<li>接口简单：构建查询语句、POST请求、分流上传下载大文件、使用HTTP cookies、上传JSON数据等等。</li>\n 	<li>发送同步或异步的请求均使用相同的接口。</li>\n 	<li>使用PSR-7接口来请求、响应、分流，允许你使用其他兼容的PSR-7类库与Guzzle共同开发。</li>\n 	<li>抽象了底层的HTTP传输，允许你改变环境以及其他的代码，如：对cURL与PHP的流或socket并非重度依赖，非阻塞事件循环。</li>\n 	<li>中间件系统允许你创建构成客户端行为。</li>\n</ul>\nGithub地址：<a href=\"https://github.com/guzzle/guzzle/\" target=\"_blank\" rel=\"noopener noreferrer\">guzzle/guzzle</a>\n\n官方文档：<a href=\"http://docs.guzzlephp.org/en/stable/\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/</a>\n\n中文文档：<a href=\"http://guzzle-cn.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">http://guzzle-cn.readthedocs.io/zh_CN/latest/</a>\n<h3>2. 安装Guzzle</h3>\n<h4>2.1 通过composer安装</h4>\n执行composer命令：\n\nphp composer.phar require guzzlehttp/guzzle\n\n引入Composer自动加载类：\n\nrequire \'vendor/autoload.php\';\n\n通过Composer更新Guzzle：\n\ncomposer.phar update\n<h3>3. 例子</h3>\n\n[php]$client = new \\GuzzleHttp\\Client();\n$res = $client-&gt;request(\'GET\', \'https://api.github.com/repos/guzzle/guzzle\');\necho $res-&gt;getStatusCode();\n// 200\necho $res-&gt;getHeaderLine(\'content-type\');\n// \'application/json; charset=utf8\'\necho $res-&gt;getBody();\n// \'{&quot;id&quot;: 1420053, &quot;name&quot;: &quot;guzzle&quot;, ...}\'\n\n// 发送一个异步请求    \n$request = new \\GuzzleHttp\\Psr7\\Request(\'GET\', \'http://httpbin.org\');\n$promise = $client-&gt;sendAsync($request)-&gt;then(function ($response) {\n    echo \'I completed! \' . $response-&gt;getBody();\n});\n$promise-&gt;wait();[/php]\n\n<h3>4. 发送请求</h3>\n<h4>4.1 创建客户端</h4>\n通过实例化Client类创建一个客户端：\n\n[php]&lt;?php\nuse GuzzleHttp\\Client;\n\n$client = new Client([\n    // 基URI\n    \'base_uri\' =&gt; \'http://httpbin.org\',\n    // 设置默认请求参数\n    \'timeout\'  =&gt; 2.0,\n]);[/php]\n\n<h4>4.2 发送请求</h4>\nClient对象的方法可以很容易的发送请求：\n\n[php]&lt;?php $response = $client-&gt;get(\'http://httpbin.org/get\');\n$response = $client-&gt;delete(\'http://httpbin.org/delete\');\n$response = $client-&gt;head(\'http://httpbin.org/get\');\n$response = $client-&gt;options(\'http://httpbin.org/get\');\n$response = $client-&gt;patch(\'http://httpbin.org/patch\');\n$response = $client-&gt;post(\'http://httpbin.org/post\');\n$response = $client-&gt;put(\'http://httpbin.org/put\');[/php]\n\n或者创建一个请求，一切就绪后再发送请求：\n\n[php]&lt;?php\nuse GuzzleHttp\\Psr7\\Request;\n\n$request = new Request(\'PUT\', \'http://httpbin.org/put\');\n$response = $client-&gt;send($request, [\'timeout\' =&gt; 2]);\n[/php]\n\n<h4>4.3 异步请求</h4>\n直接用Client提供的方法来创建异步请求：\n\n[php]&lt;?php $promise = $client-&gt;getAsync(\'http://httpbin.org/get\');\n$promise = $client-&gt;deleteAsync(\'http://httpbin.org/delete\');\n$promise = $client-&gt;headAsync(\'http://httpbin.org/get\');\n$promise = $client-&gt;optionsAsync(\'http://httpbin.org/get\');\n$promise = $client-&gt;patchAsync(\'http://httpbin.org/patch\');\n$promise = $client-&gt;postAsync(\'http://httpbin.org/post\');\n$promise = $client-&gt;putAsync(\'http://httpbin.org/put\');[/php]\n\n或者使用Client的 sendAsync() and requestAsync() 方法：\n\n[php]&lt;?php // 创建一个PSR-7请求对象 $headers = [\'X-Foo\' =&gt; \'Bar\'];\n$body = \'Hello!\';\n$request = new Request(\'HEAD\', \'http://httpbin.org/head\', $headers, $body);\n\n// 如果不需要进去请求实例\n$promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\n[/php]\n\n使用 then() 来调用返回值，成功使用 Psr\\Http\\Message\\ResponseInterface 处理器，否则抛出一个异常：\n\n[php]&lt;?php use Psr\\Http\\Message\\ResponseInterface; use GuzzleHttp\\Exception\\RequestException; $promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\n$promise-&gt;then(\n    function (ResponseInterface $res) {\n        echo $res-&gt;getStatusCode() . &quot;\\n&quot;;\n    },\n    function (RequestException $e) {\n        echo $e-&gt;getMessage() . &quot;\\n&quot;;\n        echo $e-&gt;getRequest()-&gt;getMethod();\n    }\n);[/php]\n\n<h4>4.4 并发请求</h4>\n使用Promise和异步请求来同时发送多个请求：\n\n[php]&lt;?php use GuzzleHttp\\Client; use GuzzleHttp\\Promise; $client = new Client([\'base_uri\' =&gt; \'http://httpbin.org/\']);\n\n// 初始化每一个非阻塞请求\n$promises = [\n    \'image\' =&gt; $client-&gt;getAsync(\'/image\'),\n    \'png\'   =&gt; $client-&gt;getAsync(\'/image/png\'),\n    \'jpeg\'  =&gt; $client-&gt;getAsync(\'/image/jpeg\'),\n    \'webp\'  =&gt; $client-&gt;getAsync(\'/image/webp\')\n];\n\n// 等待请求完成\n$results = Promise\\unwrap($promises);\n\n// 通过键名接收每一个结果\n// function.\necho $results[\'image\']-&gt;getHeader(\'Content-Length\');\necho $results[\'png\']-&gt;getHeader(\'Content-Length\');[/php]\n\n当你想发送不确定数量的请求时，可以使用 GuzzleHttp\\Pool 对象：\n\n[php]&lt;?php\nuse GuzzleHttp\\Pool;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\Psr7\\Request;\n\n$client = new Client();\n\n$requests = function ($total) {\n    $uri = \'http://127.0.0.1:8126/guzzle-server/perf\';\n    for ($i = 0; $i &lt; $total; $i++) {         yield new Request(\'GET\', $uri);     } }; $pool = new Pool($client, $requests(100), [     \'concurrency\' =&gt; 5,\n    \'fulfilled\' =&gt; function ($response, $index) {\n        // 每个成功的请求\n    },\n    \'rejected\' =&gt; function ($reason, $index) {\n        // 每个失败的请求\n    },\n]);\n\n// 初始化传输和创建授权\n$promise = $pool-&gt;promise();\n\n// 等待请求池完成\n$promise-&gt;wait();\n[/php]\n\n<h3>5. 响应</h3>\n<h4>5.1 获取响应的状态码</h4>\n\n[php]$code = $response-&gt;getStatusCode(); // 200[/php]\n\n<h4>5.2 获取原因短语(reason phrase)</h4>\n\n[php]$reason = $response-&gt;getReasonPhrase(); // OK[/php]\n\n<h4>5.3 获取头信息(header)</h4>\n\n[php]// 检查是否存在头信息\nif ($response-&gt;hasHeader(\'Content-Length\')) {\n    echo &quot;It exists&quot;;\n}\n\n// 获取头信息\necho $response-&gt;getHeader(\'Content-Length\');\n\n// 获取所有响应头信息\nforeach ($response-&gt;getHeaders() as $name =&gt; $values) {\n    echo $name . \': \' . implode(\', \', $values) . &quot;\\r\\n&quot;;\n}\n[/php]\n\n<h4>5.4 获取响应的主体部分(body)</h4>\n\n[php]$body = $response-&gt;getBody();\n// 隐式转换成字符串并输出\necho $body;\n// 显示转换body成字符串\n$stringBody = (string) $body;\n// 从body中读取10字节（bytes）\n$tenBytes = $body-&gt;read(10);\n// 将正文的剩余内容作为字符串读取\n$remainingBytes = $body-&gt;getContents();[/php]\n\n<h3>6. 参数</h3>\n<h4>6.1 在请求的URI中设置查询字符串</h4>\n\n[php]$response = $client-&gt;request(\'GET\', \'http://httpbin.org?foo=bar\');[/php]\n\n<h4>6.2 使用 query 请求参数来声明查询字符串参数</h4>\n\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\n    \'query\' =&gt; [\'foo\' =&gt; \'bar\']\n]);\n[/php]\n\n<h4>6.3 提供一个字符串作为 query 请求参数</h4>\n\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\'query\' =&gt; \'foo=bar\']);[/php]\n\n<h3>7. 其它</h3>\nGuzzle还提供了一些其它有用的功能\n<ul>\n 	<li>上传数据（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data</a>）</li>\n 	<li>POST/表单请求（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests</a>）</li>\n 	<li>Cookies（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#cookies\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#cookies</a>）</li>\n 	<li>重定向（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#redirects\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#redirects</a>）</li>\n 	<li>异常（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions</a>）</li>\n</ul>\n具体的可以查看官方文档。', 'Guzzle：PHP的HTTP客户端', '', 'inherit', 'closed', 'closed', '', '1175-autosave-v1', '', '', '2017-07-31 16:19:22', '2017-07-31 08:19:22', '', 1175, 'https://www.gzpblog.com/20170731/1180.html', 0, 'revision', '', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1181, 1, '2017-07-31 16:12:55', '2017-07-31 08:12:55', '<h3>1. 什么是Guzzle？</h3>\r\nGuzzle是一个PHP的HTTP客户端，用来轻而易举地发送请求，并集成到我们的WEB服务上。\r\n<ul>\r\n 	<li>接口简单：构建查询语句、POST请求、分流上传下载大文件、使用HTTP cookies、上传JSON数据等等。</li>\r\n 	<li>发送同步或异步的请求均使用相同的接口。</li>\r\n 	<li>使用PSR-7接口来请求、响应、分流，允许你使用其他兼容的PSR-7类库与Guzzle共同开发。</li>\r\n 	<li>抽象了底层的HTTP传输，允许你改变环境以及其他的代码，如：对cURL与PHP的流或socket并非重度依赖，非阻塞事件循环。</li>\r\n 	<li>中间件系统允许你创建构成客户端行为。</li>\r\n</ul>\r\nGithub地址：<a href=\"https://github.com/guzzle/guzzle/\" target=\"_blank\" rel=\"noopener noreferrer\">guzzle/guzzle</a>\r\n\r\n官方文档：<a href=\"http://docs.guzzlephp.org/en/stable/\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/</a>\r\n\r\n中文文档：<a href=\"http://guzzle-cn.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">http://guzzle-cn.readthedocs.io/zh_CN/latest/</a>\r\n<h3>2. 安装Guzzle</h3>\r\n<h4>2.1 通过composer安装</h4>\r\n执行composer命令：\r\n\r\nphp composer.phar require guzzlehttp/guzzle\r\n\r\n引入Composer自动加载类：\r\n\r\nrequire \'vendor/autoload.php\';\r\n\r\n通过Composer更新Guzzle：\r\n\r\ncomposer.phar update\r\n<h3>3. 例子</h3>\r\n\r\n[php]$client = new \\GuzzleHttp\\Client();\r\n$res = $client-&gt;request(\'GET\', \'https://api.github.com/repos/guzzle/guzzle\');\r\necho $res-&gt;getStatusCode();\r\n// 200\r\necho $res-&gt;getHeaderLine(\'content-type\');\r\n// \'application/json; charset=utf8\'\r\necho $res-&gt;getBody();\r\n// \'{&quot;id&quot;: 1420053, &quot;name&quot;: &quot;guzzle&quot;, ...}\'\r\n\r\n// 发送一个异步请求    \r\n$request = new \\GuzzleHttp\\Psr7\\Request(\'GET\', \'http://httpbin.org\');\r\n$promise = $client-&gt;sendAsync($request)-&gt;then(function ($response) {\r\n    echo \'I completed! \' . $response-&gt;getBody();\r\n});\r\n$promise-&gt;wait();[/php]\r\n\r\n<h3>4. 发送请求</h3>\r\n<h4>4.1 创建客户端</h4>\r\n通过实例化Client类创建一个客户端：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Client;\r\n\r\n$client = new Client([\r\n    // 基URI\r\n    \'base_uri\' =&gt; \'http://httpbin.org\',\r\n    // 设置默认请求参数\r\n    \'timeout\'  =&gt; 2.0,\r\n]);[/php]\r\n\r\n<h4>4.2 发送请求</h4>\r\nClient对象的方法可以很容易的发送请求：\r\n\r\n[php]&lt;?php\r\n$response = $client-&gt;get(\'http://httpbin.org/get\');\r\n$response = $client-&gt;delete(\'http://httpbin.org/delete\');\r\n$response = $client-&gt;head(\'http://httpbin.org/get\');\r\n$response = $client-&gt;options(\'http://httpbin.org/get\');\r\n$response = $client-&gt;patch(\'http://httpbin.org/patch\');\r\n$response = $client-&gt;post(\'http://httpbin.org/post\');\r\n$response = $client-&gt;put(\'http://httpbin.org/put\');[/php]\r\n\r\n或者创建一个请求，一切就绪后再发送请求：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Psr7\\Request;\r\n\r\n$request = new Request(\'PUT\', \'http://httpbin.org/put\');\r\n$response = $client-&gt;send($request, [\'timeout\' =&gt; 2]);[/php]\r\n\r\n<h4>4.3 异步请求</h4>\r\n直接用Client提供的方法来创建异步请求：\r\n\r\n[php]&lt;?php\r\n$promise = $client-&gt;getAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;deleteAsync(\'http://httpbin.org/delete\');\r\n$promise = $client-&gt;headAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;optionsAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;patchAsync(\'http://httpbin.org/patch\');\r\n$promise = $client-&gt;postAsync(\'http://httpbin.org/post\');\r\n$promise = $client-&gt;putAsync(\'http://httpbin.org/put\');[/php]\r\n\r\n或者使用Client的 sendAsync() and requestAsync() 方法：\r\n\r\n[php]&lt;?php\r\n// 创建一个PSR-7请求对象\r\n$headers = [\'X-Foo\' =&gt; \'Bar\'];\r\n$body = \'Hello!\';\r\n$request = new Request(\'HEAD\', \'http://httpbin.org/head\', $headers, $body);\r\n\r\n// 如果不需要进去请求实例\r\n$promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\r\n使用 then() 来调用返回值，成功使用 Psr\\Http\\Message\\ResponseInterface 处理器，否则抛出一个异常：\r\n&lt;?php \r\nuse Psr\\Http\\Message\\ResponseInterface;\r\nuse GuzzleHttp\\Exception\\RequestException;\r\n\r\n$promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\r\n$promise-&gt;then(\r\n    function (ResponseInterface $res) {\r\n        echo $res-&gt;getStatusCode() . &quot;\\n&quot;;\r\n    },\r\n    function (RequestException $e) {\r\n        echo $e-&gt;getMessage() . &quot;\\n&quot;;\r\n        echo $e-&gt;getRequest()-&gt;getMethod();\r\n    }\r\n);\r\n[/php]\r\n\r\n<h4>4.4 并发请求</h4>\r\n使用Promise和异步请求来同时发送多个请求：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Client;\r\nuse GuzzleHttp\\Promise;\r\n\r\n$client = new Client([\'base_uri\' =&gt; \'http://httpbin.org/\']);\r\n\r\n// 初始化每一个非阻塞请求\r\n$promises = [\r\n    \'image\' =&gt; $client-&gt;getAsync(\'/image\'),\r\n    \'png\'   =&gt; $client-&gt;getAsync(\'/image/png\'),\r\n    \'jpeg\'  =&gt; $client-&gt;getAsync(\'/image/jpeg\'),\r\n    \'webp\'  =&gt; $client-&gt;getAsync(\'/image/webp\')\r\n];\r\n\r\n// 等待请求完成\r\n$results = Promise\\unwrap($promises);\r\n\r\n// 通过键名接收每一个结果\r\n// function.\r\necho $results[\'image\']-&gt;getHeader(\'Content-Length\');\r\necho $results[\'png\']-&gt;getHeader(\'Content-Length\');[/php]\r\n\r\n当你想发送不确定数量的请求时，可以使用 GuzzleHttp\\Pool 对象：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Pool;\r\nuse GuzzleHttp\\Client;\r\nuse GuzzleHttp\\Psr7\\Request;\r\n\r\n$client = new Client();\r\n\r\n$requests = function ($total) {\r\n    $uri = \'http://127.0.0.1:8126/guzzle-server/perf\';\r\n    for ($i = 0; $i &lt; $total; $i++) {\r\n        yield new Request(\'GET\', $uri);\r\n    }\r\n};\r\n\r\n$pool = new Pool($client, $requests(100), [\r\n    \'concurrency\' =&gt; 5,\r\n    \'fulfilled\' =&gt; function ($response, $index) {\r\n        // 每个成功的请求\r\n    },\r\n    \'rejected\' =&gt; function ($reason, $index) {\r\n        // 每个失败的请求\r\n    },\r\n]);\r\n\r\n// 初始化传输和创建授权\r\n$promise = $pool-&gt;promise();\r\n\r\n// 等待请求池完成\r\n$promise-&gt;wait();\r\n[/php]\r\n\r\n<h3>5. 响应</h3>\r\n<h4>5.1 获取响应的状态码</h4>\r\n\r\n[php]$code = $response-&gt;getStatusCode(); // 200[/php]\r\n\r\n<h4>5.2 获取原因短语(reason phrase)</h4>\r\n\r\n[php]$reason = $response-&gt;getReasonPhrase(); // OK[/php]\r\n\r\n<h4>5.3 获取头信息(header)</h4>\r\n\r\n[php]// 检查是否存在头信息\r\nif ($response-&gt;hasHeader(\'Content-Length\')) {\r\n    echo &quot;It exists&quot;;\r\n}\r\n\r\n// 获取头信息\r\necho $response-&gt;getHeader(\'Content-Length\');\r\n\r\n// 获取所有响应头信息\r\nforeach ($response-&gt;getHeaders() as $name =&gt; $values) {\r\n    echo $name . \': \' . implode(\', \', $values) . &quot;\\r\\n&quot;;\r\n}\r\n[/php]\r\n\r\n<h4>5.4 获取响应的主体部分(body)</h4>\r\n\r\n[php]$body = $response-&gt;getBody();\r\n// 隐式转换成字符串并输出\r\necho $body;\r\n// 显示转换body成字符串\r\n$stringBody = (string) $body;\r\n// 从body中读取10字节（bytes）\r\n$tenBytes = $body-&gt;read(10);\r\n// 将正文的剩余内容作为字符串读取\r\n$remainingBytes = $body-&gt;getContents();[/php]\r\n\r\n<h3>6. 参数</h3>\r\n<h4>6.1 在请求的URI中设置查询字符串</h4>\r\n\r\n[php]$response = $client-&gt;request(\'GET\', \'http://httpbin.org?foo=bar\');[/php]\r\n\r\n<h4>6.2 使用 query 请求参数来声明查询字符串参数</h4>\r\n\r\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\r\n    \'query\' =&gt; [\'foo\' =&gt; \'bar\']\r\n]);\r\n[/php]\r\n\r\n<h4>6.3 提供一个字符串作为 query 请求参数</h4>\r\n\r\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\'query\' =&gt; \'foo=bar\']);[/php]\r\n\r\n<h3>7. 其它</h3>\r\nGuzzle还提供了一些其它有用的功能\r\n<ul>\r\n 	<li>上传数据（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data</a>）</li>\r\n 	<li>POST/表单请求（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests</a>）</li>\r\n 	<li>Cookies（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#cookies\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#cookies</a>）</li>\r\n 	<li>重定向（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#redirects\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#redirects</a>）</li>\r\n 	<li>异常（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions</a>）</li>\r\n</ul>\r\n具体的可以查看官方文档。', 'Guzzle：PHP的HTTP客户端', '', 'inherit', 'closed', 'closed', '', '1175-revision-v1', '', '', '2017-07-31 16:12:55', '2017-07-31 08:12:55', '', 1175, 'https://www.gzpblog.com/20170731/1181.html', 0, 'revision', '', 0),
(1184, 1, '2017-07-31 16:17:39', '2017-07-31 08:17:39', '<h3>1. 什么是Guzzle？</h3>\r\nGuzzle是一个PHP的HTTP客户端，用来轻而易举地发送请求，并集成到我们的WEB服务上。\r\n<ul>\r\n 	<li>接口简单：构建查询语句、POST请求、分流上传下载大文件、使用HTTP cookies、上传JSON数据等等。</li>\r\n 	<li>发送同步或异步的请求均使用相同的接口。</li>\r\n 	<li>使用PSR-7接口来请求、响应、分流，允许你使用其他兼容的PSR-7类库与Guzzle共同开发。</li>\r\n 	<li>抽象了底层的HTTP传输，允许你改变环境以及其他的代码，如：对cURL与PHP的流或socket并非重度依赖，非阻塞事件循环。</li>\r\n 	<li>中间件系统允许你创建构成客户端行为。</li>\r\n</ul>\r\nGithub地址：<a href=\"https://github.com/guzzle/guzzle/\" target=\"_blank\" rel=\"noopener noreferrer\">guzzle/guzzle</a>\r\n\r\n官方文档：<a href=\"http://docs.guzzlephp.org/en/stable/\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/</a>\r\n\r\n中文文档：<a href=\"http://guzzle-cn.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">http://guzzle-cn.readthedocs.io/zh_CN/latest/</a>\r\n<h3>2. 安装Guzzle</h3>\r\n<h4>2.1 通过composer安装</h4>\r\n执行composer命令：\r\n\r\nphp composer.phar require guzzlehttp/guzzle\r\n\r\n引入Composer自动加载类：\r\n\r\nrequire \'vendor/autoload.php\';\r\n\r\n通过Composer更新Guzzle：\r\n\r\ncomposer.phar update\r\n<h3>3. 例子</h3>\r\n\r\n[php]$client = new \\GuzzleHttp\\Client();\r\n$res = $client-&gt;request(\'GET\', \'https://api.github.com/repos/guzzle/guzzle\');\r\necho $res-&gt;getStatusCode();\r\n// 200\r\necho $res-&gt;getHeaderLine(\'content-type\');\r\n// \'application/json; charset=utf8\'\r\necho $res-&gt;getBody();\r\n// \'{&quot;id&quot;: 1420053, &quot;name&quot;: &quot;guzzle&quot;, ...}\'\r\n\r\n// 发送一个异步请求    \r\n$request = new \\GuzzleHttp\\Psr7\\Request(\'GET\', \'http://httpbin.org\');\r\n$promise = $client-&gt;sendAsync($request)-&gt;then(function ($response) {\r\n    echo \'I completed! \' . $response-&gt;getBody();\r\n});\r\n$promise-&gt;wait();[/php]\r\n\r\n<h3>4. 发送请求</h3>\r\n<h4>4.1 创建客户端</h4>\r\n通过实例化Client类创建一个客户端：\r\n\r\n[php]&lt;?php use GuzzleHttp\\Client; $client = new Client([     // 基URI     \'base_uri\' =&gt; \'http://httpbin.org\',\r\n    // 设置默认请求参数\r\n    \'timeout\'  =&gt; 2.0,\r\n]);[/php]\r\n\r\n<h4>4.2 发送请求</h4>\r\nClient对象的方法可以很容易的发送请求：\r\n\r\n[php]&lt;?php $response = $client-&gt;get(\'http://httpbin.org/get\');\r\n$response = $client-&gt;delete(\'http://httpbin.org/delete\');\r\n$response = $client-&gt;head(\'http://httpbin.org/get\');\r\n$response = $client-&gt;options(\'http://httpbin.org/get\');\r\n$response = $client-&gt;patch(\'http://httpbin.org/patch\');\r\n$response = $client-&gt;post(\'http://httpbin.org/post\');\r\n$response = $client-&gt;put(\'http://httpbin.org/put\');[/php]\r\n\r\n或者创建一个请求，一切就绪后再发送请求：\r\n\r\n[php]&lt;?php use GuzzleHttp\\Psr7\\Request; $request = new Request(\'PUT\', \'http://httpbin.org/put\'); $response = $client-&gt;send($request, [\'timeout\' =&gt; 2]);[/php]\r\n\r\n<h4>4.3 异步请求</h4>\r\n直接用Client提供的方法来创建异步请求：\r\n\r\n[php]&lt;?php $promise = $client-&gt;getAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;deleteAsync(\'http://httpbin.org/delete\');\r\n$promise = $client-&gt;headAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;optionsAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;patchAsync(\'http://httpbin.org/patch\');\r\n$promise = $client-&gt;postAsync(\'http://httpbin.org/post\');\r\n$promise = $client-&gt;putAsync(\'http://httpbin.org/put\');[/php]\r\n\r\n或者使用Client的 sendAsync() and requestAsync() 方法：\r\n\r\n[php]&lt;?php // 创建一个PSR-7请求对象 $headers = [\'X-Foo\' =&gt; \'Bar\'];\r\n$body = \'Hello!\';\r\n$request = new Request(\'HEAD\', \'http://httpbin.org/head\', $headers, $body);\r\n\r\n// 如果不需要进去请求实例\r\n$promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\r\n[/php]\r\n\r\n使用 then() 来调用返回值，成功使用 Psr\\Http\\Message\\ResponseInterface 处理器，否则抛出一个异常：\r\n\r\n[php]&lt;?php use Psr\\Http\\Message\\ResponseInterface; use GuzzleHttp\\Exception\\RequestException; $promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\r\n$promise-&gt;then(\r\n    function (ResponseInterface $res) {\r\n        echo $res-&gt;getStatusCode() . &quot;\\n&quot;;\r\n    },\r\n    function (RequestException $e) {\r\n        echo $e-&gt;getMessage() . &quot;\\n&quot;;\r\n        echo $e-&gt;getRequest()-&gt;getMethod();\r\n    }\r\n);[/php]\r\n\r\n<h4>4.4 并发请求</h4>\r\n使用Promise和异步请求来同时发送多个请求：\r\n\r\n[php]&lt;?php use GuzzleHttp\\Client; use GuzzleHttp\\Promise; $client = new Client([\'base_uri\' =&gt; \'http://httpbin.org/\']);\r\n\r\n// 初始化每一个非阻塞请求\r\n$promises = [\r\n    \'image\' =&gt; $client-&gt;getAsync(\'/image\'),\r\n    \'png\'   =&gt; $client-&gt;getAsync(\'/image/png\'),\r\n    \'jpeg\'  =&gt; $client-&gt;getAsync(\'/image/jpeg\'),\r\n    \'webp\'  =&gt; $client-&gt;getAsync(\'/image/webp\')\r\n];\r\n\r\n// 等待请求完成\r\n$results = Promise\\unwrap($promises);\r\n\r\n// 通过键名接收每一个结果\r\n// function.\r\necho $results[\'image\']-&gt;getHeader(\'Content-Length\');\r\necho $results[\'png\']-&gt;getHeader(\'Content-Length\');[/php]\r\n\r\n当你想发送不确定数量的请求时，可以使用 GuzzleHttp\\Pool 对象：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Pool;\r\nuse GuzzleHttp\\Client;\r\nuse GuzzleHttp\\Psr7\\Request;\r\n\r\n$client = new Client();\r\n\r\n$requests = function ($total) {\r\n    $uri = \'http://127.0.0.1:8126/guzzle-server/perf\';\r\n    for ($i = 0; $i &lt; $total; $i++) {         yield new Request(\'GET\', $uri);     } }; $pool = new Pool($client, $requests(100), [     \'concurrency\' =&gt; 5,\r\n    \'fulfilled\' =&gt; function ($response, $index) {\r\n        // 每个成功的请求\r\n    },\r\n    \'rejected\' =&gt; function ($reason, $index) {\r\n        // 每个失败的请求\r\n    },\r\n]);\r\n\r\n// 初始化传输和创建授权\r\n$promise = $pool-&gt;promise();\r\n\r\n// 等待请求池完成\r\n$promise-&gt;wait();\r\n[/php]\r\n\r\n<h3>5. 响应</h3>\r\n<h4>5.1 获取响应的状态码</h4>\r\n\r\n[php]$code = $response-&gt;getStatusCode(); // 200[/php]\r\n\r\n<h4>5.2 获取原因短语(reason phrase)</h4>\r\n\r\n[php]$reason = $response-&gt;getReasonPhrase(); // OK[/php]\r\n\r\n<h4>5.3 获取头信息(header)</h4>\r\n\r\n[php]// 检查是否存在头信息\r\nif ($response-&gt;hasHeader(\'Content-Length\')) {\r\n    echo &quot;It exists&quot;;\r\n}\r\n\r\n// 获取头信息\r\necho $response-&gt;getHeader(\'Content-Length\');\r\n\r\n// 获取所有响应头信息\r\nforeach ($response-&gt;getHeaders() as $name =&gt; $values) {\r\n    echo $name . \': \' . implode(\', \', $values) . &quot;\\r\\n&quot;;\r\n}\r\n[/php]\r\n\r\n<h4>5.4 获取响应的主体部分(body)</h4>\r\n\r\n[php]$body = $response-&gt;getBody();\r\n// 隐式转换成字符串并输出\r\necho $body;\r\n// 显示转换body成字符串\r\n$stringBody = (string) $body;\r\n// 从body中读取10字节（bytes）\r\n$tenBytes = $body-&gt;read(10);\r\n// 将正文的剩余内容作为字符串读取\r\n$remainingBytes = $body-&gt;getContents();[/php]\r\n\r\n<h3>6. 参数</h3>\r\n<h4>6.1 在请求的URI中设置查询字符串</h4>\r\n\r\n[php]$response = $client-&gt;request(\'GET\', \'http://httpbin.org?foo=bar\');[/php]\r\n\r\n<h4>6.2 使用 query 请求参数来声明查询字符串参数</h4>\r\n\r\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\r\n    \'query\' =&gt; [\'foo\' =&gt; \'bar\']\r\n]);\r\n[/php]\r\n\r\n<h4>6.3 提供一个字符串作为 query 请求参数</h4>\r\n\r\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\'query\' =&gt; \'foo=bar\']);[/php]\r\n\r\n<h3>7. 其它</h3>\r\nGuzzle还提供了一些其它有用的功能\r\n<ul>\r\n 	<li>上传数据（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data</a>）</li>\r\n 	<li>POST/表单请求（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests</a>）</li>\r\n 	<li>Cookies（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#cookies\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#cookies</a>）</li>\r\n 	<li>重定向（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#redirects\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#redirects</a>）</li>\r\n 	<li>异常（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions</a>）</li>\r\n</ul>\r\n具体的可以查看官方文档。', 'Guzzle：PHP的HTTP客户端', '', 'inherit', 'closed', 'closed', '', '1175-revision-v1', '', '', '2017-07-31 16:17:39', '2017-07-31 08:17:39', '', 1175, 'https://www.gzpblog.com/20170731/1184.html', 0, 'revision', '', 0),
(1182, 1, '2017-07-31 16:15:26', '2017-07-31 08:15:26', '<h3>1. 什么是Guzzle？</h3>\r\nGuzzle是一个PHP的HTTP客户端，用来轻而易举地发送请求，并集成到我们的WEB服务上。\r\n<ul>\r\n 	<li>接口简单：构建查询语句、POST请求、分流上传下载大文件、使用HTTP cookies、上传JSON数据等等。</li>\r\n 	<li>发送同步或异步的请求均使用相同的接口。</li>\r\n 	<li>使用PSR-7接口来请求、响应、分流，允许你使用其他兼容的PSR-7类库与Guzzle共同开发。</li>\r\n 	<li>抽象了底层的HTTP传输，允许你改变环境以及其他的代码，如：对cURL与PHP的流或socket并非重度依赖，非阻塞事件循环。</li>\r\n 	<li>中间件系统允许你创建构成客户端行为。</li>\r\n</ul>\r\nGithub地址：<a href=\"https://github.com/guzzle/guzzle/\" target=\"_blank\" rel=\"noopener noreferrer\">guzzle/guzzle</a>\r\n\r\n官方文档：<a href=\"http://docs.guzzlephp.org/en/stable/\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/</a>\r\n\r\n中文文档：<a href=\"http://guzzle-cn.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">http://guzzle-cn.readthedocs.io/zh_CN/latest/</a>\r\n<h3>2. 安装Guzzle</h3>\r\n<h4>2.1 通过composer安装</h4>\r\n执行composer命令：\r\n\r\nphp composer.phar require guzzlehttp/guzzle\r\n\r\n引入Composer自动加载类：\r\n\r\nrequire \'vendor/autoload.php\';\r\n\r\n通过Composer更新Guzzle：\r\n\r\ncomposer.phar update\r\n<h3>3. 例子</h3>\r\n\r\n[php]$client = new \\GuzzleHttp\\Client();\r\n$res = $client-&gt;request(\'GET\', \'https://api.github.com/repos/guzzle/guzzle\');\r\necho $res-&gt;getStatusCode();\r\n// 200\r\necho $res-&gt;getHeaderLine(\'content-type\');\r\n// \'application/json; charset=utf8\'\r\necho $res-&gt;getBody();\r\n// \'{&quot;id&quot;: 1420053, &quot;name&quot;: &quot;guzzle&quot;, ...}\'\r\n\r\n// 发送一个异步请求    \r\n$request = new \\GuzzleHttp\\Psr7\\Request(\'GET\', \'http://httpbin.org\');\r\n$promise = $client-&gt;sendAsync($request)-&gt;then(function ($response) {\r\n    echo \'I completed! \' . $response-&gt;getBody();\r\n});\r\n$promise-&gt;wait();[/php]\r\n\r\n<h3>4. 发送请求</h3>\r\n<h4>4.1 创建客户端</h4>\r\n通过实例化Client类创建一个客户端：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Client;\r\n\r\n$client = new Client([\r\n    // 基URI\r\n    \'base_uri\' =&gt; \'http://httpbin.org\',\r\n    // 设置默认请求参数\r\n    \'timeout\'  =&gt; 2.0,\r\n]);[/php]\r\n\r\n<h4>4.2 发送请求</h4>\r\nClient对象的方法可以很容易的发送请求：\r\n\r\n[php]&lt;?php\r\n$response = $client-&gt;get(\'http://httpbin.org/get\');\r\n$response = $client-&gt;delete(\'http://httpbin.org/delete\');\r\n$response = $client-&gt;head(\'http://httpbin.org/get\');\r\n$response = $client-&gt;options(\'http://httpbin.org/get\');\r\n$response = $client-&gt;patch(\'http://httpbin.org/patch\');\r\n$response = $client-&gt;post(\'http://httpbin.org/post\');\r\n$response = $client-&gt;put(\'http://httpbin.org/put\');[/php]\r\n\r\n或者创建一个请求，一切就绪后再发送请求：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Psr7\\Request;\r\n\r\n$request = new Request(\'PUT\', \'http://httpbin.org/put\');\r\n$response = $client-&gt;send($request, [\'timeout\' =&gt; 2]);[/php]\r\n\r\n<h4>4.3 异步请求</h4>\r\n直接用Client提供的方法来创建异步请求：\r\n\r\n[php]&lt;?php\r\n$promise = $client-&gt;getAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;deleteAsync(\'http://httpbin.org/delete\');\r\n$promise = $client-&gt;headAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;optionsAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;patchAsync(\'http://httpbin.org/patch\');\r\n$promise = $client-&gt;postAsync(\'http://httpbin.org/post\');\r\n$promise = $client-&gt;putAsync(\'http://httpbin.org/put\');[/php]\r\n\r\n或者使用Client的 sendAsync() and requestAsync() 方法：\r\n\r\n[php]&lt;?php\r\n// 创建一个PSR-7请求对象\r\n$headers = [\'X-Foo\' =&gt; \'Bar\'];\r\n$body = \'Hello!\';\r\n$request = new Request(\'HEAD\', \'http://httpbin.org/head\', $headers, $body);\r\n\r\n// 如果不需要进去请求实例\r\n$promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\r\n[/php]\r\n\r\n<pre>使用 then() 来调用返回值，成功使用 Psr\\Http\\Message\\ResponseInterface 处理器，否则抛出一个异常：\r\n\r\n[php]&lt;/pre&gt;\r\n&lt;pre&gt;&lt;?php \r\nuse Psr\\Http\\Message\\ResponseInterface;\r\nuse GuzzleHttp\\Exception\\RequestException;\r\n\r\n$promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\r\n$promise-&gt;then(\r\n    function (ResponseInterface $res) {\r\n        echo $res-&gt;getStatusCode() . &quot;\\n&quot;;\r\n    },\r\n    function (RequestException $e) {\r\n        echo $e-&gt;getMessage() . &quot;\\n&quot;;\r\n        echo $e-&gt;getRequest()-&gt;getMethod();\r\n    }\r\n);&lt;/pre&gt;\r\n&lt;pre&gt;[/php]\r\n\r\n<h4>4.4 并发请求</h4>\r\n使用Promise和异步请求来同时发送多个请求：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Client;\r\nuse GuzzleHttp\\Promise;\r\n\r\n$client = new Client([\'base_uri\' =&gt; \'http://httpbin.org/\']);\r\n\r\n// 初始化每一个非阻塞请求\r\n$promises = [\r\n    \'image\' =&gt; $client-&gt;getAsync(\'/image\'),\r\n    \'png\'   =&gt; $client-&gt;getAsync(\'/image/png\'),\r\n    \'jpeg\'  =&gt; $client-&gt;getAsync(\'/image/jpeg\'),\r\n    \'webp\'  =&gt; $client-&gt;getAsync(\'/image/webp\')\r\n];\r\n\r\n// 等待请求完成\r\n$results = Promise\\unwrap($promises);\r\n\r\n// 通过键名接收每一个结果\r\n// function.\r\necho $results[\'image\']-&gt;getHeader(\'Content-Length\');\r\necho $results[\'png\']-&gt;getHeader(\'Content-Length\');[/php]\r\n\r\n当你想发送不确定数量的请求时，可以使用 GuzzleHttp\\Pool 对象：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Pool;\r\nuse GuzzleHttp\\Client;\r\nuse GuzzleHttp\\Psr7\\Request;\r\n\r\n$client = new Client();\r\n\r\n$requests = function ($total) {\r\n    $uri = \'http://127.0.0.1:8126/guzzle-server/perf\';\r\n    for ($i = 0; $i &lt; $total; $i++) {\r\n        yield new Request(\'GET\', $uri);\r\n    }\r\n};\r\n\r\n$pool = new Pool($client, $requests(100), [\r\n    \'concurrency\' =&gt; 5,\r\n    \'fulfilled\' =&gt; function ($response, $index) {\r\n        // 每个成功的请求\r\n    },\r\n    \'rejected\' =&gt; function ($reason, $index) {\r\n        // 每个失败的请求\r\n    },\r\n]);\r\n\r\n// 初始化传输和创建授权\r\n$promise = $pool-&gt;promise();\r\n\r\n// 等待请求池完成\r\n$promise-&gt;wait();\r\n[/php]\r\n\r\n<h3>5. 响应</h3>\r\n<h4>5.1 获取响应的状态码</h4>\r\n\r\n[php]$code = $response-&gt;getStatusCode(); // 200[/php]\r\n\r\n<h4>5.2 获取原因短语(reason phrase)</h4>\r\n\r\n[php]$reason = $response-&gt;getReasonPhrase(); // OK[/php]\r\n\r\n<h4>5.3 获取头信息(header)</h4>\r\n\r\n[php]// 检查是否存在头信息\r\nif ($response-&gt;hasHeader(\'Content-Length\')) {\r\n    echo &quot;It exists&quot;;\r\n}\r\n\r\n// 获取头信息\r\necho $response-&gt;getHeader(\'Content-Length\');\r\n\r\n// 获取所有响应头信息\r\nforeach ($response-&gt;getHeaders() as $name =&gt; $values) {\r\n    echo $name . \': \' . implode(\', \', $values) . &quot;\\r\\n&quot;;\r\n}\r\n[/php]\r\n\r\n<h4>5.4 获取响应的主体部分(body)</h4>\r\n\r\n[php]$body = $response-&gt;getBody();\r\n// 隐式转换成字符串并输出\r\necho $body;\r\n// 显示转换body成字符串\r\n$stringBody = (string) $body;\r\n// 从body中读取10字节（bytes）\r\n$tenBytes = $body-&gt;read(10);\r\n// 将正文的剩余内容作为字符串读取\r\n$remainingBytes = $body-&gt;getContents();[/php]\r\n\r\n<h3>6. 参数</h3>\r\n<h4>6.1 在请求的URI中设置查询字符串</h4>\r\n\r\n[php]$response = $client-&gt;request(\'GET\', \'http://httpbin.org?foo=bar\');[/php]\r\n\r\n<h4>6.2 使用 query 请求参数来声明查询字符串参数</h4>\r\n\r\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\r\n    \'query\' =&gt; [\'foo\' =&gt; \'bar\']\r\n]);\r\n[/php]\r\n\r\n<h4>6.3 提供一个字符串作为 query 请求参数</h4>\r\n\r\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\'query\' =&gt; \'foo=bar\']);[/php]\r\n\r\n<h3>7. 其它</h3>\r\nGuzzle还提供了一些其它有用的功能\r\n<ul>\r\n 	<li>上传数据（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data</a>）</li>\r\n 	<li>POST/表单请求（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests</a>）</li>\r\n 	<li>Cookies（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#cookies\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#cookies</a>）</li>\r\n 	<li>重定向（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#redirects\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#redirects</a>）</li>\r\n 	<li>异常（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions</a>）</li>\r\n</ul>\r\n具体的可以查看官方文档。', 'Guzzle：PHP的HTTP客户端', '', 'inherit', 'closed', 'closed', '', '1175-revision-v1', '', '', '2017-07-31 16:15:26', '2017-07-31 08:15:26', '', 1175, 'https://www.gzpblog.com/20170731/1182.html', 0, 'revision', '', 0),
(1183, 1, '2017-07-31 16:16:00', '2017-07-31 08:16:00', '<h3>1. 什么是Guzzle？</h3>\r\nGuzzle是一个PHP的HTTP客户端，用来轻而易举地发送请求，并集成到我们的WEB服务上。\r\n<ul>\r\n 	<li>接口简单：构建查询语句、POST请求、分流上传下载大文件、使用HTTP cookies、上传JSON数据等等。</li>\r\n 	<li>发送同步或异步的请求均使用相同的接口。</li>\r\n 	<li>使用PSR-7接口来请求、响应、分流，允许你使用其他兼容的PSR-7类库与Guzzle共同开发。</li>\r\n 	<li>抽象了底层的HTTP传输，允许你改变环境以及其他的代码，如：对cURL与PHP的流或socket并非重度依赖，非阻塞事件循环。</li>\r\n 	<li>中间件系统允许你创建构成客户端行为。</li>\r\n</ul>\r\nGithub地址：<a href=\"https://github.com/guzzle/guzzle/\" target=\"_blank\" rel=\"noopener noreferrer\">guzzle/guzzle</a>\r\n\r\n官方文档：<a href=\"http://docs.guzzlephp.org/en/stable/\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/</a>\r\n\r\n中文文档：<a href=\"http://guzzle-cn.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">http://guzzle-cn.readthedocs.io/zh_CN/latest/</a>\r\n<h3>2. 安装Guzzle</h3>\r\n<h4>2.1 通过composer安装</h4>\r\n执行composer命令：\r\n\r\nphp composer.phar require guzzlehttp/guzzle\r\n\r\n引入Composer自动加载类：\r\n\r\nrequire \'vendor/autoload.php\';\r\n\r\n通过Composer更新Guzzle：\r\n\r\ncomposer.phar update\r\n<h3>3. 例子</h3>\r\n\r\n[php]$client = new \\GuzzleHttp\\Client();\r\n$res = $client-&gt;request(\'GET\', \'https://api.github.com/repos/guzzle/guzzle\');\r\necho $res-&gt;getStatusCode();\r\n// 200\r\necho $res-&gt;getHeaderLine(\'content-type\');\r\n// \'application/json; charset=utf8\'\r\necho $res-&gt;getBody();\r\n// \'{&quot;id&quot;: 1420053, &quot;name&quot;: &quot;guzzle&quot;, ...}\'\r\n\r\n// 发送一个异步请求    \r\n$request = new \\GuzzleHttp\\Psr7\\Request(\'GET\', \'http://httpbin.org\');\r\n$promise = $client-&gt;sendAsync($request)-&gt;then(function ($response) {\r\n    echo \'I completed! \' . $response-&gt;getBody();\r\n});\r\n$promise-&gt;wait();[/php]\r\n\r\n<h3>4. 发送请求</h3>\r\n<h4>4.1 创建客户端</h4>\r\n通过实例化Client类创建一个客户端：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Client;\r\n\r\n$client = new Client([\r\n    // 基URI\r\n    \'base_uri\' =&gt; \'http://httpbin.org\',\r\n    // 设置默认请求参数\r\n    \'timeout\'  =&gt; 2.0,\r\n]);[/php]\r\n\r\n<h4>4.2 发送请求</h4>\r\nClient对象的方法可以很容易的发送请求：\r\n\r\n[php]&lt;?php\r\n$response = $client-&gt;get(\'http://httpbin.org/get\');\r\n$response = $client-&gt;delete(\'http://httpbin.org/delete\');\r\n$response = $client-&gt;head(\'http://httpbin.org/get\');\r\n$response = $client-&gt;options(\'http://httpbin.org/get\');\r\n$response = $client-&gt;patch(\'http://httpbin.org/patch\');\r\n$response = $client-&gt;post(\'http://httpbin.org/post\');\r\n$response = $client-&gt;put(\'http://httpbin.org/put\');[/php]\r\n\r\n或者创建一个请求，一切就绪后再发送请求：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Psr7\\Request;\r\n\r\n$request = new Request(\'PUT\', \'http://httpbin.org/put\');\r\n$response = $client-&gt;send($request, [\'timeout\' =&gt; 2]);[/php]\r\n\r\n<h4>4.3 异步请求</h4>\r\n直接用Client提供的方法来创建异步请求：\r\n\r\n[php]&lt;?php\r\n$promise = $client-&gt;getAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;deleteAsync(\'http://httpbin.org/delete\');\r\n$promise = $client-&gt;headAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;optionsAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;patchAsync(\'http://httpbin.org/patch\');\r\n$promise = $client-&gt;postAsync(\'http://httpbin.org/post\');\r\n$promise = $client-&gt;putAsync(\'http://httpbin.org/put\');[/php]\r\n\r\n或者使用Client的 sendAsync() and requestAsync() 方法：\r\n\r\n[php]&lt;?php\r\n// 创建一个PSR-7请求对象\r\n$headers = [\'X-Foo\' =&gt; \'Bar\'];\r\n$body = \'Hello!\';\r\n$request = new Request(\'HEAD\', \'http://httpbin.org/head\', $headers, $body);\r\n\r\n// 如果不需要进去请求实例\r\n$promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\r\n[/php]\r\n\r\n<pre>使用 then() 来调用返回值，成功使用 Psr\\Http\\Message\\ResponseInterface 处理器，否则抛出一个异常：</pre>\r\n\r\n[php]&lt;?php \r\nuse Psr\\Http\\Message\\ResponseInterface;\r\nuse GuzzleHttp\\Exception\\RequestException;\r\n\r\n$promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\r\n$promise-&gt;then(\r\n    function (ResponseInterface $res) {\r\n        echo $res-&gt;getStatusCode() . &quot;\\n&quot;;\r\n    },\r\n    function (RequestException $e) {\r\n        echo $e-&gt;getMessage() . &quot;\\n&quot;;\r\n        echo $e-&gt;getRequest()-&gt;getMethod();\r\n    }\r\n);[/php]\r\n\r\n<h4>4.4 并发请求</h4>\r\n使用Promise和异步请求来同时发送多个请求：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Client;\r\nuse GuzzleHttp\\Promise;\r\n\r\n$client = new Client([\'base_uri\' =&gt; \'http://httpbin.org/\']);\r\n\r\n// 初始化每一个非阻塞请求\r\n$promises = [\r\n    \'image\' =&gt; $client-&gt;getAsync(\'/image\'),\r\n    \'png\'   =&gt; $client-&gt;getAsync(\'/image/png\'),\r\n    \'jpeg\'  =&gt; $client-&gt;getAsync(\'/image/jpeg\'),\r\n    \'webp\'  =&gt; $client-&gt;getAsync(\'/image/webp\')\r\n];\r\n\r\n// 等待请求完成\r\n$results = Promise\\unwrap($promises);\r\n\r\n// 通过键名接收每一个结果\r\n// function.\r\necho $results[\'image\']-&gt;getHeader(\'Content-Length\');\r\necho $results[\'png\']-&gt;getHeader(\'Content-Length\');[/php]\r\n\r\n当你想发送不确定数量的请求时，可以使用 GuzzleHttp\\Pool 对象：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Pool;\r\nuse GuzzleHttp\\Client;\r\nuse GuzzleHttp\\Psr7\\Request;\r\n\r\n$client = new Client();\r\n\r\n$requests = function ($total) {\r\n    $uri = \'http://127.0.0.1:8126/guzzle-server/perf\';\r\n    for ($i = 0; $i &lt; $total; $i++) {\r\n        yield new Request(\'GET\', $uri);\r\n    }\r\n};\r\n\r\n$pool = new Pool($client, $requests(100), [\r\n    \'concurrency\' =&gt; 5,\r\n    \'fulfilled\' =&gt; function ($response, $index) {\r\n        // 每个成功的请求\r\n    },\r\n    \'rejected\' =&gt; function ($reason, $index) {\r\n        // 每个失败的请求\r\n    },\r\n]);\r\n\r\n// 初始化传输和创建授权\r\n$promise = $pool-&gt;promise();\r\n\r\n// 等待请求池完成\r\n$promise-&gt;wait();\r\n[/php]\r\n\r\n<h3>5. 响应</h3>\r\n<h4>5.1 获取响应的状态码</h4>\r\n\r\n[php]$code = $response-&gt;getStatusCode(); // 200[/php]\r\n\r\n<h4>5.2 获取原因短语(reason phrase)</h4>\r\n\r\n[php]$reason = $response-&gt;getReasonPhrase(); // OK[/php]\r\n\r\n<h4>5.3 获取头信息(header)</h4>\r\n\r\n[php]// 检查是否存在头信息\r\nif ($response-&gt;hasHeader(\'Content-Length\')) {\r\n    echo &quot;It exists&quot;;\r\n}\r\n\r\n// 获取头信息\r\necho $response-&gt;getHeader(\'Content-Length\');\r\n\r\n// 获取所有响应头信息\r\nforeach ($response-&gt;getHeaders() as $name =&gt; $values) {\r\n    echo $name . \': \' . implode(\', \', $values) . &quot;\\r\\n&quot;;\r\n}\r\n[/php]\r\n\r\n<h4>5.4 获取响应的主体部分(body)</h4>\r\n\r\n[php]$body = $response-&gt;getBody();\r\n// 隐式转换成字符串并输出\r\necho $body;\r\n// 显示转换body成字符串\r\n$stringBody = (string) $body;\r\n// 从body中读取10字节（bytes）\r\n$tenBytes = $body-&gt;read(10);\r\n// 将正文的剩余内容作为字符串读取\r\n$remainingBytes = $body-&gt;getContents();[/php]\r\n\r\n<h3>6. 参数</h3>\r\n<h4>6.1 在请求的URI中设置查询字符串</h4>\r\n\r\n[php]$response = $client-&gt;request(\'GET\', \'http://httpbin.org?foo=bar\');[/php]\r\n\r\n<h4>6.2 使用 query 请求参数来声明查询字符串参数</h4>\r\n\r\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\r\n    \'query\' =&gt; [\'foo\' =&gt; \'bar\']\r\n]);\r\n[/php]\r\n\r\n<h4>6.3 提供一个字符串作为 query 请求参数</h4>\r\n\r\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\'query\' =&gt; \'foo=bar\']);[/php]\r\n\r\n<h3>7. 其它</h3>\r\nGuzzle还提供了一些其它有用的功能\r\n<ul>\r\n 	<li>上传数据（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data</a>）</li>\r\n 	<li>POST/表单请求（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests</a>）</li>\r\n 	<li>Cookies（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#cookies\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#cookies</a>）</li>\r\n 	<li>重定向（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#redirects\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#redirects</a>）</li>\r\n 	<li>异常（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions</a>）</li>\r\n</ul>\r\n具体的可以查看官方文档。', 'Guzzle：PHP的HTTP客户端', '', 'inherit', 'closed', 'closed', '', '1175-revision-v1', '', '', '2017-07-31 16:16:00', '2017-07-31 08:16:00', '', 1175, 'https://www.gzpblog.com/20170731/1183.html', 0, 'revision', '', 0),
(1185, 1, '2017-07-31 16:21:01', '2017-07-31 08:21:01', '<h3>1. 什么是Guzzle？</h3>\r\nGuzzle是一个PHP的HTTP客户端，用来轻而易举地发送请求，并集成到我们的WEB服务上。\r\n<ul>\r\n 	<li>接口简单：构建查询语句、POST请求、分流上传下载大文件、使用HTTP cookies、上传JSON数据等等。</li>\r\n 	<li>发送同步或异步的请求均使用相同的接口。</li>\r\n 	<li>使用PSR-7接口来请求、响应、分流，允许你使用其他兼容的PSR-7类库与Guzzle共同开发。</li>\r\n 	<li>抽象了底层的HTTP传输，允许你改变环境以及其他的代码，如：对cURL与PHP的流或socket并非重度依赖，非阻塞事件循环。</li>\r\n 	<li>中间件系统允许你创建构成客户端行为。</li>\r\n</ul>\r\nGithub地址：<a href=\"https://github.com/guzzle/guzzle/\" target=\"_blank\" rel=\"noopener noreferrer\">guzzle/guzzle</a>\r\n\r\n官方文档：<a href=\"http://docs.guzzlephp.org/en/stable/\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/</a>\r\n\r\n中文文档：<a href=\"http://guzzle-cn.readthedocs.io/zh_CN/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">http://guzzle-cn.readthedocs.io/zh_CN/latest/</a>\r\n<h3>2. 安装Guzzle</h3>\r\n<h4>2.1 通过composer安装</h4>\r\n执行composer命令：\r\n\r\nphp composer.phar require guzzlehttp/guzzle\r\n\r\n引入Composer自动加载类：\r\n\r\nrequire \'vendor/autoload.php\';\r\n\r\n通过Composer更新Guzzle：\r\n\r\ncomposer.phar update\r\n<h3>3. 例子</h3>\r\n\r\n[php]$client = new \\GuzzleHttp\\Client();\r\n$res = $client-&gt;request(\'GET\', \'https://api.github.com/repos/guzzle/guzzle\');\r\necho $res-&gt;getStatusCode();\r\n// 200\r\necho $res-&gt;getHeaderLine(\'content-type\');\r\n// \'application/json; charset=utf8\'\r\necho $res-&gt;getBody();\r\n// \'{&quot;id&quot;: 1420053, &quot;name&quot;: &quot;guzzle&quot;, ...}\'\r\n\r\n// 发送一个异步请求    \r\n$request = new \\GuzzleHttp\\Psr7\\Request(\'GET\', \'http://httpbin.org\');\r\n$promise = $client-&gt;sendAsync($request)-&gt;then(function ($response) {\r\n    echo \'I completed! \' . $response-&gt;getBody();\r\n});\r\n$promise-&gt;wait();[/php]\r\n\r\n<h3>4. 发送请求</h3>\r\n<h4>4.1 创建客户端</h4>\r\n通过实例化Client类创建一个客户端：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Client;\r\n\r\n$client = new Client([\r\n    // 基URI\r\n    \'base_uri\' =&gt; \'http://httpbin.org\',\r\n    // 设置默认请求参数\r\n    \'timeout\'  =&gt; 2.0,\r\n]);[/php]\r\n\r\n<h4>4.2 发送请求</h4>\r\nClient对象的方法可以很容易的发送请求：\r\n\r\n[php]&lt;?php $response = $client-&gt;get(\'http://httpbin.org/get\');\r\n$response = $client-&gt;delete(\'http://httpbin.org/delete\');\r\n$response = $client-&gt;head(\'http://httpbin.org/get\');\r\n$response = $client-&gt;options(\'http://httpbin.org/get\');\r\n$response = $client-&gt;patch(\'http://httpbin.org/patch\');\r\n$response = $client-&gt;post(\'http://httpbin.org/post\');\r\n$response = $client-&gt;put(\'http://httpbin.org/put\');[/php]\r\n\r\n或者创建一个请求，一切就绪后再发送请求：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Psr7\\Request;\r\n\r\n$request = new Request(\'PUT\', \'http://httpbin.org/put\');\r\n$response = $client-&gt;send($request, [\'timeout\' =&gt; 2]);\r\n[/php]\r\n\r\n<h4>4.3 异步请求</h4>\r\n直接用Client提供的方法来创建异步请求：\r\n\r\n[php]&lt;?php $promise = $client-&gt;getAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;deleteAsync(\'http://httpbin.org/delete\');\r\n$promise = $client-&gt;headAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;optionsAsync(\'http://httpbin.org/get\');\r\n$promise = $client-&gt;patchAsync(\'http://httpbin.org/patch\');\r\n$promise = $client-&gt;postAsync(\'http://httpbin.org/post\');\r\n$promise = $client-&gt;putAsync(\'http://httpbin.org/put\');[/php]\r\n\r\n或者使用Client的 sendAsync() and requestAsync() 方法：\r\n\r\n[php]&lt;?php // 创建一个PSR-7请求对象 $headers = [\'X-Foo\' =&gt; \'Bar\'];\r\n$body = \'Hello!\';\r\n$request = new Request(\'HEAD\', \'http://httpbin.org/head\', $headers, $body);\r\n\r\n// 如果不需要进去请求实例\r\n$promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\r\n[/php]\r\n\r\n使用 then() 来调用返回值，成功使用 Psr\\Http\\Message\\ResponseInterface 处理器，否则抛出一个异常：\r\n\r\n[php]&lt;?php \r\nuse Psr\\Http\\Message\\ResponseInterface;\r\nuse GuzzleHttp\\Exception\\RequestException;\r\n\r\n$promise = $client-&gt;requestAsync(\'GET\', \'http://httpbin.org/get\');\r\n$promise-&gt;then(\r\n    function (ResponseInterface $res) {\r\n        echo $res-&gt;getStatusCode() . &quot;\\n&quot;;\r\n    },\r\n    function (RequestException $e) {\r\n        echo $e-&gt;getMessage() . &quot;\\n&quot;;\r\n        echo $e-&gt;getRequest()-&gt;getMethod();\r\n    }\r\n);[/php]\r\n\r\n<h4>4.4 并发请求</h4>\r\n使用Promise和异步请求来同时发送多个请求：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Client;\r\nuse GuzzleHttp\\Promise;\r\n\r\n$client = new Client([\'base_uri\' =&gt; \'http://httpbin.org/\']);\r\n\r\n// 初始化每一个非阻塞请求\r\n$promises = [\r\n    \'image\' =&gt; $client-&gt;getAsync(\'/image\'),\r\n    \'png\'   =&gt; $client-&gt;getAsync(\'/image/png\'),\r\n    \'jpeg\'  =&gt; $client-&gt;getAsync(\'/image/jpeg\'),\r\n    \'webp\'  =&gt; $client-&gt;getAsync(\'/image/webp\')\r\n];\r\n\r\n// 等待请求完成\r\n$results = Promise\\unwrap($promises);\r\n\r\n// 通过键名接收每一个结果\r\n// function.\r\necho $results[\'image\']-&gt;getHeader(\'Content-Length\');\r\necho $results[\'png\']-&gt;getHeader(\'Content-Length\');[/php]\r\n\r\n当你想发送不确定数量的请求时，可以使用 GuzzleHttp\\Pool 对象：\r\n\r\n[php]&lt;?php\r\nuse GuzzleHttp\\Pool;\r\nuse GuzzleHttp\\Client;\r\nuse GuzzleHttp\\Psr7\\Request;\r\n\r\n$client = new Client();\r\n\r\n$requests = function ($total) {\r\n    $uri = \'http://127.0.0.1:8126/guzzle-server/perf\';\r\n    for ($i = 0; $i &lt; $total; $i++) {\r\n        yield new Request(\'GET\', $uri);\r\n    }\r\n};\r\n\r\n$pool = new Pool($client, $requests(100), [\r\n    \'concurrency\' =&gt; 5,\r\n    \'fulfilled\' =&gt; function ($response, $index) {\r\n        // 每个成功的请求\r\n    },\r\n    \'rejected\' =&gt; function ($reason, $index) {\r\n        // 每个失败的请求\r\n    },\r\n]);\r\n\r\n// 初始化传输和创建授权\r\n$promise = $pool-&gt;promise();\r\n\r\n// 等待请求池完成\r\n$promise-&gt;wait();\r\n[/php]\r\n\r\n<h3>5. 响应</h3>\r\n<h4>5.1 获取响应的状态码</h4>\r\n\r\n[php]$code = $response-&gt;getStatusCode(); // 200[/php]\r\n\r\n<h4>5.2 获取原因短语(reason phrase)</h4>\r\n\r\n[php]$reason = $response-&gt;getReasonPhrase(); // OK[/php]\r\n\r\n<h4>5.3 获取头信息(header)</h4>\r\n\r\n[php]// 检查是否存在头信息\r\nif ($response-&gt;hasHeader(\'Content-Length\')) {\r\n    echo &quot;It exists&quot;;\r\n}\r\n\r\n// 获取头信息\r\necho $response-&gt;getHeader(\'Content-Length\');\r\n\r\n// 获取所有响应头信息\r\nforeach ($response-&gt;getHeaders() as $name =&gt; $values) {\r\n    echo $name . \': \' . implode(\', \', $values) . &quot;\\r\\n&quot;;\r\n}\r\n[/php]\r\n\r\n<h4>5.4 获取响应的主体部分(body)</h4>\r\n\r\n[php]$body = $response-&gt;getBody();\r\n// 隐式转换成字符串并输出\r\necho $body;\r\n// 显示转换body成字符串\r\n$stringBody = (string) $body;\r\n// 从body中读取10字节（bytes）\r\n$tenBytes = $body-&gt;read(10);\r\n// 将正文的剩余内容作为字符串读取\r\n$remainingBytes = $body-&gt;getContents();[/php]\r\n\r\n<h3>6. 参数</h3>\r\n<h4>6.1 在请求的URI中设置查询字符串</h4>\r\n\r\n[php]$response = $client-&gt;request(\'GET\', \'http://httpbin.org?foo=bar\');[/php]\r\n\r\n<h4>6.2 使用 query 请求参数来声明查询字符串参数</h4>\r\n\r\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\r\n    \'query\' =&gt; [\'foo\' =&gt; \'bar\']\r\n]);\r\n[/php]\r\n\r\n<h4>6.3 提供一个字符串作为 query 请求参数</h4>\r\n\r\n[php]$client-&gt;request(\'GET\', \'http://httpbin.org\', [\'query\' =&gt; \'foo=bar\']);[/php]\r\n\r\n<h3>7. 其它</h3>\r\nGuzzle还提供了一些其它有用的功能\r\n<ul>\r\n 	<li>上传数据（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#uploading-data</a>）</li>\r\n 	<li>POST/表单请求（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#post-form-requests</a>）</li>\r\n 	<li>Cookies（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#cookies\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#cookies</a>）</li>\r\n 	<li>重定向（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#redirects\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#redirects</a>）</li>\r\n 	<li>异常（<a href=\"http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions\" target=\"_blank\" rel=\"noopener noreferrer\">http://docs.guzzlephp.org/en/stable/quickstart.html#exceptions</a>）</li>\r\n</ul>\r\n具体的可以查看官方文档。', 'Guzzle：PHP的HTTP客户端', '', 'inherit', 'closed', 'closed', '', '1175-revision-v1', '', '', '2017-07-31 16:21:01', '2017-07-31 08:21:01', '', 1175, 'https://www.gzpblog.com/20170731/1185.html', 0, 'revision', '', 0),
(1186, 1, '2017-08-01 10:23:44', '2017-08-01 02:23:44', '<h3>1. 发现问题</h3>\r\n最近用火狐上博客时，发现一个问题，加载博客页面总是出现菊花一直在转，左下角一直在等待sp0.baidu.com：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images1.png\"><img class=\"size-full wp-image-1190 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images1.png\" alt=\"\" width=\"254\" height=\"33\" /></a>\r\n\r\n导致后面的js无法加载。看了一下 network 发现是获取一个 s.gif 的时候出现问题：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images2.png\"><img class=\"size-full wp-image-1191 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images2.png\" alt=\"\" width=\"903\" height=\"27\" /></a>\r\n\r\n具体的url：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images3.png\"><img class=\"alignnone size-full wp-image-1192\" src=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images3.png\" alt=\"\" width=\"989\" height=\"19\" /></a>\r\n\r\n而这个问题只在火狐上出现，其它浏览器正常，比如chrome浏览器正常加载：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images4.png\"><img class=\" wp-image-1193 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images4.png\" alt=\"\" width=\"604\" height=\"395\" /></a>\r\n\r\n同时在火狐上报了一个错：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images5.png\"><img class=\"size-full wp-image-1187 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images5.png\" alt=\"\" width=\"711\" height=\"36\" /></a>在之前优化HTTPS的时候，我<strong>设置了X-Content-Type-Options为nosniff</strong>。\r\n<h3>2. s.gif 文件</h3>\r\n从请求上看，这个请求来自push.js。而push.js是百度自动推送的js代码：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images6.png\"><img class=\"size-full wp-image-1188 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images6.png\" alt=\"\" width=\"443\" height=\"216\" /></a>\r\n\r\n那就是说，百度自动推送的js代码里用 Get请求 请求s.gif文件，而X-Content-Type-Options为nosniff；导致被阻塞，一直加载不过去。确实，即使超时，后面的内容加载出来了，s.gif这里也是一直加载不出来的。并不是很清楚这个s.gif这推送中的作用。\r\n<h3>3. 关于X-Content-Type-Options</h3>\r\n<a href=\"https://httpsecurityreport.com/best_practice.html#contentTypeOptions\" target=\"_blank\" rel=\"noopener\">httpsecurityreport</a> 的建议是将X-Content-Type-Options设置为nosniff，这是最好的做法。\r\n\r\n关于X-Content-Type-Options的介绍：<a href=\"https://fetch.spec.whatwg.org/#x-content-type-options-header\" target=\"_blank\" rel=\"noopener\">X-Content-Type-Options</a>；这里有一个NOTE：\r\n<blockquote>Only \"script\" and \"style\" are considered as any exploits pertain to those types. Also, considering \"image\" was not compatible with deployed content.\r\n\r\n只有 \"script\" 和 \"style\" 类型才考虑这些类型的利用。当然，\"image\" 类型与部署的内容是不兼容的。</blockquote>\r\n其实这句话看得不是很懂，这里有一个表格：<a href=\"https://httpsecurityreport.com/best_practice.html#contentTypeOptions\" target=\"_blank\" rel=\"noopener\">ContentTypeOptions</a>，从这个表格可以看出，image类型支持的有：html中的&lt;img src&gt;；favicon图标；SVG的&lt;image&gt;；CSS中的一些样式等。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images7.png\"><img class=\"wp-image-1189 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images7.png\" alt=\"\" width=\"925\" height=\"47\" /></a>\r\n\r\n而我们出问题的这段百度自动推送js是Get请求一个 image/gif 图片，<strong>这个或许是不支持的</strong>。\r\n\r\nGithub上确实有这么一个讨论： <a href=\"https://github.com/whatwg/fetch/issues/395\" target=\"_blank\" rel=\"noopener\">https://github.com/whatwg/fetch/issues/395</a>；提到了<strong>Firefox支持images类型的nosniff属性，而Chrome是不支持的</strong>。这就解释得通为什么Chrome正常了，不同浏览器对这个属性的支持目前似乎还不一样。但是这还是属于比较新的 issue，几个月之前提的，未来Chrome和Firefox会不会统一做法，或者标准会不会改变还不知道。不过大概的原因我们是定位到了。\r\n<h3>4. 解决</h3>\r\n把百度自动推送不支持这个属性的代码下了吧。\r\n\r\n下了之后网站加载就正常了。', '火狐浏览器X-Content-Type-Options导致Images类型无法加载', '', 'publish', 'open', 'closed', '', '%e7%81%ab%e7%8b%90%e6%b5%8f%e8%a7%88%e5%99%a8x-content-type-options%e5%af%bc%e8%87%b4images%e7%b1%bb%e5%9e%8b%e6%97%a0%e6%b3%95%e5%8a%a0%e8%bd%bd', '', '', '2017-08-01 10:23:44', '2017-08-01 02:23:44', '', 0, 'https://www.gzpblog.com/?p=1186', 0, 'post', '', 0),
(1187, 1, '2017-08-01 10:08:41', '2017-08-01 02:08:41', '', 'firebox_debug_images5', '', 'inherit', 'open', 'closed', '', 'firebox_debug_images5', '', '', '2017-08-01 10:08:41', '2017-08-01 02:08:41', '', 1186, 'https://www.gzpblog.com/wp-content/uploads/2017/08/firebox_debug_images5.png', 0, 'attachment', 'image/png', 0),
(1188, 1, '2017-08-01 10:08:42', '2017-08-01 02:08:42', '', 'firebox_debug_images6', '', 'inherit', 'open', 'closed', '', 'firebox_debug_images6', '', '', '2017-08-01 10:08:42', '2017-08-01 02:08:42', '', 1186, 'https://www.gzpblog.com/wp-content/uploads/2017/08/firebox_debug_images6.png', 0, 'attachment', 'image/png', 0),
(1189, 1, '2017-08-01 10:08:43', '2017-08-01 02:08:43', '', 'firebox_debug_images7', '', 'inherit', 'open', 'closed', '', 'firebox_debug_images7', '', '', '2017-08-01 10:08:43', '2017-08-01 02:08:43', '', 1186, 'https://www.gzpblog.com/wp-content/uploads/2017/08/firebox_debug_images7.png', 0, 'attachment', 'image/png', 0),
(1190, 1, '2017-08-01 10:08:44', '2017-08-01 02:08:44', '', 'firebox_debug_images1', '', 'inherit', 'open', 'closed', '', 'firebox_debug_images1', '', '', '2017-08-01 10:08:44', '2017-08-01 02:08:44', '', 1186, 'https://www.gzpblog.com/wp-content/uploads/2017/08/firebox_debug_images1.png', 0, 'attachment', 'image/png', 0),
(1191, 1, '2017-08-01 10:08:45', '2017-08-01 02:08:45', '', 'firebox_debug_images2', '', 'inherit', 'open', 'closed', '', 'firebox_debug_images2', '', '', '2017-08-01 10:08:45', '2017-08-01 02:08:45', '', 1186, 'https://www.gzpblog.com/wp-content/uploads/2017/08/firebox_debug_images2.png', 0, 'attachment', 'image/png', 0),
(1192, 1, '2017-08-01 10:08:46', '2017-08-01 02:08:46', '', 'firebox_debug_images3', '', 'inherit', 'open', 'closed', '', 'firebox_debug_images3', '', '', '2017-08-01 10:08:46', '2017-08-01 02:08:46', '', 1186, 'https://www.gzpblog.com/wp-content/uploads/2017/08/firebox_debug_images3.png', 0, 'attachment', 'image/png', 0),
(1193, 1, '2017-08-01 10:08:47', '2017-08-01 02:08:47', '', 'firebox_debug_images4', '', 'inherit', 'open', 'closed', '', 'firebox_debug_images4', '', '', '2017-08-01 10:08:47', '2017-08-01 02:08:47', '', 1186, 'https://www.gzpblog.com/wp-content/uploads/2017/08/firebox_debug_images4.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `gzp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(1194, 1, '2017-08-01 10:23:44', '2017-08-01 02:23:44', '<h3>1. 发现问题</h3>\r\n最近用火狐上博客时，发现一个问题，加载博客页面总是出现菊花一直在转，左下角一直在等待sp0.baidu.com：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images1.png\"><img class=\"size-full wp-image-1190 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images1.png\" alt=\"\" width=\"254\" height=\"33\" /></a>\r\n\r\n导致后面的js无法加载。看了一下 network 发现是获取一个 s.gif 的时候出现问题：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images2.png\"><img class=\"size-full wp-image-1191 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images2.png\" alt=\"\" width=\"903\" height=\"27\" /></a>\r\n\r\n具体的url：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images3.png\"><img class=\"alignnone size-full wp-image-1192\" src=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images3.png\" alt=\"\" width=\"989\" height=\"19\" /></a>\r\n\r\n而这个问题只在火狐上出现，其它浏览器正常，比如chrome浏览器正常加载：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images4.png\"><img class=\" wp-image-1193 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images4.png\" alt=\"\" width=\"604\" height=\"395\" /></a>\r\n\r\n同时在火狐上报了一个错：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images5.png\"><img class=\"size-full wp-image-1187 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images5.png\" alt=\"\" width=\"711\" height=\"36\" /></a>在之前优化HTTPS的时候，我<strong>设置了X-Content-Type-Options为nosniff</strong>。\r\n<h3>2. s.gif 文件</h3>\r\n从请求上看，这个请求来自push.js。而push.js是百度自动推送的js代码：\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images6.png\"><img class=\"size-full wp-image-1188 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images6.png\" alt=\"\" width=\"443\" height=\"216\" /></a>\r\n\r\n那就是说，百度自动推送的js代码里用 Get请求 请求s.gif文件，而X-Content-Type-Options为nosniff；导致被阻塞，一直加载不过去。确实，即使超时，后面的内容加载出来了，s.gif这里也是一直加载不出来的。并不是很清楚这个s.gif这推送中的作用。\r\n<h3>3. 关于X-Content-Type-Options</h3>\r\n<a href=\"https://httpsecurityreport.com/best_practice.html#contentTypeOptions\" target=\"_blank\" rel=\"noopener\">httpsecurityreport</a> 的建议是将X-Content-Type-Options设置为nosniff，这是最好的做法。\r\n\r\n关于X-Content-Type-Options的介绍：<a href=\"https://fetch.spec.whatwg.org/#x-content-type-options-header\" target=\"_blank\" rel=\"noopener\">X-Content-Type-Options</a>；这里有一个NOTE：\r\n<blockquote>Only \"script\" and \"style\" are considered as any exploits pertain to those types. Also, considering \"image\" was not compatible with deployed content.\r\n\r\n只有 \"script\" 和 \"style\" 类型才考虑这些类型的利用。当然，\"image\" 类型与部署的内容是不兼容的。</blockquote>\r\n其实这句话看得不是很懂，这里有一个表格：<a href=\"https://httpsecurityreport.com/best_practice.html#contentTypeOptions\" target=\"_blank\" rel=\"noopener\">ContentTypeOptions</a>，从这个表格可以看出，image类型支持的有：html中的&lt;img src&gt;；favicon图标；SVG的&lt;image&gt;；CSS中的一些样式等。\r\n\r\n<a href=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images7.png\"><img class=\"wp-image-1189 aligncenter\" src=\"https://files.gzpblog.com/wp/2017/08/firebox_debug_images7.png\" alt=\"\" width=\"925\" height=\"47\" /></a>\r\n\r\n而我们出问题的这段百度自动推送js是Get请求一个 image/gif 图片，<strong>这个或许是不支持的</strong>。\r\n\r\nGithub上确实有这么一个讨论： <a href=\"https://github.com/whatwg/fetch/issues/395\" target=\"_blank\" rel=\"noopener\">https://github.com/whatwg/fetch/issues/395</a>；提到了<strong>Firefox支持images类型的nosniff属性，而Chrome是不支持的</strong>。这就解释得通为什么Chrome正常了，不同浏览器对这个属性的支持目前似乎还不一样。但是这还是属于比较新的 issue，几个月之前提的，未来Chrome和Firefox会不会统一做法，或者标准会不会改变还不知道。不过大概的原因我们是定位到了。\r\n<h3>4. 解决</h3>\r\n把百度自动推送不支持这个属性的代码下了吧。\r\n\r\n下了之后网站加载就正常了。', '火狐浏览器X-Content-Type-Options导致Images类型无法加载', '', 'inherit', 'closed', 'closed', '', '1186-revision-v1', '', '', '2017-08-01 10:23:44', '2017-08-01 02:23:44', '', 1186, 'https://www.gzpblog.com/20170801/1194.html', 0, 'revision', '', 0),
(1195, 1, '2017-08-04 22:48:45', '0000-00-00 00:00:00', '', '自动草稿', '', 'auto-draft', 'open', 'closed', '', '', '', '', '2017-08-04 22:48:45', '0000-00-00 00:00:00', '', 0, 'https://www.gzpblog.com/?p=1195', 0, 'post', '', 0),
(1197, 1, '2017-08-10 22:50:21', '0000-00-00 00:00:00', '', '自动草稿', '', 'auto-draft', 'open', 'closed', '', '', '', '', '2017-08-10 22:50:21', '0000-00-00 00:00:00', '', 0, 'https://www.gzpblog.com/?p=1197', 0, 'post', '', 0);

-- --------------------------------------------------------

--
-- 表的结构 `gzp_termmeta`
--

CREATE TABLE `gzp_termmeta` (
  `meta_id` bigint(20) UNSIGNED NOT NULL,
  `term_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- 表的结构 `gzp_terms`
--

CREATE TABLE `gzp_terms` (
  `term_id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(200) NOT NULL DEFAULT '',
  `slug` varchar(200) NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0'
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `gzp_terms`
--

INSERT INTO `gzp_terms` (`term_id`, `name`, `slug`, `term_group`) VALUES
(1, '未分类', 'uncategorized', 0),
(2, '个人随笔', 'essay-me', 0),
(3, '心情随笔', 'essay', 0),
(4, '编程开发', 'code', 0),
(5, '友情分享', 'share', 0),
(6, '生活杂谈', 'essay-life', 0),
(7, '个人分享', 'share-me', 0),
(8, '转载分享', 'share-reprint', 0),
(9, '学习笔记', 'code-learning', 0),
(10, '编程语言', 'code-about', 0),
(11, '二次开发', 'code-software', 0),
(12, '发发牢骚', 'essay-extra', 0),
(13, 'Typecho', 'typecho', 0),
(14, '影视分享', 'movie', 0),
(15, '微信开发', 'wechat', 0),
(16, 'PHP', 'php', 0),
(17, 'JavaScript', 'javascript', 0),
(18, '数据相关', 'sql', 0),
(19, 'MySQL', 'mysql', 0),
(20, 'ajax', 'ajax', 0),
(21, '学无止境', 'knowledge', 0),
(22, 'Python', 'python', 0),
(23, 'ECshop', 'ecshop', 0),
(24, 'SQL', 'sql', 0),
(25, 'PHP', 'php', 0),
(26, 'tips', 'tips', 0),
(27, 'Typecho', 'typecho', 0),
(28, '生活', '%e7%94%9f%e6%b4%bb', 0),
(29, '感悟', '%e6%84%9f%e6%82%9f', 0),
(30, '插件', '%e6%8f%92%e4%bb%b6', 0),
(31, 'SEO', 'seo', 0),
(32, 'gravatar', 'gravatar', 0),
(33, 'Jquery', 'jquery', 0),
(34, 'Ajax', 'ajax', 0),
(35, '分享', '%e5%88%86%e4%ba%ab', 0),
(36, '乐趣', '%e4%b9%90%e8%b6%a3', 0),
(37, '微信', '%e5%be%ae%e4%bf%a1', 0),
(38, '二次开发', '%e4%ba%8c%e6%ac%a1%e5%bc%80%e5%8f%91', 0),
(39, 'Mysql', 'mysql', 0),
(40, 'JavaScript', 'javascript', 0),
(41, '科技', '%e7%a7%91%e6%8a%80', 0),
(42, 'VR', 'vr', 0),
(43, 'excel', 'excel', 0),
(44, 'email', 'email', 0),
(45, '创新', '%e5%88%9b%e6%96%b0', 0),
(46, '优化', '%e4%bc%98%e5%8c%96', 0),
(47, '站长', '%e7%ab%99%e9%95%bf', 0),
(48, 'Python', 'python', 0),
(49, 'Ecshop', 'ecshop', 0),
(50, 'vivaldi', 'vivaldi', 0),
(51, 'Flash', 'flash', 0),
(52, 'JS', 'js', 0),
(53, '外设', '%e5%a4%96%e8%ae%be', 0),
(54, '键盘', '%e9%94%ae%e7%9b%98', 0),
(55, 'Api', 'api', 0),
(56, 'linux', 'linux', 0),
(57, '前端', '%e5%89%8d%e7%ab%af', 0),
(58, '样式', '%e6%a0%b7%e5%bc%8f', 0),
(59, 'Markdown', 'markdown', 0),
(60, '爬虫', '%e7%88%ac%e8%99%ab', 0),
(61, '学习', '%e5%ad%a6%e4%b9%a0', 0),
(62, '菜单1', '%e8%8f%9c%e5%8d%951', 0),
(63, 'WordPress', 'wordpress', 0),
(64, 'WordPress', 'wordpress', 0),
(65, '正则', '%e6%ad%a3%e5%88%99', 0),
(66, '各类框架', 'framework', 0),
(67, 'ThinkPHP', 'thinkphp', 0),
(68, 'ThinkPHP', 'thinkphp', 0),
(69, '系统服务', 'systemoperation', 0),
(70, '库与拓展', 'library-expand', 0),
(71, '各类技术', 'othertechnology', 0),
(72, 'JQuery', 'jquery', 0),
(73, 'Linux', 'linux', 0),
(74, 'Centos', 'centos', 0),
(75, 'Memcache', 'memcache', 0),
(76, 'Redis', 'redis', 0),
(77, 'Memcache', 'memcache', 0),
(78, 'Redis', 'redis', 0),
(79, 'PhalApi', 'phalapi', 0),
(80, 'PhalApi', 'phalapi', 0),
(81, 'Vue.js', 'vue-js', 0),
(114, 'Phalcon', 'phalcon', 0),
(83, 'Apache', 'apache', 0),
(84, 'Nginx', 'nginx', 0),
(85, 'Nginx', 'nginx', 0),
(86, 'Composer', 'composer', 0),
(87, '牢骚', '%e7%89%a2%e9%aa%9a', 0),
(88, 'cURL', 'curl', 0),
(89, 'windows', 'windows', 0),
(90, 'cgi', 'cgi', 0),
(91, 'Go', 'go', 0),
(92, '网络安全', '%e7%bd%91%e7%bb%9c%e5%ae%89%e5%85%a8', 0),
(93, 'Vue.js', 'vue-js', 0),
(94, 'Bootstrap', 'bootstrap', 0),
(95, 'Git', 'git', 0),
(96, 'php-cgi', 'php-cgi', 0),
(118, '行业资讯', '%e8%a1%8c%e4%b8%9a%e8%b5%84%e8%ae%af', 0),
(99, 'SPA', 'spa', 0),
(100, '前端综合', 'front-about', 0),
(101, '后端综合', 'back-about', 0),
(102, '音乐', '%e9%9f%b3%e4%b9%90', 0),
(103, '音乐分享', '%e9%9f%b3%e4%b9%90%e5%88%86%e4%ba%ab', 0),
(104, 'Github', 'github', 0),
(105, 'Oss', 'oss', 0),
(106, 'HTTPS', 'https', 0),
(107, 'Apache', 'apache', 0),
(108, 'HTTP2', 'http2', 0),
(109, '阿里云', '%e9%98%bf%e9%87%8c%e4%ba%91', 0),
(110, 'ab', 'ab', 0),
(111, '测试', '%e6%b5%8b%e8%af%95', 0),
(112, '运维', '%e8%bf%90%e7%bb%b4', 0),
(113, '顶部菜单', '%e9%a1%b6%e9%83%a8%e8%8f%9c%e5%8d%95', 0),
(115, '侧栏标签化菜单', '%e4%be%a7%e6%a0%8f%e6%a0%87%e7%ad%be%e5%8c%96%e8%8f%9c%e5%8d%95', 0),
(116, '首页友链', 'indexlinnk', 0),
(117, '内页友链', 'insidelink', 0),
(119, '站长相关', '%e7%ab%99%e9%95%bf%e7%9b%b8%e5%85%b3', 0),
(120, '极客专属', 'geek', 0),
(121, '网络安全', 'netsafe', 0),
(122, '工具大全', 'tools', 0),
(123, '前端设计', '%e5%89%8d%e7%ab%af%e8%ae%be%e8%ae%a1', 0),
(124, '素材', '%e7%b4%a0%e6%9d%90', 0),
(125, 'GitBook', 'gitbook', 0),
(126, 'Docker', 'docker', 0),
(127, 'Docker', 'docker', 0),
(128, '学习平台', '%e5%ad%a6%e4%b9%a0%e5%b9%b3%e5%8f%b0', 0),
(129, 'PHPMailer', 'phpmailer', 0),
(130, 'HTML5', 'html5', 0),
(131, 'Wireshark', 'wireshark', 0),
(132, '工具', '%e5%b7%a5%e5%85%b7', 0),
(133, 'HTTP', 'http', 0),
(134, '队列', '%e9%98%9f%e5%88%97', 0),
(135, 'Workerman', 'workerman', 0),
(136, 'Workerman', 'workerman', 0),
(137, '通讯', '%e9%80%9a%e8%ae%af', 0),
(138, 'Swoole', 'swoole', 0),
(139, 'Guzzle', 'guzzle', 0);

-- --------------------------------------------------------

--
-- 表的结构 `gzp_term_relationships`
--

CREATE TABLE `gzp_term_relationships` (
  `object_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0'
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `gzp_term_relationships`
--

INSERT INTO `gzp_term_relationships` (`object_id`, `term_taxonomy_id`, `term_order`) VALUES
(482, 25, 0),
(6, 25, 0),
(6, 4, 0),
(6, 10, 0),
(6, 16, 0),
(6, 19, 0),
(6, 39, 0),
(7, 27, 0),
(7, 4, 0),
(7, 11, 0),
(7, 13, 0),
(7, 30, 0),
(9, 27, 0),
(9, 4, 0),
(9, 10, 0),
(9, 13, 0),
(9, 31, 0),
(10, 28, 0),
(10, 3, 0),
(10, 2, 0),
(10, 29, 0),
(11, 32, 0),
(11, 5, 0),
(11, 7, 0),
(11, 11, 0),
(12, 25, 0),
(12, 4, 0),
(12, 9, 0),
(12, 10, 0),
(12, 17, 0),
(12, 20, 0),
(12, 33, 0),
(12, 34, 0),
(13, 27, 0),
(13, 4, 0),
(13, 11, 0),
(13, 13, 0),
(13, 30, 0),
(14, 28, 0),
(14, 5, 0),
(14, 7, 0),
(14, 14, 0),
(14, 35, 0),
(14, 36, 0),
(15, 25, 0),
(15, 4, 0),
(15, 11, 0),
(15, 15, 0),
(15, 37, 0),
(16, 25, 0),
(16, 4, 0),
(16, 11, 0),
(16, 15, 0),
(16, 37, 0),
(16, 38, 0),
(17, 24, 0),
(17, 4, 0),
(17, 9, 0),
(17, 18, 0),
(17, 19, 0),
(18, 28, 0),
(18, 3, 0),
(18, 12, 0),
(19, 40, 0),
(19, 4, 0),
(19, 10, 0),
(19, 17, 0),
(20, 28, 0),
(20, 3, 0),
(20, 12, 0),
(21, 28, 0),
(21, 3, 0),
(21, 12, 0),
(22, 40, 0),
(22, 4, 0),
(22, 9, 0),
(22, 10, 0),
(22, 17, 0),
(23, 25, 0),
(23, 4, 0),
(23, 10, 0),
(23, 11, 0),
(23, 16, 0),
(24, 35, 0),
(24, 5, 0),
(24, 8, 0),
(24, 41, 0),
(25, 41, 0),
(25, 5, 0),
(25, 21, 0),
(25, 42, 0),
(26, 25, 0),
(26, 4, 0),
(26, 10, 0),
(26, 16, 0),
(26, 43, 0),
(27, 44, 0),
(27, 5, 0),
(27, 7, 0),
(28, 25, 0),
(28, 4, 0),
(28, 9, 0),
(28, 10, 0),
(28, 16, 0),
(29, 41, 0),
(29, 5, 0),
(29, 8, 0),
(29, 45, 0),
(30, 31, 0),
(30, 5, 0),
(30, 7, 0),
(30, 46, 0),
(30, 47, 0),
(31, 48, 0),
(31, 4, 0),
(31, 9, 0),
(31, 10, 0),
(31, 22, 0),
(32, 48, 0),
(32, 4, 0),
(32, 9, 0),
(32, 10, 0),
(32, 22, 0),
(33, 25, 0),
(33, 4, 0),
(33, 9, 0),
(33, 11, 0),
(33, 23, 0),
(33, 38, 0),
(33, 49, 0),
(34, 33, 0),
(34, 4, 0),
(34, 10, 0),
(34, 17, 0),
(34, 40, 0),
(35, 50, 0),
(35, 5, 0),
(35, 7, 0),
(35, 11, 0),
(35, 51, 0),
(36, 25, 0),
(36, 4, 0),
(36, 9, 0),
(36, 10, 0),
(36, 16, 0),
(37, 25, 0),
(37, 4, 0),
(37, 9, 0),
(37, 10, 0),
(37, 39, 0),
(37, 52, 0),
(38, 53, 0),
(38, 3, 0),
(38, 5, 0),
(38, 6, 0),
(38, 7, 0),
(38, 54, 0),
(39, 25, 0),
(383, 9, 0),
(39, 9, 0),
(482, 61, 0),
(383, 56, 0),
(39, 55, 0),
(40, 56, 0),
(40, 4, 0),
(40, 9, 0),
(40, 10, 0),
(40, 12, 0),
(41, 25, 0),
(41, 4, 0),
(41, 10, 0),
(41, 16, 0),
(41, 17, 0),
(41, 40, 0),
(42, 57, 0),
(42, 4, 0),
(42, 9, 0),
(42, 58, 0),
(43, 25, 0),
(43, 4, 0),
(43, 9, 0),
(43, 10, 0),
(43, 16, 0),
(43, 55, 0),
(44, 48, 0),
(44, 4, 0),
(44, 9, 0),
(44, 10, 0),
(44, 22, 0),
(45, 39, 0),
(45, 4, 0),
(45, 18, 0),
(45, 19, 0),
(45, 24, 0),
(46, 28, 0),
(46, 3, 0),
(46, 12, 0),
(47, 59, 0),
(47, 5, 0),
(47, 9, 0),
(47, 21, 0),
(48, 31, 0),
(48, 4, 0),
(48, 5, 0),
(48, 7, 0),
(48, 11, 0),
(48, 13, 0),
(48, 60, 0),
(49, 48, 0),
(49, 4, 0),
(49, 9, 0),
(49, 10, 0),
(49, 22, 0),
(50, 48, 0),
(50, 4, 0),
(50, 9, 0),
(50, 10, 0),
(50, 22, 0),
(51, 25, 0),
(51, 4, 0),
(51, 10, 0),
(51, 16, 0),
(52, 28, 0),
(52, 3, 0),
(52, 2, 0),
(52, 29, 0),
(53, 41, 0),
(53, 5, 0),
(53, 8, 0),
(53, 45, 0),
(54, 33, 0),
(54, 4, 0),
(54, 9, 0),
(54, 10, 0),
(54, 17, 0),
(55, 37, 0),
(55, 2, 0),
(55, 15, 0),
(56, 25, 0),
(56, 5, 0),
(56, 9, 0),
(56, 21, 0),
(56, 61, 0),
(61, 62, 0),
(62, 62, 0),
(63, 62, 0),
(64, 62, 0),
(65, 62, 0),
(66, 62, 0),
(67, 62, 0),
(68, 62, 0),
(69, 62, 0),
(70, 62, 0),
(71, 62, 0),
(72, 62, 0),
(73, 62, 0),
(74, 62, 0),
(75, 62, 0),
(76, 62, 0),
(77, 62, 0),
(78, 62, 0),
(79, 62, 0),
(80, 62, 0),
(240, 3, 0),
(82, 62, 0),
(83, 62, 0),
(84, 62, 0),
(85, 62, 0),
(86, 62, 0),
(87, 62, 0),
(240, 64, 0),
(240, 63, 0),
(240, 12, 0),
(482, 9, 0),
(269, 25, 0),
(269, 9, 0),
(269, 39, 0),
(269, 61, 0),
(278, 25, 0),
(278, 4, 0),
(278, 9, 0),
(278, 65, 0),
(482, 16, 0),
(347, 25, 0),
(351, 62, 0),
(350, 62, 0),
(347, 67, 0),
(347, 16, 0),
(347, 68, 0),
(352, 25, 0),
(352, 9, 0),
(352, 16, 0),
(358, 29, 0),
(358, 12, 0),
(361, 62, 0),
(362, 62, 0),
(360, 62, 0),
(363, 62, 0),
(54, 72, 0),
(34, 72, 0),
(12, 72, 0),
(383, 73, 0),
(383, 74, 0),
(394, 62, 0),
(485, 28, 0),
(485, 12, 0),
(497, 56, 0),
(489, 16, 0),
(489, 25, 0),
(497, 8, 0),
(497, 73, 0),
(503, 39, 0),
(503, 19, 0),
(503, 9, 0),
(509, 25, 0),
(509, 9, 0),
(509, 16, 0),
(516, 56, 0),
(516, 73, 0),
(580, 62, 0),
(519, 62, 0),
(520, 62, 0),
(521, 75, 0),
(521, 76, 0),
(521, 77, 0),
(521, 78, 0),
(524, 79, 0),
(524, 16, 0),
(524, 25, 0),
(530, 62, 0),
(524, 80, 0),
(944, 115, 0),
(533, 62, 0),
(534, 40, 0),
(534, 17, 0),
(538, 36, 0),
(538, 12, 0),
(540, 62, 0),
(541, 62, 0),
(542, 85, 0),
(542, 67, 0),
(542, 84, 0),
(542, 68, 0),
(546, 86, 0),
(546, 67, 0),
(546, 9, 0),
(546, 16, 0),
(546, 25, 0),
(546, 68, 0),
(558, 87, 0),
(599, 93, 0),
(558, 12, 0),
(561, 25, 0),
(561, 16, 0),
(561, 88, 0),
(561, 67, 0),
(563, 25, 0),
(563, 84, 0),
(563, 16, 0),
(563, 85, 0),
(563, 89, 0),
(563, 90, 0),
(569, 28, 0),
(569, 2, 0),
(576, 25, 0),
(576, 16, 0),
(582, 25, 0),
(582, 20, 0),
(582, 9, 0),
(582, 16, 0),
(582, 92, 0),
(628, 63, 0),
(628, 64, 0),
(592, 28, 0),
(592, 12, 0),
(599, 81, 0),
(599, 94, 0),
(599, 57, 0),
(604, 95, 0),
(604, 9, 0),
(615, 95, 0),
(615, 8, 0),
(615, 9, 0),
(619, 85, 0),
(619, 84, 0),
(619, 96, 0),
(6, 116, 0),
(638, 64, 0),
(638, 63, 0),
(971, 113, 0),
(685, 95, 0),
(647, 99, 0),
(647, 21, 0),
(647, 57, 0),
(653, 62, 0),
(654, 62, 0),
(647, 100, 0),
(659, 62, 0),
(656, 102, 0),
(656, 28, 0),
(656, 103, 0),
(685, 12, 0),
(685, 9, 0),
(685, 104, 0),
(712, 73, 0),
(712, 12, 0),
(712, 61, 0),
(712, 56, 0),
(716, 44, 0),
(716, 73, 0),
(716, 16, 0),
(716, 25, 0),
(716, 56, 0),
(731, 25, 0),
(731, 101, 0),
(731, 73, 0),
(731, 84, 0),
(731, 16, 0),
(731, 39, 0),
(731, 85, 0),
(731, 56, 0),
(731, 74, 0),
(745, 61, 0),
(745, 21, 0),
(751, 85, 0),
(751, 101, 0),
(751, 84, 0),
(751, 16, 0),
(751, 25, 0),
(751, 105, 0),
(785, 64, 0),
(785, 63, 0),
(785, 101, 0),
(785, 106, 0),
(788, 107, 0),
(788, 101, 0),
(788, 83, 0),
(788, 73, 0),
(788, 56, 0),
(804, 85, 0),
(804, 73, 0),
(804, 84, 0),
(804, 56, 0),
(804, 108, 0),
(804, 106, 0),
(821, 28, 0),
(821, 12, 0),
(848, 12, 0),
(835, 85, 0),
(835, 101, 0),
(835, 73, 0),
(835, 84, 0),
(835, 56, 0),
(835, 106, 0),
(839, 30, 0),
(839, 2, 0),
(839, 47, 0),
(5, 117, 0),
(848, 64, 0),
(850, 25, 0),
(850, 67, 0),
(850, 16, 0),
(850, 68, 0),
(850, 109, 0),
(850, 105, 0),
(858, 105, 0),
(858, 101, 0),
(858, 9, 0),
(858, 25, 0),
(862, 1, 0),
(864, 95, 0),
(864, 9, 0),
(870, 1, 0),
(871, 25, 0),
(871, 8, 0),
(871, 16, 0),
(871, 92, 0),
(881, 92, 0),
(878, 25, 0),
(878, 9, 0),
(878, 16, 0),
(881, 12, 0),
(881, 69, 0),
(888, 64, 0),
(888, 63, 0),
(898, 106, 0),
(898, 101, 0),
(898, 69, 0),
(898, 31, 0),
(910, 109, 0),
(910, 69, 0),
(926, 35, 0),
(926, 12, 0),
(926, 36, 0),
(930, 110, 0),
(930, 101, 0),
(930, 83, 0),
(930, 107, 0),
(930, 111, 0),
(930, 112, 0),
(935, 113, 0),
(938, 113, 0),
(936, 113, 0),
(939, 113, 0),
(937, 113, 0),
(945, 115, 0),
(946, 115, 0),
(947, 115, 0),
(961, 115, 0),
(960, 115, 0),
(959, 115, 0),
(963, 115, 0),
(965, 115, 0),
(964, 115, 0),
(948, 115, 0),
(956, 115, 0),
(962, 115, 0),
(958, 115, 0),
(949, 115, 0),
(952, 115, 0),
(951, 115, 0),
(953, 115, 0),
(954, 115, 0),
(957, 115, 0),
(955, 115, 0),
(966, 115, 0),
(967, 115, 0),
(968, 115, 0),
(2, 116, 0),
(8, 120, 0),
(9, 120, 0),
(10, 120, 0),
(11, 118, 0),
(12, 118, 0),
(13, 118, 0),
(14, 118, 0),
(15, 118, 0),
(16, 121, 0),
(17, 122, 0),
(18, 122, 0),
(19, 122, 0),
(20, 123, 0),
(21, 123, 0),
(22, 123, 0),
(23, 123, 0),
(24, 124, 0),
(25, 124, 0),
(26, 124, 0),
(27, 122, 0),
(28, 122, 0),
(29, 122, 0),
(986, 64, 0),
(986, 63, 0),
(1000, 95, 0),
(1000, 9, 0),
(1000, 125, 0),
(1014, 115, 0),
(30, 122, 0),
(1020, 9, 0),
(1020, 126, 0),
(1020, 127, 0),
(1026, 115, 0),
(31, 120, 0),
(32, 128, 0),
(33, 128, 0),
(34, 128, 0),
(1027, 25, 0),
(1027, 16, 0),
(1034, 25, 0),
(1034, 9, 0),
(1034, 16, 0),
(1041, 25, 0),
(1041, 16, 0),
(1041, 129, 0),
(1045, 25, 0),
(1045, 16, 0),
(1053, 40, 0),
(1053, 72, 0),
(1053, 17, 0),
(1053, 33, 0),
(1059, 40, 0),
(1059, 17, 0),
(1062, 130, 0),
(1062, 100, 0),
(1062, 17, 0),
(1062, 40, 0),
(1062, 57, 0),
(1066, 28, 0),
(1066, 12, 0),
(1081, 101, 0),
(1081, 69, 0),
(1081, 131, 0),
(1104, 132, 0),
(1104, 101, 0),
(1104, 133, 0),
(1133, 25, 0),
(1126, 127, 0),
(1126, 126, 0),
(1133, 16, 0),
(1138, 25, 0),
(1138, 16, 0),
(1141, 25, 0),
(1141, 9, 0),
(1141, 16, 0),
(1147, 25, 0),
(1147, 16, 0),
(35, 122, 0),
(1151, 25, 0),
(1151, 9, 0),
(1151, 76, 0),
(1151, 16, 0),
(1151, 78, 0),
(1151, 134, 0),
(1161, 25, 0),
(1161, 16, 0),
(36, 122, 0),
(1170, 115, 0),
(1166, 25, 0),
(1166, 136, 0),
(1166, 137, 0),
(1166, 135, 0),
(1166, 16, 0),
(1172, 115, 0),
(1175, 25, 0),
(1175, 9, 0),
(1175, 16, 0),
(1175, 133, 0),
(1175, 139, 0),
(1186, 57, 0),
(1186, 100, 0);

-- --------------------------------------------------------

--
-- 表的结构 `gzp_term_taxonomy`
--

CREATE TABLE `gzp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) UNSIGNED NOT NULL,
  `term_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) NOT NULL DEFAULT '',
  `description` longtext NOT NULL,
  `parent` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0'
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `gzp_term_taxonomy`
--

INSERT INTO `gzp_term_taxonomy` (`term_taxonomy_id`, `term_id`, `taxonomy`, `description`, `parent`, `count`) VALUES
(1, 1, 'category', '', 0, 0),
(2, 2, 'category', '', 3, 5),
(3, 3, 'category', '', 0, 8),
(4, 4, 'category', '', 0, 31),
(5, 5, 'category', '', 0, 13),
(6, 6, 'category', '', 3, 1),
(7, 7, 'category', '', 5, 7),
(8, 8, 'category', '', 5, 6),
(9, 9, 'category', '', 4, 40),
(10, 10, 'category', '', 4, 21),
(11, 11, 'category', '', 4, 9),
(12, 12, 'category', '', 3, 17),
(13, 13, 'category', '', 11, 4),
(14, 14, 'category', '', 7, 1),
(15, 15, 'category', '', 11, 3),
(16, 16, 'category', '', 10, 37),
(17, 17, 'category', '', 10, 10),
(18, 18, 'category', '', 4, 2),
(19, 19, 'category', '', 18, 4),
(20, 20, 'category', '', 71, 2),
(21, 21, 'category', '', 5, 5),
(22, 22, 'category', '', 10, 5),
(23, 23, 'category', '', 11, 1),
(24, 24, 'post_tag', '', 0, 2),
(25, 25, 'post_tag', '', 0, 47),
(26, 26, 'post_tag', '', 0, 0),
(27, 27, 'post_tag', '', 0, 3),
(28, 28, 'post_tag', '', 0, 12),
(29, 29, 'post_tag', '', 0, 3),
(30, 30, 'post_tag', '', 0, 3),
(31, 31, 'post_tag', '', 0, 4),
(32, 32, 'post_tag', '', 0, 1),
(33, 33, 'post_tag', '', 0, 4),
(34, 34, 'post_tag', '', 0, 1),
(35, 35, 'post_tag', '', 0, 3),
(36, 36, 'post_tag', '', 0, 3),
(37, 37, 'post_tag', '', 0, 3),
(38, 38, 'post_tag', '', 0, 2),
(39, 39, 'post_tag', '', 0, 6),
(40, 40, 'post_tag', '', 0, 8),
(41, 41, 'post_tag', '', 0, 4),
(42, 42, 'post_tag', '', 0, 1),
(43, 43, 'post_tag', '', 0, 1),
(44, 44, 'post_tag', '', 0, 2),
(45, 45, 'post_tag', '', 0, 2),
(46, 46, 'post_tag', '', 0, 1),
(47, 47, 'post_tag', '', 0, 2),
(48, 48, 'post_tag', '', 0, 5),
(49, 49, 'post_tag', '', 0, 1),
(50, 50, 'post_tag', '', 0, 1),
(51, 51, 'post_tag', '', 0, 1),
(52, 52, 'post_tag', '', 0, 1),
(53, 53, 'post_tag', '', 0, 1),
(54, 54, 'post_tag', '', 0, 1),
(55, 55, 'post_tag', '', 0, 2),
(56, 56, 'post_tag', '', 0, 10),
(57, 57, 'post_tag', '', 0, 5),
(58, 58, 'post_tag', '', 0, 1),
(59, 59, 'post_tag', '', 0, 1),
(60, 60, 'post_tag', '', 0, 1),
(61, 61, 'post_tag', '', 0, 5),
(64, 64, 'post_tag', '', 0, 7),
(62, 62, 'nav_menu', '', 0, 43),
(63, 63, 'category', '', 11, 6),
(65, 65, 'post_tag', '', 0, 1),
(66, 66, 'category', '', 4, 0),
(67, 67, 'category', '', 66, 5),
(68, 68, 'post_tag', '', 0, 4),
(69, 69, 'category', '', 4, 4),
(70, 70, 'category', '', 4, 0),
(71, 71, 'category', '', 4, 0),
(72, 72, 'category', '', 70, 4),
(73, 73, 'category', '', 69, 9),
(74, 74, 'post_tag', '', 0, 2),
(75, 75, 'category', '', 70, 1),
(76, 76, 'category', '', 18, 2),
(77, 77, 'post_tag', '', 0, 1),
(78, 78, 'post_tag', '', 0, 2),
(79, 79, 'post_tag', '', 0, 1),
(80, 80, 'category', 'PHP轻量级开源接口框架', 66, 1),
(81, 81, 'category', '渐进式javascript框架', 66, 1),
(114, 114, 'category', '', 66, 0),
(83, 83, 'category', '', 69, 2),
(84, 84, 'category', '', 69, 7),
(85, 85, 'post_tag', '', 0, 7),
(86, 86, 'post_tag', '', 0, 1),
(87, 87, 'post_tag', '', 0, 1),
(88, 88, 'post_tag', '', 0, 1),
(89, 89, 'post_tag', '', 0, 1),
(90, 90, 'post_tag', '', 0, 1),
(91, 91, 'category', '', 10, 0),
(92, 92, 'post_tag', '', 0, 3),
(93, 93, 'post_tag', '', 0, 1),
(94, 94, 'post_tag', '', 0, 1),
(95, 95, 'post_tag', '', 0, 5),
(96, 96, 'post_tag', '', 0, 1),
(119, 119, 'link_category', '', 0, 0),
(118, 118, 'link_category', '', 0, 5),
(99, 99, 'post_tag', '', 0, 1),
(100, 100, 'category', '', 4, 3),
(101, 101, 'category', '', 4, 10),
(102, 102, 'post_tag', '', 0, 1),
(104, 104, 'post_tag', '', 0, 1),
(103, 103, 'category', '', 7, 1),
(105, 105, 'post_tag', '', 0, 3),
(106, 106, 'post_tag', '', 0, 4),
(107, 107, 'post_tag', '', 0, 2),
(108, 108, 'post_tag', '', 0, 1),
(109, 109, 'post_tag', '', 0, 2),
(110, 110, 'post_tag', '', 0, 1),
(111, 111, 'post_tag', '', 0, 1),
(112, 112, 'post_tag', '', 0, 1),
(113, 113, 'nav_menu', '', 0, 6),
(115, 115, 'nav_menu', '', 0, 28),
(116, 116, 'link_category', '', 0, 2),
(117, 117, 'link_category', '', 0, 1),
(120, 120, 'link_category', '', 0, 4),
(121, 121, 'link_category', '', 0, 1),
(122, 122, 'link_category', '', 0, 9),
(123, 123, 'link_category', '', 0, 4),
(124, 124, 'link_category', '', 0, 3),
(125, 125, 'post_tag', '', 0, 1),
(126, 126, 'category', '', 69, 2),
(127, 127, 'post_tag', '', 0, 2),
(128, 128, 'link_category', '', 0, 3),
(129, 129, 'post_tag', '', 0, 1),
(130, 130, 'post_tag', '', 0, 1),
(131, 131, 'post_tag', '', 0, 1),
(132, 132, 'post_tag', '', 0, 1),
(133, 133, 'post_tag', '', 0, 2),
(134, 134, 'post_tag', '', 0, 1),
(135, 135, 'category', '', 66, 1),
(136, 136, 'post_tag', '', 0, 1),
(137, 137, 'post_tag', '', 0, 1),
(138, 138, 'category', '', 70, 0),
(139, 139, 'post_tag', '', 0, 1);

-- --------------------------------------------------------

--
-- 表的结构 `gzp_usermeta`
--

CREATE TABLE `gzp_usermeta` (
  `umeta_id` bigint(20) UNSIGNED NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL DEFAULT '0',
  `meta_key` varchar(255) DEFAULT NULL,
  `meta_value` longtext
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `gzp_usermeta`
--

INSERT INTO `gzp_usermeta` (`umeta_id`, `user_id`, `meta_key`, `meta_value`) VALUES
(1, 1, 'nickname', 'gzp'),
(2, 1, 'first_name', ''),
(3, 1, 'last_name', ''),
(4, 1, 'description', ''),
(5, 1, 'rich_editing', 'true'),
(6, 1, 'comment_shortcuts', 'false'),
(7, 1, 'admin_color', 'ocean'),
(8, 1, 'use_ssl', '0'),
(9, 1, 'show_admin_bar_front', 'true'),
(10, 1, 'gzp_capabilities', 'a:1:{s:13:\"administrator\";b:1;}'),
(11, 1, 'gzp_user_level', '10'),
(12, 1, 'dismissed_wp_pointers', ''),
(13, 1, 'show_welcome_panel', '0'),
(38, 1, 'session_tokens', 'a:5:{s:64:\"b3f1036fbf0e016e11d8944aa81e06d5c94ea324707966df264cf30db197ed93\";a:4:{s:10:\"expiration\";i:1502702470;s:2:\"ip\";s:13:\"113.90.37.244\";s:2:\"ua\";s:108:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.78 Safari/537.36\";s:5:\"login\";i:1501492870;}s:64:\"4261f306dc77b66b1bd315c5e0477ead2a16a4968042a2836b563754389ce29f\";a:4:{s:10:\"expiration\";i:1502413668;s:2:\"ip\";s:13:\"113.92.130.14\";s:2:\"ua\";s:72:\"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0\";s:5:\"login\";i:1502240868;}s:64:\"160e53550d721420f170704528052b93b62a7b56103f560413f95ef0187f4f69\";a:4:{s:10:\"expiration\";i:1502460649;s:2:\"ip\";s:12:\"14.28.168.56\";s:2:\"ua\";s:73:\"Mozilla/5.0 (Windows NT 10.0; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0\";s:5:\"login\";i:1502287849;}s:64:\"88c86be152fbec67f040258de9d63d3df171c9cbb010a87a362c69ad6d8450e2\";a:4:{s:10:\"expiration\";i:1502514244;s:2:\"ip\";s:12:\"113.90.38.80\";s:2:\"ua\";s:142:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.125 YaBrowser/17.7.0.1683 Yowser/2.5 Safari/537.36\";s:5:\"login\";i:1502341444;}s:64:\"427b3231ffb898404bf3aa0de58581e70c1b0b217a8ab11140ea3ff13c46eb69\";a:4:{s:10:\"expiration\";i:1502549373;s:2:\"ip\";s:11:\"14.28.169.5\";s:2:\"ua\";s:142:\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.125 YaBrowser/17.7.1.719 Yowser/2.5 Safari/537.36\";s:5:\"login\";i:1502376573;}}'),
(39, 1, 'community-events-location', 'a:1:{s:2:\"ip\";s:11:\"14.28.169.0\";}'),
(34, 1, 'meta-box-order_post', 'a:3:{s:4:\"side\";s:65:\"submitdiv,categorydiv,tagsdiv-post_tag,postimagediv,xmlsf_section\";s:6:\"normal\";s:71:\"postexcerpt,trackbacksdiv,postcustom,commentstatusdiv,slugdiv,authordiv\";s:8:\"advanced\";s:0:\"\";}'),
(35, 1, 'screen_layout_post', '2'),
(15, 1, 'gzp_dashboard_quick_press_last_post_id', '1196'),
(16, 1, 'meta-box-order_dashboard', 'a:4:{s:6:\"normal\";s:41:\"dashboard_right_now,dashboard_quick_press\";s:4:\"side\";s:18:\"dashboard_activity\";s:7:\"column3\";s:17:\"dashboard_primary\";s:7:\"column4\";s:0:\"\";}'),
(17, 1, 'managenav-menuscolumnshidden', 'a:5:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";i:4;s:15:\"title-attribute\";}'),
(18, 1, 'metaboxhidden_nav-menus', 'a:1:{i:0;s:12:\"add-post_tag\";}'),
(19, 1, 'nav_menu_recently_edited', '115'),
(20, 1, 'gzp_user-settings', 'libraryContent=browse&imgsize=full&hidetb=1&editor=tinymce&post_dfw=off&widgets_access=off&mfold=o&advImgDetails=show&urlbutton=file&editor_plain_text_paste_warning=1&editor_expand=on'),
(21, 1, 'gzp_user-settings-time', '1500348149'),
(25, 1, 'closedpostboxes_dashboard', 'a:0:{}'),
(26, 1, 'metaboxhidden_dashboard', 'a:0:{}'),
(23, 1, 'closedpostboxes_post', 'a:0:{}'),
(24, 1, 'metaboxhidden_post', 'a:5:{i:0;s:13:\"trackbacksdiv\";i:1;s:10:\"postcustom\";i:2;s:16:\"commentstatusdiv\";i:3;s:7:\"slugdiv\";i:4;s:9:\"authordiv\";}'),
(27, 1, 'gzp_media_library_mode', 'grid'),
(28, 1, 'locale', ''),
(30, 1, 'closedpostboxes_page', 'a:0:{}'),
(31, 1, 'metaboxhidden_page', 'a:4:{i:0;s:10:\"postcustom\";i:1;s:11:\"commentsdiv\";i:2;s:7:\"slugdiv\";i:3;s:9:\"authordiv\";}'),
(36, 1, 'closedpostboxes_link', 'a:0:{}'),
(37, 1, 'metaboxhidden_link', 'a:0:{}');

-- --------------------------------------------------------

--
-- 表的结构 `gzp_users`
--

CREATE TABLE `gzp_users` (
  `ID` bigint(20) UNSIGNED NOT NULL,
  `user_login` varchar(60) NOT NULL DEFAULT '',
  `user_pass` varchar(255) NOT NULL DEFAULT '',
  `user_nicename` varchar(50) NOT NULL DEFAULT '',
  `user_email` varchar(100) NOT NULL DEFAULT '',
  `user_url` varchar(100) NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(255) NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) NOT NULL DEFAULT ''
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

--
-- 转存表中的数据 `gzp_users`
--

INSERT INTO `gzp_users` (`ID`, `user_login`, `user_pass`, `user_nicename`, `user_email`, `user_url`, `user_registered`, `user_activation_key`, `user_status`, `display_name`) VALUES
(1, 'gzp', '$P$BVBfx291ytwY1EwYYG0dzv9yLWTy3m0', 'gzp', 'gzp@goozp.com', 'https://www.gzpblog.com', '2016-10-07 16:26:28', '', 0, 'gzp');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `gzp_commentmeta`
--
ALTER TABLE `gzp_commentmeta`
  ADD PRIMARY KEY (`meta_id`),
  ADD KEY `comment_id` (`comment_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- Indexes for table `gzp_comments`
--
ALTER TABLE `gzp_comments`
  ADD PRIMARY KEY (`comment_ID`),
  ADD KEY `comment_post_ID` (`comment_post_ID`),
  ADD KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  ADD KEY `comment_date_gmt` (`comment_date_gmt`),
  ADD KEY `comment_parent` (`comment_parent`),
  ADD KEY `comment_author_email` (`comment_author_email`(10));

--
-- Indexes for table `gzp_links`
--
ALTER TABLE `gzp_links`
  ADD PRIMARY KEY (`link_id`),
  ADD KEY `link_visible` (`link_visible`);

--
-- Indexes for table `gzp_options`
--
ALTER TABLE `gzp_options`
  ADD PRIMARY KEY (`option_id`),
  ADD UNIQUE KEY `option_name` (`option_name`);

--
-- Indexes for table `gzp_postmeta`
--
ALTER TABLE `gzp_postmeta`
  ADD PRIMARY KEY (`meta_id`),
  ADD KEY `post_id` (`post_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- Indexes for table `gzp_posts`
--
ALTER TABLE `gzp_posts`
  ADD PRIMARY KEY (`ID`),
  ADD KEY `post_name` (`post_name`(191)),
  ADD KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  ADD KEY `post_parent` (`post_parent`),
  ADD KEY `post_author` (`post_author`);

--
-- Indexes for table `gzp_termmeta`
--
ALTER TABLE `gzp_termmeta`
  ADD PRIMARY KEY (`meta_id`),
  ADD KEY `term_id` (`term_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- Indexes for table `gzp_terms`
--
ALTER TABLE `gzp_terms`
  ADD PRIMARY KEY (`term_id`),
  ADD KEY `slug` (`slug`(191)),
  ADD KEY `name` (`name`(191));

--
-- Indexes for table `gzp_term_relationships`
--
ALTER TABLE `gzp_term_relationships`
  ADD PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  ADD KEY `term_taxonomy_id` (`term_taxonomy_id`);

--
-- Indexes for table `gzp_term_taxonomy`
--
ALTER TABLE `gzp_term_taxonomy`
  ADD PRIMARY KEY (`term_taxonomy_id`),
  ADD UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  ADD KEY `taxonomy` (`taxonomy`);

--
-- Indexes for table `gzp_usermeta`
--
ALTER TABLE `gzp_usermeta`
  ADD PRIMARY KEY (`umeta_id`),
  ADD KEY `user_id` (`user_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- Indexes for table `gzp_users`
--
ALTER TABLE `gzp_users`
  ADD PRIMARY KEY (`ID`),
  ADD KEY `user_login_key` (`user_login`),
  ADD KEY `user_nicename` (`user_nicename`),
  ADD KEY `user_email` (`user_email`);

--
-- 在导出的表使用AUTO_INCREMENT
--

--
-- 使用表AUTO_INCREMENT `gzp_commentmeta`
--
ALTER TABLE `gzp_commentmeta`
  MODIFY `meta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1349;
--
-- 使用表AUTO_INCREMENT `gzp_comments`
--
ALTER TABLE `gzp_comments`
  MODIFY `comment_ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=859;
--
-- 使用表AUTO_INCREMENT `gzp_links`
--
ALTER TABLE `gzp_links`
  MODIFY `link_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=37;
--
-- 使用表AUTO_INCREMENT `gzp_options`
--
ALTER TABLE `gzp_options`
  MODIFY `option_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=41930;
--
-- 使用表AUTO_INCREMENT `gzp_postmeta`
--
ALTER TABLE `gzp_postmeta`
  MODIFY `meta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2779;
--
-- 使用表AUTO_INCREMENT `gzp_posts`
--
ALTER TABLE `gzp_posts`
  MODIFY `ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1198;
--
-- 使用表AUTO_INCREMENT `gzp_termmeta`
--
ALTER TABLE `gzp_termmeta`
  MODIFY `meta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;
--
-- 使用表AUTO_INCREMENT `gzp_terms`
--
ALTER TABLE `gzp_terms`
  MODIFY `term_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=140;
--
-- 使用表AUTO_INCREMENT `gzp_term_taxonomy`
--
ALTER TABLE `gzp_term_taxonomy`
  MODIFY `term_taxonomy_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=140;
--
-- 使用表AUTO_INCREMENT `gzp_usermeta`
--
ALTER TABLE `gzp_usermeta`
  MODIFY `umeta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=40;
--
-- 使用表AUTO_INCREMENT `gzp_users`
--
ALTER TABLE `gzp_users`
  MODIFY `ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
